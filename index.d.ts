/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
/**
 * The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.
 */
export interface QueryRoot {
  
  /**
   * Returns an abandonment by ID.
   */
  abandonment?: Abandonment;
  
  /**
   * Returns an Abandonment by the Abandoned Checkout ID.
   */
  abandonmentByAbandonedCheckoutId?: Abandonment;
  
  /**
   * Lookup an App by ID or return the currently authenticated App.
   */
  app?: App;
  
  /**
   * Fetches app by handle.
   * Returns null if the app doesn't exist.
   * 
   */
  appByHandle?: App;
  
  /**
   * Fetches an app by its client ID.
   * Returns null if the app doesn't exist.
   * 
   */
  appByKey?: App;
  
  /**
   * An app discount type.
   * 
   */
  appDiscountType?: AppDiscountType;
  
  /**
   * A list of app discount types installed by apps.
   * 
   */
  appDiscountTypes: Array<AppDiscountType>;
  
  /**
   * Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.
   */
  appInstallation?: AppInstallation;
  
  /**
   * A list of app installations. To use this query, you need to contact [Shopify Support](https://partners.shopify.com/current/support/) to grant your custom app the `read_apps` access scope. Public apps can't be granted this access scope.
   */
  appInstallations: AppInstallationConnection;
  
  /**
   * Returns an automatic discount resource by ID.
   * @deprecated Use `automaticDiscountNode` instead.
   */
  automaticDiscount?: DiscountAutomatic;
  
  /**
   * Returns an automatic discount resource by ID.
   */
  automaticDiscountNode?: DiscountAutomaticNode;
  
  /**
   * List of automatic discounts.
   */
  automaticDiscountNodes: DiscountAutomaticNodeConnection;
  
  /**
   * List of the shop's automatic discount saved searches.
   */
  automaticDiscountSavedSearches: SavedSearchConnection;
  
  /**
   * List of automatic discounts.
   * @deprecated Use `automaticDiscountNodes` instead.
   */
  automaticDiscounts: DiscountAutomaticConnection;
  
  /**
   * Returns a list of activated carrier services and associated shop locations that support them.
   */
  availableCarrierServices: Array<DeliveryCarrierServiceAndLocations>;
  
  /**
   * A list of available locales.
   */
  availableLocales: Array<Locale>;
  
  /**
   * Returns a `DeliveryCarrierService` object by ID.
   */
  carrierService?: DeliveryCarrierService;
  
  /**
   * List of Cart transform objects owned by the current API client.
   */
  cartTransforms: CartTransformConnection;
  
  /**
   * Returns a Catalog resource by ID.
   */
  catalog?: Catalog;
  
  /**
   * Returns the most recent catalog operations for the shop.
   */
  catalogOperations: Array<ResourceOperation>;
  
  /**
   * The catalogs belonging to the shop.
   */
  catalogs: CatalogConnection;
  
  /**
   * Lookup a channel by ID.
   * @deprecated Use `publication` instead.
   */
  channel?: Channel;
  
  /**
   * List of the active sales channels.
   * @deprecated Use `publications` instead.
   */
  channels: ChannelConnection;
  
  /**
   * Returns the visual customizations for checkout for a given checkout profile.
   * 
   * To learn more about updating checkout branding settings, refer to the
   * [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert)
   * mutation and the checkout branding [tutorial](https://shopify.dev/docs/apps/checkout/styling).
   * 
   */
  checkoutBranding?: CheckoutBranding;
  
  /**
   * A checkout profile on a shop.
   */
  checkoutProfile?: CheckoutProfile;
  
  /**
   * List of checkout profiles on a shop.
   */
  checkoutProfiles: CheckoutProfileConnection;
  
  /**
   * Returns a code discount resource by ID.
   */
  codeDiscountNode?: DiscountCodeNode;
  
  /**
   * Returns a code discount identified by its discount code.
   */
  codeDiscountNodeByCode?: DiscountCodeNode;
  
  /**
   * List of code discounts. Special fields for query params:
   *  * status: active, expired, scheduled
   *  * discount_type: bogo, fixed_amount, free_shipping, percentage.
   */
  codeDiscountNodes: DiscountCodeNodeConnection;
  
  /**
   * List of the shop's code discount saved searches.
   */
  codeDiscountSavedSearches: SavedSearchConnection;
  
  /**
   * Returns a Collection resource by ID.
   */
  collection?: Collection;
  
  /**
   * Return a collection by its handle.
   * 
   */
  collectionByHandle?: Collection;
  
  /**
   * Lists all rules that can be used to create smart collections.
   */
  collectionRulesConditions: Array<CollectionRuleConditions>;
  
  /**
   * Returns a list of the shop's collection saved searches.
   */
  collectionSavedSearches: SavedSearchConnection;
  
  /**
   * Returns a list of collections.
   */
  collections: CollectionConnection;
  
  /**
   * Returns the list of companies in the shop.
   */
  companies: CompanyConnection;
  
  /**
   * Returns a `Company` object by ID.
   */
  company?: Company;
  
  /**
   * Returns a `CompanyContact` object by ID.
   */
  companyContact?: CompanyContact;
  
  /**
   * Returns a `CompanyContactRole` object by ID.
   */
  companyContactRole?: CompanyContactRole;
  
  /**
   * The number of companies for a shop.
   */
  companyCount: number;
  
  /**
   * Returns a `CompanyLocation` object by ID.
   */
  companyLocation?: CompanyLocation;
  
  /**
   * Returns the list of company locations in the shop.
   */
  companyLocations: CompanyLocationConnection;
  
  /**
   * Return the AppInstallation for the currently authenticated App.
   */
  currentAppInstallation: AppInstallation;
  
  /**
   * Returns the current app's most recent BulkOperation. Apps can run one bulk query and one bulk mutation operation at a time, by shop.
   */
  currentBulkOperation?: BulkOperation;
  
  /**
   * Returns a Customer resource by ID.
   */
  customer?: Customer;
  
  /**
   * Returns the status of a customer merge request job.
   */
  customerMergeJobStatus?: CustomerMergeRequest;
  
  /**
   * Returns a preview of a customer merge request.
   */
  customerMergePreview: CustomerMergePreview;
  
  /**
   * Returns a CustomerPaymentMethod resource by its ID.
   */
  customerPaymentMethod?: CustomerPaymentMethod;
  
  /**
   * The list of members, such as customers, that's associated with an individual segment.
   */
  customerSegmentMembers: CustomerSegmentMemberConnection;
  
  /**
   * Returns a segment members query resource by ID.
   */
  customerSegmentMembersQuery?: CustomerSegmentMembersQuery;
  
  /**
   * Whether a member, which is a customer, belongs to a segment.
   */
  customerSegmentMembership: SegmentMembershipResponse;
  
  /**
   * List of customers.
   */
  customers: CustomerConnection;
  
  /**
   * The paginated list of deletion events.
   */
  deletionEvents: DeletionEventConnection;
  
  /**
   * The delivery customization.
   */
  deliveryCustomization?: DeliveryCustomization;
  
  /**
   * The delivery customizations.
   */
  deliveryCustomizations: DeliveryCustomizationConnection;
  
  /**
   * Returns a Delivery Profile resource by ID.
   */
  deliveryProfile?: DeliveryProfile;
  
  /**
   * Returns a list of saved delivery profiles.
   */
  deliveryProfiles: DeliveryProfileConnection;
  
  /**
   * Returns the shop-wide shipping settings.
   */
  deliverySettings?: DeliverySetting;
  
  /**
   * The total number of discount codes for the shop.
   */
  discountCodeCount: number;
  
  /**
   * Returns a discount resource by ID.
   */
  discountNode?: DiscountNode;
  
  /**
   * List of discounts.
   */
  discountNodes: DiscountNodeConnection;
  
  /**
   * Returns a bulk code creation resource by ID.
   */
  discountRedeemCodeBulkCreation?: DiscountRedeemCodeBulkCreation;
  
  /**
   * List of the shop's redeemed discount code saved searches.
   */
  discountRedeemCodeSavedSearches: SavedSearchConnection;
  
  /**
   * Returns dispute details based on ID.
   */
  dispute?: ShopifyPaymentsDispute;
  
  /**
   * Returns dispute evidence details based on ID.
   */
  disputeEvidence?: ShopifyPaymentsDisputeEvidence;
  
  /**
   * Lookup a Domain by ID.
   */
  domain?: Domain;
  
  /**
   * Returns a DraftOrder resource by ID.
   */
  draftOrder?: DraftOrder;
  
  /**
   * List of the shop's draft order saved searches.
   */
  draftOrderSavedSearches: SavedSearchConnection;
  
  /**
   * Returns a DraftOrderTag resource by ID.
   */
  draftOrderTag?: DraftOrderTag;
  
  /**
   * List of saved draft orders.
   */
  draftOrders: DraftOrderConnection;
  
  /**
   * A list of the shop's file saved searches.
   */
  fileSavedSearches: SavedSearchConnection;
  
  /**
   * Returns a paginated list of files that have been uploaded to Shopify.
   */
  files: FileConnection;
  
  /**
   * Returns a Fulfillment resource by ID.
   */
  fulfillment?: Fulfillment;
  
  /**
   * The fulfillment constraint rules that belong to a shop.
   */
  fulfillmentConstraintRules: Array<FulfillmentConstraintRule>;
  
  /**
   * Returns a Fulfillment order resource by ID.
   */
  fulfillmentOrder?: FulfillmentOrder;
  
  /**
   * The paginated list of all fulfillment orders.
   * The returned fulfillment orders are filtered according to the
   * [fulfillment order access scopes](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder#api-access-scopes)
   * granted to the app.
   * 
   * Use this query to retrieve fulfillment orders assigned to merchant-managed locations,
   * third-party fulfillment service locations, or all kinds of locations together.
   * 
   * For fetching only the fulfillment orders assigned to the app's locations, use the
   * [Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
   * connection.
   * 
   */
  fulfillmentOrders: FulfillmentOrderConnection;
  
  /**
   * Returns a FulfillmentService resource by ID.
   */
  fulfillmentService?: FulfillmentService;
  
  /**
   * Returns a gift card resource by ID.
   */
  giftCard?: GiftCard;
  
  /**
   * Returns a list of gift cards.
   */
  giftCards: GiftCardConnection;
  
  /**
   * The total number of gift cards issued for the shop.
   */
  giftCardsCount: UnsignedInt64;
  
  /**
   * Returns an
   * [InventoryItem](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryItem)
   * object by ID.
   * 
   */
  inventoryItem?: InventoryItem;
  
  /**
   * Returns a list of inventory items.
   */
  inventoryItems: InventoryItemConnection;
  
  /**
   * Returns an
   * [InventoryLevel](https://shopify.dev/docs/api/admin-graphql/latest/objects/InventoryLevel)
   * object by ID.
   * 
   */
  inventoryLevel?: InventoryLevel;
  
  /**
   * General inventory properties for the shop.
   */
  inventoryProperties: InventoryProperties;
  
  /**
   * Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.
   * 
   */
  job?: Job;
  
  /**
   * Returns an inventory Location resource by ID.
   */
  location?: Location;
  
  /**
   * Returns a list of active inventory locations.
   */
  locations: LocationConnection;
  
  /**
   * Returns a list of all origin locations available for a delivery profile.
   * @deprecated Use `locationsAvailableForDeliveryProfilesConnection` instead.
   */
  locationsAvailableForDeliveryProfiles?: Array<Location>;
  
  /**
   * Returns a list of all origin locations available for a delivery profile.
   */
  locationsAvailableForDeliveryProfilesConnection: LocationConnection;
  
  /**
   * Returns a list of fulfillment orders that are on hold.
   */
  manualHoldsFulfillmentOrders: FulfillmentOrderConnection;
  
  /**
   * Returns a market resource by ID.
   */
  market?: Market;
  
  /**
   * Returns the applicable market for a customer based on where they are in the world.
   */
  marketByGeography?: Market;
  
  /**
   * A resource that can have localized values for different markets.
   */
  marketLocalizableResource?: MarketLocalizableResource;
  
  /**
   * Resources that can have localized values for different markets.
   */
  marketLocalizableResources: MarketLocalizableResourceConnection;
  
  /**
   * Resources that can have localized values for different markets.
   */
  marketLocalizableResourcesByIds: MarketLocalizableResourceConnection;
  
  /**
   * A list of marketing activities associated with the marketing app.
   */
  marketingActivities: MarketingActivityConnection;
  
  /**
   * Returns a MarketingActivity resource by ID.
   */
  marketingActivity?: MarketingActivity;
  
  /**
   * Returns a MarketingEvent resource by ID.
   */
  marketingEvent?: MarketingEvent;
  
  /**
   * A list of marketing events associated with the marketing app.
   */
  marketingEvents: MarketingEventConnection;
  
  /**
   * The markets configured for the shop.
   */
  markets: MarketConnection;
  
  /**
   * Returns a metafield definition by ID.
   */
  metafieldDefinition?: MetafieldDefinition;
  
  /**
   * Each metafield definition has a type, which defines the type of information that it can store.
   * This type is enforced across every instance of the resource that owns the metafield definition.
   * 
   * Refer to the [list of supported metafield types](https://shopify.dev/apps/metafields/types).
   * 
   */
  metafieldDefinitionTypes: Array<MetafieldDefinitionType>;
  
  /**
   * List of metafield definitions.
   */
  metafieldDefinitions: MetafieldDefinitionConnection;
  
  /**
   * List of the `MetafieldStorefrontVisibility` records.
   * @deprecated This query will be removed in a future version. Use the `access.storefront` field for nodes inside the `metafieldDefinitions` query instead.
   * 
   */
  metafieldStorefrontVisibilities: MetafieldStorefrontVisibilityConnection;
  
  /**
   * Returns a `MetafieldStorefrontVisibility` record by ID. A `MetafieldStorefrontVisibility` record lists the
   * metafields to make visible in the Storefront API.
   * 
   * @deprecated This query will be removed in a future version. Use the `access.storefront` field inside the `metafieldDefinition` query instead.
   * 
   */
  metafieldStorefrontVisibility?: MetafieldStorefrontVisibility;
  
  /**
   * Retrieves a metaobject by ID.
   */
  metaobject?: Metaobject;
  
  /**
   * Retrieves a metaobject by handle.
   */
  metaobjectByHandle?: Metaobject;
  
  /**
   * Retrieves a metaobject definition by ID.
   */
  metaobjectDefinition?: MetaobjectDefinition;
  
  /**
   * Finds a metaobject definition by type.
   */
  metaobjectDefinitionByType?: MetaobjectDefinition;
  
  /**
   * All metaobject definitions.
   */
  metaobjectDefinitions: MetaobjectDefinitionConnection;
  
  /**
   * All metaobjects for the shop.
   */
  metaobjects: MetaobjectConnection;
  
  /**
   * Returns a specific node (any object that implements the
   * [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
   * interface) by ID, in accordance with the
   * [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
   * This field is commonly used for refetching an object.
   * 
   */
  node?: Node;
  
  /**
   * Returns the list of nodes (any objects that implement the
   * [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
   * interface) with the given IDs, in accordance with the
   * [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
   * 
   */
  nodes: Array<Node | null>;
  
  /**
   * Returns an Order resource by ID.
   */
  order?: Order;
  
  /**
   * Returns a payment status by payment reference ID. Used to check the status of a deferred payment.
   */
  orderPaymentStatus?: OrderPaymentStatus;
  
  /**
   * List of the shop's order saved searches.
   */
  orderSavedSearches: SavedSearchConnection;
  
  /**
   * Returns a list of orders placed.
   */
  orders: OrderConnection;
  
  /**
   * The payment customization.
   */
  paymentCustomization?: PaymentCustomization;
  
  /**
   * The payment customizations.
   */
  paymentCustomizations: PaymentCustomizationConnection;
  
  /**
   * The list of payment terms templates eligible for all shops and users.
   */
  paymentTermsTemplates: Array<PaymentTermsTemplate>;
  
  /**
   * Returns a price list resource by ID.
   */
  priceList?: PriceList;
  
  /**
   * All price lists for a shop.
   */
  priceLists: PriceListConnection;
  
  /**
   * Returns a code price rule resource by ID.
   * @deprecated Use `codeDiscountNode` instead.
   */
  priceRule?: PriceRule;
  
  /**
   * List of the shop's price rule saved searches.
   */
  priceRuleSavedSearches: SavedSearchConnection;
  
  /**
   * Returns a list of price rule resources that have at least one associated discount code.
   * @deprecated Use `codeDiscountNodes` instead.
   */
  priceRules: PriceRuleConnection;
  
  /**
   * The primary market of the shop.
   */
  primaryMarket: Market;
  
  /**
   * Returns a private metafield by ID.
   * Private metafields are accessible only by the application that created them.
   * 
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * Returns a list of private metafields associated to a resource.
   * 
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * Returns a Product resource by ID.
   */
  product?: Product;
  
  /**
   * Return a product by its handle.
   * 
   */
  productByHandle?: Product;
  
  /**
   * Returns the product duplicate job.
   */
  productDuplicateJob: ProductDuplicateJob;
  
  /**
   * Returns a ProductFeed resource by ID.
   */
  productFeed?: ProductFeed;
  
  /**
   * The product feeds for the shop.
   */
  productFeeds: ProductFeedConnection;
  
  /**
   * Returns the product resource feedback for the currently authenticated app.
   * 
   */
  productResourceFeedback?: ProductResourceFeedback;
  
  /**
   * Returns a list of the shop's product saved searches.
   */
  productSavedSearches: SavedSearchConnection;
  
  /**
   * Returns a ProductVariant resource by ID.
   */
  productVariant?: ProductVariant;
  
  /**
   * List of the product variants.
   */
  productVariants: ProductVariantConnection;
  
  /**
   * List of products.
   */
  products: ProductConnection;
  
  /**
   * The list of publicly-accessible Admin API versions, including supported versions, the release candidate, and unstable versions.
   */
  publicApiVersions: Array<ApiVersion>;
  
  /**
   * Lookup a publication by ID.
   * 
   */
  publication?: Publication;
  
  /**
   * List of publications.
   */
  publications: PublicationConnection;
  
  /**
   * Returns a Refund resource by ID.
   */
  refund?: Refund;
  
  /**
   * Returns a Return resource by ID.
   */
  return?: Return;
  
  /**
   * Lookup a returnable fulfillment by ID.
   */
  returnableFulfillment?: ReturnableFulfillment;
  
  /**
   * List of returnable fulfillments.
   */
  returnableFulfillments: ReturnableFulfillmentConnection;
  
  /**
   * Lookup a reverse delivery by ID.
   */
  reverseDelivery?: ReverseDelivery;
  
  /**
   * Lookup a reverse fulfillment order by ID.
   */
  reverseFulfillmentOrder?: ReverseFulfillmentOrder;
  
  /**
   * <div class="note"><h4>Theme app extensions</h4>
   *   <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
   * 
   * <div class="note"><h4>Script tag deprecation</h4>
   *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
   * 
   * 
   * Lookup a script tag resource by ID.
   * 
   */
  scriptTag?: ScriptTag;
  
  /**
   * <div class="note"><h4>Theme app extensions</h4>
   *   <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
   * 
   * <div class="note"><h4>Script tag deprecation</h4>
   *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
   * 
   * 
   * A list of script tags.
   * 
   */
  scriptTags: ScriptTagConnection;
  
  /**
   * The Customer Segment.
   */
  segment?: Segment;
  
  /**
   * The number of segments for a shop.
   */
  segmentCount: number;
  
  /**
   * A list of filter suggestions associated with a segment. A segment is a group of members (commonly customers) that meet specific criteria.
   */
  segmentFilterSuggestions: SegmentFilterConnection;
  
  /**
   * A list of filters.
   */
  segmentFilters: SegmentFilterConnection;
  
  /**
   * A list of a shop's segment migrations.
   */
  segmentMigrations: SegmentMigrationConnection;
  
  /**
   * The list of suggested values corresponding to a particular filter for a segment. A segment is a group of members, such as customers, that meet specific criteria.
   */
  segmentValueSuggestions: SegmentValueConnection;
  
  /**
   * A list of a shop's segments.
   */
  segments: SegmentConnection;
  
  /**
   * Returns a Selling Plan Group resource by ID.
   */
  sellingPlanGroup?: SellingPlanGroup;
  
  /**
   * List Selling Plan Groups.
   */
  sellingPlanGroups: SellingPlanGroupConnection;
  
  /**
   * The server pixel configured by the app.
   */
  serverPixel?: ServerPixel;
  
  /**
   * Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains
   * business and store management settings for the shop.
   * 
   */
  shop: Shop;
  
  /**
   * The shop's billing preferences.
   */
  shopBillingPreferences: ShopBillingPreferences;
  
  /**
   * A list of locales available on a shop.
   */
  shopLocales: Array<ShopLocale>;
  
  /**
   * The Shopify Function.
   */
  shopifyFunction?: ShopifyFunction;
  
  /**
   * Returns the Shopify Functions for apps installed on the shop.
   */
  shopifyFunctions: ShopifyFunctionConnection;
  
  /**
   * Shopify Payments account information, including balances and payouts.
   */
  shopifyPaymentsAccount?: ShopifyPaymentsAccount;
  
  /**
   * Returns the results of a ShopifyQL query. Refer to the [ShopifyQL documentation](https://shopify.dev/api/shopifyql) for more information.
   */
  shopifyqlQuery?: ShopifyqlResponse;
  
  /**
   * The StaffMember resource, by ID.
   */
  staffMember?: StaffMember;
  
  /**
   * Standard metafield definitions are intended for specific, common use cases. Their namespace and keys reflect these use cases and are reserved.
   * 
   * Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).
   * 
   */
  standardMetafieldDefinitionTemplates: StandardMetafieldDefinitionTemplateConnection;
  
  /**
   * Returns a SubscriptionBillingAttempt by ID.
   */
  subscriptionBillingAttempt?: SubscriptionBillingAttempt;
  
  /**
   * Returns subscription billing attempts on a store.
   */
  subscriptionBillingAttempts: SubscriptionBillingAttemptConnection;
  
  /**
   * Returns a subscription billing cycle found either by cycle index or date.
   */
  subscriptionBillingCycle?: SubscriptionBillingCycle;
  
  /**
   * Returns subscription billing cycles for a contract ID.
   */
  subscriptionBillingCycles: SubscriptionBillingCycleConnection;
  
  /**
   * Returns a Subscription Contract resource by ID.
   */
  subscriptionContract?: SubscriptionContract;
  
  /**
   * List Subscription Contracts.
   */
  subscriptionContracts: SubscriptionContractConnection;
  
  /**
   * Returns a Subscription Draft resource by ID.
   */
  subscriptionDraft?: SubscriptionDraft;
  
  /**
   * Returns a list of TenderTransactions associated with the shop.
   */
  tenderTransactions: TenderTransactionConnection;
  
  /**
   * A resource that can have localized values for different languages.
   */
  translatableResource?: TranslatableResource;
  
  /**
   * Resources that can have localized values for different languages.
   */
  translatableResources: TranslatableResourceConnection;
  
  /**
   * Resources that can have localized values for different languages.
   */
  translatableResourcesByIds: TranslatableResourceConnection;
  
  /**
   * Returns a redirect resource by ID.
   */
  urlRedirect?: UrlRedirect;
  
  /**
   * Returns a redirect import resource by ID.
   */
  urlRedirectImport?: UrlRedirectImport;
  
  /**
   * A list of the shop's URL redirect saved searches.
   */
  urlRedirectSavedSearches: SavedSearchConnection;
  
  /**
   * A list of redirects for a shop.
   */
  urlRedirects: UrlRedirectConnection;
  
  /**
   * Validation available on the shop.
   */
  validation?: Validation;
  
  /**
   * Validations available on the shop.
   */
  validations: ValidationConnection;
  
  /**
   * The web pixel configured by the app.
   */
  webPixel?: WebPixel;
  
  /**
   * Returns a webhook subscription by ID.
   */
  webhookSubscription?: WebhookSubscription;
  
  /**
   * Returns a list of webhook subscriptions.
   */
  webhookSubscriptions: WebhookSubscriptionConnection;
}

/**
 * A browse, cart, or checkout that was abandoned by a customer.
 */
export interface Abandonment extends Node {
  
  /**
   * The abandonment payload for the abandoned checkout.
   */
  abandonedCheckoutPayload?: AbandonedCheckout;
  
  /**
   * The abandonment type.
   */
  abandonmentType: AbandonmentAbandonmentType;
  
  /**
   * The app associated with an abandoned checkout.
   */
  app: App;
  
  /**
   * Permalink to the cart page.
   */
  cartUrl?: URL;
  
  /**
   * The date and time when the abandonment was created.
   */
  createdAt: DateTime;
  
  /**
   * The customer who abandoned this event.
   */
  customer: Customer;
  
  /**
   * Whether the customer has a draft order since this abandonment has been abandoned.
   */
  customerHasNoDraftOrderSinceAbandonment: boolean;
  
  /**
   * Whether the customer has completed an order since this checkout has been abandoned.
   */
  customerHasNoOrderSinceAbandonment: boolean;
  
  /**
   * The number of days since the last abandonment email was sent to the customer.
   */
  daysSinceLastAbandonmentEmail: number;
  
  /**
   * When the email was sent, if that's the case.
   */
  emailSentAt?: DateTime;
  
  /**
   * The email state (e.g., sent or not sent).
   */
  emailState?: AbandonmentEmailState;
  
  /**
   * The number of hours since the customer has last abandoned a checkout.
   */
  hoursSinceLastAbandonedCheckout?: number;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Whether the products in abandonment are available.
   */
  inventoryAvailable: boolean;
  
  /**
   * Whether the abandonment event comes from the Online Store sales channel.
   */
  isFromOnlineStore: boolean;
  
  /**
   * Whether the abandonment event comes from the Shop app sales channel.
   */
  isFromShopApp: boolean;
  
  /**
   * Whether the abandonment event comes from Shop Pay.
   */
  isFromShopPay: boolean;
  
  /**
   * Whether the customer didn't complete another most significant step since this abandonment.
   */
  isMostSignificantAbandonment: boolean;
  
  /**
   * The date for the latest browse abandonment.
   */
  lastBrowseAbandonmentDate: DateTime;
  
  /**
   * The date for the latest cart abandonment.
   */
  lastCartAbandonmentDate: DateTime;
  
  /**
   * The date for the latest checkout abandonment.
   */
  lastCheckoutAbandonmentDate: DateTime;
  
  /**
   * The most recent step type.
   */
  mostRecentStep: AbandonmentAbandonmentType;
  
  /**
   * The products added to the cart during the customer abandoned visit.
   */
  productsAddedToCart: CustomerVisitProductInfoConnection;
  
  /**
   * The products viewed during the customer abandoned visit.
   */
  productsViewed: CustomerVisitProductInfoConnection;
  
  /**
   * The date and time when the visit started.
   */
  visitStartedAt?: DateTime;
}

/**
 * An object with an ID field to support global identification, in accordance with the
 * [Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
 * This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
 * and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
 * 
 */
export interface Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
}

/** Use this to resolve interface type Node */
export type PossibleNodeTypeNames =
'Abandonment' |
'AbandonedCheckout' |
'AbandonedCheckoutLineItem' |
'Metafield' |
'MetafieldDefinition' |
'StandardMetafieldDefinitionTemplate' |
'Collection' |
'Market' |
'MarketCatalog' |
'PriceList' |
'QuantityPriceBreak' |
'ProductVariant' |
'DeliveryProfile' |
'DeliveryProfileItem' |
'Product' |
'Channel' |
'App' |
'AppInstallation' |
'AppSubscription' |
'AppUsageRecord' |
'AppCredit' |
'AppPurchaseOneTime' |
'PrivateMetafield' |
'Publication' |
'AddAllProductsOperation' |
'CatalogCsvOperation' |
'PublicationResourceOperation' |
'AppRevenueAttributionRecord' |
'ProductOption' |
'ProductTaxonomyNode' |
'SellingPlanGroup' |
'SellingPlan' |
'DeliveryCountry' |
'DeliveryProvince' |
'DeliveryLocationGroup' |
'Location' |
'InventoryLevel' |
'InventoryItem' |
'InventoryQuantity' |
'DeliveryMethodDefinition' |
'DeliveryCondition' |
'DeliveryParticipant' |
'DeliveryCarrierService' |
'DeliveryRateDefinition' |
'DeliveryZone' |
'ProductVariantComponent' |
'MarketWebPresence' |
'Domain' |
'GenericFile' |
'MediaImage' |
'Metaobject' |
'StaffMember' |
'MetaobjectDefinition' |
'Customer' |
'MailingAddress' |
'CompanyContact' |
'Company' |
'CompanyContactRole' |
'DraftOrder' |
'DraftOrderLineItem' |
'Order' |
'AdditionalFee' |
'ChannelInformation' |
'ChannelDefinition' |
'CustomerVisit' |
'MarketingEvent' |
'OrderDisputeSummary' |
'ExchangeV2' |
'GiftCard' |
'LineItem' |
'SubscriptionContract' |
'CustomerPaymentMethod' |
'SubscriptionBillingAttempt' |
'Duty' |
'Refund' |
'Return' |
'ReturnLineItem' |
'FulfillmentLineItem' |
'ReverseFulfillmentOrder' |
'ReverseFulfillmentOrderLineItem' |
'ReverseFulfillmentOrderDisposition' |
'ReverseDelivery' |
'ReverseDeliveryLineItem' |
'OrderTransaction' |
'TransactionFee' |
'FulfillmentOrder' |
'DeliveryMethod' |
'FulfillmentOrderDestination' |
'Fulfillment' |
'FulfillmentEvent' |
'FulfillmentOrderLineItem' |
'FulfillmentOrderMerchantRequest' |
'LineItemMutable' |
'PaymentMandate' |
'PaymentTerms' |
'PaymentSchedule' |
'CompanyLocation' |
'CompanyAddress' |
'PaymentTermsTemplate' |
'CompanyContactRoleAssignment' |
'DeliveryCustomization' |
'DiscountAutomaticNode' |
'DiscountAutomaticBxgy' |
'DiscountCodeNode' |
'Segment' |
'DiscountNode' |
'OnlineStoreArticle' |
'OnlineStoreBlog' |
'OnlineStorePage' |
'PaymentCustomization' |
'Shop' |
'ShopAddress' |
'SavedSearch' |
'PriceRule' |
'PriceRuleDiscountCode' |
'ShopPolicy' |
'StorefrontAccessToken' |
'Video' |
'CartTransform' |
'CheckoutProfile' |
'BulkOperation' |
'CustomerSegmentMembersQuery' |
'DiscountRedeemCodeBulkCreation' |
'ShopifyPaymentsDispute' |
'ShopifyPaymentsDisputeEvidence' |
'ShopifyPaymentsDisputeFileUpload' |
'ShopifyPaymentsDisputeFulfillment' |
'DraftOrderTag' |
'FulfillmentConstraintRule' |
'MarketingActivity' |
'MetafieldStorefrontVisibility' |
'ProductFeed' |
'ReturnableFulfillment' |
'ScriptTag' |
'ServerPixel' |
'ShopifyPaymentsAccount' |
'ShopifyPaymentsBalanceTransaction' |
'ShopifyPaymentsBankAccount' |
'ShopifyPaymentsPayout' |
'ShopifyPaymentsVerification' |
'SubscriptionDraft' |
'TenderTransaction' |
'UrlRedirect' |
'UrlRedirectImport' |
'Validation' |
'WebPixel' |
'WebhookSubscription' |
'InventoryAdjustmentGroup' |
'CalculatedOrder' |
'SaleAdditionalFee' |
'AppCatalog' |
'BasicEvent' |
'CommentEvent' |
'CompanyLocationCatalog' |
'ExternalVideo' |
'MarketRegionCountry' |
'Model3d';

export interface NodeNameMap {
  Node: Node;
  Abandonment: Abandonment;
  AbandonedCheckout: AbandonedCheckout;
  AbandonedCheckoutLineItem: AbandonedCheckoutLineItem;
  Metafield: Metafield;
  MetafieldDefinition: MetafieldDefinition;
  StandardMetafieldDefinitionTemplate: StandardMetafieldDefinitionTemplate;
  Collection: Collection;
  Market: Market;
  MarketCatalog: MarketCatalog;
  PriceList: PriceList;
  QuantityPriceBreak: QuantityPriceBreak;
  ProductVariant: ProductVariant;
  DeliveryProfile: DeliveryProfile;
  DeliveryProfileItem: DeliveryProfileItem;
  Product: Product;
  Channel: Channel;
  App: App;
  AppInstallation: AppInstallation;
  AppSubscription: AppSubscription;
  AppUsageRecord: AppUsageRecord;
  AppCredit: AppCredit;
  AppPurchaseOneTime: AppPurchaseOneTime;
  PrivateMetafield: PrivateMetafield;
  Publication: Publication;
  AddAllProductsOperation: AddAllProductsOperation;
  CatalogCsvOperation: CatalogCsvOperation;
  PublicationResourceOperation: PublicationResourceOperation;
  AppRevenueAttributionRecord: AppRevenueAttributionRecord;
  ProductOption: ProductOption;
  ProductTaxonomyNode: ProductTaxonomyNode;
  SellingPlanGroup: SellingPlanGroup;
  SellingPlan: SellingPlan;
  DeliveryCountry: DeliveryCountry;
  DeliveryProvince: DeliveryProvince;
  DeliveryLocationGroup: DeliveryLocationGroup;
  Location: Location;
  InventoryLevel: InventoryLevel;
  InventoryItem: InventoryItem;
  InventoryQuantity: InventoryQuantity;
  DeliveryMethodDefinition: DeliveryMethodDefinition;
  DeliveryCondition: DeliveryCondition;
  DeliveryParticipant: DeliveryParticipant;
  DeliveryCarrierService: DeliveryCarrierService;
  DeliveryRateDefinition: DeliveryRateDefinition;
  DeliveryZone: DeliveryZone;
  ProductVariantComponent: ProductVariantComponent;
  MarketWebPresence: MarketWebPresence;
  Domain: Domain;
  GenericFile: GenericFile;
  MediaImage: MediaImage;
  Metaobject: Metaobject;
  StaffMember: StaffMember;
  MetaobjectDefinition: MetaobjectDefinition;
  Customer: Customer;
  MailingAddress: MailingAddress;
  CompanyContact: CompanyContact;
  Company: Company;
  CompanyContactRole: CompanyContactRole;
  DraftOrder: DraftOrder;
  DraftOrderLineItem: DraftOrderLineItem;
  Order: Order;
  AdditionalFee: AdditionalFee;
  ChannelInformation: ChannelInformation;
  ChannelDefinition: ChannelDefinition;
  CustomerVisit: CustomerVisit;
  MarketingEvent: MarketingEvent;
  OrderDisputeSummary: OrderDisputeSummary;
  ExchangeV2: ExchangeV2;
  GiftCard: GiftCard;
  LineItem: LineItem;
  SubscriptionContract: SubscriptionContract;
  CustomerPaymentMethod: CustomerPaymentMethod;
  SubscriptionBillingAttempt: SubscriptionBillingAttempt;
  Duty: Duty;
  Refund: Refund;
  Return: Return;
  ReturnLineItem: ReturnLineItem;
  FulfillmentLineItem: FulfillmentLineItem;
  ReverseFulfillmentOrder: ReverseFulfillmentOrder;
  ReverseFulfillmentOrderLineItem: ReverseFulfillmentOrderLineItem;
  ReverseFulfillmentOrderDisposition: ReverseFulfillmentOrderDisposition;
  ReverseDelivery: ReverseDelivery;
  ReverseDeliveryLineItem: ReverseDeliveryLineItem;
  OrderTransaction: OrderTransaction;
  TransactionFee: TransactionFee;
  FulfillmentOrder: FulfillmentOrder;
  DeliveryMethod: DeliveryMethod;
  FulfillmentOrderDestination: FulfillmentOrderDestination;
  Fulfillment: Fulfillment;
  FulfillmentEvent: FulfillmentEvent;
  FulfillmentOrderLineItem: FulfillmentOrderLineItem;
  FulfillmentOrderMerchantRequest: FulfillmentOrderMerchantRequest;
  LineItemMutable: LineItemMutable;
  PaymentMandate: PaymentMandate;
  PaymentTerms: PaymentTerms;
  PaymentSchedule: PaymentSchedule;
  CompanyLocation: CompanyLocation;
  CompanyAddress: CompanyAddress;
  PaymentTermsTemplate: PaymentTermsTemplate;
  CompanyContactRoleAssignment: CompanyContactRoleAssignment;
  DeliveryCustomization: DeliveryCustomization;
  DiscountAutomaticNode: DiscountAutomaticNode;
  DiscountAutomaticBxgy: DiscountAutomaticBxgy;
  DiscountCodeNode: DiscountCodeNode;
  Segment: Segment;
  DiscountNode: DiscountNode;
  OnlineStoreArticle: OnlineStoreArticle;
  OnlineStoreBlog: OnlineStoreBlog;
  OnlineStorePage: OnlineStorePage;
  PaymentCustomization: PaymentCustomization;
  Shop: Shop;
  ShopAddress: ShopAddress;
  SavedSearch: SavedSearch;
  PriceRule: PriceRule;
  PriceRuleDiscountCode: PriceRuleDiscountCode;
  ShopPolicy: ShopPolicy;
  StorefrontAccessToken: StorefrontAccessToken;
  Video: Video;
  CartTransform: CartTransform;
  CheckoutProfile: CheckoutProfile;
  BulkOperation: BulkOperation;
  CustomerSegmentMembersQuery: CustomerSegmentMembersQuery;
  DiscountRedeemCodeBulkCreation: DiscountRedeemCodeBulkCreation;
  ShopifyPaymentsDispute: ShopifyPaymentsDispute;
  ShopifyPaymentsDisputeEvidence: ShopifyPaymentsDisputeEvidence;
  ShopifyPaymentsDisputeFileUpload: ShopifyPaymentsDisputeFileUpload;
  ShopifyPaymentsDisputeFulfillment: ShopifyPaymentsDisputeFulfillment;
  DraftOrderTag: DraftOrderTag;
  FulfillmentConstraintRule: FulfillmentConstraintRule;
  MarketingActivity: MarketingActivity;
  MetafieldStorefrontVisibility: MetafieldStorefrontVisibility;
  ProductFeed: ProductFeed;
  ReturnableFulfillment: ReturnableFulfillment;
  ScriptTag: ScriptTag;
  ServerPixel: ServerPixel;
  ShopifyPaymentsAccount: ShopifyPaymentsAccount;
  ShopifyPaymentsBalanceTransaction: ShopifyPaymentsBalanceTransaction;
  ShopifyPaymentsBankAccount: ShopifyPaymentsBankAccount;
  ShopifyPaymentsPayout: ShopifyPaymentsPayout;
  ShopifyPaymentsVerification: ShopifyPaymentsVerification;
  SubscriptionDraft: SubscriptionDraft;
  TenderTransaction: TenderTransaction;
  UrlRedirect: UrlRedirect;
  UrlRedirectImport: UrlRedirectImport;
  Validation: Validation;
  WebPixel: WebPixel;
  WebhookSubscription: WebhookSubscription;
  InventoryAdjustmentGroup: InventoryAdjustmentGroup;
  CalculatedOrder: CalculatedOrder;
  SaleAdditionalFee: SaleAdditionalFee;
  AppCatalog: AppCatalog;
  BasicEvent: BasicEvent;
  CommentEvent: CommentEvent;
  CompanyLocationCatalog: CompanyLocationCatalog;
  ExternalVideo: ExternalVideo;
  MarketRegionCountry: MarketRegionCountry;
  Model3d: Model3d;
}

/**
 * A checkout that was abandoned by the customer.
 */
export interface AbandonedCheckout extends Navigable, Node {
  
  /**
   * The URL for the buyer to recover their checkout.
   */
  abandonedCheckoutUrl: URL;
  
  /**
   * A default cursor that returns the single next record, sorted ascending by ID.
   * 
   */
  defaultCursor: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * A list of the line items in this checkout.
   */
  lineItems: AbandonedCheckoutLineItemConnection;
  
  /**
   * The number of products in the checkout.
   */
  lineItemsQuantity: number;
  
  /**
   * The sum of all items in the checkout, including discounts, shipping, taxes, and tips.
   * 
   */
  totalPriceSet: MoneyBag;
}

/**
 * A default cursor that you can use in queries to paginate your results. Each edge in a connection can
 * return a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as
 * the starting point to retrieve the nodes before or after it in a connection.
 * 
 * To learn more about using cursor-based pagination, refer to
 * [Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).
 * 
 */
export interface Navigable {
  
  /**
   * A default cursor that returns the single next record, sorted ascending by ID.
   * 
   */
  defaultCursor: string;
}

/** Use this to resolve interface type Navigable */
export type PossibleNavigableTypeNames =
'AbandonedCheckout' |
'ProductVariant' |
'Product' |
'Company' |
'DraftOrder' |
'CompanyLocation' |
'OnlineStoreArticle' |
'OnlineStorePage';

export interface NavigableNameMap {
  Navigable: Navigable;
  AbandonedCheckout: AbandonedCheckout;
  ProductVariant: ProductVariant;
  Product: Product;
  Company: Company;
  DraftOrder: DraftOrder;
  CompanyLocation: CompanyLocation;
  OnlineStoreArticle: OnlineStoreArticle;
  OnlineStorePage: OnlineStorePage;
}

/**
 * Represents an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
 * [RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.
 * 
 * For example, `"https://johns-apparel.myshopify.com"` is a valid URL. It includes a scheme (`https`) and a host
 * (`johns-apparel.myshopify.com`).
 * 
 */
export type URL = any;

/**
 * An auto-generated type for paginating through multiple AbandonedCheckoutLineItems.
 * 
 */
export interface AbandonedCheckoutLineItemConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<AbandonedCheckoutLineItemEdge>;
  
  /**
   * A list of the nodes contained in AbandonedCheckoutLineItemEdge.
   */
  nodes: Array<AbandonedCheckoutLineItem>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one AbandonedCheckoutLineItem and a cursor during pagination.
 * 
 */
export interface AbandonedCheckoutLineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of AbandonedCheckoutLineItemEdge.
   */
  node: AbandonedCheckoutLineItem;
}

/**
 * A single line item in an abandoned checkout.
 */
export interface AbandonedCheckoutLineItem extends Node {
  
  /**
   * A list of extra information that has been added to the line item.
   */
  customAttributes: Array<Attribute>;
  
  /**
   * Final total price for the entire quantity of this line item, including discounts.
   */
  discountedTotalPriceSet: MoneyBag;
  
  /**
   * The total price for the entire quantity of this line item, after all discounts are applied, at both the line item and code-based line item level.
   * 
   */
  discountedTotalPriceWithCodeDiscount: MoneyBag;
  
  /**
   * The price of a single variant unit after discounts are applied at the line item level, in shop and presentment currencies.
   * 
   */
  discountedUnitPriceSet: MoneyBag;
  
  /**
   * The price of a single variant unit after all discounts are applied, at both the line item and code-based line item level.
   * 
   */
  discountedUnitPriceWithCodeDiscount: MoneyBag;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The image associated with the line item's variant or product.
   * NULL if the line item has no product, or if neither the variant nor the product have an image.
   * 
   */
  image?: Image;
  
  /**
   * Original total price for the entire quantity of this line item, before discounts.
   */
  originalTotalPriceSet: MoneyBag;
  
  /**
   * Original price for a single unit of this line item, before discounts.
   */
  originalUnitPriceSet: MoneyBag;
  
  /**
   * Product for this line item.
   * NULL for custom line items and products that were deleted after checkout began.
   * 
   */
  product?: Product;
  
  /**
   * The quantity of the line item.
   */
  quantity: number;
  
  /**
   * SKU for the inventory item associated with the variant, if any.
   */
  sku?: string;
  
  /**
   * Title of the line item. Defaults to the product's title.
   */
  title?: string;
  
  /**
   * Product variant for this line item.
   * NULL for custom line items and variants that were deleted after checkout began.
   * 
   */
  variant?: ProductVariant;
  
  /**
   * Title of the variant for this line item.
   * NULL for custom line items and products that don't have distinct variants.
   * 
   */
  variantTitle?: string;
}

/**
 * Represents a generic custom attribute.
 */
export interface Attribute {
  
  /**
   * Key or name of the attribute.
   */
  key: string;
  
  /**
   * Value of the attribute.
   */
  value?: string;
}

/**
 * A collection of monetary values in their respective currencies. Typically used in the context of multi-currency pricing and transactions,
 * when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
 * 
 */
export interface MoneyBag {
  
  /**
   * Amount in presentment currency.
   */
  presentmentMoney: MoneyV2;
  
  /**
   * Amount in shop currency.
   */
  shopMoney: MoneyV2;
}

/**
 * A monetary value with currency.
 * 
 */
export interface MoneyV2 {
  
  /**
   * Decimal money amount.
   */
  amount: Decimal;
  
  /**
   * Currency of the money.
   */
  currencyCode: CurrencyCode;
}

/**
 * A signed decimal number, which supports arbitrary precision and is serialized as a string.
 * 
 * Example values: `"29.99"`, `"29.999"`.
 * 
 */
export type Decimal = any;

/**
 * The three-letter currency codes that represent the world currencies used in stores. These include standard ISO 4217 codes, legacy codes,
 * and non-standard codes.
 * 
 */
export const enum CurrencyCode {
  
  /**
   * United States Dollars (USD).
   */
  USD = 'USD',
  
  /**
   * Euro (EUR).
   */
  EUR = 'EUR',
  
  /**
   * United Kingdom Pounds (GBP).
   */
  GBP = 'GBP',
  
  /**
   * Canadian Dollars (CAD).
   */
  CAD = 'CAD',
  
  /**
   * Afghan Afghani (AFN).
   */
  AFN = 'AFN',
  
  /**
   * Albanian Lek (ALL).
   */
  ALL = 'ALL',
  
  /**
   * Algerian Dinar (DZD).
   */
  DZD = 'DZD',
  
  /**
   * Angolan Kwanza (AOA).
   */
  AOA = 'AOA',
  
  /**
   * Argentine Pesos (ARS).
   */
  ARS = 'ARS',
  
  /**
   * Armenian Dram (AMD).
   */
  AMD = 'AMD',
  
  /**
   * Aruban Florin (AWG).
   */
  AWG = 'AWG',
  
  /**
   * Australian Dollars (AUD).
   */
  AUD = 'AUD',
  
  /**
   * Barbadian Dollar (BBD).
   */
  BBD = 'BBD',
  
  /**
   * Azerbaijani Manat (AZN).
   */
  AZN = 'AZN',
  
  /**
   * Bangladesh Taka (BDT).
   */
  BDT = 'BDT',
  
  /**
   * Bahamian Dollar (BSD).
   */
  BSD = 'BSD',
  
  /**
   * Bahraini Dinar (BHD).
   */
  BHD = 'BHD',
  
  /**
   * Burundian Franc (BIF).
   */
  BIF = 'BIF',
  
  /**
   * Belarusian Ruble (BYN).
   */
  BYN = 'BYN',
  
  /**
   * Belize Dollar (BZD).
   */
  BZD = 'BZD',
  
  /**
   * Bermudian Dollar (BMD).
   */
  BMD = 'BMD',
  
  /**
   * Bhutanese Ngultrum (BTN).
   */
  BTN = 'BTN',
  
  /**
   * Bosnia and Herzegovina Convertible Mark (BAM).
   */
  BAM = 'BAM',
  
  /**
   * Brazilian Real (BRL).
   */
  BRL = 'BRL',
  
  /**
   * Bolivian Boliviano (BOB).
   */
  BOB = 'BOB',
  
  /**
   * Botswana Pula (BWP).
   */
  BWP = 'BWP',
  
  /**
   * Brunei Dollar (BND).
   */
  BND = 'BND',
  
  /**
   * Bulgarian Lev (BGN).
   */
  BGN = 'BGN',
  
  /**
   * Burmese Kyat (MMK).
   */
  MMK = 'MMK',
  
  /**
   * Cambodian Riel.
   */
  KHR = 'KHR',
  
  /**
   * Cape Verdean escudo (CVE).
   */
  CVE = 'CVE',
  
  /**
   * Cayman Dollars (KYD).
   */
  KYD = 'KYD',
  
  /**
   * Central African CFA Franc (XAF).
   */
  XAF = 'XAF',
  
  /**
   * Chilean Peso (CLP).
   */
  CLP = 'CLP',
  
  /**
   * Chinese Yuan Renminbi (CNY).
   */
  CNY = 'CNY',
  
  /**
   * Colombian Peso (COP).
   */
  COP = 'COP',
  
  /**
   * Comorian Franc (KMF).
   */
  KMF = 'KMF',
  
  /**
   * Congolese franc (CDF).
   */
  CDF = 'CDF',
  
  /**
   * Costa Rican Colones (CRC).
   */
  CRC = 'CRC',
  
  /**
   * Croatian Kuna (HRK).
   */
  HRK = 'HRK',
  
  /**
   * Czech Koruny (CZK).
   */
  CZK = 'CZK',
  
  /**
   * Danish Kroner (DKK).
   */
  DKK = 'DKK',
  
  /**
   * Djiboutian Franc (DJF).
   */
  DJF = 'DJF',
  
  /**
   * Dominican Peso (DOP).
   */
  DOP = 'DOP',
  
  /**
   * East Caribbean Dollar (XCD).
   */
  XCD = 'XCD',
  
  /**
   * Egyptian Pound (EGP).
   */
  EGP = 'EGP',
  
  /**
   * Eritrean Nakfa (ERN).
   */
  ERN = 'ERN',
  
  /**
   * Ethiopian Birr (ETB).
   */
  ETB = 'ETB',
  
  /**
   * Falkland Islands Pounds (FKP).
   */
  FKP = 'FKP',
  
  /**
   * CFP Franc (XPF).
   */
  XPF = 'XPF',
  
  /**
   * Fijian Dollars (FJD).
   */
  FJD = 'FJD',
  
  /**
   * Gibraltar Pounds (GIP).
   */
  GIP = 'GIP',
  
  /**
   * Gambian Dalasi (GMD).
   */
  GMD = 'GMD',
  
  /**
   * Ghanaian Cedi (GHS).
   */
  GHS = 'GHS',
  
  /**
   * Guatemalan Quetzal (GTQ).
   */
  GTQ = 'GTQ',
  
  /**
   * Guyanese Dollar (GYD).
   */
  GYD = 'GYD',
  
  /**
   * Georgian Lari (GEL).
   */
  GEL = 'GEL',
  
  /**
   * Guinean Franc (GNF).
   */
  GNF = 'GNF',
  
  /**
   * Haitian Gourde (HTG).
   */
  HTG = 'HTG',
  
  /**
   * Honduran Lempira (HNL).
   */
  HNL = 'HNL',
  
  /**
   * Hong Kong Dollars (HKD).
   */
  HKD = 'HKD',
  
  /**
   * Hungarian Forint (HUF).
   */
  HUF = 'HUF',
  
  /**
   * Icelandic Kronur (ISK).
   */
  ISK = 'ISK',
  
  /**
   * Indian Rupees (INR).
   */
  INR = 'INR',
  
  /**
   * Indonesian Rupiah (IDR).
   */
  IDR = 'IDR',
  
  /**
   * Israeli New Shekel (NIS).
   */
  ILS = 'ILS',
  
  /**
   * Iranian Rial (IRR).
   */
  IRR = 'IRR',
  
  /**
   * Iraqi Dinar (IQD).
   */
  IQD = 'IQD',
  
  /**
   * Jamaican Dollars (JMD).
   */
  JMD = 'JMD',
  
  /**
   * Japanese Yen (JPY).
   */
  JPY = 'JPY',
  
  /**
   * Jersey Pound.
   */
  JEP = 'JEP',
  
  /**
   * Jordanian Dinar (JOD).
   */
  JOD = 'JOD',
  
  /**
   * Kazakhstani Tenge (KZT).
   */
  KZT = 'KZT',
  
  /**
   * Kenyan Shilling (KES).
   */
  KES = 'KES',
  
  /**
   * Kiribati Dollar (KID).
   */
  KID = 'KID',
  
  /**
   * Kuwaiti Dinar (KWD).
   */
  KWD = 'KWD',
  
  /**
   * Kyrgyzstani Som (KGS).
   */
  KGS = 'KGS',
  
  /**
   * Laotian Kip (LAK).
   */
  LAK = 'LAK',
  
  /**
   * Latvian Lati (LVL).
   */
  LVL = 'LVL',
  
  /**
   * Lebanese Pounds (LBP).
   */
  LBP = 'LBP',
  
  /**
   * Lesotho Loti (LSL).
   */
  LSL = 'LSL',
  
  /**
   * Liberian Dollar (LRD).
   */
  LRD = 'LRD',
  
  /**
   * Libyan Dinar (LYD).
   */
  LYD = 'LYD',
  
  /**
   * Lithuanian Litai (LTL).
   */
  LTL = 'LTL',
  
  /**
   * Malagasy Ariary (MGA).
   */
  MGA = 'MGA',
  
  /**
   * Macedonia Denar (MKD).
   */
  MKD = 'MKD',
  
  /**
   * Macanese Pataca (MOP).
   */
  MOP = 'MOP',
  
  /**
   * Malawian Kwacha (MWK).
   */
  MWK = 'MWK',
  
  /**
   * Maldivian Rufiyaa (MVR).
   */
  MVR = 'MVR',
  
  /**
   * Mauritanian Ouguiya (MRU).
   */
  MRU = 'MRU',
  
  /**
   * Mexican Pesos (MXN).
   */
  MXN = 'MXN',
  
  /**
   * Malaysian Ringgits (MYR).
   */
  MYR = 'MYR',
  
  /**
   * Mauritian Rupee (MUR).
   */
  MUR = 'MUR',
  
  /**
   * Moldovan Leu (MDL).
   */
  MDL = 'MDL',
  
  /**
   * Moroccan Dirham.
   */
  MAD = 'MAD',
  
  /**
   * Mongolian Tugrik.
   */
  MNT = 'MNT',
  
  /**
   * Mozambican Metical.
   */
  MZN = 'MZN',
  
  /**
   * Namibian Dollar.
   */
  NAD = 'NAD',
  
  /**
   * Nepalese Rupee (NPR).
   */
  NPR = 'NPR',
  
  /**
   * Netherlands Antillean Guilder.
   */
  ANG = 'ANG',
  
  /**
   * New Zealand Dollars (NZD).
   */
  NZD = 'NZD',
  
  /**
   * Nicaraguan Córdoba (NIO).
   */
  NIO = 'NIO',
  
  /**
   * Nigerian Naira (NGN).
   */
  NGN = 'NGN',
  
  /**
   * Norwegian Kroner (NOK).
   */
  NOK = 'NOK',
  
  /**
   * Omani Rial (OMR).
   */
  OMR = 'OMR',
  
  /**
   * Panamian Balboa (PAB).
   */
  PAB = 'PAB',
  
  /**
   * Pakistani Rupee (PKR).
   */
  PKR = 'PKR',
  
  /**
   * Papua New Guinean Kina (PGK).
   */
  PGK = 'PGK',
  
  /**
   * Paraguayan Guarani (PYG).
   */
  PYG = 'PYG',
  
  /**
   * Peruvian Nuevo Sol (PEN).
   */
  PEN = 'PEN',
  
  /**
   * Philippine Peso (PHP).
   */
  PHP = 'PHP',
  
  /**
   * Polish Zlotych (PLN).
   */
  PLN = 'PLN',
  
  /**
   * Qatari Rial (QAR).
   */
  QAR = 'QAR',
  
  /**
   * Romanian Lei (RON).
   */
  RON = 'RON',
  
  /**
   * Russian Rubles (RUB).
   */
  RUB = 'RUB',
  
  /**
   * Rwandan Franc (RWF).
   */
  RWF = 'RWF',
  
  /**
   * Samoan Tala (WST).
   */
  WST = 'WST',
  
  /**
   * Saint Helena Pounds (SHP).
   */
  SHP = 'SHP',
  
  /**
   * Saudi Riyal (SAR).
   */
  SAR = 'SAR',
  
  /**
   * Serbian dinar (RSD).
   */
  RSD = 'RSD',
  
  /**
   * Seychellois Rupee (SCR).
   */
  SCR = 'SCR',
  
  /**
   * Sierra Leonean Leone (SLL).
   */
  SLL = 'SLL',
  
  /**
   * Singapore Dollars (SGD).
   */
  SGD = 'SGD',
  
  /**
   * Sudanese Pound (SDG).
   */
  SDG = 'SDG',
  
  /**
   * Somali Shilling (SOS).
   */
  SOS = 'SOS',
  
  /**
   * Syrian Pound (SYP).
   */
  SYP = 'SYP',
  
  /**
   * South African Rand (ZAR).
   */
  ZAR = 'ZAR',
  
  /**
   * South Korean Won (KRW).
   */
  KRW = 'KRW',
  
  /**
   * South Sudanese Pound (SSP).
   */
  SSP = 'SSP',
  
  /**
   * Solomon Islands Dollar (SBD).
   */
  SBD = 'SBD',
  
  /**
   * Sri Lankan Rupees (LKR).
   */
  LKR = 'LKR',
  
  /**
   * Surinamese Dollar (SRD).
   */
  SRD = 'SRD',
  
  /**
   * Swazi Lilangeni (SZL).
   */
  SZL = 'SZL',
  
  /**
   * Swedish Kronor (SEK).
   */
  SEK = 'SEK',
  
  /**
   * Swiss Francs (CHF).
   */
  CHF = 'CHF',
  
  /**
   * Taiwan Dollars (TWD).
   */
  TWD = 'TWD',
  
  /**
   * Thai baht (THB).
   */
  THB = 'THB',
  
  /**
   * Tajikistani Somoni (TJS).
   */
  TJS = 'TJS',
  
  /**
   * Tanzanian Shilling (TZS).
   */
  TZS = 'TZS',
  
  /**
   * Tongan Pa'anga (TOP).
   */
  TOP = 'TOP',
  
  /**
   * Trinidad and Tobago Dollars (TTD).
   */
  TTD = 'TTD',
  
  /**
   * Tunisian Dinar (TND).
   */
  TND = 'TND',
  
  /**
   * Turkish Lira (TRY).
   */
  TRY = 'TRY',
  
  /**
   * Turkmenistani Manat (TMT).
   */
  TMT = 'TMT',
  
  /**
   * Ugandan Shilling (UGX).
   */
  UGX = 'UGX',
  
  /**
   * Ukrainian Hryvnia (UAH).
   */
  UAH = 'UAH',
  
  /**
   * United Arab Emirates Dirham (AED).
   */
  AED = 'AED',
  
  /**
   * Uruguayan Pesos (UYU).
   */
  UYU = 'UYU',
  
  /**
   * Uzbekistan som (UZS).
   */
  UZS = 'UZS',
  
  /**
   * Vanuatu Vatu (VUV).
   */
  VUV = 'VUV',
  
  /**
   * Venezuelan Bolivares Soberanos (VES).
   */
  VES = 'VES',
  
  /**
   * Vietnamese đồng (VND).
   */
  VND = 'VND',
  
  /**
   * West African CFA franc (XOF).
   */
  XOF = 'XOF',
  
  /**
   * Yemeni Rial (YER).
   */
  YER = 'YER',
  
  /**
   * Zambian Kwacha (ZMW).
   */
  ZMW = 'ZMW',
  
  /**
   * Belarusian Ruble (BYR).
   * @deprecated `BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.
   */
  BYR = 'BYR',
  
  /**
   * Sao Tome And Principe Dobra (STD).
   * @deprecated `STD` is deprecated. Use `STN` available from version `2022-07` onwards instead.
   */
  STD = 'STD',
  
  /**
   * Sao Tome And Principe Dobra (STN).
   */
  STN = 'STN',
  
  /**
   * Venezuelan Bolivares (VED).
   */
  VED = 'VED',
  
  /**
   * Venezuelan Bolivares (VEF).
   * @deprecated `VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.
   */
  VEF = 'VEF',
  
  /**
   * Unrecognized currency.
   */
  XXX = 'XXX'
}

/**
 * Represents an image resource.
 */
export interface Image extends HasMetafields {
  
  /**
   * A word or phrase to share the nature or contents of an image.
   */
  altText?: string;
  
  /**
   * The original height of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
   */
  height?: number;
  
  /**
   * A unique ID for the image.
   */
  id?: string;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * The location of the original image as a URL.
   * 
   * If there are any existing transformations in the original source URL, they will remain and not be stripped.
   * 
   * @deprecated Use `url` instead.
   */
  originalSrc: URL;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * The location of the image as a URL.
   * @deprecated Use `url` instead.
   */
  src: URL;
  
  /**
   * The location of the transformed image as a URL.
   * 
   * All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
   * Otherwise any transformations which an image type doesn't support will be ignored.
   * 
   * @deprecated Use `url(transform:)` instead
   */
  transformedSrc: URL;
  
  /**
   * The location of the image as a URL.
   * 
   * If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
   * 
   * All transformation options are considered "best-effort". Any transformation that the original image type doesn't support will be ignored.
   * 
   * If you need multiple variations of the same image, then you can use [GraphQL aliases](https://graphql.org/learn/queries/#aliases).
   * 
   */
  url: URL;
  
  /**
   * The original width of the image in pixels. Returns `null` if the image isn't hosted by Shopify.
   */
  width?: number;
}

/**
 * Represents information about the metafields associated to the specified resource.
 */
export interface HasMetafields {
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
}

/** Use this to resolve interface type HasMetafields */
export type PossibleHasMetafieldsTypeNames =
'Image' |
'Collection' |
'Market' |
'ProductVariant' |
'Product' |
'AppInstallation' |
'Location' |
'MediaImage' |
'Customer' |
'Company' |
'DraftOrder' |
'Order' |
'CompanyLocation' |
'DeliveryCustomization' |
'DiscountAutomaticNode' |
'DiscountCodeNode' |
'DiscountNode' |
'PaymentCustomization' |
'Shop' |
'CartTransform' |
'CustomerSegmentMember' |
'FulfillmentConstraintRule' |
'Validation';

export interface HasMetafieldsNameMap {
  HasMetafields: HasMetafields;
  Image: Image;
  Collection: Collection;
  Market: Market;
  ProductVariant: ProductVariant;
  Product: Product;
  AppInstallation: AppInstallation;
  Location: Location;
  MediaImage: MediaImage;
  Customer: Customer;
  Company: Company;
  DraftOrder: DraftOrder;
  Order: Order;
  CompanyLocation: CompanyLocation;
  DeliveryCustomization: DeliveryCustomization;
  DiscountAutomaticNode: DiscountAutomaticNode;
  DiscountCodeNode: DiscountCodeNode;
  DiscountNode: DiscountNode;
  PaymentCustomization: PaymentCustomization;
  Shop: Shop;
  CartTransform: CartTransform;
  CustomerSegmentMember: CustomerSegmentMember;
  FulfillmentConstraintRule: FulfillmentConstraintRule;
  Validation: Validation;
}

/**
 * Metafields enable you to attach additional information to a Shopify resource, such as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
 * For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
 * Some examples of the data that metafields enable you to store are specifications, size charts, downloadable documents, release dates, images, or part numbers.
 * Metafields are identified by an owner resource, namespace, and key. and store a value along with type information for that value.
 * 
 */
export interface Metafield extends LegacyInteroperability, Node {
  
  /**
   * The date and time when the metafield was created.
   */
  createdAt: DateTime;
  
  /**
   * The metafield definition that the metafield belongs to, if any.
   */
  definition?: MetafieldDefinition;
  
  /**
   * The description of the metafield.
   */
  description?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The unique identifier for the metafield within its namespace.
   */
  key: string;
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
  
  /**
   * The container for a group of metafields that the metafield is associated with.
   * 
   */
  namespace: string;
  
  /**
   * The resource that the metafield is attached to.
   */
  owner: HasMetafields;
  
  /**
   * The type of resource that the metafield is attached to.
   * 
   */
  ownerType: MetafieldOwnerType;
  
  /**
   * Returns a reference object if the metafield definition's type is a resource reference.
   */
  reference?: MetafieldReference;
  
  /**
   * A list of reference objects if the metafield's type is a resource reference list.
   */
  references?: MetafieldReferenceConnection;
  
  /**
   * The type of data that is stored in the metafield.
   * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
   * 
   */
  type: string;
  
  /**
   * The date and time when the metafield was updated.
   */
  updatedAt: DateTime;
  
  /**
   * The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
   * 
   */
  value: string;
}

/**
 * Interoperability metadata for types that directly correspond to a REST Admin API resource.
 * For example, on the Product type, LegacyInteroperability returns metadata for the corresponding [Product object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the REST Admin API.
 * 
 */
export interface LegacyInteroperability {
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
}

/** Use this to resolve interface type LegacyInteroperability */
export type PossibleLegacyInteroperabilityTypeNames =
'Metafield' |
'ProductVariant' |
'Product' |
'Location' |
'InventoryItem' |
'Customer' |
'DraftOrder' |
'Order' |
'MarketingEvent' |
'Refund' |
'Fulfillment' |
'SavedSearch' |
'PriceRule' |
'ShopifyPaymentsDispute' |
'MetafieldStorefrontVisibility' |
'ScriptTag' |
'ShopifyPaymentsPayout' |
'WebhookSubscription';

export interface LegacyInteroperabilityNameMap {
  LegacyInteroperability: LegacyInteroperability;
  Metafield: Metafield;
  ProductVariant: ProductVariant;
  Product: Product;
  Location: Location;
  InventoryItem: InventoryItem;
  Customer: Customer;
  DraftOrder: DraftOrder;
  Order: Order;
  MarketingEvent: MarketingEvent;
  Refund: Refund;
  Fulfillment: Fulfillment;
  SavedSearch: SavedSearch;
  PriceRule: PriceRule;
  ShopifyPaymentsDispute: ShopifyPaymentsDispute;
  MetafieldStorefrontVisibility: MetafieldStorefrontVisibility;
  ScriptTag: ScriptTag;
  ShopifyPaymentsPayout: ShopifyPaymentsPayout;
  WebhookSubscription: WebhookSubscription;
}

/**
 * An unsigned 64-bit integer. Represents whole numeric values between 0 and 2^64 - 1 encoded as a string of base-10 digits.
 * 
 * Example value: `"50"`.
 * 
 */
export type UnsignedInt64 = any;

/**
 * Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date and time string.
 * For example, 3:50 pm on September 7, 2019 in the time zone of UTC (Coordinated Universal Time) is
 * represented as `"2019-09-07T15:50:00Z`".
 * 
 */
export type DateTime = any;

/**
 * Metafield definitions enable you to define additional validation constraints for metafields, and enable the
 * merchant to edit metafield values in context.
 * 
 */
export interface MetafieldDefinition extends Node {
  
  /**
   * The access settings associated with the metafield definition.
   */
  access: MetafieldAccess;
  
  /**
   * The description of the metafield definition.
   */
  description?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The unique identifier for the metafield definition within its namespace.
   */
  key: string;
  
  /**
   * The metafields that belong to the metafield definition.
   */
  metafields: MetafieldConnection;
  
  /**
   * The count of the metafields that belong to the metafield definition.
   */
  metafieldsCount: number;
  
  /**
   * The human-readable name of the metafield definition.
   */
  name: string;
  
  /**
   * The container for a group of metafields that the metafield definition is associated with.
   */
  namespace: string;
  
  /**
   * The resource type that the metafield definition is attached to.
   */
  ownerType: MetafieldOwnerType;
  
  /**
   * The position of the metafield definition in the pinned list.
   */
  pinnedPosition?: number;
  
  /**
   * The standard metafield definition template associated with the metafield definition.
   */
  standardTemplate?: StandardMetafieldDefinitionTemplate;
  
  /**
   * The type of data that each of the metafields that belong to the metafield definition will store.
   * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
   * 
   */
  type: MetafieldDefinitionType;
  
  /**
   * Whether the metafield definition can be used as a collection condition.
   */
  useAsCollectionCondition: boolean;
  
  /**
   * The validation status for the metafields that belong to the metafield definition.
   */
  validationStatus: MetafieldDefinitionValidationStatus;
  
  /**
   * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
   * the metafields that belong to the metafield definition. For example, for a metafield definition with the
   * type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
   * store dates after the specified minimum.
   * 
   */
  validations: Array<MetafieldDefinitionValidation>;
  
  /**
   * Whether each of the metafields that belong to the metafield definition are visible from the Storefront API.
   * 
   * @deprecated Use `access.storefront` instead.
   */
  visibleToStorefrontApi: boolean;
}

/**
 * The access settings for this metafield definition.
 */
export interface MetafieldAccess {
  
  /**
   * The default admin access setting used for the metafields under this definition.
   */
  admin?: MetafieldAdminAccess;
  
  /**
   * The explicit grants for this metafield definition, superseding the default admin access
   * for the specified grantees.
   * 
   */
  grants: Array<MetafieldAccessGrant>;
  
  /**
   * The storefront access setting used for the metafields under this definition.
   */
  storefront?: MetafieldStorefrontAccess;
}

/**
 * Possible admin access settings for metafields.
 */
export const enum MetafieldAdminAccess {
  
  /**
   * Owner gets full access. No one else has access rights.
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * Owner gets full access. All applications and the merchant have read-only access.
   */
  PUBLIC_READ = 'PUBLIC_READ',
  
  /**
   * Owner gets full access. The merchant has read-only access. No one else has access rights.
   */
  MERCHANT_READ = 'MERCHANT_READ',
  
  /**
   * Owner gets full access. The merchant has read and write access. No one else has access rights.
   */
  MERCHANT_READ_WRITE = 'MERCHANT_READ_WRITE'
}

/**
 * An explicit access grant for the metafields under this definition.
 * 
 */
export interface MetafieldAccessGrant {
  
  /**
   * The level of access the grantee has.
   */
  access: MetafieldGrantAccessLevel;
  
  /**
   * The grantee being granted access.
   */
  grantee: string;
}

/**
 * Possible access levels for explicit metafield access grants.
 */
export const enum MetafieldGrantAccessLevel {
  
  /**
   * Read metafield access.
   */
  READ = 'READ',
  
  /**
   * Read and write metafield access.
   */
  READ_WRITE = 'READ_WRITE'
}

/**
 * Defines how the metafields of a definition can be accessed in Storefront API surface areas, including Liquid and the GraphQL Storefront API.
 * 
 */
export const enum MetafieldStorefrontAccess {
  
  /**
   * Metafields are accessible in the GraphQL Storefront API and online store Liquid templates.
   */
  PUBLIC_READ = 'PUBLIC_READ',
  
  /**
   * Metafields are not accessible in any Storefront API surface area.
   */
  NONE = 'NONE'
}

/**
 * Possible metafield validation statuses.
 */
export const enum MetafieldValidationStatus {
  
  /**
   * Any validation status (valid or invalid).
   */
  ANY = 'ANY',
  
  /**
   * Valid (according to definition).
   */
  VALID = 'VALID',
  
  /**
   * Invalid (according to definition).
   */
  INVALID = 'INVALID'
}

/**
 * An auto-generated type for paginating through multiple Metafields.
 * 
 */
export interface MetafieldConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<MetafieldEdge>;
  
  /**
   * A list of the nodes contained in MetafieldEdge.
   */
  nodes: Array<Metafield>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Metafield and a cursor during pagination.
 * 
 */
export interface MetafieldEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of MetafieldEdge.
   */
  node: Metafield;
}

/**
 * Returns information about pagination in a connection, in accordance with the
 * [Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
 * For more information, please read our [GraphQL Pagination Usage Guide](https://shopify.dev/api/usage/pagination-graphql).
 * 
 */
export interface PageInfo {
  
  /**
   * The cursor corresponding to the last node in edges.
   */
  endCursor?: string;
  
  /**
   * Whether there are more pages to fetch following the current page.
   */
  hasNextPage: boolean;
  
  /**
   * Whether there are any pages prior to the current page.
   */
  hasPreviousPage: boolean;
  
  /**
   * The cursor corresponding to the first node in edges.
   */
  startCursor?: string;
}

/**
 * Possible types of a metafield's owner resource.
 */
export const enum MetafieldOwnerType {
  
  /**
   * The Api Permission metafield owner type.
   */
  API_PERMISSION = 'API_PERMISSION',
  
  /**
   * The Company metafield owner type.
   */
  COMPANY = 'COMPANY',
  
  /**
   * The Company Location metafield owner type.
   */
  COMPANY_LOCATION = 'COMPANY_LOCATION',
  
  /**
   * The Payment Customization metafield owner type.
   */
  PAYMENT_CUSTOMIZATION = 'PAYMENT_CUSTOMIZATION',
  
  /**
   * The Validation metafield owner type.
   */
  VALIDATION = 'VALIDATION',
  
  /**
   * The Customer metafield owner type.
   */
  CUSTOMER = 'CUSTOMER',
  
  /**
   * The Delivery Customization metafield owner type.
   */
  DELIVERY_CUSTOMIZATION = 'DELIVERY_CUSTOMIZATION',
  
  /**
   * The Draft Order metafield owner type.
   */
  DRAFTORDER = 'DRAFTORDER',
  
  /**
   * The Market metafield owner type.
   */
  MARKET = 'MARKET',
  
  /**
   * The Cart Transform metafield owner type.
   */
  CARTTRANSFORM = 'CARTTRANSFORM',
  
  /**
   * The Collection metafield owner type.
   */
  COLLECTION = 'COLLECTION',
  
  /**
   * The Media Image metafield owner type.
   */
  MEDIA_IMAGE = 'MEDIA_IMAGE',
  
  /**
   * The Product Image metafield owner type.
   * @deprecated `PRODUCTIMAGE` is deprecated. Use `MEDIA_IMAGE` instead.
   */
  PRODUCTIMAGE = 'PRODUCTIMAGE',
  
  /**
   * The Product metafield owner type.
   */
  PRODUCT = 'PRODUCT',
  
  /**
   * The Product Variant metafield owner type.
   */
  PRODUCTVARIANT = 'PRODUCTVARIANT',
  
  /**
   * The Article metafield owner type.
   */
  ARTICLE = 'ARTICLE',
  
  /**
   * The Blog metafield owner type.
   */
  BLOG = 'BLOG',
  
  /**
   * The Page metafield owner type.
   */
  PAGE = 'PAGE',
  
  /**
   * The Fulfillment Constraint Rule metafield owner type.
   */
  FULFILLMENT_CONSTRAINT_RULE = 'FULFILLMENT_CONSTRAINT_RULE',
  
  /**
   * The Order Routing Location Rule metafield owner type.
   */
  ORDER_ROUTING_LOCATION_RULE = 'ORDER_ROUTING_LOCATION_RULE',
  
  /**
   * The Discount metafield owner type.
   */
  DISCOUNT = 'DISCOUNT',
  
  /**
   * The Order metafield owner type.
   */
  ORDER = 'ORDER',
  
  /**
   * The Location metafield owner type.
   */
  LOCATION = 'LOCATION',
  
  /**
   * The Shop metafield owner type.
   */
  SHOP = 'SHOP'
}

/**
 * Standard metafield definition templates provide preset configurations to create metafield definitions.
 * Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.
 * 
 * Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
 * 
 */
export interface StandardMetafieldDefinitionTemplate extends Node {
  
  /**
   * The description of the standard metafield definition.
   */
  description?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The key owned by the definition after the definition has been activated.
   */
  key: string;
  
  /**
   * The human-readable name for the standard metafield definition.
   */
  name: string;
  
  /**
   * The namespace owned by the definition after the definition has been activated.
   */
  namespace: string;
  
  /**
   * The list of resource types that the standard metafield definition can be applied to.
   */
  ownerTypes: Array<MetafieldOwnerType>;
  
  /**
   * The associated [metafield definition type](https://shopify.dev/apps/metafields/definitions/types) that the metafield stores.
   */
  type: MetafieldDefinitionType;
  
  /**
   * The configured validations for the standard metafield definition.
   */
  validations: Array<MetafieldDefinitionValidation>;
  
  /**
   * Whether metafields for the definition are by default visible using the Storefront API.
   * 
   */
  visibleToStorefrontApi: boolean;
}

/**
 * A metafield definition type provides basic foundation and validation for a metafield.
 * 
 */
export interface MetafieldDefinitionType {
  
  /**
   * The category associated with the metafield definition type.
   */
  category: string;
  
  /**
   * The name of the type for the metafield definition.
   * See the list of [supported types](https://shopify.dev/apps/metafields/types).
   * 
   */
  name: string;
  
  /**
   * The supported validations for a metafield definition type.
   */
  supportedValidations: Array<MetafieldDefinitionSupportedValidation>;
  
  /**
   * Whether metafields without a definition can be migrated to a definition of this type.
   */
  supportsDefinitionMigrations: boolean;
  
  /**
   * The value type for a metafield created with this definition type.
   * @deprecated `valueType` is deprecated and `name` should be used for type information.
   */
  valueType: MetafieldValueType;
}

/**
 * The type and name for the optional validation configuration of a metafield.
 * 
 * For example, a supported validation might consist of a `max` name and a `number_integer` type.
 * This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
 * 
 */
export interface MetafieldDefinitionSupportedValidation {
  
  /**
   * The name of the metafield definition validation.
   */
  name: string;
  
  /**
   * The type of input for the validation.
   */
  type: string;
}

/**
 * Legacy type information for the stored value.
 * Replaced by `type`.
 * 
 */
export const enum MetafieldValueType {
  
  /**
   * A text field.
   */
  STRING = 'STRING',
  
  /**
   * A whole number.
   */
  INTEGER = 'INTEGER',
  
  /**
   * A JSON string.
   */
  JSON_STRING = 'JSON_STRING',
  
  /**
   * A `true` or `false` value.
   */
  BOOLEAN = 'BOOLEAN'
}

/**
 * A configured metafield definition validation.
 * 
 * For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
 * and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.
 * 
 * Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
 * 
 */
export interface MetafieldDefinitionValidation {
  
  /**
   * The validation name.
   */
  name: string;
  
  /**
   * The name for the metafield type of this validation.
   */
  type: string;
  
  /**
   * The validation value.
   */
  value?: string;
}

/**
 * Possible metafield definition validation statuses.
 */
export const enum MetafieldDefinitionValidationStatus {
  
  /**
   * All of this definition's metafields are valid.
   */
  ALL_VALID = 'ALL_VALID',
  
  /**
   * Asynchronous validation of this definition's metafields is in progress.
   */
  IN_PROGRESS = 'IN_PROGRESS',
  
  /**
   * Some of this definition's metafields are invalid.
   */
  SOME_INVALID = 'SOME_INVALID'
}

/**
 * The resource referenced by the metafield value.
 * 
 */
export type MetafieldReference =
Collection |
GenericFile |
MediaImage |
Metaobject |
OnlineStorePage |
Product |
ProductVariant |
Video;

/** Use this to resolve union type MetafieldReference */
export type PossibleMetafieldReferenceTypeNames =
'Collection' |
'GenericFile' |
'MediaImage' |
'Metaobject' |
'OnlineStorePage' |
'Product' |
'ProductVariant' |
'Video';

export interface MetafieldReferenceNameMap {
  MetafieldReference: MetafieldReference;
  Collection: Collection;
  GenericFile: GenericFile;
  MediaImage: MediaImage;
  Metaobject: Metaobject;
  OnlineStorePage: OnlineStorePage;
  Product: Product;
  ProductVariant: ProductVariant;
  Video: Video;
}

/**
 * Represents a group of products that can be displayed in online stores and other sales channels in categories, which makes it easy for customers to find them. For example, an athletics store might create different collections for running attire, shoes, and accessories.
 * 
 * Collections can be defined by conditions, such as whether they match certain product tags. These are called smart or automated collections.
 * 
 * Collections can also be created for a custom group of products. These are called custom or manual collections.
 * 
 */
export interface Collection extends HasMetafieldDefinitions, HasMetafields, HasPublishedTranslations, Node, Publishable {
  
  /**
   * The number of publications a resource is published to without feedback errors.
   */
  availablePublicationCount: number;
  
  /**
   * A single-line, text-only description of the collection, stripped of any HTML tags and formatting that were included in the description.
   * 
   */
  description: string;
  
  /**
   * The description of the collection, including any HTML tags and formatting. This content is typically displayed to customers, such as on an online store, depending on the theme.
   * 
   */
  descriptionHtml: HTML;
  
  /**
   * Information about the collection that's provided through resource feedback.
   */
  feedback?: ResourceFeedback;
  
  /**
   * A unique string that identifies the collection. If a handle isn't specified when a collection is created, it's automatically generated from the collection's original title, and typically includes words from the title separated by hyphens. For example, a collection that was created with the title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.
   * 
   * If the title is changed, the handle doesn't automatically change.
   * 
   * The handle can be used in themes by the Liquid templating language to refer to the collection, but using the ID is preferred because it never changes.
   * 
   */
  handle: string;
  
  /**
   * Whether the collection includes the specified product.
   */
  hasProduct: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The image associated with the collection.
   */
  image?: Image;
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafield definitions.
   */
  metafieldDefinitions: MetafieldDefinitionConnection;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * The products that are included in the collection.
   */
  products: ProductConnection;
  
  /**
   * The number of products in the collection.
   */
  productsCount: number;
  
  /**
   * The number of publications a resource is published on.
   */
  publicationCount: number;
  
  /**
   * The channels where the collection is published.
   * @deprecated Use `resourcePublications` instead.
   */
  publications: CollectionPublicationConnection;
  
  /**
   * Check to see whether the resource is published to a given channel.
   * @deprecated Use `publishedOnPublication` instead.
   */
  publishedOnChannel: boolean;
  
  /**
   * Check to see whether the resource is published to the calling app's channel.
   * @deprecated Use `publishedOnCurrentPublication` instead.
   */
  publishedOnCurrentChannel: boolean;
  
  /**
   * Check to see whether the resource is published to the calling app's publication.
   */
  publishedOnCurrentPublication: boolean;
  
  /**
   * Check to see whether the resource is published to a given publication.
   */
  publishedOnPublication: boolean;
  
  /**
   * The list of resources that are published to a publication.
   */
  resourcePublications: ResourcePublicationConnection;
  
  /**
   * The list of resources that are either published or staged to be published to a publication.
   */
  resourcePublicationsV2: ResourcePublicationV2Connection;
  
  /**
   * For a smart (automated) collection, specifies the rules that determine whether a product is included.
   * 
   */
  ruleSet?: CollectionRuleSet;
  
  /**
   * If the default SEO fields for page title and description have been modified, contains the modified information.
   * 
   */
  seo: SEO;
  
  /**
   * The order in which the products in the collection are displayed by default in the Shopify admin and in sales channels, such as an online store.
   * 
   */
  sortOrder: CollectionSortOrder;
  
  /**
   * The Storefront GraphQL API ID of the `Collection`.
   * 
   * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * 
   * @deprecated Use `id` instead.
   */
  storefrontId: StorefrontID;
  
  /**
   * The suffix of the Liquid template being used to show the collection in an online store. For example, if the value is `custom`, then the collection is using the `collection.custom.liquid` template. If the value is `null`, then the collection is using the default `collection.liquid` template.
   * 
   */
  templateSuffix?: string;
  
  /**
   * The name of the collection. It's displayed in the Shopify admin and is typically displayed in sales channels, such as an online store.
   * 
   */
  title: string;
  
  /**
   * The translations associated with the resource.
   */
  translations: Array<Translation>;
  
  /**
   * The list of channels that the resource is not published to.
   * @deprecated Use `unpublishedPublications` instead.
   */
  unpublishedChannels: ChannelConnection;
  
  /**
   * The list of publications that the resource is not published to.
   */
  unpublishedPublications: PublicationConnection;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.
   * 
   */
  updatedAt: DateTime;
}

/**
 * Resources that metafield definitions can be applied to.
 */
export interface HasMetafieldDefinitions {
  
  /**
   * List of metafield definitions.
   */
  metafieldDefinitions: MetafieldDefinitionConnection;
}

/** Use this to resolve interface type HasMetafieldDefinitions */
export type PossibleHasMetafieldDefinitionsTypeNames =
'Collection' |
'Market' |
'ProductVariant' |
'Product' |
'Location' |
'Customer' |
'Company' |
'Order' |
'CompanyLocation' |
'DeliveryCustomization' |
'DiscountAutomaticNode' |
'DiscountCodeNode' |
'DiscountNode' |
'PaymentCustomization' |
'Validation';

export interface HasMetafieldDefinitionsNameMap {
  HasMetafieldDefinitions: HasMetafieldDefinitions;
  Collection: Collection;
  Market: Market;
  ProductVariant: ProductVariant;
  Product: Product;
  Location: Location;
  Customer: Customer;
  Company: Company;
  Order: Order;
  CompanyLocation: CompanyLocation;
  DeliveryCustomization: DeliveryCustomization;
  DiscountAutomaticNode: DiscountAutomaticNode;
  DiscountCodeNode: DiscountCodeNode;
  DiscountNode: DiscountNode;
  PaymentCustomization: PaymentCustomization;
  Validation: Validation;
}

/**
 * Possible metafield definition pinned statuses.
 */
export const enum MetafieldDefinitionPinnedStatus {
  
  /**
   * All metafield definitions.
   */
  ANY = 'ANY',
  
  /**
   * Only metafield definitions that are pinned.
   */
  PINNED = 'PINNED',
  
  /**
   * Only metafield definitions that are not pinned.
   */
  UNPINNED = 'UNPINNED'
}

/**
 * The set of valid sort keys for the MetafieldDefinition query.
 */
export const enum MetafieldDefinitionSortKeys {
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by the `name` value.
   */
  NAME = 'NAME',
  
  /**
   * Sort by the `pinned_position` value.
   */
  PINNED_POSITION = 'PINNED_POSITION',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple MetafieldDefinitions.
 * 
 */
export interface MetafieldDefinitionConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<MetafieldDefinitionEdge>;
  
  /**
   * A list of the nodes contained in MetafieldDefinitionEdge.
   */
  nodes: Array<MetafieldDefinition>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.
 * 
 */
export interface MetafieldDefinitionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of MetafieldDefinitionEdge.
   */
  node: MetafieldDefinition;
}

/**
 * Published translations associated with the resource.
 */
export interface HasPublishedTranslations {
  
  /**
   * The translations associated with the resource.
   */
  translations: Array<Translation>;
}

/** Use this to resolve interface type HasPublishedTranslations */
export type PossibleHasPublishedTranslationsTypeNames =
'Collection' |
'ProductVariant' |
'Product' |
'Link' |
'ProductOption' |
'SellingPlanGroup' |
'SellingPlan' |
'OnlineStoreArticle' |
'OnlineStoreBlog' |
'OnlineStorePage' |
'Shop' |
'ShopPolicy';

export interface HasPublishedTranslationsNameMap {
  HasPublishedTranslations: HasPublishedTranslations;
  Collection: Collection;
  ProductVariant: ProductVariant;
  Product: Product;
  Link: Link;
  ProductOption: ProductOption;
  SellingPlanGroup: SellingPlanGroup;
  SellingPlan: SellingPlan;
  OnlineStoreArticle: OnlineStoreArticle;
  OnlineStoreBlog: OnlineStoreBlog;
  OnlineStorePage: OnlineStorePage;
  Shop: Shop;
  ShopPolicy: ShopPolicy;
}

/**
 * Translation of a field of a resource.
 */
export interface Translation {
  
  /**
   * On the resource that this translation belongs to, the reference to the value being translated.
   */
  key: string;
  
  /**
   * ISO code of the translation locale.
   */
  locale: string;
  
  /**
   * The market that the translation is specific to. Null value means the translation is available in all markets.
   */
  market?: Market;
  
  /**
   * Whether the original content has changed since this translation was updated.
   */
  outdated: boolean;
  
  /**
   * The date and time when the translation was updated.
   */
  updatedAt?: DateTime;
  
  /**
   * Translation value.
   */
  value?: string;
}

/**
 * A market is a group of one or more regions that you want to target for international sales.
 * By creating a market, you can configure a distinct, localized shopping experience for
 * customers from a specific area of the world. For example, you can
 * [change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
 * [configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
 * or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
 * 
 */
export interface Market extends HasMetafieldDefinitions, HasMetafields, Node {
  
  /**
   * The catalogs that belong to the market.
   */
  catalogs: MarketCatalogConnection;
  
  /**
   * The market’s currency settings.
   */
  currencySettings: MarketCurrencySettings;
  
  /**
   * Whether the market is enabled to receive visitors and sales. **Note**: Regions in inactive
   * markets can't be selected on the storefront or in checkout.
   * 
   */
  enabled: boolean;
  
  /**
   * A short, human-readable unique identifier for the market. This is changeable by the merchant.
   */
  handle: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafield definitions.
   */
  metafieldDefinitions: MetafieldDefinitionConnection;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * The name of the market. Not shown to customers.
   */
  name: string;
  
  /**
   * The market’s price list, which specifies a percentage-based price adjustment as well as
   * fixed price overrides for specific variants.
   * 
   */
  priceList?: PriceList;
  
  /**
   * Whether the market is the shop’s primary market.
   * 
   */
  primary: boolean;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * The regions that comprise the market.
   */
  regions: MarketRegionConnection;
  
  /**
   * The market’s web presence, which defines its SEO strategy. This can be a different domain,
   * subdomain, or subfolders of the primary domain. Each web presence comprises one or more
   * language variants. If a market doesn't have its own web presence, then the market is accessible on the
   * primary market's domains using [country
   * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
   * If it's the primary market and it has multiple web presences, then this field will return the primary domain web presence.
   * 
   */
  webPresence?: MarketWebPresence;
  
  /**
   * The market’s web presences, which defines its SEO strategy. This can be a different domain,
   * subdomain, or subfolders of the primary domain. Each web presence comprises one or more
   * language variants. If a market doesn't have any web presences, then the market is accessible on the
   * primary market's domains using [country
   * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
   * 
   */
  webPresences: MarketWebPresenceConnection;
}

/**
 * An auto-generated type for paginating through multiple MarketCatalogs.
 * 
 */
export interface MarketCatalogConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<MarketCatalogEdge>;
  
  /**
   * A list of the nodes contained in MarketCatalogEdge.
   */
  nodes: Array<MarketCatalog>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one MarketCatalog and a cursor during pagination.
 * 
 */
export interface MarketCatalogEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of MarketCatalogEdge.
   */
  node: MarketCatalog;
}

/**
 * A list of products with publishing and pricing information associated with markets.
 * 
 */
export interface MarketCatalog extends Catalog, Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The markets associated with the catalog.
   */
  markets: MarketConnection;
  
  /**
   * Most recent catalog operations.
   */
  operations: Array<ResourceOperation>;
  
  /**
   * The price list associated with the catalog.
   */
  priceList?: PriceList;
  
  /**
   * A group of products and collections that's published to a catalog.
   */
  publication?: Publication;
  
  /**
   * The status of the catalog.
   */
  status: CatalogStatus;
  
  /**
   * The name of the catalog.
   */
  title: string;
}

/**
 * A list of products with publishing and pricing information.
 * A catalog can be associated with a specific context, such as a [`Market`](https://shopify.dev/api/admin-graphql/current/objects/market), [`CompanyLocation`](https://shopify.dev/api/admin-graphql/current/objects/companylocation), or [`App`](https://shopify.dev/api/admin-graphql/current/objects/app).
 * 
 */
export interface Catalog {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Most recent catalog operations.
   */
  operations: Array<ResourceOperation>;
  
  /**
   * The price list associated with the catalog.
   */
  priceList?: PriceList;
  
  /**
   * A group of products and collections that's published to a catalog.
   */
  publication?: Publication;
  
  /**
   * The status of the catalog.
   */
  status: CatalogStatus;
  
  /**
   * The name of the catalog.
   */
  title: string;
}

/** Use this to resolve interface type Catalog */
export type PossibleCatalogTypeNames =
'MarketCatalog' |
'AppCatalog' |
'CompanyLocationCatalog';

export interface CatalogNameMap {
  Catalog: Catalog;
  MarketCatalog: MarketCatalog;
  AppCatalog: AppCatalog;
  CompanyLocationCatalog: CompanyLocationCatalog;
}

/**
 * Represents a merchandising background operation interface.
 */
export interface ResourceOperation {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The count of processed rows, summing imported, failed, and skipped rows.
   */
  processedRowCount?: number;
  
  /**
   * Represents a rows objects within this background operation.
   */
  rowCount?: RowCount;
  
  /**
   * The status of this operation.
   */
  status: ResourceOperationStatus;
}

/** Use this to resolve interface type ResourceOperation */
export type PossibleResourceOperationTypeNames =
'AddAllProductsOperation' |
'CatalogCsvOperation' |
'PublicationResourceOperation';

export interface ResourceOperationNameMap {
  ResourceOperation: ResourceOperation;
  AddAllProductsOperation: AddAllProductsOperation;
  CatalogCsvOperation: CatalogCsvOperation;
  PublicationResourceOperation: PublicationResourceOperation;
}

/**
 * A row count represents rows on background operation.
 */
export interface RowCount {
  
  /**
   * Estimated number of rows contained within this background operation.
   */
  count: number;
  
  /**
   * Whether the operation exceeds max number of reportable rows.
   */
  exceedsMax: boolean;
}

/**
 * Represents the state of this catalog operation.
 */
export const enum ResourceOperationStatus {
  
  /**
   * Operation has been created.
   */
  CREATED = 'CREATED',
  
  /**
   * Operation is currently running.
   */
  ACTIVE = 'ACTIVE',
  
  /**
   * Operation is complete.
   */
  COMPLETE = 'COMPLETE'
}

/**
 * Represents a price list, including information about related prices and eligibility rules.
 * You can use price lists to specify either fixed prices or adjusted relative prices that
 * override initial product variant prices. Price lists are applied to customers
 * using context rules, which determine price list eligibility.
 * 
 *   For more information on price lists, refer to
 *   [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 * 
 */
export interface PriceList extends Node {
  
  /**
   * The catalog that the price list is associated with.
   */
  catalog?: Catalog;
  
  /**
   * The currency for fixed prices associated with this price list.
   */
  currency: CurrencyCode;
  
  /**
   * The number of fixed prices on the price list.
   */
  fixedPricesCount: number;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The unique name of the price list, used as a human-readable identifier.
   */
  name: string;
  
  /**
   * Relative adjustments to other prices.
   */
  parent?: PriceListParent;
  
  /**
   * A list of prices associated with the price list.
   */
  prices: PriceListPriceConnection;
  
  /**
   * A list of quantity rules associated with the price list, ordered by product variants.
   */
  quantityRules: QuantityRuleConnection;
}

/**
 * Represents relative adjustments from one price list to other prices.
 *   You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based
 *   adjustment. Adjusted prices work in conjunction with exchange rules and rounding.
 * 
 *   [Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)
 *   support both percentage increases and decreases.
 * 
 */
export interface PriceListParent {
  
  /**
   * A price list adjustment.
   */
  adjustment: PriceListAdjustment;
  
  /**
   * A price list's settings for adjustment.
   */
  settings: PriceListAdjustmentSettings;
}

/**
 * The type and value of a price list adjustment.
 * 
 * For more information on price lists, refer to
 * [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
 * 
 */
export interface PriceListAdjustment {
  
  /**
   * The type of price adjustment, such as percentage increase or decrease.
   */
  type: PriceListAdjustmentType;
  
  /**
   * The value of price adjustment, where positive numbers reduce the prices and negative numbers
   * increase them.
   * 
   */
  value: number;
}

/**
 * Represents a percentage price adjustment type.
 */
export const enum PriceListAdjustmentType {
  
  /**
   * Percentage decrease type. Prices will have a lower value.
   */
  PERCENTAGE_DECREASE = 'PERCENTAGE_DECREASE',
  
  /**
   * Percentage increase type. Prices will have a higher value.
   */
  PERCENTAGE_INCREASE = 'PERCENTAGE_INCREASE'
}

/**
 * Represents the settings of price list adjustments.
 */
export interface PriceListAdjustmentSettings {
  
  /**
   * The type of price list adjustment setting for compare at price.
   */
  compareAtMode: PriceListCompareAtMode;
}

/**
 * Represents how the compare at price will be determined for a price list.
 */
export const enum PriceListCompareAtMode {
  
  /**
   * The compare at price is adjusted based on percentage specified in price list.
   */
  ADJUSTED = 'ADJUSTED',
  
  /**
   * The compare at prices are set to `null` unless explicitly defined by a fixed price value.
   */
  NULLIFY = 'NULLIFY'
}

/**
 * Represents the origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration).
 * 
 */
export const enum PriceListPriceOriginType {
  
  /**
   * The price is defined on the price list.
   */
  FIXED = 'FIXED',
  
  /**
   * The price is relative to the adjustment type and value.
   */
  RELATIVE = 'RELATIVE'
}

/**
 * An auto-generated type for paginating through multiple PriceListPrices.
 * 
 */
export interface PriceListPriceConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<PriceListPriceEdge>;
  
  /**
   * A list of the nodes contained in PriceListPriceEdge.
   */
  nodes: Array<PriceListPrice>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one PriceListPrice and a cursor during pagination.
 * 
 */
export interface PriceListPriceEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of PriceListPriceEdge.
   */
  node: PriceListPrice;
}

/**
 * Represents information about pricing for a product variant
 *         as defined on a price list, such as the price, compare at price, and origin type. You can use a PriceListPrice to specify a fixed price for a specific product variant.
 */
export interface PriceListPrice {
  
  /**
   * The compare-at price of the product variant on this price list.
   */
  compareAtPrice?: MoneyV2;
  
  /**
   * The origin of a price, either fixed (defined on the price list) or relative (calculated using a price list adjustment configuration).
   * 
   */
  originType: PriceListPriceOriginType;
  
  /**
   * The price of the product variant on this price list.
   */
  price: MoneyV2;
  
  /**
   * A list of quantity breaks for the product variant.
   */
  quantityPriceBreaks: QuantityPriceBreakConnection;
  
  /**
   * The product variant associated with this price.
   */
  variant: ProductVariant;
}

/**
 * The set of valid sort keys for the QuantityPriceBreak query.
 */
export const enum QuantityPriceBreakSortKeys {
  
  /**
   * Sort by the `minimum_quantity` value.
   */
  MINIMUM_QUANTITY = 'MINIMUM_QUANTITY',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple QuantityPriceBreaks.
 * 
 */
export interface QuantityPriceBreakConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<QuantityPriceBreakEdge>;
  
  /**
   * A list of the nodes contained in QuantityPriceBreakEdge.
   */
  nodes: Array<QuantityPriceBreak>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one QuantityPriceBreak and a cursor during pagination.
 * 
 */
export interface QuantityPriceBreakEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of QuantityPriceBreakEdge.
   */
  node: QuantityPriceBreak;
}

/**
 * Quantity price breaks lets you offer different rates that are based on the
 * amount of a specific variant being ordered.
 * 
 */
export interface QuantityPriceBreak extends Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Minimum quantity required to reach new quantity break price.
   */
  minimumQuantity: number;
  
  /**
   * The price of variant after reaching the minimum quanity.
   */
  price: MoneyV2;
  
  /**
   * The price list associated with this quantity break.
   * 
   */
  priceList: PriceList;
  
  /**
   * The product variant associated with this quantity break.
   */
  variant: ProductVariant;
}

/**
 * Represents a product variant.
 */
export interface ProductVariant extends HasMetafieldDefinitions, HasMetafields, HasPublishedTranslations, LegacyInteroperability, Navigable, Node {
  
  /**
   * Whether the product variant is available for sale.
   */
  availableForSale: boolean;
  
  /**
   * The value of the barcode associated with the product.
   */
  barcode?: string;
  
  /**
   * The compare-at price of the variant in the default shop currency.
   */
  compareAtPrice?: Money;
  
  /**
   * The pricing that applies for a customer in a given context.
   */
  contextualPricing: ProductVariantContextualPricing;
  
  /**
   * The date and time when the variant was created.
   */
  createdAt: DateTime;
  
  /**
   * A default cursor that returns the single next record, sorted ascending by ID.
   * 
   */
  defaultCursor: string;
  
  /**
   * The delivery profile for the variant.
   */
  deliveryProfile?: DeliveryProfile;
  
  /**
   * Display name of the variant, based on product's title + variant's title.
   */
  displayName: string;
  
  /**
   * The fulfillment service that stocks a product variant.
   * 
   * This is a third-party fulfillment service if the following conditions are met:
   * - The product variant is stocked by a single fulfillment service.
   * - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
   * - The fulfillment service hasn't [opted into SKU sharing](/api/admin-graphql/latest/objects/FulfillmentService#field-fulfillmentservice-permitsskusharing).
   * 
   * If the conditions aren't met, then the fulfillment service has the `manual` handle.
   * 
   * @deprecated 
   * The [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [inventoryItem field](/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryitem) if you need to determine where a product variant is stocked.
   * 
   * If you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available.
   * 
   * Learn more about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states).
   * 
   */
  fulfillmentService?: FulfillmentService;
  
  /**
   * Whether changes to the fulfillment service for the product variant are allowed.
   * @deprecated The [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services. 
   * As a result, the fulfillment_service is no longer directly editable on a ProductVariant and this field is no longer applicable.
   * 
   */
  fulfillmentServiceEditable: EditableProperty;
  
  /**
   * The Harmonized System Code (or HS Tariff Code) for the variant.
   * @deprecated Use `InventoryItem.harmonizedSystemCode` instead.
   */
  harmonizedSystemCode?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The featured image for the variant.
   */
  image?: Image;
  
  /**
   * The inventory item, which is used to query for inventory information.
   */
  inventoryItem: InventoryItem;
  
  /**
   * The fulfillment service that tracks the number of items in stock for the product variant.
   * @deprecated Use tracked attribute on `inventoryItem` instead.
   */
  inventoryManagement: ProductVariantInventoryManagement;
  
  /**
   * Whether customers are allowed to place an order for the product variant when it's out of stock.
   */
  inventoryPolicy: ProductVariantInventoryPolicy;
  
  /**
   * The total sellable quantity of the variant.
   */
  inventoryQuantity?: number;
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
  
  /**
   * The media associated with the product variant.
   */
  media: MediaConnection;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafield definitions.
   */
  metafieldDefinitions: MetafieldDefinitionConnection;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * The order of the product variant in the list of product variants. The first position in the list is 1.
   * 
   */
  position: number;
  
  /**
   * List of prices and compare-at prices in the presentment currencies for this shop.
   * @deprecated Use `contextualPricing` instead.
   */
  presentmentPrices: ProductVariantPricePairConnection;
  
  /**
   * The price of the product variant in the default shop currency.
   */
  price: Money;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * The product that this variant belongs to.
   */
  product: Product;
  
  /**
   * A list of the product variant components.
   */
  productVariantComponents: ProductVariantComponentConnection;
  
  /**
   * Whether a product variant requires components. The default value is `false`.
   * If `true`, then the product variant can only be purchased as a parent bundle with components and it will be omitted
   * from channels that don't support bundles.
   * 
   */
  requiresComponents: boolean;
  
  /**
   * Whether a customer needs to provide a shipping address when placing an order for the product variant.
   * 
   * @deprecated Use `InventoryItem.requiresShipping` instead.
   */
  requiresShipping: boolean;
  
  /**
   * List of product options applied to the variant.
   */
  selectedOptions: Array<SelectedOption>;
  
  /**
   * The total sellable quantity of the variant for online channels.
   * This doesn't represent the total available inventory or capture
   * [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
   * 
   */
  sellableOnlineQuantity: number;
  
  /**
   * Count of selling plan groups associated with the product variant.
   */
  sellingPlanGroupCount: number;
  
  /**
   * A list of all selling plan groups defined in the current shop associated with the product variant.
   */
  sellingPlanGroups: SellingPlanGroupConnection;
  
  /**
   * A case-sensitive identifier for the product variant in the shop.
   * Required in order to connect to a fulfillment service.
   * 
   */
  sku?: string;
  
  /**
   * The Storefront GraphQL API ID of the `ProductVariant`.
   * 
   * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * 
   * @deprecated Use `id` instead.
   */
  storefrontId: StorefrontID;
  
  /**
   * The tax code for the product variant.
   */
  taxCode?: string;
  
  /**
   * Whether a tax is charged when the product variant is sold.
   */
  taxable: boolean;
  
  /**
   * The title of the product variant.
   */
  title: string;
  
  /**
   * The translations associated with the resource.
   */
  translations: Array<Translation>;
  
  /**
   * The date and time (ISO 8601 format) when the product variant was last modified.
   * 
   */
  updatedAt: DateTime;
  
  /**
   * The weight of the product variant in the unit system specified with weight_unit.
   * @deprecated Use InventoryItem.measurement.weight instead
   */
  weight?: number;
  
  /**
   * The unit of measurement that applies to the product variant's weight. If you don't specify a value for weight_unit, then the shop's default unit of measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.
   * 
   * @deprecated Use InventoryItem.measurement.weight instead
   */
  weightUnit: WeightUnit;
}

/**
 * A monetary value string without a currency symbol or code. Example value: `"100.57"`.
 */
export type Money = any;

/**
 * The input fields for the context data that determines the pricing of a variant.
 */
export interface ContextualPricingContext {
  
  /**
   * The country code used to fetch country-specific prices.
   */
  country?: CountryCode;
  
  /**
   * The CompanyLocation ID used to fetch company location specific prices.
   * 
   */
  companyLocationId?: string;
}

/**
 * The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
 * If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
 * of another country. For example, the territories associated with Spain are represented by the country code `ES`,
 * and the territories associated with the United States of America are represented by the country code `US`.
 * 
 */
export const enum CountryCode {
  
  /**
   * Afghanistan.
   */
  AF = 'AF',
  
  /**
   * Åland Islands.
   */
  AX = 'AX',
  
  /**
   * Albania.
   */
  AL = 'AL',
  
  /**
   * Algeria.
   */
  DZ = 'DZ',
  
  /**
   * Andorra.
   */
  AD = 'AD',
  
  /**
   * Angola.
   */
  AO = 'AO',
  
  /**
   * Anguilla.
   */
  AI = 'AI',
  
  /**
   * Antigua & Barbuda.
   */
  AG = 'AG',
  
  /**
   * Argentina.
   */
  AR = 'AR',
  
  /**
   * Armenia.
   */
  AM = 'AM',
  
  /**
   * Aruba.
   */
  AW = 'AW',
  
  /**
   * Ascension Island.
   */
  AC = 'AC',
  
  /**
   * Australia.
   */
  AU = 'AU',
  
  /**
   * Austria.
   */
  AT = 'AT',
  
  /**
   * Azerbaijan.
   */
  AZ = 'AZ',
  
  /**
   * Bahamas.
   */
  BS = 'BS',
  
  /**
   * Bahrain.
   */
  BH = 'BH',
  
  /**
   * Bangladesh.
   */
  BD = 'BD',
  
  /**
   * Barbados.
   */
  BB = 'BB',
  
  /**
   * Belarus.
   */
  BY = 'BY',
  
  /**
   * Belgium.
   */
  BE = 'BE',
  
  /**
   * Belize.
   */
  BZ = 'BZ',
  
  /**
   * Benin.
   */
  BJ = 'BJ',
  
  /**
   * Bermuda.
   */
  BM = 'BM',
  
  /**
   * Bhutan.
   */
  BT = 'BT',
  
  /**
   * Bolivia.
   */
  BO = 'BO',
  
  /**
   * Bosnia & Herzegovina.
   */
  BA = 'BA',
  
  /**
   * Botswana.
   */
  BW = 'BW',
  
  /**
   * Bouvet Island.
   */
  BV = 'BV',
  
  /**
   * Brazil.
   */
  BR = 'BR',
  
  /**
   * British Indian Ocean Territory.
   */
  IO = 'IO',
  
  /**
   * Brunei.
   */
  BN = 'BN',
  
  /**
   * Bulgaria.
   */
  BG = 'BG',
  
  /**
   * Burkina Faso.
   */
  BF = 'BF',
  
  /**
   * Burundi.
   */
  BI = 'BI',
  
  /**
   * Cambodia.
   */
  KH = 'KH',
  
  /**
   * Canada.
   */
  CA = 'CA',
  
  /**
   * Cape Verde.
   */
  CV = 'CV',
  
  /**
   * Caribbean Netherlands.
   */
  BQ = 'BQ',
  
  /**
   * Cayman Islands.
   */
  KY = 'KY',
  
  /**
   * Central African Republic.
   */
  CF = 'CF',
  
  /**
   * Chad.
   */
  TD = 'TD',
  
  /**
   * Chile.
   */
  CL = 'CL',
  
  /**
   * China.
   */
  CN = 'CN',
  
  /**
   * Christmas Island.
   */
  CX = 'CX',
  
  /**
   * Cocos (Keeling) Islands.
   */
  CC = 'CC',
  
  /**
   * Colombia.
   */
  CO = 'CO',
  
  /**
   * Comoros.
   */
  KM = 'KM',
  
  /**
   * Congo - Brazzaville.
   */
  CG = 'CG',
  
  /**
   * Congo - Kinshasa.
   */
  CD = 'CD',
  
  /**
   * Cook Islands.
   */
  CK = 'CK',
  
  /**
   * Costa Rica.
   */
  CR = 'CR',
  
  /**
   * Croatia.
   */
  HR = 'HR',
  
  /**
   * Cuba.
   */
  CU = 'CU',
  
  /**
   * Curaçao.
   */
  CW = 'CW',
  
  /**
   * Cyprus.
   */
  CY = 'CY',
  
  /**
   * Czechia.
   */
  CZ = 'CZ',
  
  /**
   * Côte d’Ivoire.
   */
  CI = 'CI',
  
  /**
   * Denmark.
   */
  DK = 'DK',
  
  /**
   * Djibouti.
   */
  DJ = 'DJ',
  
  /**
   * Dominica.
   */
  DM = 'DM',
  
  /**
   * Dominican Republic.
   */
  DO = 'DO',
  
  /**
   * Ecuador.
   */
  EC = 'EC',
  
  /**
   * Egypt.
   */
  EG = 'EG',
  
  /**
   * El Salvador.
   */
  SV = 'SV',
  
  /**
   * Equatorial Guinea.
   */
  GQ = 'GQ',
  
  /**
   * Eritrea.
   */
  ER = 'ER',
  
  /**
   * Estonia.
   */
  EE = 'EE',
  
  /**
   * Eswatini.
   */
  SZ = 'SZ',
  
  /**
   * Ethiopia.
   */
  ET = 'ET',
  
  /**
   * Falkland Islands.
   */
  FK = 'FK',
  
  /**
   * Faroe Islands.
   */
  FO = 'FO',
  
  /**
   * Fiji.
   */
  FJ = 'FJ',
  
  /**
   * Finland.
   */
  FI = 'FI',
  
  /**
   * France.
   */
  FR = 'FR',
  
  /**
   * French Guiana.
   */
  GF = 'GF',
  
  /**
   * French Polynesia.
   */
  PF = 'PF',
  
  /**
   * French Southern Territories.
   */
  TF = 'TF',
  
  /**
   * Gabon.
   */
  GA = 'GA',
  
  /**
   * Gambia.
   */
  GM = 'GM',
  
  /**
   * Georgia.
   */
  GE = 'GE',
  
  /**
   * Germany.
   */
  DE = 'DE',
  
  /**
   * Ghana.
   */
  GH = 'GH',
  
  /**
   * Gibraltar.
   */
  GI = 'GI',
  
  /**
   * Greece.
   */
  GR = 'GR',
  
  /**
   * Greenland.
   */
  GL = 'GL',
  
  /**
   * Grenada.
   */
  GD = 'GD',
  
  /**
   * Guadeloupe.
   */
  GP = 'GP',
  
  /**
   * Guatemala.
   */
  GT = 'GT',
  
  /**
   * Guernsey.
   */
  GG = 'GG',
  
  /**
   * Guinea.
   */
  GN = 'GN',
  
  /**
   * Guinea-Bissau.
   */
  GW = 'GW',
  
  /**
   * Guyana.
   */
  GY = 'GY',
  
  /**
   * Haiti.
   */
  HT = 'HT',
  
  /**
   * Heard & McDonald Islands.
   */
  HM = 'HM',
  
  /**
   * Vatican City.
   */
  VA = 'VA',
  
  /**
   * Honduras.
   */
  HN = 'HN',
  
  /**
   * Hong Kong SAR.
   */
  HK = 'HK',
  
  /**
   * Hungary.
   */
  HU = 'HU',
  
  /**
   * Iceland.
   */
  IS = 'IS',
  
  /**
   * India.
   */
  IN = 'IN',
  
  /**
   * Indonesia.
   */
  ID = 'ID',
  
  /**
   * Iran.
   */
  IR = 'IR',
  
  /**
   * Iraq.
   */
  IQ = 'IQ',
  
  /**
   * Ireland.
   */
  IE = 'IE',
  
  /**
   * Isle of Man.
   */
  IM = 'IM',
  
  /**
   * Israel.
   */
  IL = 'IL',
  
  /**
   * Italy.
   */
  IT = 'IT',
  
  /**
   * Jamaica.
   */
  JM = 'JM',
  
  /**
   * Japan.
   */
  JP = 'JP',
  
  /**
   * Jersey.
   */
  JE = 'JE',
  
  /**
   * Jordan.
   */
  JO = 'JO',
  
  /**
   * Kazakhstan.
   */
  KZ = 'KZ',
  
  /**
   * Kenya.
   */
  KE = 'KE',
  
  /**
   * Kiribati.
   */
  KI = 'KI',
  
  /**
   * North Korea.
   */
  KP = 'KP',
  
  /**
   * Kosovo.
   */
  XK = 'XK',
  
  /**
   * Kuwait.
   */
  KW = 'KW',
  
  /**
   * Kyrgyzstan.
   */
  KG = 'KG',
  
  /**
   * Laos.
   */
  LA = 'LA',
  
  /**
   * Latvia.
   */
  LV = 'LV',
  
  /**
   * Lebanon.
   */
  LB = 'LB',
  
  /**
   * Lesotho.
   */
  LS = 'LS',
  
  /**
   * Liberia.
   */
  LR = 'LR',
  
  /**
   * Libya.
   */
  LY = 'LY',
  
  /**
   * Liechtenstein.
   */
  LI = 'LI',
  
  /**
   * Lithuania.
   */
  LT = 'LT',
  
  /**
   * Luxembourg.
   */
  LU = 'LU',
  
  /**
   * Macao SAR.
   */
  MO = 'MO',
  
  /**
   * Madagascar.
   */
  MG = 'MG',
  
  /**
   * Malawi.
   */
  MW = 'MW',
  
  /**
   * Malaysia.
   */
  MY = 'MY',
  
  /**
   * Maldives.
   */
  MV = 'MV',
  
  /**
   * Mali.
   */
  ML = 'ML',
  
  /**
   * Malta.
   */
  MT = 'MT',
  
  /**
   * Martinique.
   */
  MQ = 'MQ',
  
  /**
   * Mauritania.
   */
  MR = 'MR',
  
  /**
   * Mauritius.
   */
  MU = 'MU',
  
  /**
   * Mayotte.
   */
  YT = 'YT',
  
  /**
   * Mexico.
   */
  MX = 'MX',
  
  /**
   * Moldova.
   */
  MD = 'MD',
  
  /**
   * Monaco.
   */
  MC = 'MC',
  
  /**
   * Mongolia.
   */
  MN = 'MN',
  
  /**
   * Montenegro.
   */
  ME = 'ME',
  
  /**
   * Montserrat.
   */
  MS = 'MS',
  
  /**
   * Morocco.
   */
  MA = 'MA',
  
  /**
   * Mozambique.
   */
  MZ = 'MZ',
  
  /**
   * Myanmar (Burma).
   */
  MM = 'MM',
  
  /**
   * Namibia.
   */
  NA = 'NA',
  
  /**
   * Nauru.
   */
  NR = 'NR',
  
  /**
   * Nepal.
   */
  NP = 'NP',
  
  /**
   * Netherlands.
   */
  NL = 'NL',
  
  /**
   * Netherlands Antilles.
   */
  AN = 'AN',
  
  /**
   * New Caledonia.
   */
  NC = 'NC',
  
  /**
   * New Zealand.
   */
  NZ = 'NZ',
  
  /**
   * Nicaragua.
   */
  NI = 'NI',
  
  /**
   * Niger.
   */
  NE = 'NE',
  
  /**
   * Nigeria.
   */
  NG = 'NG',
  
  /**
   * Niue.
   */
  NU = 'NU',
  
  /**
   * Norfolk Island.
   */
  NF = 'NF',
  
  /**
   * North Macedonia.
   */
  MK = 'MK',
  
  /**
   * Norway.
   */
  NO = 'NO',
  
  /**
   * Oman.
   */
  OM = 'OM',
  
  /**
   * Pakistan.
   */
  PK = 'PK',
  
  /**
   * Palestinian Territories.
   */
  PS = 'PS',
  
  /**
   * Panama.
   */
  PA = 'PA',
  
  /**
   * Papua New Guinea.
   */
  PG = 'PG',
  
  /**
   * Paraguay.
   */
  PY = 'PY',
  
  /**
   * Peru.
   */
  PE = 'PE',
  
  /**
   * Philippines.
   */
  PH = 'PH',
  
  /**
   * Pitcairn Islands.
   */
  PN = 'PN',
  
  /**
   * Poland.
   */
  PL = 'PL',
  
  /**
   * Portugal.
   */
  PT = 'PT',
  
  /**
   * Qatar.
   */
  QA = 'QA',
  
  /**
   * Cameroon.
   */
  CM = 'CM',
  
  /**
   * Réunion.
   */
  RE = 'RE',
  
  /**
   * Romania.
   */
  RO = 'RO',
  
  /**
   * Russia.
   */
  RU = 'RU',
  
  /**
   * Rwanda.
   */
  RW = 'RW',
  
  /**
   * St. Barthélemy.
   */
  BL = 'BL',
  
  /**
   * St. Helena.
   */
  SH = 'SH',
  
  /**
   * St. Kitts & Nevis.
   */
  KN = 'KN',
  
  /**
   * St. Lucia.
   */
  LC = 'LC',
  
  /**
   * St. Martin.
   */
  MF = 'MF',
  
  /**
   * St. Pierre & Miquelon.
   */
  PM = 'PM',
  
  /**
   * Samoa.
   */
  WS = 'WS',
  
  /**
   * San Marino.
   */
  SM = 'SM',
  
  /**
   * São Tomé & Príncipe.
   */
  ST = 'ST',
  
  /**
   * Saudi Arabia.
   */
  SA = 'SA',
  
  /**
   * Senegal.
   */
  SN = 'SN',
  
  /**
   * Serbia.
   */
  RS = 'RS',
  
  /**
   * Seychelles.
   */
  SC = 'SC',
  
  /**
   * Sierra Leone.
   */
  SL = 'SL',
  
  /**
   * Singapore.
   */
  SG = 'SG',
  
  /**
   * Sint Maarten.
   */
  SX = 'SX',
  
  /**
   * Slovakia.
   */
  SK = 'SK',
  
  /**
   * Slovenia.
   */
  SI = 'SI',
  
  /**
   * Solomon Islands.
   */
  SB = 'SB',
  
  /**
   * Somalia.
   */
  SO = 'SO',
  
  /**
   * South Africa.
   */
  ZA = 'ZA',
  
  /**
   * South Georgia & South Sandwich Islands.
   */
  GS = 'GS',
  
  /**
   * South Korea.
   */
  KR = 'KR',
  
  /**
   * South Sudan.
   */
  SS = 'SS',
  
  /**
   * Spain.
   */
  ES = 'ES',
  
  /**
   * Sri Lanka.
   */
  LK = 'LK',
  
  /**
   * St. Vincent & Grenadines.
   */
  VC = 'VC',
  
  /**
   * Sudan.
   */
  SD = 'SD',
  
  /**
   * Suriname.
   */
  SR = 'SR',
  
  /**
   * Svalbard & Jan Mayen.
   */
  SJ = 'SJ',
  
  /**
   * Sweden.
   */
  SE = 'SE',
  
  /**
   * Switzerland.
   */
  CH = 'CH',
  
  /**
   * Syria.
   */
  SY = 'SY',
  
  /**
   * Taiwan.
   */
  TW = 'TW',
  
  /**
   * Tajikistan.
   */
  TJ = 'TJ',
  
  /**
   * Tanzania.
   */
  TZ = 'TZ',
  
  /**
   * Thailand.
   */
  TH = 'TH',
  
  /**
   * Timor-Leste.
   */
  TL = 'TL',
  
  /**
   * Togo.
   */
  TG = 'TG',
  
  /**
   * Tokelau.
   */
  TK = 'TK',
  
  /**
   * Tonga.
   */
  TO = 'TO',
  
  /**
   * Trinidad & Tobago.
   */
  TT = 'TT',
  
  /**
   * Tristan da Cunha.
   */
  TA = 'TA',
  
  /**
   * Tunisia.
   */
  TN = 'TN',
  
  /**
   * Türkiye.
   */
  TR = 'TR',
  
  /**
   * Turkmenistan.
   */
  TM = 'TM',
  
  /**
   * Turks & Caicos Islands.
   */
  TC = 'TC',
  
  /**
   * Tuvalu.
   */
  TV = 'TV',
  
  /**
   * Uganda.
   */
  UG = 'UG',
  
  /**
   * Ukraine.
   */
  UA = 'UA',
  
  /**
   * United Arab Emirates.
   */
  AE = 'AE',
  
  /**
   * United Kingdom.
   */
  GB = 'GB',
  
  /**
   * United States.
   */
  US = 'US',
  
  /**
   * U.S. Outlying Islands.
   */
  UM = 'UM',
  
  /**
   * Uruguay.
   */
  UY = 'UY',
  
  /**
   * Uzbekistan.
   */
  UZ = 'UZ',
  
  /**
   * Vanuatu.
   */
  VU = 'VU',
  
  /**
   * Venezuela.
   */
  VE = 'VE',
  
  /**
   * Vietnam.
   */
  VN = 'VN',
  
  /**
   * British Virgin Islands.
   */
  VG = 'VG',
  
  /**
   * Wallis & Futuna.
   */
  WF = 'WF',
  
  /**
   * Western Sahara.
   */
  EH = 'EH',
  
  /**
   * Yemen.
   */
  YE = 'YE',
  
  /**
   * Zambia.
   */
  ZM = 'ZM',
  
  /**
   * Zimbabwe.
   */
  ZW = 'ZW',
  
  /**
   * Unknown Region.
   */
  ZZ = 'ZZ'
}

/**
 * The price of a product variant in a specific country.
 * Prices vary between countries.
 * 
 */
export interface ProductVariantContextualPricing {
  
  /**
   * The final compare-at price after all adjustments are applied.
   */
  compareAtPrice?: MoneyV2;
  
  /**
   * The final price after all adjustments are applied.
   */
  price: MoneyV2;
  
  /**
   * A list of quantity breaks for the product variant.
   */
  quantityPriceBreaks: QuantityPriceBreakConnection;
  
  /**
   * The quantity rule applied for a given context.
   */
  quantityRule: QuantityRule;
}

/**
 * The quantity rule for the product variant in a given context.
 * 
 */
export interface QuantityRule {
  
  /**
   * The value that specifies the quantity increment between minimum and maximum of the rule.
   * Only quantities divisible by this value will be considered valid.
   * 
   * The increment must be lower than or equal to the minimum and the maximum, and both minimum and maximum
   * must be divisible by this value.
   * 
   */
  increment: number;
  
  /**
   * Whether the quantity rule fields match one increment, one minimum and no maximum.
   */
  isDefault: boolean;
  
  /**
   * An optional value that defines the highest allowed quantity purchased by the customer.
   * If defined, maximum must be lower than or equal to the minimum and must be a multiple of the increment.
   * 
   */
  maximum?: number;
  
  /**
   * The value that defines the lowest allowed quantity purchased by the customer.
   * The minimum must be a multiple of the quantity rule's increment.
   * 
   */
  minimum: number;
  
  /**
   * Whether the values of the quantity rule were explicitly set.
   */
  originType: QuantityRuleOriginType;
  
  /**
   * The product variant for which the quantity rule is applied.
   */
  productVariant: ProductVariant;
}

/**
 * The origin of quantity rule on a price list.
 */
export const enum QuantityRuleOriginType {
  
  /**
   * Quantity rule is explicitly defined.
   */
  FIXED = 'FIXED',
  
  /**
   * Quantity rule falls back to the relative rule.
   */
  RELATIVE = 'RELATIVE'
}

/**
 * A shipping profile. In Shopify, a shipping profile is a set of shipping rates scoped to a set of products or variants that can be shipped from selected locations to zones.
 * 
 */
export interface DeliveryProfile extends Node {
  
  /**
   * The number of active shipping rates for the profile.
   */
  activeMethodDefinitionsCount: number;
  
  /**
   * Whether this is the default profile.
   */
  default: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Whether this shop has enabled legacy compatibility mode for delivery profiles.
   */
  legacyMode: boolean;
  
  /**
   * The number of locations without rates defined.
   */
  locationsWithoutRatesCount: number;
  
  /**
   * The name of the delivery profile.
   */
  name: string;
  
  /**
   * The number of active origin locations for the profile.
   */
  originLocationCount: number;
  
  /**
   * The number of product variants for this profile. The count for the default profile isn't supported and will return -1.
   * @deprecated Use `productVariantsCountV2` instead.
   */
  productVariantsCount: number;
  
  /**
   * How many product variants are in this profile.
   */
  productVariantsCountV2: DeliveryProductVariantsCount;
  
  /**
   * The products and variants associated with this profile.
   */
  profileItems: DeliveryProfileItemConnection;
  
  /**
   * The location groups and associated zones using this profile.
   */
  profileLocationGroups: Array<DeliveryProfileLocationGroup>;
  
  /**
   * Selling plan groups associated with the specified delivery profile.
   */
  sellingPlanGroups: SellingPlanGroupConnection;
  
  /**
   * List of locations that haven't been assigned to a location group for this profile.
   */
  unassignedLocations: Array<Location>;
  
  /**
   * List of locations that have not been assigned to a location group for this profile.
   */
  unassignedLocationsPaginated: LocationConnection;
  
  /**
   * The number of countries with active rates to deliver to.
   */
  zoneCountryCount: number;
}

/**
 * How many product variants are in a profile. This count is capped at 500.
 */
export interface DeliveryProductVariantsCount {
  
  /**
   * Whether the count has reached the cap of 500.
   */
  capped: boolean;
  
  /**
   * The product variant count.
   */
  count: number;
}

/**
 * An auto-generated type for paginating through multiple DeliveryProfileItems.
 * 
 */
export interface DeliveryProfileItemConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<DeliveryProfileItemEdge>;
  
  /**
   * A list of the nodes contained in DeliveryProfileItemEdge.
   */
  nodes: Array<DeliveryProfileItem>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.
 * 
 */
export interface DeliveryProfileItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of DeliveryProfileItemEdge.
   */
  node: DeliveryProfileItem;
}

/**
 * A product and the subset of associated variants that are part of this delivery profile.
 */
export interface DeliveryProfileItem extends Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * A product associated with this profile.
   */
  product: Product;
  
  /**
   * The product variants associated with this delivery profile.
   */
  variants: ProductVariantConnection;
}

/**
 * The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant) to create or update different versions of the same product. You can also add or update product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media). Products can be organized by grouping them into a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
 */
export interface Product extends HasMetafieldDefinitions, HasMetafields, HasPublishedTranslations, LegacyInteroperability, Navigable, Node, OnlineStorePreviewable, Publishable {
  
  /**
   * The number of publications a resource is published to without feedback errors.
   */
  availablePublicationCount: number;
  
  /**
   * The description of the product, complete with HTML formatting.
   * @deprecated Use `descriptionHtml` instead.
   */
  bodyHtml?: string;
  
  /**
   * A list of the collections that include the product.
   */
  collections: CollectionConnection;
  
  /**
   * The compare-at price range of the product in the default shop currency.
   */
  compareAtPriceRange?: ProductCompareAtPriceRange;
  
  /**
   * The pricing that applies for a customer in a given context.
   */
  contextualPricing: ProductContextualPricing;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
   * 
   */
  createdAt: DateTime;
  
  /**
   * The custom product type specified by the merchant.
   * @deprecated Deprecated in API version 2022-10. Use `productType` instead.
   */
  customProductType?: string;
  
  /**
   * A default cursor that returns the single next record, sorted ascending by ID.
   * 
   */
  defaultCursor: string;
  
  /**
   * A stripped description of the product, single line with HTML tags removed.
   */
  description: string;
  
  /**
   * The description of the product, complete with HTML formatting.
   */
  descriptionHtml: HTML;
  
  /**
   * Stripped description of the product, single line with HTML tags removed.
   * Truncated to 60 characters.
   * 
   * @deprecated Use `description` instead.
   */
  descriptionPlainSummary: string;
  
  /**
   * The featured image for the product.
   */
  featuredImage?: Image;
  
  /**
   * The featured media for the product.
   */
  featuredMedia?: Media;
  
  /**
   * Information about the product that's provided through resource feedback.
   */
  feedback?: ResourceFeedback;
  
  /**
   * The theme template used when viewing the gift card in a store.
   */
  giftCardTemplateSuffix?: string;
  
  /**
   * A unique human-friendly string of the product's title.
   */
  handle: string;
  
  /**
   * Whether the product has only a single variant with the default option and value.
   */
  hasOnlyDefaultVariant: boolean;
  
  /**
   * Whether the product has out of stock variants.
   */
  hasOutOfStockVariants: boolean;
  
  /**
   * Determines if at least one of the product variant requires components. The default value is `false`.
   */
  hasVariantsThatRequiresComponents: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The images associated with the product.
   */
  images: ImageConnection;
  
  /**
   * Whether the product is in a given collection.
   */
  inCollection: boolean;
  
  /**
   * Whether the product is a gift card.
   */
  isGiftCard: boolean;
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
  
  /**
   * The media associated with the product. This can include images, 3D models, or videos.
   */
  media: MediaConnection;
  
  /**
   * Total count of media belonging to a product.
   */
  mediaCount: number;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafield definitions.
   */
  metafieldDefinitions: MetafieldDefinitionConnection;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * The online store preview URL.
   */
  onlineStorePreviewUrl?: URL;
  
  /**
   * The online store URL for the product.
   * A value of `null` indicates that the product isn't published to the Online Store sales channel.
   * 
   */
  onlineStoreUrl?: URL;
  
  /**
   * A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions.
   */
  options: Array<ProductOption>;
  
  /**
   * The price range of the product.
   * @deprecated Deprecated in API version 2020-10. Use `priceRangeV2` instead.
   */
  priceRange: ProductPriceRange;
  
  /**
   * The price range of the product with prices formatted as decimals.
   */
  priceRangeV2: ProductPriceRangeV2;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * The product category specified by the merchant.
   */
  productCategory?: ProductCategory;
  
  /**
   * A list of the channels where the product is published.
   * @deprecated Use `resourcePublications` instead.
   */
  productPublications: ProductPublicationConnection;
  
  /**
   * The product type specified by the merchant.
   */
  productType: string;
  
  /**
   * The number of publications a resource is published on.
   */
  publicationCount: number;
  
  /**
   * A list of the channels where the product is published.
   * @deprecated Use `resourcePublications` instead.
   */
  publications: ProductPublicationConnection;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was published to the Online Store.
   * 
   */
  publishedAt?: DateTime;
  
  /**
   * Whether or not the product is published for a customer in the given context.
   */
  publishedInContext: boolean;
  
  /**
   * Check to see whether the resource is published to a given channel.
   * @deprecated Use `publishedOnPublication` instead.
   */
  publishedOnChannel: boolean;
  
  /**
   * Check to see whether the resource is published to the calling app's channel.
   * @deprecated Use `publishedOnCurrentPublication` instead.
   */
  publishedOnCurrentChannel: boolean;
  
  /**
   * Check to see whether the resource is published to the calling app's publication.
   */
  publishedOnCurrentPublication: boolean;
  
  /**
   * Check to see whether the resource is published to a given publication.
   */
  publishedOnPublication: boolean;
  
  /**
   * Whether the product can only be purchased with a selling plan (subscription). Products that are sold on subscription (`requiresSellingPlan: true`) can be updated only for online stores. If you update a product to be subscription only, then the product is unpublished from all channels except the online store.
   */
  requiresSellingPlan: boolean;
  
  /**
   * The resource that's either published or staged to be published to the calling app's publication. Requires the `read_product_listings` scope.
   */
  resourcePublicationOnCurrentPublication?: ResourcePublicationV2;
  
  /**
   * The list of resources that are published to a publication.
   */
  resourcePublications: ResourcePublicationConnection;
  
  /**
   * The list of resources that are either published or staged to be published to a publication.
   */
  resourcePublicationsV2: ResourcePublicationV2Connection;
  
  /**
   * Count of selling plan groups associated with the product.
   */
  sellingPlanGroupCount: number;
  
  /**
   * A list of all selling plan groups defined in the current shop associated with the product either directly or through any of its variants.
   */
  sellingPlanGroups: SellingPlanGroupConnection;
  
  /**
   * SEO information of the product.
   */
  seo: SEO;
  
  /**
   * The standardized product type in the Shopify product taxonomy.
   * @deprecated Deprecated in API version 2022-10. Use `productCategory` instead.
   */
  standardizedProductType?: StandardizedProductType;
  
  /**
   * The product status. This controls visibility across all channels.
   */
  status: ProductStatus;
  
  /**
   * The Storefront GraphQL API ID of the `Product`.
   * 
   * As of the `2022-04` version release, the Storefront GraphQL API will no longer return Base64 encoded IDs to match the behavior of the Admin GraphQL API. Therefore, you can safely use the `id` field's value instead.
   * 
   * @deprecated Use `id` instead.
   */
  storefrontId: StorefrontID;
  
  /**
   * A comma separated list of tags associated with the product. Updating `tags` overwrites
   * any existing tags that were previously added to the product. To add new tags without overwriting
   * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   * 
   */
  tags: Array<string>;
  
  /**
   * The theme template used when viewing the product in a store.
   */
  templateSuffix?: string;
  
  /**
   * The title of the product.
   */
  title: string;
  
  /**
   * The quantity of inventory in stock.
   */
  totalInventory: number;
  
  /**
   * The number of variants that are associated with the product.
   */
  totalVariants: number;
  
  /**
   * Whether inventory tracking has been enabled for the product.
   */
  tracksInventory: boolean;
  
  /**
   * The translations associated with the resource.
   */
  translations: Array<Translation>;
  
  /**
   * The list of channels that the resource is not published to.
   * @deprecated Use `unpublishedPublications` instead.
   */
  unpublishedChannels: ChannelConnection;
  
  /**
   * The list of publications that the resource is not published to.
   */
  unpublishedPublications: PublicationConnection;
  
  /**
   * The date and time when the product was last modified.
   * A product's `updatedAt` value can change for different reasons. For example, if an order
   * is placed for a product that has inventory tracking set up, then the inventory adjustment
   * is counted as an update.
   * 
   */
  updatedAt: DateTime;
  
  /**
   * A list of variants associated with the product.
   */
  variants: ProductVariantConnection;
  
  /**
   * The name of the product's vendor.
   */
  vendor: string;
}

/**
 * Online Store preview URL of the object.
 */
export interface OnlineStorePreviewable {
  
  /**
   * The online store preview URL.
   */
  onlineStorePreviewUrl?: URL;
}

/** Use this to resolve interface type OnlineStorePreviewable */
export type PossibleOnlineStorePreviewableTypeNames = 'Product';

export interface OnlineStorePreviewableNameMap {
  OnlineStorePreviewable: OnlineStorePreviewable;
  Product: Product;
}

/**
 * Represents a resource that can be published to a channel.
 * A publishable resource can be either a Product or Collection.
 * 
 */
export interface Publishable {
  
  /**
   * The number of publications a resource is published to without feedback errors.
   */
  availablePublicationCount: number;
  
  /**
   * The number of publications a resource is published on.
   */
  publicationCount: number;
  
  /**
   * Check to see whether the resource is published to a given channel.
   * @deprecated Use `publishedOnPublication` instead.
   */
  publishedOnChannel: boolean;
  
  /**
   * Check to see whether the resource is published to the calling app's channel.
   * @deprecated Use `publishedOnCurrentPublication` instead.
   */
  publishedOnCurrentChannel: boolean;
  
  /**
   * Check to see whether the resource is published to the calling app's publication.
   */
  publishedOnCurrentPublication: boolean;
  
  /**
   * Check to see whether the resource is published to a given publication.
   */
  publishedOnPublication: boolean;
  
  /**
   * The list of resources that are published to a publication.
   */
  resourcePublications: ResourcePublicationConnection;
  
  /**
   * The list of resources that are either published or staged to be published to a publication.
   */
  resourcePublicationsV2: ResourcePublicationV2Connection;
  
  /**
   * The list of channels that the resource is not published to.
   * @deprecated Use `unpublishedPublications` instead.
   */
  unpublishedChannels: ChannelConnection;
  
  /**
   * The list of publications that the resource is not published to.
   */
  unpublishedPublications: PublicationConnection;
}

/** Use this to resolve interface type Publishable */
export type PossiblePublishableTypeNames = 'Collection' | 'Product';

export interface PublishableNameMap {
  Publishable: Publishable;
  Collection: Collection;
  Product: Product;
}

/**
 * An auto-generated type for paginating through multiple ResourcePublications.
 * 
 */
export interface ResourcePublicationConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ResourcePublicationEdge>;
  
  /**
   * A list of the nodes contained in ResourcePublicationEdge.
   */
  nodes: Array<ResourcePublication>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ResourcePublication and a cursor during pagination.
 * 
 */
export interface ResourcePublicationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ResourcePublicationEdge.
   */
  node: ResourcePublication;
}

/**
 * A resource publication represents information about the publication of a resource.
 * An instance of `ResourcePublication`, unlike `ResourcePublicationV2`, can be neither published or scheduled to be published.
 * 
 * See [ResourcePublicationV2](/api/admin-graphql/latest/objects/ResourcePublicationV2) for more context.
 * 
 */
export interface ResourcePublication {
  
  /**
   * The channel the resource publication is published to.
   * @deprecated Use `publication` instead.
   */
  channel: Channel;
  
  /**
   * Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
   * If false, then the resource publication is neither published nor scheduled to be published.
   * 
   */
  isPublished: boolean;
  
  /**
   * The publication the resource publication is published to.
   */
  publication: Publication;
  
  /**
   * The date that the resource publication was or is going to be published to the publication.
   * If the product isn't published, then this field returns an epoch timestamp.
   * 
   */
  publishDate: DateTime;
  
  /**
   * The resource published to the publication.
   */
  publishable: Publishable;
}

/**
 * A channel represents an app where you sell a group of products and collections.
 * A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
 * 
 */
export interface Channel extends Node {
  
  /**
   * The underlying app used by the channel.
   */
  app: App;
  
  /**
   * The collection publications for the list of collections published to the channel.
   */
  collectionPublicationsV3: ResourcePublicationConnection;
  
  /**
   * The list of collections published to the channel.
   */
  collections: CollectionConnection;
  
  /**
   * The unique identifier for the channel.
   * @deprecated Use `id` instead.
   */
  handle: string;
  
  /**
   * Whether the collection is available to the channel.
   */
  hasCollection: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The name of the channel.
   */
  name: string;
  
  /**
   * The menu items for the channel, which also appear as submenu items in the left navigation sidebar in the Shopify admin.
   * 
   * @deprecated Use [AppInstallation.navigationItems](
   *           https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-navigationitems) instead.
   */
  navigationItems: Array<NavigationItem>;
  
  /**
   * Home page for the channel.
   * @deprecated Use [AppInstallation.launchUrl](
   *           https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-launchurl) instead.
   */
  overviewPath?: URL;
  
  /**
   * The product publications for the products published to the channel.
   * @deprecated Use `productPublicationsV3` instead.
   */
  productPublications: ProductPublicationConnection;
  
  /**
   * The product publications for the list of products published to the channel.
   */
  productPublicationsV3: ResourcePublicationConnection;
  
  /**
   * The list of products published to the channel.
   */
  products: ProductConnection;
  
  /**
   * Whether the channel supports future publishing.
   */
  supportsFuturePublishing: boolean;
}

/**
 * A Shopify application.
 */
export interface App extends Node {
  
  /**
   * A unique application API identifier.
   */
  apiKey: string;
  
  /**
   * App store page URL of the app.
   */
  appStoreAppUrl?: URL;
  
  /**
   * App store page URL of the developer who created the app.
   */
  appStoreDeveloperUrl?: URL;
  
  /**
   * The access scopes available to the app.
   */
  availableAccessScopes: Array<AccessScope>;
  
  /**
   * Banner image for the app.
   */
  banner: Image;
  
  /**
   * Description of the app.
   */
  description?: string;
  
  /**
   * The name of the app developer.
   */
  developerName?: string;
  
  /**
   * The type of app developer.
   */
  developerType: AppDeveloperType;
  
  /**
   * Website of the developer who created the app.
   * @deprecated Use `appStoreDeveloperUrl` instead.
   */
  developerUrl: URL;
  
  /**
   * Whether the app uses the Embedded App SDK.
   */
  embedded: boolean;
  
  /**
   * Requirements that must be met before the app can be installed.
   */
  failedRequirements: Array<FailedRequirement>;
  
  /**
   * A list of app features that are shown in the Shopify App Store listing.
   */
  features: Array<string>;
  
  /**
   * Feedback from this app about the store.
   */
  feedback?: AppFeedback;
  
  /**
   * Handle of the app.
   */
  handle?: string;
  
  /**
   * Icon that represents the app.
   */
  icon: Image;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Webpage where you can install the app.
   */
  installUrl?: URL;
  
  /**
   * Corresponding AppInstallation for this shop and App.
   * Returns null if the App is not installed.
   * 
   */
  installation?: AppInstallation;
  
  /**
   * Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use.
   * 
   */
  isPostPurchaseAppInUse: boolean;
  
  /**
   * Webpage that the app starts in.
   * @deprecated Use AppInstallation.launchUrl instead
   */
  launchUrl: URL;
  
  /**
   * Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
   * 
   * @deprecated Use AppInstallation.navigationItems instead
   */
  navigationItems: Array<NavigationItem>;
  
  /**
   * Whether the app was previously installed on the current shop.
   */
  previouslyInstalled: boolean;
  
  /**
   * Detailed information about the app pricing.
   */
  pricingDetails?: string;
  
  /**
   * Summary of the app pricing details.
   */
  pricingDetailsSummary: string;
  
  /**
   * Link to app privacy policy.
   */
  privacyPolicyUrl?: URL;
  
  /**
   * The public category for the app.
   */
  publicCategory: AppPublicCategory;
  
  /**
   * Whether the app is published to the Shopify App Store.
   */
  published: boolean;
  
  /**
   * The access scopes requested by the app.
   */
  requestedAccessScopes: Array<AccessScope>;
  
  /**
   * Screenshots of the app.
   */
  screenshots: Array<Image>;
  
  /**
   * Whether the app was developed by Shopify.
   */
  shopifyDeveloped: boolean;
  
  /**
   * Name of the app.
   */
  title: string;
  
  /**
   * Message that appears when the app is uninstalled. For example:
   * By removing this app, you will no longer be able to publish products to MySocialSite or view this app in your Shopify admin. You can re-enable this channel at any time.
   * 
   */
  uninstallMessage: string;
  
  /**
   * Webpage where you can uninstall the app.
   * @deprecated Use AppInstallation.uninstallUrl instead
   */
  uninstallUrl?: URL;
  
  /**
   * The webhook API version for the app.
   */
  webhookApiVersion: string;
}

/**
 * The permission required to access a Shopify Admin API or Storefront API resource for a shop. Merchants grant access scopes that are requested by applications.
 * 
 */
export interface AccessScope {
  
  /**
   * A description of the actions that the access scope allows an app to perform.
   */
  description: string;
  
  /**
   * A readable string that represents the access scope. The string usually follows the format `{action}_{resource}`. `{action}` is `read` or `write`, and `{resource}` is the resource that the action can be performed on. `{action}` and `{resource}` are separated by an underscore. For example, `read_orders` or `write_products`.
   * 
   */
  handle: string;
}

/**
 * Possible types of app developer.
 */
export const enum AppDeveloperType {
  
  /**
   * Indicates the app developer is Shopify.
   */
  SHOPIFY = 'SHOPIFY',
  
  /**
   * Indicates the app developer is a Partner.
   */
  PARTNER = 'PARTNER',
  
  /**
   * Indicates the app developer works directly for a Merchant.
   */
  MERCHANT = 'MERCHANT',
  
  /**
   * Indicates the app developer is unknown. It is not categorized as any of the other developer types.
   */
  UNKNOWN = 'UNKNOWN'
}

/**
 * Requirements that must be met before an app can be installed.
 */
export interface FailedRequirement {
  
  /**
   * Action to be taken to resolve a failed requirement, including URL link.
   */
  action?: NavigationItem;
  
  /**
   * A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
   * encounters when trying to make use of their Shop and its resources.
   * 
   */
  message: string;
}

/**
 * A navigation item, holding basic link attributes.
 */
export interface NavigationItem {
  
  /**
   * The unique identifier of the navigation item.
   */
  id: string;
  
  /**
   * The name of the navigation item.
   */
  title: string;
  
  /**
   * The URL of the page that the navigation item links to.
   */
  url: URL;
}

/**
 * Reports the status of shops and their resources and displays this information
 * within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
 * to set up an app on their store.
 * 
 */
export interface AppFeedback {
  
  /**
   * The application associated to the feedback.
   */
  app: App;
  
  /**
   * A link to where merchants can resolve errors.
   */
  link?: Link;
  
  /**
   * The feedback message presented to the merchant.
   */
  messages: Array<UserError>;
}

/**
 * A link to direct users to.
 */
export interface Link extends HasPublishedTranslations {
  
  /**
   * A context-sensitive label for the link.
   */
  label: string;
  
  /**
   * The translations associated with the resource.
   */
  translations: Array<Translation>;
  
  /**
   * The URL that the link visits.
   */
  url: URL;
}

/**
 * Represents an error in the input of a mutation.
 */
export interface UserError extends DisplayableError {
  
  /**
   * The path to the input field that caused the error.
   */
  field?: Array<string>;
  
  /**
   * The error message.
   */
  message: string;
}

/**
 * Represents an error in the input of a mutation.
 */
export interface DisplayableError {
  
  /**
   * The path to the input field that caused the error.
   */
  field?: Array<string>;
  
  /**
   * The error message.
   */
  message: string;
}

/** Use this to resolve interface type DisplayableError */
export type PossibleDisplayableErrorTypeNames =
'UserError' |
'DiscountUserError' |
'AbandonmentEmailStateUpdateUserError' |
'AbandonmentUpdateActivitiesDeliveryStatusesUserError' |
'AppSubscriptionTrialExtendUserError' |
'BulkMutationUserError' |
'BulkProductResourceFeedbackCreateUserError' |
'CartTransformCreateUserError' |
'CartTransformDeleteUserError' |
'CatalogUserError' |
'CheckoutBrandingUpsertUserError' |
'CollectionAddProductsV2UserError' |
'BusinessCustomerUserError' |
'CustomerCancelDataErasureUserError' |
'CustomerEmailMarketingConsentUpdateUserError' |
'CustomerMergeUserError' |
'CustomerPaymentMethodCreateFromDuplicationDataUserError' |
'CustomerPaymentMethodGetDuplicationDataUserError' |
'CustomerPaymentMethodGetUpdateUrlUserError' |
'CustomerPaymentMethodUserError' |
'CustomerPaymentMethodRemoteUserError' |
'CustomerRequestDataErasureUserError' |
'CustomerSegmentMembersQueryUserError' |
'CustomerSmsMarketingConsentError' |
'DelegateAccessTokenCreateUserError' |
'DelegateAccessTokenDestroyUserError' |
'DeliveryCustomizationError' |
'DisputeEvidenceUpdateUserError' |
'ErrorsServerPixelUserError' |
'FilesUserError' |
'FulfillmentConstraintRuleCreateUserError' |
'FulfillmentConstraintRuleDeleteUserError' |
'FulfillmentOrderHoldUserError' |
'FulfillmentOrderLineItemsPreparedForPickupUserError' |
'FulfillmentOrderMergeUserError' |
'FulfillmentOrderReleaseHoldUserError' |
'FulfillmentOrderRescheduleUserError' |
'FulfillmentOrderSplitUserError' |
'FulfillmentOrdersReleaseHoldsUserError' |
'FulfillmentOrdersSetFulfillmentDeadlineUserError' |
'GiftCardUserError' |
'InventoryAdjustQuantitiesUserError' |
'InventoryBulkToggleActivationUserError' |
'InventoryMoveQuantitiesUserError' |
'InventorySetOnHandQuantitiesUserError' |
'InventorySetScheduledChangesUserError' |
'LocationActivateUserError' |
'LocationAddUserError' |
'LocationDeactivateUserError' |
'LocationDeleteUserError' |
'LocationEditUserError' |
'DeliveryLocationLocalPickupSettingsError' |
'MarketUserError' |
'MarketCurrencySettingsUserError' |
'TranslationUserError' |
'MarketingActivityUserError' |
'MetafieldDefinitionCreateUserError' |
'MetafieldDefinitionDeleteUserError' |
'MetafieldDefinitionPinUserError' |
'MetafieldDefinitionUnpinUserError' |
'MetafieldDefinitionUpdateUserError' |
'MetafieldsSetUserError' |
'MetaobjectUserError' |
'OrderCancelUserError' |
'OrderCreateMandatePaymentUserError' |
'OrderEditRemoveDiscountUserError' |
'OrderEditUpdateDiscountUserError' |
'OrderInvoiceSendUserError' |
'PaymentCustomizationError' |
'PaymentReminderSendUserError' |
'PaymentTermsCreateUserError' |
'PaymentTermsDeleteUserError' |
'PaymentTermsUpdateUserError' |
'PriceListUserError' |
'PriceListPriceUserError' |
'PriceListFixedPricesByProductBulkUpdateUserError' |
'PriceRuleUserError' |
'ProductChangeStatusUserError' |
'MediaUserError' |
'ProductDeleteUserError' |
'ProductDuplicateUserError' |
'ProductFeedCreateUserError' |
'ProductFeedDeleteUserError' |
'ProductFullSyncUserError' |
'SellingPlanGroupUserError' |
'ProductVariantRelationshipBulkUpdateUserError' |
'ProductVariantsBulkCreateUserError' |
'ProductVariantsBulkDeleteUserError' |
'ProductVariantsBulkReorderUserError' |
'ProductVariantsBulkUpdateUserError' |
'PubSubWebhookSubscriptionCreateUserError' |
'PubSubWebhookSubscriptionUpdateUserError' |
'PublicationUserError' |
'QuantityPricingByVariantUserError' |
'QuantityRuleUserError' |
'ReturnUserError' |
'ShopPolicyUserError' |
'ShopResourceFeedbackCreateUserError' |
'StandardMetafieldDefinitionEnableUserError' |
'BillingAttemptUserError' |
'SubscriptionDraftUserError' |
'SubscriptionBillingCycleUserError' |
'SubscriptionBillingCycleSkipUserError' |
'SubscriptionBillingCycleUnskipUserError' |
'SubscriptionContractStatusUpdateUserError' |
'SubscriptionContractUserError' |
'TaxAppConfigureUserError' |
'UrlRedirectBulkDeleteByIdsUserError' |
'UrlRedirectBulkDeleteBySavedSearchUserError' |
'UrlRedirectBulkDeleteBySearchUserError' |
'UrlRedirectUserError' |
'UrlRedirectImportUserError' |
'ValidationUserError' |
'ErrorsWebPixelUserError';

export interface DisplayableErrorNameMap {
  DisplayableError: DisplayableError;
  UserError: UserError;
  DiscountUserError: DiscountUserError;
  AbandonmentEmailStateUpdateUserError: AbandonmentEmailStateUpdateUserError;
  AbandonmentUpdateActivitiesDeliveryStatusesUserError: AbandonmentUpdateActivitiesDeliveryStatusesUserError;
  AppSubscriptionTrialExtendUserError: AppSubscriptionTrialExtendUserError;
  BulkMutationUserError: BulkMutationUserError;
  BulkProductResourceFeedbackCreateUserError: BulkProductResourceFeedbackCreateUserError;
  CartTransformCreateUserError: CartTransformCreateUserError;
  CartTransformDeleteUserError: CartTransformDeleteUserError;
  CatalogUserError: CatalogUserError;
  CheckoutBrandingUpsertUserError: CheckoutBrandingUpsertUserError;
  CollectionAddProductsV2UserError: CollectionAddProductsV2UserError;
  BusinessCustomerUserError: BusinessCustomerUserError;
  CustomerCancelDataErasureUserError: CustomerCancelDataErasureUserError;
  CustomerEmailMarketingConsentUpdateUserError: CustomerEmailMarketingConsentUpdateUserError;
  CustomerMergeUserError: CustomerMergeUserError;
  CustomerPaymentMethodCreateFromDuplicationDataUserError: CustomerPaymentMethodCreateFromDuplicationDataUserError;
  CustomerPaymentMethodGetDuplicationDataUserError: CustomerPaymentMethodGetDuplicationDataUserError;
  CustomerPaymentMethodGetUpdateUrlUserError: CustomerPaymentMethodGetUpdateUrlUserError;
  CustomerPaymentMethodUserError: CustomerPaymentMethodUserError;
  CustomerPaymentMethodRemoteUserError: CustomerPaymentMethodRemoteUserError;
  CustomerRequestDataErasureUserError: CustomerRequestDataErasureUserError;
  CustomerSegmentMembersQueryUserError: CustomerSegmentMembersQueryUserError;
  CustomerSmsMarketingConsentError: CustomerSmsMarketingConsentError;
  DelegateAccessTokenCreateUserError: DelegateAccessTokenCreateUserError;
  DelegateAccessTokenDestroyUserError: DelegateAccessTokenDestroyUserError;
  DeliveryCustomizationError: DeliveryCustomizationError;
  DisputeEvidenceUpdateUserError: DisputeEvidenceUpdateUserError;
  ErrorsServerPixelUserError: ErrorsServerPixelUserError;
  FilesUserError: FilesUserError;
  FulfillmentConstraintRuleCreateUserError: FulfillmentConstraintRuleCreateUserError;
  FulfillmentConstraintRuleDeleteUserError: FulfillmentConstraintRuleDeleteUserError;
  FulfillmentOrderHoldUserError: FulfillmentOrderHoldUserError;
  FulfillmentOrderLineItemsPreparedForPickupUserError: FulfillmentOrderLineItemsPreparedForPickupUserError;
  FulfillmentOrderMergeUserError: FulfillmentOrderMergeUserError;
  FulfillmentOrderReleaseHoldUserError: FulfillmentOrderReleaseHoldUserError;
  FulfillmentOrderRescheduleUserError: FulfillmentOrderRescheduleUserError;
  FulfillmentOrderSplitUserError: FulfillmentOrderSplitUserError;
  FulfillmentOrdersReleaseHoldsUserError: FulfillmentOrdersReleaseHoldsUserError;
  FulfillmentOrdersSetFulfillmentDeadlineUserError: FulfillmentOrdersSetFulfillmentDeadlineUserError;
  GiftCardUserError: GiftCardUserError;
  InventoryAdjustQuantitiesUserError: InventoryAdjustQuantitiesUserError;
  InventoryBulkToggleActivationUserError: InventoryBulkToggleActivationUserError;
  InventoryMoveQuantitiesUserError: InventoryMoveQuantitiesUserError;
  InventorySetOnHandQuantitiesUserError: InventorySetOnHandQuantitiesUserError;
  InventorySetScheduledChangesUserError: InventorySetScheduledChangesUserError;
  LocationActivateUserError: LocationActivateUserError;
  LocationAddUserError: LocationAddUserError;
  LocationDeactivateUserError: LocationDeactivateUserError;
  LocationDeleteUserError: LocationDeleteUserError;
  LocationEditUserError: LocationEditUserError;
  DeliveryLocationLocalPickupSettingsError: DeliveryLocationLocalPickupSettingsError;
  MarketUserError: MarketUserError;
  MarketCurrencySettingsUserError: MarketCurrencySettingsUserError;
  TranslationUserError: TranslationUserError;
  MarketingActivityUserError: MarketingActivityUserError;
  MetafieldDefinitionCreateUserError: MetafieldDefinitionCreateUserError;
  MetafieldDefinitionDeleteUserError: MetafieldDefinitionDeleteUserError;
  MetafieldDefinitionPinUserError: MetafieldDefinitionPinUserError;
  MetafieldDefinitionUnpinUserError: MetafieldDefinitionUnpinUserError;
  MetafieldDefinitionUpdateUserError: MetafieldDefinitionUpdateUserError;
  MetafieldsSetUserError: MetafieldsSetUserError;
  MetaobjectUserError: MetaobjectUserError;
  OrderCancelUserError: OrderCancelUserError;
  OrderCreateMandatePaymentUserError: OrderCreateMandatePaymentUserError;
  OrderEditRemoveDiscountUserError: OrderEditRemoveDiscountUserError;
  OrderEditUpdateDiscountUserError: OrderEditUpdateDiscountUserError;
  OrderInvoiceSendUserError: OrderInvoiceSendUserError;
  PaymentCustomizationError: PaymentCustomizationError;
  PaymentReminderSendUserError: PaymentReminderSendUserError;
  PaymentTermsCreateUserError: PaymentTermsCreateUserError;
  PaymentTermsDeleteUserError: PaymentTermsDeleteUserError;
  PaymentTermsUpdateUserError: PaymentTermsUpdateUserError;
  PriceListUserError: PriceListUserError;
  PriceListPriceUserError: PriceListPriceUserError;
  PriceListFixedPricesByProductBulkUpdateUserError: PriceListFixedPricesByProductBulkUpdateUserError;
  PriceRuleUserError: PriceRuleUserError;
  ProductChangeStatusUserError: ProductChangeStatusUserError;
  MediaUserError: MediaUserError;
  ProductDeleteUserError: ProductDeleteUserError;
  ProductDuplicateUserError: ProductDuplicateUserError;
  ProductFeedCreateUserError: ProductFeedCreateUserError;
  ProductFeedDeleteUserError: ProductFeedDeleteUserError;
  ProductFullSyncUserError: ProductFullSyncUserError;
  SellingPlanGroupUserError: SellingPlanGroupUserError;
  ProductVariantRelationshipBulkUpdateUserError: ProductVariantRelationshipBulkUpdateUserError;
  ProductVariantsBulkCreateUserError: ProductVariantsBulkCreateUserError;
  ProductVariantsBulkDeleteUserError: ProductVariantsBulkDeleteUserError;
  ProductVariantsBulkReorderUserError: ProductVariantsBulkReorderUserError;
  ProductVariantsBulkUpdateUserError: ProductVariantsBulkUpdateUserError;
  PubSubWebhookSubscriptionCreateUserError: PubSubWebhookSubscriptionCreateUserError;
  PubSubWebhookSubscriptionUpdateUserError: PubSubWebhookSubscriptionUpdateUserError;
  PublicationUserError: PublicationUserError;
  QuantityPricingByVariantUserError: QuantityPricingByVariantUserError;
  QuantityRuleUserError: QuantityRuleUserError;
  ReturnUserError: ReturnUserError;
  ShopPolicyUserError: ShopPolicyUserError;
  ShopResourceFeedbackCreateUserError: ShopResourceFeedbackCreateUserError;
  StandardMetafieldDefinitionEnableUserError: StandardMetafieldDefinitionEnableUserError;
  BillingAttemptUserError: BillingAttemptUserError;
  SubscriptionDraftUserError: SubscriptionDraftUserError;
  SubscriptionBillingCycleUserError: SubscriptionBillingCycleUserError;
  SubscriptionBillingCycleSkipUserError: SubscriptionBillingCycleSkipUserError;
  SubscriptionBillingCycleUnskipUserError: SubscriptionBillingCycleUnskipUserError;
  SubscriptionContractStatusUpdateUserError: SubscriptionContractStatusUpdateUserError;
  SubscriptionContractUserError: SubscriptionContractUserError;
  TaxAppConfigureUserError: TaxAppConfigureUserError;
  UrlRedirectBulkDeleteByIdsUserError: UrlRedirectBulkDeleteByIdsUserError;
  UrlRedirectBulkDeleteBySavedSearchUserError: UrlRedirectBulkDeleteBySavedSearchUserError;
  UrlRedirectBulkDeleteBySearchUserError: UrlRedirectBulkDeleteBySearchUserError;
  UrlRedirectUserError: UrlRedirectUserError;
  UrlRedirectImportUserError: UrlRedirectImportUserError;
  ValidationUserError: ValidationUserError;
  ErrorsWebPixelUserError: ErrorsWebPixelUserError;
}

/**
 * Represents an installed application on a shop.
 */
export interface AppInstallation extends HasMetafields, Node {
  
  /**
   * The access scopes granted to the application by a merchant during installation.
   */
  accessScopes: Array<AccessScope>;
  
  /**
   * The active application subscriptions billed to the shop on a recurring basis.
   */
  activeSubscriptions: Array<AppSubscription>;
  
  /**
   * All subscriptions created for a shop.
   */
  allSubscriptions: AppSubscriptionConnection;
  
  /**
   * Application which is installed.
   */
  app: App;
  
  /**
   * Channel associated with the installed application.
   * @deprecated Use `publication` instead.
   */
  channel?: Channel;
  
  /**
   * Credits that can be used towards future app purchases.
   */
  credits: AppCreditConnection;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The URL to launch the application.
   */
  launchUrl: URL;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * One-time purchases to a shop.
   */
  oneTimePurchases: AppPurchaseOneTimeConnection;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * The publication associated with the installed application.
   */
  publication?: Publication;
  
  /**
   * The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes.
   */
  revenueAttributionRecords: AppRevenueAttributionRecordConnection;
  
  /**
   * Subscriptions charge to a shop on a recurring basis.
   * @deprecated Use `activeSubscriptions` instead.
   */
  subscriptions: Array<AppSubscription>;
  
  /**
   * The URL to uninstall the application.
   */
  uninstallUrl?: URL;
}

/**
 * Provides users access to services and/or features for a duration of time.
 */
export interface AppSubscription extends Node {
  
  /**
   * The date and time when the app subscription was created.
   */
  createdAt: DateTime;
  
  /**
   * The date and time when the current app subscription period ends. Returns `null` if the subscription isn't active.
   */
  currentPeriodEnd?: DateTime;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The plans attached to the app subscription.
   */
  lineItems: Array<AppSubscriptionLineItem>;
  
  /**
   * The name of the app subscription.
   */
  name: string;
  
  /**
   * The URL that the merchant is redirected to after approving the app subscription.
   */
  returnUrl: URL;
  
  /**
   * The status of the app subscription.
   */
  status: AppSubscriptionStatus;
  
  /**
   * Specifies whether the app subscription is a test transaction.
   */
  test: boolean;
  
  /**
   * The number of free trial days, starting at the subscription's creation date, by which billing is delayed.
   */
  trialDays: number;
}

/**
 * The plan attached to an app subscription.
 */
export interface AppSubscriptionLineItem {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The pricing model for the app subscription.
   */
  plan: AppPlanV2;
  
  /**
   * A list of the store's usage records for a usage pricing plan.
   */
  usageRecords: AppUsageRecordConnection;
}

/**
 * The app plan that the merchant is subscribed to.
 */
export interface AppPlanV2 {
  
  /**
   * The plan billed to a shop on a recurring basis.
   */
  pricingDetails: AppPricingDetails;
}

/**
 * The information about the price that's charged to a shop every plan period.
 * The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
 * 
 */
export type AppPricingDetails = AppRecurringPricing | AppUsagePricing;

/** Use this to resolve union type AppPricingDetails */
export type PossibleAppPricingDetailsTypeNames =
'AppRecurringPricing' |
'AppUsagePricing';

export interface AppPricingDetailsNameMap {
  AppPricingDetails: AppPricingDetails;
  AppRecurringPricing: AppRecurringPricing;
  AppUsagePricing: AppUsagePricing;
}

/**
 * The pricing information about a subscription app.
 * The object contains an interval (the frequency at which the shop is billed for an app subscription) and
 * a price (the amount to be charged to the subscribing shop at each interval).
 * 
 */
export interface AppRecurringPricing {
  
  /**
   * The discount applied to the subscription for a given number of billing intervals.
   */
  discount?: AppSubscriptionDiscount;
  
  /**
   * The frequency at which the subscribing shop is billed for an app subscription.
   */
  interval: AppPricingInterval;
  
  /**
   * The amount and currency to be charged to the subscribing shop every billing interval.
   */
  price: MoneyV2;
}

/**
 * Discount applied to the recurring pricing portion of a subscription.
 */
export interface AppSubscriptionDiscount {
  
  /**
   * The total number of billing intervals to which the discount will be applied.
   * The discount will be applied to an indefinite number of billing intervals if this value is blank.
   * 
   */
  durationLimitInIntervals?: number;
  
  /**
   * The price of the subscription after the discount is applied.
   */
  priceAfterDiscount: MoneyV2;
  
  /**
   * The remaining number of billing intervals to which the discount will be applied.
   */
  remainingDurationInIntervals?: number;
  
  /**
   * The value of the discount applied every billing interval.
   */
  value: AppSubscriptionDiscountValue;
}

/**
 * The value of the discount.
 */
export type AppSubscriptionDiscountValue =
AppSubscriptionDiscountAmount |
AppSubscriptionDiscountPercentage;

/** Use this to resolve union type AppSubscriptionDiscountValue */
export type PossibleAppSubscriptionDiscountValueTypeNames =
'AppSubscriptionDiscountAmount' |
'AppSubscriptionDiscountPercentage';

export interface AppSubscriptionDiscountValueNameMap {
  AppSubscriptionDiscountValue: AppSubscriptionDiscountValue;
  AppSubscriptionDiscountAmount: AppSubscriptionDiscountAmount;
  AppSubscriptionDiscountPercentage: AppSubscriptionDiscountPercentage;
}

/**
 * The fixed amount value of a discount.
 */
export interface AppSubscriptionDiscountAmount {
  
  /**
   * The fixed amount value of a discount.
   */
  amount: MoneyV2;
}

/**
 * The percentage value of a discount.
 */
export interface AppSubscriptionDiscountPercentage {
  
  /**
   * The percentage value of a discount.
   */
  percentage: number;
}

/**
 * The frequency at which the shop is billed for an app subscription.
 */
export const enum AppPricingInterval {
  
  /**
   * The app subscription bills the shop annually.
   */
  ANNUAL = 'ANNUAL',
  
  /**
   * The app subscription bills the shop every 30 days.
   */
  EVERY_30_DAYS = 'EVERY_30_DAYS'
}

/**
 * Defines a usage pricing model for the app subscription.
 * These charges are variable based on how much the merchant uses the app.
 * 
 */
export interface AppUsagePricing {
  
  /**
   * The total usage records for interval.
   */
  balanceUsed: MoneyV2;
  
  /**
   * The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
   * This prevents billing from exceeding a maximum threshold over the duration of the billing period.
   * For the merchant to continue using the app after exceeding a capped amount, they would need to agree to a new usage charge.
   * 
   */
  cappedAmount: MoneyV2;
  
  /**
   * The frequency with which the app usage records are billed.
   */
  interval: AppPricingInterval;
  
  /**
   * The terms and conditions for app usage pricing.
   * Must be present in order to create usage charges.
   * The terms are presented to the merchant when they approve an app's usage charges.
   * 
   */
  terms: string;
}

/**
 * The set of valid sort keys for the AppUsageRecord query.
 */
export const enum AppUsageRecordSortKeys {
  
  /**
   * Sort by the `created_at` value.
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple AppUsageRecords.
 * 
 */
export interface AppUsageRecordConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<AppUsageRecordEdge>;
  
  /**
   * A list of the nodes contained in AppUsageRecordEdge.
   */
  nodes: Array<AppUsageRecord>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one AppUsageRecord and a cursor during pagination.
 * 
 */
export interface AppUsageRecordEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of AppUsageRecordEdge.
   */
  node: AppUsageRecord;
}

/**
 * Store usage for app subscriptions with usage pricing.
 */
export interface AppUsageRecord extends Node {
  
  /**
   * The date and time when the usage record was created.
   */
  createdAt: DateTime;
  
  /**
   * The description of the app usage record.
   */
  description: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * A unique key generated by the client to avoid duplicate charges.
   * 
   */
  idempotencyKey?: string;
  
  /**
   * The price of the usage record.
   */
  price: MoneyV2;
  
  /**
   * Defines the usage pricing plan the merchant is subscribed to.
   */
  subscriptionLineItem: AppSubscriptionLineItem;
}

/**
 * The status of the app subscription.
 */
export const enum AppSubscriptionStatus {
  
  /**
   * The app subscription is pending approval by the merchant.
   */
  PENDING = 'PENDING',
  
  /**
   * The app subscription has been approved by the merchant and is ready to be activated by the app.
   * @deprecated As of API version 2021-01, when a merchant approves an app subscription, the status immediately transitions from `pending` to `active`.
   */
  ACCEPTED = 'ACCEPTED',
  
  /**
   * The app subscription has been approved by the merchant. Active app subscriptions are billed to the shop. After payment, partners receive payouts.
   */
  ACTIVE = 'ACTIVE',
  
  /**
   * The app subscription was declined by the merchant. This is a terminal state.
   */
  DECLINED = 'DECLINED',
  
  /**
   * The app subscription wasn't approved by the merchant within two days of being created. This is a terminal state.
   */
  EXPIRED = 'EXPIRED',
  
  /**
   * The app subscription is on hold due to non-payment. The subscription re-activates after payments resume.
   */
  FROZEN = 'FROZEN',
  
  /**
   * The app subscription was cancelled by the app. This could be caused by the app being uninstalled, a new app subscription being activated, or a direct cancellation by the app. This is a terminal state.
   */
  CANCELLED = 'CANCELLED'
}

/**
 * The set of valid sort keys for the AppSubscription query.
 */
export const enum AppSubscriptionSortKeys {
  
  /**
   * Sort by the `created_at` value.
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple AppSubscriptions.
 * 
 */
export interface AppSubscriptionConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<AppSubscriptionEdge>;
  
  /**
   * A list of the nodes contained in AppSubscriptionEdge.
   */
  nodes: Array<AppSubscription>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one AppSubscription and a cursor during pagination.
 * 
 */
export interface AppSubscriptionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of AppSubscriptionEdge.
   */
  node: AppSubscription;
}

/**
 * The set of valid sort keys for the AppTransaction query.
 */
export const enum AppTransactionSortKeys {
  
  /**
   * Sort by the `created_at` value.
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple AppCredits.
 * 
 */
export interface AppCreditConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<AppCreditEdge>;
  
  /**
   * A list of the nodes contained in AppCreditEdge.
   */
  nodes: Array<AppCredit>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one AppCredit and a cursor during pagination.
 * 
 */
export interface AppCreditEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of AppCreditEdge.
   */
  node: AppCredit;
}

/**
 * App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
 */
export interface AppCredit extends Node {
  
  /**
   * The amount that can be used towards future app purchases in Shopify.
   */
  amount: MoneyV2;
  
  /**
   * The date and time when the app credit was created.
   */
  createdAt: DateTime;
  
  /**
   * The description of the app credit.
   */
  description: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Whether the app credit is a test transaction.
   */
  test: boolean;
}

/**
 * An auto-generated type for paginating through multiple AppPurchaseOneTimes.
 * 
 */
export interface AppPurchaseOneTimeConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<AppPurchaseOneTimeEdge>;
  
  /**
   * A list of the nodes contained in AppPurchaseOneTimeEdge.
   */
  nodes: Array<AppPurchaseOneTime>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.
 * 
 */
export interface AppPurchaseOneTimeEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of AppPurchaseOneTimeEdge.
   */
  node: AppPurchaseOneTime;
}

/**
 * Services and features purchased once by a store.
 */
export interface AppPurchaseOneTime extends AppPurchase, Node {
  
  /**
   * The date and time when the app purchase occurred.
   */
  createdAt: DateTime;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The name of the app purchase.
   */
  name: string;
  
  /**
   * The amount to be charged to the store for the app purchase.
   */
  price: MoneyV2;
  
  /**
   * The status of the app purchase.
   */
  status: AppPurchaseStatus;
  
  /**
   * Whether the app purchase is a test transaction.
   */
  test: boolean;
}

/**
 * Services and features purchased once by the store.
 */
export interface AppPurchase {
  
  /**
   * The date and time when the app purchase occurred.
   */
  createdAt: DateTime;
  
  /**
   * The name of the app purchase.
   */
  name: string;
  
  /**
   * The amount to be charged to the store for the app purchase.
   */
  price: MoneyV2;
  
  /**
   * The status of the app purchase.
   */
  status: AppPurchaseStatus;
  
  /**
   * Whether the app purchase is a test transaction.
   */
  test: boolean;
}

/** Use this to resolve interface type AppPurchase */
export type PossibleAppPurchaseTypeNames = 'AppPurchaseOneTime';

export interface AppPurchaseNameMap {
  AppPurchase: AppPurchase;
  AppPurchaseOneTime: AppPurchaseOneTime;
}

/**
 * The approval status of the app purchase.
 * 
 * The merchant is charged for the purchase immediately after approval, and the status changes to `active`.
 * If the payment fails, then the app purchase remains `pending`.
 * 
 * Purchases start as `pending` and can change to: `active`, `declined`, `expired`. After a purchase changes, it
 * remains in that final state.
 * 
 */
export const enum AppPurchaseStatus {
  
  /**
   * The app purchase has been approved by the merchant and is ready to be activated by the app. App purchases created through the GraphQL Admin API are activated upon approval.
   * @deprecated As of API version 2021-01, when a merchant accepts an app purchase, the status immediately changes from `pending` to `active`.
   */
  ACCEPTED = 'ACCEPTED',
  
  /**
   * The app purchase was approved by the merchant and has been activated by the app. Active app purchases are charged to the merchant and are paid out to the partner.
   */
  ACTIVE = 'ACTIVE',
  
  /**
   * The app purchase was declined by the merchant.
   */
  DECLINED = 'DECLINED',
  
  /**
   * The app purchase was not accepted within two days of being created.
   */
  EXPIRED = 'EXPIRED',
  
  /**
   * The app purchase is pending approval by the merchant.
   */
  PENDING = 'PENDING'
}

/**
 * Private metafields represent custom metadata that is attached to a resource.
 * Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.
 * 
 * An application can create a maximum of 10 private metafields per shop resource.
 * 
 */
export interface PrivateMetafield extends Node {
  
  /**
   * The date and time when the private metafield was created.
   */
  createdAt: DateTime;
  
  /**
   * The ID of the private metafield.
   */
  id: string;
  
  /**
   * The key name of the private metafield.
   */
  key: string;
  
  /**
   * The namespace of the private metafield.
   */
  namespace: string;
  
  /**
   * The date and time when the private metafield was updated.
   */
  updatedAt: DateTime;
  
  /**
   * The value of a private metafield.
   */
  value: string;
  
  /**
   * Represents the private metafield value type.
   */
  valueType: PrivateMetafieldValueType;
}

/**
 * Supported private metafield value types.
 */
export const enum PrivateMetafieldValueType {
  
  /**
   * A string metafield.
   */
  STRING = 'STRING',
  
  /**
   * An integer metafield.
   */
  INTEGER = 'INTEGER',
  
  /**
   * A JSON string metafield.
   */
  JSON_STRING = 'JSON_STRING'
}

/**
 * An auto-generated type for paginating through multiple PrivateMetafields.
 * 
 */
export interface PrivateMetafieldConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<PrivateMetafieldEdge>;
  
  /**
   * A list of the nodes contained in PrivateMetafieldEdge.
   */
  nodes: Array<PrivateMetafield>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one PrivateMetafield and a cursor during pagination.
 * 
 */
export interface PrivateMetafieldEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of PrivateMetafieldEdge.
   */
  node: PrivateMetafield;
}

/**
 * A publication is a group of products and collections that is published to an app.
 * 
 */
export interface Publication extends Node {
  
  /**
   * The app associated with the publication.
   * @deprecated Use [AppCatalog.apps](https://shopify.dev/api/admin-graphql/unstable/objects/AppCatalog#connection-appcatalog-apps) instead.
   */
  app: App;
  
  /**
   * Whether new products are automatically published to this publication.
   */
  autoPublish: boolean;
  
  /**
   * The catalog associated with the publication.
   */
  catalog?: Catalog;
  
  /**
   * The collection publications for the list of collections published to the publication.
   */
  collectionPublicationsV3: ResourcePublicationConnection;
  
  /**
   * The list of collections published to the publication.
   */
  collections: CollectionConnection;
  
  /**
   * Whether the collection is available to the publication.
   */
  hasCollection: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Name of the publication.
   * @deprecated Use [Catalog.title](https://shopify.dev/api/admin-graphql/unstable/interfaces/Catalog#field-catalog-title) instead.
   */
  name: string;
  
  /**
   * A background operation associated with this publication.
   */
  operation?: PublicationOperation;
  
  /**
   * The product publications for the list of products published to the publication.
   */
  productPublicationsV3: ResourcePublicationConnection;
  
  /**
   * The list of products published to the publication.
   */
  products: ProductConnection;
  
  /**
   * Whether the publication supports future publishing.
   */
  supportsFuturePublishing: boolean;
}

/**
 * An auto-generated type for paginating through multiple Collections.
 * 
 */
export interface CollectionConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<CollectionEdge>;
  
  /**
   * A list of the nodes contained in CollectionEdge.
   */
  nodes: Array<Collection>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Collection and a cursor during pagination.
 * 
 */
export interface CollectionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of CollectionEdge.
   */
  node: Collection;
}

/**
 * The possible types of publication operations.
 */
export type PublicationOperation =
AddAllProductsOperation |
CatalogCsvOperation |
PublicationResourceOperation;

/** Use this to resolve union type PublicationOperation */
export type PossiblePublicationOperationTypeNames =
'AddAllProductsOperation' |
'CatalogCsvOperation' |
'PublicationResourceOperation';

export interface PublicationOperationNameMap {
  PublicationOperation: PublicationOperation;
  AddAllProductsOperation: AddAllProductsOperation;
  CatalogCsvOperation: CatalogCsvOperation;
  PublicationResourceOperation: PublicationResourceOperation;
}

/**
 * Represents an operation publishing all products to a publication.
 */
export interface AddAllProductsOperation extends Node, ResourceOperation {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The count of processed rows, summing imported, failed, and skipped rows.
   */
  processedRowCount?: number;
  
  /**
   * Represents a rows objects within this background operation.
   */
  rowCount?: RowCount;
  
  /**
   * The status of this operation.
   */
  status: ResourceOperationStatus;
}

/**
 * A catalog csv operation represents a CSV file import.
 */
export interface CatalogCsvOperation extends Node, ResourceOperation {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The count of processed rows, summing imported, failed, and skipped rows.
   */
  processedRowCount?: number;
  
  /**
   * Represents a rows objects within this background operation.
   */
  rowCount?: RowCount;
  
  /**
   * The status of this operation.
   */
  status: ResourceOperationStatus;
}

/**
 * A bulk update operation on a publication.
 */
export interface PublicationResourceOperation extends Node, ResourceOperation {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The count of processed rows, summing imported, failed, and skipped rows.
   */
  processedRowCount?: number;
  
  /**
   * Represents a rows objects within this background operation.
   */
  rowCount?: RowCount;
  
  /**
   * The status of this operation.
   */
  status: ResourceOperationStatus;
}

/**
 * An auto-generated type for paginating through multiple Products.
 * 
 */
export interface ProductConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ProductEdge>;
  
  /**
   * A list of the nodes contained in ProductEdge.
   */
  nodes: Array<Product>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Product and a cursor during pagination.
 * 
 */
export interface ProductEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ProductEdge.
   */
  node: Product;
}

/**
 * The set of valid sort keys for the AppRevenueAttributionRecord query.
 */
export const enum AppRevenueAttributionRecordSortKeys {
  
  /**
   * Sort by the `created_at` value.
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple AppRevenueAttributionRecords.
 * 
 */
export interface AppRevenueAttributionRecordConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<AppRevenueAttributionRecordEdge>;
  
  /**
   * A list of the nodes contained in AppRevenueAttributionRecordEdge.
   */
  nodes: Array<AppRevenueAttributionRecord>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.
 * 
 */
export interface AppRevenueAttributionRecordEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of AppRevenueAttributionRecordEdge.
   */
  node: AppRevenueAttributionRecord;
}

/**
 * Represents app revenue that was captured externally by the partner.
 */
export interface AppRevenueAttributionRecord extends Node {
  
  /**
   * The financial amount captured in this attribution.
   */
  amount: MoneyV2;
  
  /**
   * The timestamp when the financial amount was captured.
   */
  capturedAt: DateTime;
  
  /**
   * The timestamp at which this revenue attribution was issued.
   */
  createdAt: DateTime;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The unique value submitted during the creation of the app revenue attribution record.
   * For more information, refer to
   * [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
   * 
   */
  idempotencyKey: string;
  
  /**
   * Indicates whether this is a test submission.
   */
  test: boolean;
  
  /**
   * The type of revenue attribution.
   */
  type: AppRevenueAttributionType;
}

/**
 * Represents the billing types of revenue attribution.
 */
export const enum AppRevenueAttributionType {
  
  /**
   * App purchase related revenue collection.
   */
  APPLICATION_PURCHASE = 'APPLICATION_PURCHASE',
  
  /**
   * App subscription revenue collection.
   */
  APPLICATION_SUBSCRIPTION = 'APPLICATION_SUBSCRIPTION',
  
  /**
   * App usage-based revenue collection.
   */
  APPLICATION_USAGE = 'APPLICATION_USAGE',
  
  /**
   * Other app revenue collection type.
   */
  OTHER = 'OTHER'
}

/**
 * The public-facing category for an app.
 */
export const enum AppPublicCategory {
  
  /**
   * The app's public category is [private](https://shopify.dev/apps/distribution#deprecated-app-types).
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * The app's public category is [public](https://shopify.dev/apps/distribution#capabilities-and-requirements).
   */
  PUBLIC = 'PUBLIC',
  
  /**
   * The app's public category is [custom](https://shopify.dev/apps/distribution#capabilities-and-requirements).
   */
  CUSTOM = 'CUSTOM',
  
  /**
   * The app's public category is other. An app is in this category if it's not classified under any of the other app types (private, public, or custom).
   */
  OTHER = 'OTHER'
}

/**
 * An auto-generated type for paginating through multiple ProductPublications.
 * 
 */
export interface ProductPublicationConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ProductPublicationEdge>;
  
  /**
   * A list of the nodes contained in ProductPublicationEdge.
   */
  nodes: Array<ProductPublication>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ProductPublication and a cursor during pagination.
 * 
 */
export interface ProductPublicationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ProductPublicationEdge.
   */
  node: ProductPublication;
}

/**
 * Represents the channels where a product is published.
 */
export interface ProductPublication {
  
  /**
   * The channel where the product was or is published.
   */
  channel: Channel;
  
  /**
   * Whether the publication is published or not.
   */
  isPublished: boolean;
  
  /**
   * The product that was or is going to be published on the channel.
   */
  product: Product;
  
  /**
   * The date that the product was or is going to be published on the channel.
   */
  publishDate?: DateTime;
}

/**
 * The associated catalog's type.
 * 
 */
export const enum CatalogType {
  
  /**
   * Not associated to a catalog.
   */
  NONE = 'NONE',
  
  /**
   * Catalogs belonging to apps.
   */
  APP = 'APP',
  
  /**
   * Catalogs belonging to company locations.
   */
  COMPANY_LOCATION = 'COMPANY_LOCATION',
  
  /**
   * Catalogs belonging to markets.
   */
  MARKET = 'MARKET'
}

/**
 * An auto-generated type for paginating through multiple ResourcePublicationV2s.
 * 
 */
export interface ResourcePublicationV2Connection {
  
  /**
   * A list of edges.
   */
  edges: Array<ResourcePublicationV2Edge>;
  
  /**
   * A list of the nodes contained in ResourcePublicationV2Edge.
   */
  nodes: Array<ResourcePublicationV2>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.
 * 
 */
export interface ResourcePublicationV2Edge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ResourcePublicationV2Edge.
   */
  node: ResourcePublicationV2;
}

/**
 * A resource publication represents information about the publication of a resource.
 * Unlike `ResourcePublication`, an instance of `ResourcePublicationV2` can't be unpublished. It must either be published or scheduled to be published.
 * 
 * See [ResourcePublication](/api/admin-graphql/latest/objects/ResourcePublication) for more context.
 * 
 */
export interface ResourcePublicationV2 {
  
  /**
   * Whether the resource publication is published. If true, then the resource publication is published to the publication.
   * If false, then the resource publication is staged to be published to the publication.
   * 
   */
  isPublished: boolean;
  
  /**
   * The publication the resource publication is published to.
   */
  publication: Publication;
  
  /**
   * The date that the resource publication was or is going to be published to the publication.
   */
  publishDate?: DateTime;
  
  /**
   * The resource published to the publication.
   */
  publishable: Publishable;
}

/**
 * An auto-generated type for paginating through multiple Channels.
 * 
 */
export interface ChannelConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ChannelEdge>;
  
  /**
   * A list of the nodes contained in ChannelEdge.
   */
  nodes: Array<Channel>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Channel and a cursor during pagination.
 * 
 */
export interface ChannelEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ChannelEdge.
   */
  node: Channel;
}

/**
 * An auto-generated type for paginating through multiple Publications.
 * 
 */
export interface PublicationConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<PublicationEdge>;
  
  /**
   * A list of the nodes contained in PublicationEdge.
   */
  nodes: Array<Publication>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Publication and a cursor during pagination.
 * 
 */
export interface PublicationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of PublicationEdge.
   */
  node: Publication;
}

/**
 * The set of valid sort keys for the Collection query.
 */
export const enum CollectionSortKeys {
  
  /**
   * Sort by the `title` value.
   */
  TITLE = 'TITLE',
  
  /**
   * Sort by the `updated_at` value.
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * The compare-at price range of the product.
 */
export interface ProductCompareAtPriceRange {
  
  /**
   * The highest variant's compare-at price.
   */
  maxVariantCompareAtPrice: MoneyV2;
  
  /**
   * The lowest variant's compare-at price.
   */
  minVariantCompareAtPrice: MoneyV2;
}

/**
 * The price of a product in a specific country.
 * Prices vary between countries.
 * 
 */
export interface ProductContextualPricing {
  
  /**
   * The number of fixed quantity rules for the product's variants on the price list.
   */
  fixedQuantityRulesCount: number;
  
  /**
   * The pricing of the variant with the highest price in the given context.
   */
  maxVariantPricing?: ProductVariantContextualPricing;
  
  /**
   * The pricing of the variant with the lowest price in the given context.
   */
  minVariantPricing?: ProductVariantContextualPricing;
  
  /**
   * The price range of the product with prices formatted as decimals.
   */
  priceRange: ProductPriceRangeV2;
}

/**
 * The price range of the product.
 */
export interface ProductPriceRangeV2 {
  
  /**
   * The highest variant's price.
   */
  maxVariantPrice: MoneyV2;
  
  /**
   * The lowest variant's price.
   */
  minVariantPrice: MoneyV2;
}

/**
 * A string containing HTML code. Refer to the [HTML spec](https://html.spec.whatwg.org/#elements-3) for a
 * complete list of HTML elements.
 * 
 * Example value: `"<p>Grey cotton knit sweater.</p>"`
 * 
 */
export type HTML = any;

/**
 * Represents a media interface.
 */
export interface Media {
  
  /**
   * A word or phrase to share the nature or contents of a media.
   */
  alt?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The media content type.
   */
  mediaContentType: MediaContentType;
  
  /**
   * Any errors which have occurred on the media.
   */
  mediaErrors: Array<MediaError>;
  
  /**
   * The warnings attached to the media.
   */
  mediaWarnings: Array<MediaWarning>;
  
  /**
   * The preview image for the media.
   */
  preview?: MediaPreviewImage;
  
  /**
   * Current status of the media.
   */
  status: MediaStatus;
}

/** Use this to resolve interface type Media */
export type PossibleMediaTypeNames =
'MediaImage' |
'Video' |
'ExternalVideo' |
'Model3d';

export interface MediaNameMap {
  Media: Media;
  MediaImage: MediaImage;
  Video: Video;
  ExternalVideo: ExternalVideo;
  Model3d: Model3d;
}

/**
 * The possible content types for a media object.
 */
export const enum MediaContentType {
  
  /**
   * A Shopify-hosted video.
   */
  VIDEO = 'VIDEO',
  
  /**
   * An externally hosted video.
   */
  EXTERNAL_VIDEO = 'EXTERNAL_VIDEO',
  
  /**
   * A 3d model.
   */
  MODEL_3D = 'MODEL_3D',
  
  /**
   * A Shopify-hosted image.
   */
  IMAGE = 'IMAGE'
}

/**
 * Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.
 * Check the media before attempting to upload again.
 * 
 */
export interface MediaError {
  
  /**
   * Code representing the type of error.
   */
  code: MediaErrorCode;
  
  /**
   * Additional details regarding the error.
   */
  details?: string;
  
  /**
   * Translated error message.
   */
  message: string;
}

/**
 * Error types for media.
 */
export const enum MediaErrorCode {
  
  /**
   * Media error has occured for unknown reason.
   */
  UNKNOWN = 'UNKNOWN',
  
  /**
   * Media could not be processed because the signed URL was invalid.
   */
  INVALID_SIGNED_URL = 'INVALID_SIGNED_URL',
  
  /**
   * Media could not be processed because the image could not be downloaded.
   */
  IMAGE_DOWNLOAD_FAILURE = 'IMAGE_DOWNLOAD_FAILURE',
  
  /**
   * Media could not be processed because the image could not be processed.
   */
  IMAGE_PROCESSING_FAILURE = 'IMAGE_PROCESSING_FAILURE',
  
  /**
   * Media timed out because it is currently being modified by another operation.
   */
  MEDIA_TIMEOUT_ERROR = 'MEDIA_TIMEOUT_ERROR',
  
  /**
   * Media could not be created because the external video could not be found.
   */
  EXTERNAL_VIDEO_NOT_FOUND = 'EXTERNAL_VIDEO_NOT_FOUND',
  
  /**
   * Media could not be created because the external video is not listed or is private.
   */
  EXTERNAL_VIDEO_UNLISTED = 'EXTERNAL_VIDEO_UNLISTED',
  
  /**
   * Media could not be created because the external video has an invalid aspect ratio.
   */
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO = 'EXTERNAL_VIDEO_INVALID_ASPECT_RATIO',
  
  /**
   * Media could not be created because embed permissions are disabled for this video.
   */
  EXTERNAL_VIDEO_EMBED_DISABLED = 'EXTERNAL_VIDEO_EMBED_DISABLED',
  
  /**
   * Media could not be created because video is either not found or still transcoding.
   */
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING = 'EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING',
  
  /**
   * File could not be processed because the source could not be downloaded.
   */
  GENERIC_FILE_DOWNLOAD_FAILURE = 'GENERIC_FILE_DOWNLOAD_FAILURE',
  
  /**
   * File could not be created because the size is too large.
   */
  GENERIC_FILE_INVALID_SIZE = 'GENERIC_FILE_INVALID_SIZE',
  
  /**
   * Media could not be created because the metadata could not be read.
   */
  VIDEO_METADATA_READ_ERROR = 'VIDEO_METADATA_READ_ERROR',
  
  /**
   * Media could not be created because it has an invalid file type.
   */
  VIDEO_INVALID_FILETYPE_ERROR = 'VIDEO_INVALID_FILETYPE_ERROR',
  
  /**
   * Media could not be created because it does not meet the minimum width requirement.
   */
  VIDEO_MIN_WIDTH_ERROR = 'VIDEO_MIN_WIDTH_ERROR',
  
  /**
   * Media could not be created because it does not meet the maximum width requirement.
   */
  VIDEO_MAX_WIDTH_ERROR = 'VIDEO_MAX_WIDTH_ERROR',
  
  /**
   * Media could not be created because it does not meet the minimum height requirement.
   */
  VIDEO_MIN_HEIGHT_ERROR = 'VIDEO_MIN_HEIGHT_ERROR',
  
  /**
   * Media could not be created because it does not meet the maximum height requirement.
   */
  VIDEO_MAX_HEIGHT_ERROR = 'VIDEO_MAX_HEIGHT_ERROR',
  
  /**
   * Media could not be created because it does not meet the minimum duration requirement.
   */
  VIDEO_MIN_DURATION_ERROR = 'VIDEO_MIN_DURATION_ERROR',
  
  /**
   * Media could not be created because it does not meet the maximum duration requirement.
   */
  VIDEO_MAX_DURATION_ERROR = 'VIDEO_MAX_DURATION_ERROR',
  
  /**
   * Video failed validation.
   */
  VIDEO_VALIDATION_ERROR = 'VIDEO_VALIDATION_ERROR',
  
  /**
   * Model failed validation.
   */
  MODEL3D_VALIDATION_ERROR = 'MODEL3D_VALIDATION_ERROR',
  
  /**
   * Media could not be created because the model's thumbnail generation failed.
   */
  MODEL3D_THUMBNAIL_GENERATION_ERROR = 'MODEL3D_THUMBNAIL_GENERATION_ERROR',
  
  /**
   * There was an issue while trying to generate a new thumbnail.
   */
  MODEL3D_THUMBNAIL_REGENERATION_ERROR = 'MODEL3D_THUMBNAIL_REGENERATION_ERROR',
  
  /**
   * Media could not be created because the model can't be converted to USDZ format.
   */
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR = 'MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR',
  
  /**
   * Media could not be created because the model file failed processing.
   */
  MODEL3D_GLB_OUTPUT_CREATION_ERROR = 'MODEL3D_GLB_OUTPUT_CREATION_ERROR',
  
  /**
   * Media could not be created because the model file failed processing.
   */
  MODEL3D_PROCESSING_FAILURE = 'MODEL3D_PROCESSING_FAILURE',
  
  /**
   * Media could not be created because the image is an unsupported file type.
   */
  UNSUPPORTED_IMAGE_FILE_TYPE = 'UNSUPPORTED_IMAGE_FILE_TYPE',
  
  /**
   * Media could not be created because the image size is too large.
   */
  INVALID_IMAGE_FILE_SIZE = 'INVALID_IMAGE_FILE_SIZE',
  
  /**
   * Media could not be created because the image has an invalid aspect ratio.
   */
  INVALID_IMAGE_ASPECT_RATIO = 'INVALID_IMAGE_ASPECT_RATIO',
  
  /**
   * Media could not be created because the image's resolution exceeds the max limit.
   */
  INVALID_IMAGE_RESOLUTION = 'INVALID_IMAGE_RESOLUTION',
  
  /**
   * Media could not be created because the cumulative file storage limit would be exceeded.
   */
  FILE_STORAGE_LIMIT_EXCEEDED = 'FILE_STORAGE_LIMIT_EXCEEDED',
  
  /**
   * Media could not be created because a file with the same name already exists.
   */
  DUPLICATE_FILENAME_ERROR = 'DUPLICATE_FILENAME_ERROR'
}

/**
 * Represents a media warning. This occurs when there is a non-blocking concern regarding your media.
 * Consider reviewing your media to ensure it is correct and its parameters are as expected.
 * 
 */
export interface MediaWarning {
  
  /**
   * The code representing the type of warning.
   */
  code: MediaWarningCode;
  
  /**
   * Translated warning message.
   */
  message?: string;
}

/**
 * Warning types for media.
 */
export const enum MediaWarningCode {
  
  /**
   * 3D model physical size might be invalid. The dimensions of your model are very small. Consider reviewing your model to ensure they are correct.
   */
  MODEL_SMALL_PHYSICAL_SIZE = 'MODEL_SMALL_PHYSICAL_SIZE',
  
  /**
   * 3D model physical size might be invalid. The dimensions of your model are very large. Consider reviewing your model to ensure they are correct.
   */
  MODEL_LARGE_PHYSICAL_SIZE = 'MODEL_LARGE_PHYSICAL_SIZE'
}

/**
 * Represents the preview image for a media.
 */
export interface MediaPreviewImage {
  
  /**
   * The preview image for the media. Returns `null` until `status` is `READY`.
   */
  image?: Image;
  
  /**
   * Current status of the preview image.
   */
  status: MediaPreviewImageStatus;
}

/**
 * The possible statuses for a media preview image.
 */
export const enum MediaPreviewImageStatus {
  
  /**
   * Preview image is uploaded but not yet processed.
   */
  UPLOADED = 'UPLOADED',
  
  /**
   * Preview image is being processed.
   */
  PROCESSING = 'PROCESSING',
  
  /**
   * Preview image is ready to be displayed.
   */
  READY = 'READY',
  
  /**
   * Preview image processing has failed.
   */
  FAILED = 'FAILED'
}

/**
 * The possible statuses for a media object.
 */
export const enum MediaStatus {
  
  /**
   * Media has been uploaded but not yet processed.
   */
  UPLOADED = 'UPLOADED',
  
  /**
   * Media is being processed.
   */
  PROCESSING = 'PROCESSING',
  
  /**
   * Media is ready to be displayed.
   */
  READY = 'READY',
  
  /**
   * Media processing has failed.
   */
  FAILED = 'FAILED'
}

/**
 * Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.
 * 
 */
export interface ResourceFeedback {
  
  /**
   * Feedback from an app about the steps a merchant needs to take to set up the app on their store.
   * @deprecated Use `details` instead.
   */
  appFeedback: Array<AppFeedback>;
  
  /**
   * List of AppFeedback detailing issues regarding a resource.
   */
  details: Array<AppFeedback>;
  
  /**
   * Summary of resource feedback pertaining to the resource.
   */
  summary: string;
}

/**
 * The set of valid sort keys for the ProductImage query.
 */
export const enum ProductImageSortKeys {
  
  /**
   * Sort by the `created_at` value.
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Sort by the `position` value.
   */
  POSITION = 'POSITION',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple Images.
 * 
 */
export interface ImageConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ImageEdge>;
  
  /**
   * A list of the nodes contained in ImageEdge.
   */
  nodes: Array<Image>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Image and a cursor during pagination.
 * 
 */
export interface ImageEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ImageEdge.
   */
  node: Image;
}

/**
 * The set of valid sort keys for the ProductMedia query.
 */
export const enum ProductMediaSortKeys {
  
  /**
   * Sort by the `position` value.
   */
  POSITION = 'POSITION',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple Media.
 * 
 */
export interface MediaConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<MediaEdge>;
  
  /**
   * A list of the nodes contained in MediaEdge.
   */
  nodes: Array<Media>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Media and a cursor during pagination.
 * 
 */
export interface MediaEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of MediaEdge.
   */
  node: Media;
}

/**
 * The product property names. For example, "Size", "Color", and "Material".
 * Variants are selected based on permutations of these options.
 * The limit for each product property name is 255 characters.
 * 
 */
export interface ProductOption extends HasPublishedTranslations, Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The product option’s name.
   */
  name: string;
  
  /**
   * The product option's position.
   */
  position: number;
  
  /**
   * The translations associated with the resource.
   */
  translations: Array<Translation>;
  
  /**
   * The corresponding value to the product option name.
   */
  values: Array<string>;
}

/**
 * The price range of the product.
 */
export interface ProductPriceRange {
  
  /**
   * The highest variant's price.
   */
  maxVariantPrice: MoneyV2;
  
  /**
   * The lowest variant's price.
   */
  minVariantPrice: MoneyV2;
}

/**
 * The details of a specific product category within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
 */
export interface ProductCategory {
  
  /**
   * The product taxonomy node associated with the product category.
   */
  productTaxonomyNode?: ProductTaxonomyNode;
}

/**
 * Represents a [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) node.
 */
export interface ProductTaxonomyNode extends Node {
  
  /**
   * The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
   */
  fullName: string;
  
  /**
   * The ID of the product taxonomy node.
   */
  id: string;
  
  /**
   * Whether the node is a leaf node.
   */
  isLeaf: boolean;
  
  /**
   * Whether the node is a root node.
   */
  isRoot: boolean;
  
  /**
   * The name of the product taxonomy node. For example, Dog Beds.
   */
  name: string;
}

/**
 * The context data that determines the publication status of a product.
 */
export interface ContextualPublicationContext {
  
  /**
   * The country code used to fetch country-specific publication.
   */
  country?: CountryCode;
  
  /**
   * The company location ID used to fetch company-specific publication.
   */
  companyLocationId?: string;
}

/**
 * An auto-generated type for paginating through multiple SellingPlanGroups.
 * 
 */
export interface SellingPlanGroupConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<SellingPlanGroupEdge>;
  
  /**
   * A list of the nodes contained in SellingPlanGroupEdge.
   */
  nodes: Array<SellingPlanGroup>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
 * 
 */
export interface SellingPlanGroupEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of SellingPlanGroupEdge.
   */
  node: SellingPlanGroup;
}

/**
 * Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
 * and associated records (selling plans and policies) are deleted 48 hours after a merchant
 * uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
 * 
 */
export interface SellingPlanGroup extends HasPublishedTranslations, Node {
  
  /**
   * The ID for app, exposed in Liquid and product JSON.
   */
  appId?: string;
  
  /**
   * Whether the given product is directly associated to the selling plan group.
   */
  appliesToProduct: boolean;
  
  /**
   * Whether the given product variant is directly associated to the selling plan group.
   */
  appliesToProductVariant: boolean;
  
  /**
   * Whether any of the product variants of the given product are associated to the selling plan group.
   * 
   */
  appliesToProductVariants: boolean;
  
  /**
   * The date and time when the selling plan group was created.
   */
  createdAt: DateTime;
  
  /**
   * The merchant-facing description of the selling plan group.
   */
  description?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The merchant-facing label of the selling plan group.
   */
  merchantCode: string;
  
  /**
   * The buyer-facing label of the selling plan group.
   */
  name: string;
  
  /**
   * The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
   */
  options: Array<string>;
  
  /**
   * The relative position of the selling plan group for display.
   */
  position?: number;
  
  /**
   * A count of products associated to the selling plan group.
   */
  productCount: number;
  
  /**
   * A count of product variants associated to the selling plan group.
   */
  productVariantCount: number;
  
  /**
   * Product variants associated to the selling plan group.
   */
  productVariants: ProductVariantConnection;
  
  /**
   * Products associated to the selling plan group.
   */
  products: ProductConnection;
  
  /**
   * Selling plans associated to the selling plan group.
   */
  sellingPlans: SellingPlanConnection;
  
  /**
   * A summary of the policies associated to the selling plan group.
   */
  summary?: string;
  
  /**
   * The translations associated with the resource.
   */
  translations: Array<Translation>;
}

/**
 * An auto-generated type for paginating through multiple ProductVariants.
 * 
 */
export interface ProductVariantConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ProductVariantEdge>;
  
  /**
   * A list of the nodes contained in ProductVariantEdge.
   */
  nodes: Array<ProductVariant>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ProductVariant and a cursor during pagination.
 * 
 */
export interface ProductVariantEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ProductVariantEdge.
   */
  node: ProductVariant;
}

/**
 * An auto-generated type for paginating through multiple SellingPlans.
 * 
 */
export interface SellingPlanConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<SellingPlanEdge>;
  
  /**
   * A list of the nodes contained in SellingPlanEdge.
   */
  nodes: Array<SellingPlan>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one SellingPlan and a cursor during pagination.
 * 
 */
export interface SellingPlanEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of SellingPlanEdge.
   */
  node: SellingPlan;
}

/**
 * Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
 * and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
 * up these records if you need to restore them later.
 * 
 * For more information on selling plans, refer to
 * [*Creating and managing selling plans*](https://shopify.dev/docs/apps/selling-strategies/subscriptions/selling-plans).
 * 
 */
export interface SellingPlan extends HasPublishedTranslations, Node {
  
  /**
   * A selling plan policy which describes the recurring billing details.
   */
  billingPolicy: SellingPlanBillingPolicy;
  
  /**
   * The category used to classify the selling plan for reporting purposes.
   */
  category?: SellingPlanCategory;
  
  /**
   * The date and time when the selling plan was created.
   */
  createdAt: DateTime;
  
  /**
   * A selling plan policy which describes the delivery details.
   */
  deliveryPolicy: SellingPlanDeliveryPolicy;
  
  /**
   * Buyer facing string which describes the selling plan commitment.
   */
  description?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * When to reserve inventory for a selling plan.
   */
  inventoryPolicy?: SellingPlanInventoryPolicy;
  
  /**
   * A customer-facing description of the selling plan.
   * 
   * If your store supports multiple currencies, then don't include country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This field won't be converted to reflect different currencies.
   * 
   */
  name: string;
  
  /**
   * The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
   */
  options: Array<string>;
  
  /**
   * Relative position of the selling plan for display. A lower position will be displayed before a higher position.
   */
  position?: number;
  
  /**
   * Selling plan pricing details.
   */
  pricingPolicies: Array<SellingPlanPricingPolicy>;
  
  /**
   * The translations associated with the resource.
   */
  translations: Array<Translation>;
}

/**
 * Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
 * three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
 * policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
 * We recommend backing up these records if you need to restore them later.
 * 
 */
export type SellingPlanBillingPolicy =
SellingPlanFixedBillingPolicy |
SellingPlanRecurringBillingPolicy;

/** Use this to resolve union type SellingPlanBillingPolicy */
export type PossibleSellingPlanBillingPolicyTypeNames =
'SellingPlanFixedBillingPolicy' |
'SellingPlanRecurringBillingPolicy';

export interface SellingPlanBillingPolicyNameMap {
  SellingPlanBillingPolicy: SellingPlanBillingPolicy;
  SellingPlanFixedBillingPolicy: SellingPlanFixedBillingPolicy;
  SellingPlanRecurringBillingPolicy: SellingPlanRecurringBillingPolicy;
}

/**
 * The fixed selling plan billing policy defines how much of the price of the product will be billed to customer
 * at checkout. If there is an outstanding balance, it determines when it will be paid.
 * 
 */
export interface SellingPlanFixedBillingPolicy {
  
  /**
   * The checkout charge when the full amount isn't charged at checkout.
   */
  checkoutCharge: SellingPlanCheckoutCharge;
  
  /**
   * The exact time when to capture the full payment.
   */
  remainingBalanceChargeExactTime?: DateTime;
  
  /**
   * The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration.
   * 
   */
  remainingBalanceChargeTimeAfterCheckout?: string;
  
  /**
   * When to capture payment for amount due.
   */
  remainingBalanceChargeTrigger: SellingPlanRemainingBalanceChargeTrigger;
}

/**
 * The amount charged at checkout when the full amount isn't charged at checkout.
 */
export interface SellingPlanCheckoutCharge {
  
  /**
   * The charge type for the checkout charge.
   */
  type: SellingPlanCheckoutChargeType;
  
  /**
   * The charge value for the checkout charge.
   */
  value: SellingPlanCheckoutChargeValue;
}

/**
 * The checkout charge when the full amount isn't charged at checkout.
 */
export const enum SellingPlanCheckoutChargeType {
  
  /**
   * The checkout charge is a percentage of the product or variant price.
   */
  PERCENTAGE = 'PERCENTAGE',
  
  /**
   * The checkout charge is a fixed price amount.
   */
  PRICE = 'PRICE'
}

/**
 * The portion of the price to be charged at checkout.
 */
export type SellingPlanCheckoutChargeValue =
MoneyV2 |
SellingPlanCheckoutChargePercentageValue;

/** Use this to resolve union type SellingPlanCheckoutChargeValue */
export type PossibleSellingPlanCheckoutChargeValueTypeNames =
'MoneyV2' |
'SellingPlanCheckoutChargePercentageValue';

export interface SellingPlanCheckoutChargeValueNameMap {
  SellingPlanCheckoutChargeValue: SellingPlanCheckoutChargeValue;
  MoneyV2: MoneyV2;
  SellingPlanCheckoutChargePercentageValue: SellingPlanCheckoutChargePercentageValue;
}

/**
 * The percentage value of the price used for checkout charge.
 */
export interface SellingPlanCheckoutChargePercentageValue {
  
  /**
   * The percentage value of the price used for checkout charge.
   */
  percentage: number;
}

/**
 * When to capture the payment for the remaining amount due.
 */
export const enum SellingPlanRemainingBalanceChargeTrigger {
  
  /**
   * When there's no remaining balance to be charged after checkout.
   */
  NO_REMAINING_BALANCE = 'NO_REMAINING_BALANCE',
  
  /**
   * At an exact time defined by the remaining_balance_charge_exact_time field.
   */
  EXACT_TIME = 'EXACT_TIME',
  
  /**
   * After the duration defined by the remaining_balance_charge_time_after_checkout field.
   */
  TIME_AFTER_CHECKOUT = 'TIME_AFTER_CHECKOUT'
}

/**
 * Represents a recurring selling plan billing policy.
 */
export interface SellingPlanRecurringBillingPolicy {
  
  /**
   * Specific anchor dates upon which the billing interval calculations should be made.
   */
  anchors: Array<SellingPlanAnchor>;
  
  /**
   * The date and time when the selling plan billing policy was created.
   */
  createdAt: DateTime;
  
  /**
   * The billing frequency, it can be either: day, week, month or year.
   */
  interval: SellingPlanInterval;
  
  /**
   * The number of intervals between billings.
   */
  intervalCount: number;
  
  /**
   * Maximum number of billing iterations.
   */
  maxCycles?: number;
  
  /**
   * Minimum number of billing iterations.
   */
  minCycles?: number;
}

/**
 * Represents a selling plan policy anchor.
 */
export interface SellingPlanAnchor {
  
  /**
   * The cutoff day for the anchor.
   * 
   * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
   * the days of the week according to ISO 8601, where 1 is Monday.
   * 
   * If `type` is MONTHDAY, then the value must be between 1-31.
   * 
   * If `type` is YEARDAY, then the value must be `null`.
   * 
   */
  cutoffDay?: number;
  
  /**
   * The day of the anchor.
   * 
   * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
   * the days of the week according to ISO 8601, where 1 is Monday.
   * 
   * If `type` isn't WEEKDAY, then the value must be between 1-31.
   * 
   */
  day: number;
  
  /**
   * The month of the anchor. If type is different than YEARDAY, then the value must
   * be `null` or between 1-12.
   * 
   */
  month?: number;
  
  /**
   * Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.
   * 
   */
  type: SellingPlanAnchorType;
}

/**
 * Represents the anchor type.
 */
export const enum SellingPlanAnchorType {
  
  /**
   * Which day of the week, between 1-7.
   */
  WEEKDAY = 'WEEKDAY',
  
  /**
   * Which day of the month, between 1-31.
   */
  MONTHDAY = 'MONTHDAY',
  
  /**
   * Which days of the month and year, month between 1-12, and day between 1-31.
   */
  YEARDAY = 'YEARDAY'
}

/**
 * Represents valid selling plan interval.
 */
export const enum SellingPlanInterval {
  
  /**
   * Day interval.
   */
  DAY = 'DAY',
  
  /**
   * Week interval.
   */
  WEEK = 'WEEK',
  
  /**
   * Month interval.
   */
  MONTH = 'MONTH',
  
  /**
   * Year interval.
   */
  YEAR = 'YEAR'
}

/**
 * The category of the selling plan. For the `OTHER` category,
 *          you must fill out our [request form](https://docs.google.com/forms/d/e/1FAIpQLSeU18Xmw0Q61V8wdH-dfGafFqIBfRchQKUO8WAF3yJTvgyyZQ/viewform),
 *          where we'll review your request for a new purchase option.
 */
export const enum SellingPlanCategory {
  
  /**
   * The selling plan is for anything not in one of the other categories.
   */
  OTHER = 'OTHER',
  
  /**
   * The selling plan is for pre-orders.
   */
  PRE_ORDER = 'PRE_ORDER',
  
  /**
   * The selling plan is for subscriptions.
   */
  SUBSCRIPTION = 'SUBSCRIPTION',
  
  /**
   * The selling plan is for try before you buy purchases.
   */
  TRY_BEFORE_YOU_BUY = 'TRY_BEFORE_YOU_BUY'
}

/**
 * Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
 * every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
 * pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
 * We recommend backing up these records if you need to restore them later.
 * 
 */
export type SellingPlanDeliveryPolicy =
SellingPlanFixedDeliveryPolicy |
SellingPlanRecurringDeliveryPolicy;

/** Use this to resolve union type SellingPlanDeliveryPolicy */
export type PossibleSellingPlanDeliveryPolicyTypeNames =
'SellingPlanFixedDeliveryPolicy' |
'SellingPlanRecurringDeliveryPolicy';

export interface SellingPlanDeliveryPolicyNameMap {
  SellingPlanDeliveryPolicy: SellingPlanDeliveryPolicy;
  SellingPlanFixedDeliveryPolicy: SellingPlanFixedDeliveryPolicy;
  SellingPlanRecurringDeliveryPolicy: SellingPlanRecurringDeliveryPolicy;
}

/**
 * Represents a fixed selling plan delivery policy.
 */
export interface SellingPlanFixedDeliveryPolicy {
  
  /**
   * The specific anchor dates upon which the delivery interval calculations should be made.
   */
  anchors: Array<SellingPlanAnchor>;
  
  /**
   * A buffer period for orders to be included in next fulfillment anchor.
   */
  cutoff?: number;
  
  /**
   * The date and time when the fulfillment should trigger.
   */
  fulfillmentExactTime?: DateTime;
  
  /**
   * What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN.
   */
  fulfillmentTrigger: SellingPlanFulfillmentTrigger;
  
  /**
   * Whether the delivery policy is merchant or buyer-centric.
   * Buyer-centric delivery policies state the time when the buyer will receive the goods.
   * Merchant-centric delivery policies state the time when the fulfillment should be started.
   * Currently, only merchant-centric delivery policies are supported.
   * 
   */
  intent: SellingPlanFixedDeliveryPolicyIntent;
  
  /**
   * The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
   */
  preAnchorBehavior: SellingPlanFixedDeliveryPolicyPreAnchorBehavior;
}

/**
 * Describes what triggers fulfillment.
 */
export const enum SellingPlanFulfillmentTrigger {
  
  /**
   * Use the anchor values to calculate fulfillment date.
   */
  ANCHOR = 'ANCHOR',
  
  /**
   * As soon as possible.
   */
  ASAP = 'ASAP',
  
  /**
   * At an exact time defined by the fulfillment_exact_time field.
   */
  EXACT_TIME = 'EXACT_TIME',
  
  /**
   * Unknown. Usually to be determined in the future.
   */
  UNKNOWN = 'UNKNOWN'
}

/**
 * Possible intentions of a Delivery Policy.
 */
export const enum SellingPlanFixedDeliveryPolicyIntent {
  
  /**
   * A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
   * 
   */
  FULFILLMENT_BEGIN = 'FULFILLMENT_BEGIN'
}

/**
 * The fulfillment or delivery behavior of the first fulfillment when the orderis placed before the anchor.
 */
export const enum SellingPlanFixedDeliveryPolicyPreAnchorBehavior {
  
  /**
   * Orders placed can be fulfilled / delivered immediately. Orders placed inside a cutoff can be fulfilled / delivered at the next anchor.
   * 
   */
  ASAP = 'ASAP',
  
  /**
   * Orders placed can be fulfilled / delivered at the next anchor date.
   * Orders placed inside a cutoff will skip the next anchor and can be fulfilled /
   * delivered at the following anchor.
   * 
   */
  NEXT = 'NEXT'
}

/**
 * Represents a recurring selling plan delivery policy.
 */
export interface SellingPlanRecurringDeliveryPolicy {
  
  /**
   * The specific anchor dates upon which the delivery interval calculations should be made.
   */
  anchors: Array<SellingPlanAnchor>;
  
  /**
   * The date and time when the selling plan delivery policy was created.
   */
  createdAt: DateTime;
  
  /**
   * Number of days which represent a buffer period for orders to be included in a cycle.
   */
  cutoff?: number;
  
  /**
   * Whether the delivery policy is merchant or buyer-centric.
   * Buyer-centric delivery policies state the time when the buyer will receive the goods.
   * Merchant-centric delivery policies state the time when the fulfillment should be started.
   * Currently, only merchant-centric delivery policies are supported.
   * 
   */
  intent: SellingPlanRecurringDeliveryPolicyIntent;
  
  /**
   * The delivery frequency, it can be either: day, week, month or year.
   */
  interval: SellingPlanInterval;
  
  /**
   * The number of intervals between deliveries.
   */
  intervalCount: number;
  
  /**
   * The fulfillment or delivery behavior of the first fulfillment when the order is placed before the anchor. The default value for this field is `ASAP`.
   */
  preAnchorBehavior: SellingPlanRecurringDeliveryPolicyPreAnchorBehavior;
}

/**
 * Whether the delivery policy is merchant or buyer-centric.
 */
export const enum SellingPlanRecurringDeliveryPolicyIntent {
  
  /**
   * A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
   * 
   */
  FULFILLMENT_BEGIN = 'FULFILLMENT_BEGIN'
}

/**
 * The fulfillment or delivery behaviors of the first fulfillment when the orderis placed before the anchor.
 */
export const enum SellingPlanRecurringDeliveryPolicyPreAnchorBehavior {
  
  /**
   * The orders placed can be fulfilled or delivered immediately. The orders placed inside a cutoff can be fulfilled or delivered at the next anchor.
   * 
   */
  ASAP = 'ASAP',
  
  /**
   * The orders placed can be fulfilled or delivered at the next anchor date.
   * The orders placed inside a cutoff will skip the next anchor and can be fulfilled or
   * delivered at the following anchor.
   * 
   */
  NEXT = 'NEXT'
}

/**
 * The selling plan inventory policy.
 */
export interface SellingPlanInventoryPolicy {
  
  /**
   * When to reserve inventory for the order.
   */
  reserve: SellingPlanReserve;
}

/**
 * When to reserve inventory for a selling plan.
 */
export const enum SellingPlanReserve {
  
  /**
   * Reserve inventory when order is fulfilled.
   */
  ON_FULFILLMENT = 'ON_FULFILLMENT',
  
  /**
   * Reserve inventory at time of sale.
   */
  ON_SALE = 'ON_SALE'
}

/**
 * Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
 * for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
 * associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
 * hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
 * to restore them later.
 * 
 */
export type SellingPlanPricingPolicy =
SellingPlanFixedPricingPolicy |
SellingPlanRecurringPricingPolicy;

/** Use this to resolve union type SellingPlanPricingPolicy */
export type PossibleSellingPlanPricingPolicyTypeNames =
'SellingPlanFixedPricingPolicy' |
'SellingPlanRecurringPricingPolicy';

export interface SellingPlanPricingPolicyNameMap {
  SellingPlanPricingPolicy: SellingPlanPricingPolicy;
  SellingPlanFixedPricingPolicy: SellingPlanFixedPricingPolicy;
  SellingPlanRecurringPricingPolicy: SellingPlanRecurringPricingPolicy;
}

/**
 * Represents the pricing policy of a subscription or deferred purchase option selling plan.
 * The selling plan fixed pricing policy works with the billing and delivery policy
 * to determine the final price. Discounts are divided among fulfillments.
 * For example, a subscription with a $10 discount and two deliveries will have a $5
 * discount applied to each delivery.
 * 
 */
export interface SellingPlanFixedPricingPolicy extends SellingPlanPricingPolicyBase {
  
  /**
   * The price adjustment type.
   */
  adjustmentType: SellingPlanPricingPolicyAdjustmentType;
  
  /**
   * The price adjustment value.
   */
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue;
  
  /**
   * The date and time when the fixed selling plan pricing policy was created.
   */
  createdAt: DateTime;
}

/**
 * Represents selling plan pricing policy common fields.
 */
export interface SellingPlanPricingPolicyBase {
  
  /**
   * The price adjustment type.
   */
  adjustmentType: SellingPlanPricingPolicyAdjustmentType;
  
  /**
   * The price adjustment value.
   */
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue;
}

/** Use this to resolve interface type SellingPlanPricingPolicyBase */
export type PossibleSellingPlanPricingPolicyBaseTypeNames =
'SellingPlanFixedPricingPolicy' |
'SellingPlanRecurringPricingPolicy';

export interface SellingPlanPricingPolicyBaseNameMap {
  SellingPlanPricingPolicyBase: SellingPlanPricingPolicyBase;
  SellingPlanFixedPricingPolicy: SellingPlanFixedPricingPolicy;
  SellingPlanRecurringPricingPolicy: SellingPlanRecurringPricingPolicy;
}

/**
 * Represents a selling plan pricing policy adjustment type.
 */
export const enum SellingPlanPricingPolicyAdjustmentType {
  
  /**
   * Percentage off adjustment.
   */
  PERCENTAGE = 'PERCENTAGE',
  
  /**
   * Fixed amount off adjustment.
   */
  FIXED_AMOUNT = 'FIXED_AMOUNT',
  
  /**
   * Price of the policy.
   */
  PRICE = 'PRICE'
}

/**
 * Represents a selling plan pricing policy adjustment value type.
 */
export type SellingPlanPricingPolicyAdjustmentValue =
MoneyV2 |
SellingPlanPricingPolicyPercentageValue;

/** Use this to resolve union type SellingPlanPricingPolicyAdjustmentValue */
export type PossibleSellingPlanPricingPolicyAdjustmentValueTypeNames =
'MoneyV2' |
'SellingPlanPricingPolicyPercentageValue';

export interface SellingPlanPricingPolicyAdjustmentValueNameMap {
  SellingPlanPricingPolicyAdjustmentValue: SellingPlanPricingPolicyAdjustmentValue;
  MoneyV2: MoneyV2;
  SellingPlanPricingPolicyPercentageValue: SellingPlanPricingPolicyPercentageValue;
}

/**
 * The percentage value of a selling plan pricing policy percentage type.
 */
export interface SellingPlanPricingPolicyPercentageValue {
  
  /**
   * The percentage value.
   */
  percentage: number;
}

/**
 * Represents a recurring selling plan pricing policy. It applies after the fixed pricing policy. By using the afterCycle parameter, you can specify the cycle when the recurring pricing policy comes into effect. Recurring pricing policies are not available for deferred purchase options.
 */
export interface SellingPlanRecurringPricingPolicy extends SellingPlanPricingPolicyBase {
  
  /**
   * The price adjustment type.
   */
  adjustmentType: SellingPlanPricingPolicyAdjustmentType;
  
  /**
   * The price adjustment value.
   */
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue;
  
  /**
   * Cycle after which this pricing policy applies.
   */
  afterCycle?: number;
  
  /**
   * The date and time when the recurring selling plan pricing policy was created.
   */
  createdAt: DateTime;
}

/**
 * SEO information.
 */
export interface SEO {
  
  /**
   * SEO Description.
   */
  description?: string;
  
  /**
   * SEO Title.
   */
  title?: string;
}

/**
 * Represents the details of a specific type of product within the [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
 */
export interface StandardizedProductType {
  
  /**
   * The product taxonomy node associated with the standardized product type.
   */
  productTaxonomyNode?: ProductTaxonomyNode;
}

/**
 * The possible product statuses.
 */
export const enum ProductStatus {
  
  /**
   * The product is ready to sell and can be published to sales channels and apps. Products with an active status aren't automatically published to sales channels, such as the online store, or apps. By default, existing products are set to active.
   */
  ACTIVE = 'ACTIVE',
  
  /**
   * The product is no longer being sold and isn't available to customers on sales channels and apps.
   */
  ARCHIVED = 'ARCHIVED',
  
  /**
   * The product isn't ready to sell and is unavailable to customers on sales channels and apps. By default, duplicated and unarchived products are set to draft.
   */
  DRAFT = 'DRAFT'
}

/**
 * Represents a unique identifier in the Storefront API. A `StorefrontID` value can be used wherever an ID is expected in the Storefront API.
 * 
 * Example value: `"Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0LzEwMDc5Nzg1MTAw"`.
 * 
 */
export type StorefrontID = any;

/**
 * The set of valid sort keys for the ProductVariant query.
 */
export const enum ProductVariantSortKeys {
  
  /**
   * Sort by the `title` value.
   */
  TITLE = 'TITLE',
  
  /**
   * Sort by the `name` value.
   */
  NAME = 'NAME',
  
  /**
   * Sort by the `sku` value.
   */
  SKU = 'SKU',
  
  /**
   * Sort by the `inventory_quantity` value.
   */
  INVENTORY_QUANTITY = 'INVENTORY_QUANTITY',
  
  /**
   * Sort by the `inventory_management` value.
   */
  INVENTORY_MANAGEMENT = 'INVENTORY_MANAGEMENT',
  
  /**
   * Sort by available inventory quantity in the location specified by the `query:"location_id:"` argument.
   * Don't use this sort key when no `location_id` in query is specified.
   * 
   */
  INVENTORY_LEVELS_AVAILABLE = 'INVENTORY_LEVELS_AVAILABLE',
  
  /**
   * Sort by the `inventory_policy` value.
   */
  INVENTORY_POLICY = 'INVENTORY_POLICY',
  
  /**
   * Sort by the `full_title` value.
   */
  FULL_TITLE = 'FULL_TITLE',
  
  /**
   * Sort by the `popular` value.
   */
  POPULAR = 'POPULAR',
  
  /**
   * Sort by the `position` value.
   */
  POSITION = 'POSITION',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * Links a location group with zones. Both are associated to a delivery profile.
 */
export interface DeliveryProfileLocationGroup {
  
  /**
   * The countries already selected in any zone for the specified location group.
   */
  countriesInAnyZone: Array<DeliveryCountryAndZone>;
  
  /**
   * The collection of locations that make up the specified location group.
   */
  locationGroup: DeliveryLocationGroup;
  
  /**
   * The applicable zones associated to the specified location group.
   */
  locationGroupZones: DeliveryLocationGroupZoneConnection;
}

/**
 * The country details and the associated shipping zone.
 */
export interface DeliveryCountryAndZone {
  
  /**
   * The country details.
   */
  country: DeliveryCountry;
  
  /**
   * The name of the shipping zone.
   */
  zone: string;
}

/**
 * A country that is used to define a shipping zone.
 */
export interface DeliveryCountry extends Node {
  
  /**
   * A two-letter country code in ISO 3166-1 alpha-2 standard.
   * It also includes a flag indicating whether the country should be
   * a part of the 'Rest Of World' shipping zone.
   * 
   */
  code: DeliveryCountryCodeOrRestOfWorld;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The full name of the country.
   */
  name: string;
  
  /**
   * The list of regions associated with this country.
   */
  provinces: Array<DeliveryProvince>;
  
  /**
   * The translated name of the country. The translation returned is based on the system's locale.
   */
  translatedName: string;
}

/**
 * The country code and whether the country is a part of the 'Rest Of World' shipping zone.
 * 
 */
export interface DeliveryCountryCodeOrRestOfWorld {
  
  /**
   * The country code in the ISO 3166-1 alpha-2 format.
   */
  countryCode?: CountryCode;
  
  /**
   * Whether the country is a part of the 'Rest of World' shipping zone.
   */
  restOfWorld: boolean;
}

/**
 * A region that is used to define a shipping zone.
 */
export interface DeliveryProvince extends Node {
  
  /**
   * The code of the region.
   */
  code: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The full name of the region.
   */
  name: string;
  
  /**
   * The translated name of the region. The translation returned is based on the system's locale.
   */
  translatedName: string;
}

/**
 * A location group is a collection of locations. They share zones and delivery methods across delivery
 * profiles.
 * 
 */
export interface DeliveryLocationGroup extends Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * A list of all locations that are part of this location group.
   */
  locations: LocationConnection;
  
  /**
   * A count of all locations that are part of this location group.
   */
  locationsCount: number;
}

/**
 * The set of valid sort keys for the Location query.
 */
export const enum LocationSortKeys {
  
  /**
   * Sort by the `name` value.
   */
  NAME = 'NAME',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple Locations.
 * 
 */
export interface LocationConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<LocationEdge>;
  
  /**
   * A list of the nodes contained in LocationEdge.
   */
  nodes: Array<Location>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Location and a cursor during pagination.
 * 
 */
export interface LocationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of LocationEdge.
   */
  node: Location;
}

/**
 * Represents the location where the physical good resides.
 * 
 */
export interface Location extends HasMetafieldDefinitions, HasMetafields, LegacyInteroperability, Node {
  
  /**
   * Whether this location can be reactivated.
   */
  activatable: boolean;
  
  /**
   * The address of this location.
   */
  address: LocationAddress;
  
  /**
   * Whether the location address has been verified.
   */
  addressVerified: boolean;
  
  /**
   * Whether this location can be deactivated.
   */
  deactivatable: boolean;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) that the location was deactivated at. For example, 3:30 pm on September 7, 2019 in the time zone of UTC (Universal Time Coordinated) is represented as `"2019-09-07T15:50:00Z`".
   */
  deactivatedAt?: string;
  
  /**
   * Whether this location can be deleted.
   */
  deletable: boolean;
  
  /**
   * Name of the service provider that fulfills from this location.
   */
  fulfillmentService?: FulfillmentService;
  
  /**
   * Whether this location can fulfill online orders.
   */
  fulfillsOnlineOrders: boolean;
  
  /**
   * Whether this location has active inventory.
   */
  hasActiveInventory: boolean;
  
  /**
   * Whether this location has orders that need to be fulfilled.
   */
  hasUnfulfilledOrders: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The quantities of an inventory item at this location.
   */
  inventoryLevel?: InventoryLevel;
  
  /**
   * A list of the quantities of the inventory items that can be stocked at this location.
   */
  inventoryLevels: InventoryLevelConnection;
  
  /**
   * Whether the location is active.
   */
  isActive: boolean;
  
  /**
   * Whether the location is your primary location for shipping inventory.
   * @deprecated The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location
   */
  isPrimary: boolean;
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
  
  /**
   * Local pickup settings for the location.
   */
  localPickupSettingsV2?: DeliveryLocalPickupSettings;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafield definitions.
   */
  metafieldDefinitions: MetafieldDefinitionConnection;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * The name of the location.
   */
  name: string;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored.
   */
  shipsInventory: boolean;
  
  /**
   * List of suggested addresses for this location (empty if none).
   */
  suggestedAddresses: Array<LocationSuggestedAddress>;
}

/**
 * Represents the address of a location.
 * 
 */
export interface LocationAddress {
  
  /**
   * The first line of the address for the location.
   */
  address1?: string;
  
  /**
   * The second line of the address for the location.
   */
  address2?: string;
  
  /**
   * The city of the location.
   */
  city?: string;
  
  /**
   * The country of the location.
   */
  country?: string;
  
  /**
   * The country code of the location.
   */
  countryCode?: string;
  
  /**
   * A formatted version of the address for the location.
   */
  formatted: Array<string>;
  
  /**
   * The approximate latitude coordinates of the location.
   */
  latitude?: number;
  
  /**
   * The approximate longitude coordinates of the location.
   */
  longitude?: number;
  
  /**
   * The phone number of the location.
   */
  phone?: string;
  
  /**
   * The province of the location.
   */
  province?: string;
  
  /**
   * The code for the province, state, or district of the address of the location.
   * 
   */
  provinceCode?: string;
  
  /**
   * The ZIP code of the location.
   */
  zip?: string;
}

/**
 * A **Fulfillment Service** is a third party warehouse that prepares and ships orders
 * on behalf of the store owner. Fulfillment services charge a fee to package and ship items
 * and update product inventory levels. Some well known fulfillment services with Shopify integrations
 * include: Amazon, Shipwire, and Rakuten. When an app registers a new `FulfillmentService` on a store,
 * Shopify automatically creates a `Location` that's associated to the fulfillment service.
 * To learn more about fulfillment services, refer to
 * [Manage fulfillments as a fulfillment service app](https://shopify.dev/apps/fulfillment/fulfillment-service-apps)
 * guide.
 * 
 * ## Mutations
 * 
 * You can work with the `FulfillmentService` object with the
 * [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate),
 * [fulfillmentServiceUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceUpdate),
 * and [fulfillmentServiceDelete](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceDelete)
 * mutations.
 * 
 * ## Hosted endpoints
 * 
 * Fulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that
 * Shopify can query on certain conditions.
 * These endpoints must have a common prefix, and this prefix should be supplied in the `callbackUrl` parameter
 * in the
 * [fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate)
 * mutation.
 * 
 * - Shopify sends POST requests to the `<callbackUrl>/fulfillment_order_notification` endpoint
 *   to notify the fulfillment service about fulfillment requests and fulfillment cancellation requests,
 *   if `fulfillment_orders_opt_in` is set to `true`.
 * 
 *   [As of the 2022-07 API version](https://shopify.dev/changelog/legacy-fulfillment-api-deprecation),
 *   it's mandatory for a fulfillment service to follow a fulfillment order based workflow by
 *   having `fulfillment_orders_opt_in` set to `true`,
 *   hosting the `<callbackUrl>/fulfillment_order_notification` endpoint, and acting on fulfillment requests and cancellations.
 * 
 *   For more information, refer to
 *   [Receive fulfillment requests and cancellations](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
 * - Shopify sends GET requests to the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers for orders,
 *   if `trackingSupport` is set to `true`.
 * 
 *   For more information, refer to
 *   [Enable tracking support](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-8-enable-tracking-support-optional).
 * 
 *   Fulfillment services can also update tracking information with the
 *   [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2) mutation,
 *   rather than waiting for Shopify to ask for tracking numbers.
 * - Shopify sends GET requests to the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
 *   if `inventoryManagement` is set to `true`.
 * 
 *   For more information, refer to
 *   [Sharing inventory levels with Shopify](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-9-share-inventory-levels-with-shopify-optional).
 * 
 * To make sure you have everything set up correctly, you can test the `callbackUrl`-prefixed endpoints
 * in your development store.
 * 
 * ## Resources and webhooks
 * 
 * There are a variety of objects and webhooks that enable a fulfillment service to work.
 * To exchange fulfillment information with Shopify, fulfillment services use the
 * [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder),
 * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment) and
 * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order) objects and related mutations.
 * To act on fulfillment process events that happen on the Shopify side,
 * besides awaiting calls to `callbackUrl`-prefixed endpoints,
 * fulfillment services can subscribe to the
 * [fulfillment order](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
 * and [order](https://shopify.dev/api/admin-rest/latest/resources/webhook)
 * webhooks.
 * 
 */
export interface FulfillmentService {
  
  /**
   * The callback URL that the fulfillment service has registered for requests. The following considerations apply:
   * 
   * - Shopify queries the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers
   *     for orders, if `trackingSupport` is set to `true`.
   * - Shopify queries the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
   *     if `inventoryManagement` is set to `true`.
   * - Shopify uses the `<callbackUrl>/fulfillment_order_notification` endpoint to send
   *     [fulfillment and cancellation requests](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations),
   *     if the fulfillment service has opted in to the fulfillment order based workflow for managing fulfillments
   *     (`fulfillmentOrdersOptIn` is set to `true`).
   * 
   */
  callbackUrl?: URL;
  
  /**
   * Whether the fulfillment service uses the [fulfillment order based workflow](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments) for managing fulfillments.
   * 
   * As the migration is now finished, the `fulfillmentOrdersOptIn` property is [deprecated](
   * https://shopify.dev/changelog/deprecation-of-the-fulfillmentservice-fulfillmentordersoptin-field)
   * and is always set to `true` on correctly functioning fulfillment services.
   * 
   * @deprecated Migration period ended. All correctly functioning fulfillment services have `fulfillmentOrdersOptIn` set to `true`.
   */
  fulfillmentOrdersOptIn: boolean;
  
  /**
   * Human-readable unique identifier for this fulfillment service.
   */
  handle: string;
  
  /**
   * The ID of the fulfillment service.
   */
  id: string;
  
  /**
   * Whether the fulfillment service tracks product inventory and provides updates to Shopify.
   */
  inventoryManagement: boolean;
  
  /**
   * Location associated with the fulfillment service.
   */
  location?: Location;
  
  /**
   * Whether the fulfillment service can stock inventory alongside other locations.
   */
  permitsSkuSharing: boolean;
  
  /**
   * Whether the fulfillment service supports local deliveries.
   */
  productBased: boolean;
  
  /**
   * The name of the fulfillment service as seen by merchants.
   */
  serviceName: string;
  
  /**
   * Shipping methods associated with the fulfillment service provider. Applies only to Fulfill By Amazon fulfillment service.
   * @deprecated The Fulfillment by Amazon feature will no longer be supported from March 30, 2023. To continue using Amazon fulfillment, merchants need to set up a Multi-Channel Fulfillment solution recommended by Amazon: https://help.shopify.com/manual/shipping/fulfillment-services/amazon#activate-fulfillment-by-amazon
   */
  shippingMethods: Array<ShippingMethod>;
  
  /**
   * Type associated with the fulfillment service.
   */
  type: FulfillmentServiceType;
}

/**
 * The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout.
 * 
 */
export interface ShippingMethod {
  
  /**
   * A unique code associated with the rate. For example: `expedited_mail`
   */
  code: string;
  
  /**
   * A description of the rate, which customers will see at checkout.
   * For example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.
   * 
   */
  label: string;
}

/**
 * The type of a fulfillment service.
 */
export const enum FulfillmentServiceType {
  
  /**
   * Fulfillment by gift card.
   */
  GIFT_CARD = 'GIFT_CARD',
  
  /**
   * Manual fulfillment by the merchant.
   */
  MANUAL = 'MANUAL',
  
  /**
   * Fullfillment by a third-party fulfillment service.
   */
  THIRD_PARTY = 'THIRD_PARTY'
}

/**
 * The quantities of an inventory item that are related to a specific location.
 * 
 */
export interface InventoryLevel extends Node {
  
  /**
   * The quantity of inventory items that are available at the inventory level's associated location.
   * @deprecated Use the `quantities` field instead and specify available for names. Example: `quantities(names:["available"]){name quantity}`.
   * 
   */
  available: number;
  
  /**
   * Whether the inventory items associated with the inventory level can be deactivated.
   */
  canDeactivate: boolean;
  
  /**
   * The date and time when the inventory level was created.
   */
  createdAt: DateTime;
  
  /**
   * Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated.
   */
  deactivationAlert?: string;
  
  /**
   * Describes, in HTML with embedded URLs, either the impact of deactivating the inventory level or why the inventory level can't be deactivated.
   * @deprecated Use `deactivationAlert` instead.
   */
  deactivationAlertHtml?: FormattedString;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The quantity of inventory items that are going to the inventory level's associated location.
   * @deprecated Use the `quantities` field instead and specify incoming for names. Example: `quantities(names:["incoming"]){name quantity}`.
   * 
   */
  incoming: number;
  
  /**
   * Inventory item associated with the inventory level.
   */
  item: InventoryItem;
  
  /**
   * The location associated with the inventory level.
   */
  location: Location;
  
  /**
   * Quantities for the requested names.
   */
  quantities: Array<InventoryQuantity>;
  
  /**
   * Scheduled changes for the requested quantity names.
   */
  scheduledChanges: InventoryScheduledChangeConnection;
  
  /**
   * The date and time when the inventory level was updated.
   */
  updatedAt: DateTime;
}

/**
 * A string containing a strict subset of HTML code. Non-allowed tags will be stripped out.
 * Allowed tags:
 * * `a` (allowed attributes: `href`, `target`)
 * * `b`
 * * `br`
 * * `em`
 * * `i`
 * * `strong`
 * * `u`
 * Use [HTML](https://shopify.dev/api/admin-graphql/latest/scalars/HTML) instead if you need to
 * include other HTML tags.
 * 
 * Example value: `"Your current domain is <strong>johns-apparel.myshopify.com</strong>."`
 * 
 */
export type FormattedString = any;

/**
 * Represents the goods available to be shipped to a customer.
 * It holds essential information about the goods, including SKU and whether it is tracked.
 * 
 */
export interface InventoryItem extends LegacyInteroperability, Node {
  
  /**
   * The ISO 3166-1 alpha-2 country code of where the item originated from.
   */
  countryCodeOfOrigin?: CountryCode;
  
  /**
   * A list of country specific harmonized system codes.
   */
  countryHarmonizedSystemCodes: CountryHarmonizedSystemCodeConnection;
  
  /**
   * The date and time when the inventory item was created.
   */
  createdAt: DateTime;
  
  /**
   * The number of inventory items that share the same SKU with this item.
   */
  duplicateSkuCount: number;
  
  /**
   * The harmonized system code of the item.
   */
  harmonizedSystemCode?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The URL that points to the inventory history for the item.
   */
  inventoryHistoryUrl?: URL;
  
  /**
   * The inventory item's quantities at the specified location.
   */
  inventoryLevel?: InventoryLevel;
  
  /**
   * A list of the inventory item's quantities for each location that the inventory item can be stocked at.
   */
  inventoryLevels: InventoryLevelConnection;
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
  
  /**
   * The number of locations where this inventory item is stocked.
   */
  locationsCount: number;
  
  /**
   * The ISO 3166-2 alpha-2 province code of where the item originated from.
   */
  provinceCodeOfOrigin?: string;
  
  /**
   * Whether the inventory item requires shipping.
   */
  requiresShipping: boolean;
  
  /**
   * Inventory item SKU. Case-sensitive string.
   */
  sku?: string;
  
  /**
   * Whether inventory levels are tracked for the item.
   */
  tracked: boolean;
  
  /**
   * Whether the value of the `tracked` field for the inventory item can be changed.
   */
  trackedEditable: EditableProperty;
  
  /**
   * Unit cost associated with the inventory item. Note: the user must have "View product costs" permission granted in order to access this field once product granular permissions are enabled.
   */
  unitCost?: MoneyV2;
  
  /**
   * The date and time when the inventory item was updated.
   */
  updatedAt: DateTime;
  
  /**
   * The variant that owns this inventory item.
   */
  variant: ProductVariant;
}

/**
 * An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.
 * 
 */
export interface CountryHarmonizedSystemCodeConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<CountryHarmonizedSystemCodeEdge>;
  
  /**
   * A list of the nodes contained in CountryHarmonizedSystemCodeEdge.
   */
  nodes: Array<CountryHarmonizedSystemCode>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.
 * 
 */
export interface CountryHarmonizedSystemCodeEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of CountryHarmonizedSystemCodeEdge.
   */
  node: CountryHarmonizedSystemCode;
}

/**
 * The country-specific harmonized system code and ISO country code for an inventory item.
 * 
 */
export interface CountryHarmonizedSystemCode {
  
  /**
   * The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
   */
  countryCode: CountryCode;
  
  /**
   * The country-specific harmonized system code. These are usually longer than 6 digits.
   */
  harmonizedSystemCode: string;
}

/**
 * An auto-generated type for paginating through multiple InventoryLevels.
 * 
 */
export interface InventoryLevelConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<InventoryLevelEdge>;
  
  /**
   * A list of the nodes contained in InventoryLevelEdge.
   */
  nodes: Array<InventoryLevel>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one InventoryLevel and a cursor during pagination.
 * 
 */
export interface InventoryLevelEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of InventoryLevelEdge.
   */
  node: InventoryLevel;
}

/**
 * The attribute editable information.
 */
export interface EditableProperty {
  
  /**
   * Whether the attribute is locked for editing.
   */
  locked: boolean;
  
  /**
   * The reason the attribute is locked for editing.
   */
  reason?: FormattedString;
}

/**
 * Represents a quantity of an inventory item at a specific location, for a specific name.
 * 
 */
export interface InventoryQuantity extends Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
   * that identifies the inventory quantity.
   * 
   */
  name: string;
  
  /**
   * The quantity for the quantity name.
   */
  quantity: number;
  
  /**
   * When the quantity was last updated.
   */
  updatedAt?: DateTime;
}

/**
 * The set of valid sort keys for the ScheduledChange query.
 */
export const enum ScheduledChangeSortKeys {
  
  /**
   * Sort by the `expected_at` value.
   */
  EXPECTED_AT = 'EXPECTED_AT',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple InventoryScheduledChanges.
 * 
 */
export interface InventoryScheduledChangeConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<InventoryScheduledChangeEdge>;
  
  /**
   * A list of the nodes contained in InventoryScheduledChangeEdge.
   */
  nodes: Array<InventoryScheduledChange>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one InventoryScheduledChange and a cursor during pagination.
 * 
 */
export interface InventoryScheduledChangeEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of InventoryScheduledChangeEdge.
   */
  node: InventoryScheduledChange;
}

/**
 * Returns the scheduled changes to inventory states related to the ledger document.
 * 
 */
export interface InventoryScheduledChange {
  
  /**
   * The date and time that the scheduled change is expected to happen.
   */
  expectedAt: DateTime;
  
  /**
   * The quantity
   * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
   * to transition from.
   * 
   */
  fromName: string;
  
  /**
   * The quantities of an inventory item that are related to a specific location.
   */
  inventoryLevel: InventoryLevel;
  
  /**
   * An active reference document associated with the inventory quantity. Must be a valid URI.
   */
  ledgerDocumentUri: URL;
  
  /**
   * The quantity of the scheduled change associated with the ledger document in the `from_name` state.
   */
  quantity: number;
  
  /**
   * The quantity
   * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#move-inventory-quantities-between-states)
   * to transition to.
   * 
   */
  toName: string;
}

/**
 * Local pickup settings associated with a location.
 */
export interface DeliveryLocalPickupSettings {
  
  /**
   * Additional instructions or information related to the local pickup.
   */
  instructions: string;
  
  /**
   * The estimated pickup time to show customers at checkout.
   */
  pickupTime: DeliveryLocalPickupTime;
}

/**
 * Possible pickup time values that a location enabled for local pickup can have.
 */
export const enum DeliveryLocalPickupTime {
  
  /**
   * Usually ready in 1 hour.
   */
  ONE_HOUR = 'ONE_HOUR',
  
  /**
   * Usually ready in 2 hours.
   */
  TWO_HOURS = 'TWO_HOURS',
  
  /**
   * Usually ready in 4 hours.
   */
  FOUR_HOURS = 'FOUR_HOURS',
  
  /**
   * Usually ready in 24 hours.
   */
  TWENTY_FOUR_HOURS = 'TWENTY_FOUR_HOURS',
  
  /**
   * Usually ready in 2-4 days.
   */
  TWO_TO_FOUR_DAYS = 'TWO_TO_FOUR_DAYS',
  
  /**
   * Usually ready in 5+ days.
   */
  FIVE_OR_MORE_DAYS = 'FIVE_OR_MORE_DAYS'
}

/**
 * Represents a suggested address for a location.
 * 
 */
export interface LocationSuggestedAddress {
  
  /**
   * The first line of the suggested address.
   */
  address1?: string;
  
  /**
   * The second line of the suggested address.
   */
  address2?: string;
  
  /**
   * The city of the suggested address.
   */
  city?: string;
  
  /**
   * The country of the suggested address.
   */
  country?: string;
  
  /**
   * The country code of the suggested address.
   */
  countryCode?: CountryCode;
  
  /**
   * A formatted version of the suggested address.
   */
  formatted: Array<string>;
  
  /**
   * The province of the suggested address.
   */
  province?: string;
  
  /**
   * The code for the province, state, or district of the suggested address.
   */
  provinceCode?: string;
  
  /**
   * The ZIP code of the suggested address.
   */
  zip?: string;
}

/**
 * An auto-generated type for paginating through multiple DeliveryLocationGroupZones.
 * 
 */
export interface DeliveryLocationGroupZoneConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<DeliveryLocationGroupZoneEdge>;
  
  /**
   * A list of the nodes contained in DeliveryLocationGroupZoneEdge.
   */
  nodes: Array<DeliveryLocationGroupZone>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.
 * 
 */
export interface DeliveryLocationGroupZoneEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of DeliveryLocationGroupZoneEdge.
   */
  node: DeliveryLocationGroupZone;
}

/**
 * Links a location group with a zone and the associated method definitions.
 */
export interface DeliveryLocationGroupZone {
  
  /**
   * The number of method definitions for the zone.
   */
  methodDefinitionCounts: DeliveryMethodDefinitionCounts;
  
  /**
   * The method definitions associated to a zone and location group.
   */
  methodDefinitions: DeliveryMethodDefinitionConnection;
  
  /**
   * The zone associated to a location group.
   */
  zone: DeliveryZone;
}

/**
 * The number of method definitions for a zone, separated into merchant-owned and participant definitions.
 * 
 */
export interface DeliveryMethodDefinitionCounts {
  
  /**
   * The number of participant method definitions for the specified zone.
   */
  participantDefinitionsCount: number;
  
  /**
   * The number of merchant-defined method definitions for the specified zone.
   */
  rateDefinitionsCount: number;
}

/**
 * The different types of method definitions to filter by.
 */
export const enum DeliveryMethodDefinitionType {
  
  /**
   * A static merchant-defined rate.
   */
  MERCHANT = 'MERCHANT',
  
  /**
   * A dynamic participant rate.
   */
  PARTICIPANT = 'PARTICIPANT'
}

/**
 * The set of valid sort keys for the MethodDefinition query.
 */
export const enum MethodDefinitionSortKeys {
  
  /**
   * Sort by the `rate_provider_type` value.
   */
  RATE_PROVIDER_TYPE = 'RATE_PROVIDER_TYPE',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple DeliveryMethodDefinitions.
 * 
 */
export interface DeliveryMethodDefinitionConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<DeliveryMethodDefinitionEdge>;
  
  /**
   * A list of the nodes contained in DeliveryMethodDefinitionEdge.
   */
  nodes: Array<DeliveryMethodDefinition>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.
 * 
 */
export interface DeliveryMethodDefinitionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of DeliveryMethodDefinitionEdge.
   */
  node: DeliveryMethodDefinition;
}

/**
 * A method definition contains the delivery rate and the conditions that must be met for the method to be
 * applied.
 * 
 */
export interface DeliveryMethodDefinition extends Node {
  
  /**
   * Whether this method definition is active.
   */
  active: boolean;
  
  /**
   * The description of the method definition. Only available on shipping rates that are custom.
   */
  description?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The method conditions that must pass for this method definition to be applied to an order.
   */
  methodConditions: Array<DeliveryCondition>;
  
  /**
   * The name of the method definition.
   */
  name: string;
  
  /**
   * The provided rate for this method definition, from a rate definition or participant.
   */
  rateProvider: DeliveryRateProvider;
}

/**
 * A condition that must pass for a delivery method definition to be applied to an order.
 */
export interface DeliveryCondition extends Node {
  
  /**
   * The value (weight or price) that the condition field is compared to.
   */
  conditionCriteria: DeliveryConditionCriteria;
  
  /**
   * The field to compare the criterion value against, using the operator.
   */
  field: DeliveryConditionField;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The operator to compare the field and criterion value.
   */
  operator: DeliveryConditionOperator;
}

/**
 * The value (weight or price) that the condition field is compared to.
 */
export type DeliveryConditionCriteria = MoneyV2 | Weight;

/** Use this to resolve union type DeliveryConditionCriteria */
export type PossibleDeliveryConditionCriteriaTypeNames = 'MoneyV2' | 'Weight';

export interface DeliveryConditionCriteriaNameMap {
  DeliveryConditionCriteria: DeliveryConditionCriteria;
  MoneyV2: MoneyV2;
  Weight: Weight;
}

/**
 * A weight, which includes a numeric value and a unit of measurement.
 */
export interface Weight {
  
  /**
   * The unit of measurement for `value`.
   */
  unit: WeightUnit;
  
  /**
   * The weight value using the unit system specified with `unit`.
   */
  value: number;
}

/**
 * Units of measurement for weight.
 */
export const enum WeightUnit {
  
  /**
   * 1 kilogram equals 1000 grams.
   */
  KILOGRAMS = 'KILOGRAMS',
  
  /**
   * Metric system unit of mass.
   */
  GRAMS = 'GRAMS',
  
  /**
   * 1 pound equals 16 ounces.
   */
  POUNDS = 'POUNDS',
  
  /**
   * Imperial system unit of mass.
   */
  OUNCES = 'OUNCES'
}

/**
 * The field type that the condition will be applied to.
 */
export const enum DeliveryConditionField {
  
  /**
   * The condition will check against the total weight of the order.
   */
  TOTAL_WEIGHT = 'TOTAL_WEIGHT',
  
  /**
   * The condition will check against the total price of the order.
   */
  TOTAL_PRICE = 'TOTAL_PRICE'
}

/**
 * The operator to use to determine if the condition passes.
 */
export const enum DeliveryConditionOperator {
  
  /**
   * The condition will check whether the field is greater than or equal to the criterion.
   */
  GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
  
  /**
   * The condition will check if the field is less than or equal to the criterion.
   */
  LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
}

/**
 * A rate provided by a merchant-defined rate or a participant.
 */
export type DeliveryRateProvider = DeliveryParticipant | DeliveryRateDefinition;

/** Use this to resolve union type DeliveryRateProvider */
export type PossibleDeliveryRateProviderTypeNames =
'DeliveryParticipant' |
'DeliveryRateDefinition';

export interface DeliveryRateProviderNameMap {
  DeliveryRateProvider: DeliveryRateProvider;
  DeliveryParticipant: DeliveryParticipant;
  DeliveryRateDefinition: DeliveryRateDefinition;
}

/**
 * A participant defines carrier-calculated rates for shipping services
 * with a possible merchant-defined fixed fee or a percentage-of-rate fee.
 * 
 */
export interface DeliveryParticipant extends Node {
  
  /**
   * Whether to display new shipping services automatically to the customer when the service becomes available.
   * 
   */
  adaptToNewServicesFlag: boolean;
  
  /**
   * The carrier used for this participant.
   */
  carrierService: DeliveryCarrierService;
  
  /**
   * The merchant-defined fixed fee for this participant.
   */
  fixedFee?: MoneyV2;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The carrier-specific services offered by the participant, and whether each service is active.
   */
  participantServices: Array<DeliveryParticipantService>;
  
  /**
   * The merchant-defined percentage-of-rate fee for this participant.
   */
  percentageOfRateFee: number;
}

/**
 * A shipping service provider or a carrier account.
 */
export interface DeliveryCarrierService extends Node {
  
  /**
   * The list of services offered for given destinations.
   */
  availableServicesForCountries: Array<DeliveryAvailableService>;
  
  /**
   * The properly formatted name of the shipping service provider, ready to display.
   */
  formattedName?: string;
  
  /**
   * The logo of the service provider.
   */
  icon: Image;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The name of the shipping service provider.
   */
  name?: string;
}

/**
 * A shipping service and a list of countries that the service is available for.
 */
export interface DeliveryAvailableService {
  
  /**
   * The countries the service provider ships to.
   */
  countries: DeliveryCountryCodesOrRestOfWorld;
  
  /**
   * The name of the service.
   */
  name: string;
}

/**
 * The list of country codes and information whether the countries
 * are a part of the 'Rest Of World' shipping zone.
 * 
 */
export interface DeliveryCountryCodesOrRestOfWorld {
  
  /**
   * List of applicable country codes in the ISO 3166-1 alpha-2 format.
   */
  countryCodes: Array<CountryCode>;
  
  /**
   * Whether the countries are a part of the 'Rest of World' shipping zone.
   */
  restOfWorld: boolean;
}

/**
 * A mail service provided by the participant.
 */
export interface DeliveryParticipantService {
  
  /**
   * Whether the service is active.
   */
  active: boolean;
  
  /**
   * The name of the service.
   */
  name: string;
}

/**
 * The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition).
 */
export interface DeliveryRateDefinition extends Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The price of this rate.
   */
  price: MoneyV2;
}

/**
 * A zone is a group of countries that have the same shipping rates. Customers can order products from a store only if they choose a shipping destination that's included in one of the store's zones.
 * 
 */
export interface DeliveryZone extends Node {
  
  /**
   * The list of countries within the zone.
   */
  countries: Array<DeliveryCountry>;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The name of the zone.
   */
  name: string;
}

/**
 * The valid values for the method of inventory tracking for a product variant.
 */
export const enum ProductVariantInventoryManagement {
  
  /**
   * This product variant's inventory is tracked by Shopify. Inventory can be tracked by store location(s) and/or third-party fulfillment service(s).
   */
  SHOPIFY = 'SHOPIFY',
  
  /**
   * This product variant's inventory is not tracked.
   */
  NOT_MANAGED = 'NOT_MANAGED',
  
  /**
   * This product variant's inventory is tracked by a third-party fulfillment service.
   */
  FULFILLMENT_SERVICE = 'FULFILLMENT_SERVICE'
}

/**
 * The valid values for the inventory policy of a product variant once it is out of stock.
 * 
 */
export const enum ProductVariantInventoryPolicy {
  
  /**
   * Customers can't buy this product variant after it's out of stock.
   */
  DENY = 'DENY',
  
  /**
   * Customers can buy this product variant after it's out of stock.
   */
  CONTINUE = 'CONTINUE'
}

/**
 * An auto-generated type for paginating through multiple ProductVariantPricePairs.
 * 
 */
export interface ProductVariantPricePairConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ProductVariantPricePairEdge>;
  
  /**
   * A list of the nodes contained in ProductVariantPricePairEdge.
   */
  nodes: Array<ProductVariantPricePair>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
 * 
 */
export interface ProductVariantPricePairEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ProductVariantPricePairEdge.
   */
  node: ProductVariantPricePair;
}

/**
 * The compare-at price and price of a variant sharing a currency.
 * 
 */
export interface ProductVariantPricePair {
  
  /**
   * The compare-at price of the variant with associated currency.
   */
  compareAtPrice?: MoneyV2;
  
  /**
   * The price of the variant with associated currency.
   */
  price: MoneyV2;
}

/**
 * An auto-generated type for paginating through multiple ProductVariantComponents.
 * 
 */
export interface ProductVariantComponentConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ProductVariantComponentEdge>;
  
  /**
   * A list of the nodes contained in ProductVariantComponentEdge.
   */
  nodes: Array<ProductVariantComponent>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ProductVariantComponent and a cursor during pagination.
 * 
 */
export interface ProductVariantComponentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ProductVariantComponentEdge.
   */
  node: ProductVariantComponent;
}

/**
 * A product variant component associated with a product variant.
 */
export interface ProductVariantComponent extends Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The product variant associated with the component.
   */
  productVariant: ProductVariant;
  
  /**
   * The required quantity of the component.
   */
  quantity: number;
}

/**
 * Properties used by customers to select a product variant.
 * Products can have multiple options, like different sizes or colors.
 * 
 */
export interface SelectedOption {
  
  /**
   * The product option’s name.
   */
  name: string;
  
  /**
   * The product option’s value.
   */
  value: string;
}

/**
 * An auto-generated type for paginating through multiple QuantityRules.
 * 
 */
export interface QuantityRuleConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<QuantityRuleEdge>;
  
  /**
   * A list of the nodes contained in QuantityRuleEdge.
   */
  nodes: Array<QuantityRule>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one QuantityRule and a cursor during pagination.
 * 
 */
export interface QuantityRuleEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of QuantityRuleEdge.
   */
  node: QuantityRule;
}

/**
 * The state of a catalog.
 * 
 */
export const enum CatalogStatus {
  
  /**
   * The catalog is active.
   */
  ACTIVE = 'ACTIVE',
  
  /**
   * The catalog is archived.
   */
  ARCHIVED = 'ARCHIVED',
  
  /**
   * The catalog is in draft.
   */
  DRAFT = 'DRAFT'
}

/**
 * An auto-generated type for paginating through multiple Markets.
 * 
 */
export interface MarketConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<MarketEdge>;
  
  /**
   * A list of the nodes contained in MarketEdge.
   */
  nodes: Array<Market>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Market and a cursor during pagination.
 * 
 */
export interface MarketEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of MarketEdge.
   */
  node: Market;
}

/**
 * A market's currency settings.
 */
export interface MarketCurrencySettings {
  
  /**
   * The currency which this market's prices are defined in, and the
   * currency which its customers must use if local currencies are disabled.
   * 
   */
  baseCurrency: CurrencySetting;
  
  /**
   * Whether or not local currencies are enabled. If enabled, then prices will
   * be converted to give each customer the best experience based on their
   * region. If disabled, then all customers in this market will see prices
   * in the market's base currency. For single country markets this will be true when
   * the market's base currency is the same as the default currency for the region.
   * 
   */
  localCurrencies: boolean;
}

/**
 * A setting for a presentment currency.
 */
export interface CurrencySetting {
  
  /**
   * The currency's ISO code.
   */
  currencyCode: CurrencyCode;
  
  /**
   * The full name of the currency.
   */
  currencyName: string;
  
  /**
   * Whether the currency is enabled or not. An enabled currency setting is visible to buyers and allows orders to be generated with that currency as presentment.
   */
  enabled: boolean;
  
  /**
   * The date and time when the active exchange rate for the currency was last modified. It can be the automatic rate's creation date, or the manual rate's last updated at date if active.
   */
  rateUpdatedAt?: DateTime;
}

/**
 * An auto-generated type for paginating through multiple MarketRegions.
 * 
 */
export interface MarketRegionConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<MarketRegionEdge>;
  
  /**
   * A list of the nodes contained in MarketRegionEdge.
   */
  nodes: Array<MarketRegion>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one MarketRegion and a cursor during pagination.
 * 
 */
export interface MarketRegionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of MarketRegionEdge.
   */
  node: MarketRegion;
}

/**
 * A geographic region which comprises a market.
 */
export interface MarketRegion {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The name of the region.
   */
  name: string;
}

/** Use this to resolve interface type MarketRegion */
export type PossibleMarketRegionTypeNames = 'MarketRegionCountry';

export interface MarketRegionNameMap {
  MarketRegion: MarketRegion;
  MarketRegionCountry: MarketRegionCountry;
}

/**
 * The market’s web presence, which defines its SEO strategy. This can be a different domain
 * (e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary
 * domain (e.g. `example.com/en-ca`). Each web presence comprises one or more language
 * variants. If a market does not have its own web presence, it is accessible on the shop’s
 * primary domain via [country
 * selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
 * 
 * Note: while the domain/subfolders defined by a market’s web presence are not applicable to
 * custom storefronts, which must manage their own domains and routing, the languages chosen
 * here do govern [the languages available on the Storefront
 * API](https://shopify.dev/custom-storefronts/internationalization/multiple-languages) for the countries in
 * this market.
 * 
 */
export interface MarketWebPresence extends Node {
  
  /**
   * The ISO codes for the alternate locales. When a domain is used, these locales will be
   * available as language-specific subfolders. For example, if English is an
   * alternate locale, and `example.ca` is the market’s domain, then
   * `example.ca/en` will load in English.
   * 
   */
  alternateLocales: Array<string>;
  
  /**
   * The ISO code for the default locale. When a domain is used, this is the locale that will
   * be used when the domain root is accessed. For example, if French is the default locale,
   * and `example.ca` is the market’s domain, then `example.ca` will load in French.
   * 
   */
  defaultLocale: string;
  
  /**
   * The web presence’s domain.
   * This field will be null if `subfolderSuffix` isn't null.
   * 
   */
  domain?: Domain;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The associated market.
   */
  market: Market;
  
  /**
   * The list of root URLs for each of the web presence’s locales. As of version `2024-04` this value will no longer have a trailing slash.
   * 
   */
  rootUrls: Array<MarketWebPresenceRootUrl>;
  
  /**
   * The market-specific suffix of the subfolders defined by the web presence. Example: in `/en-us` the subfolder suffix is `us`. This field will be null if `domain` isn't null.
   */
  subfolderSuffix?: string;
}

/**
 * A unique string that represents the address of a Shopify store on the Internet.
 */
export interface Domain extends Node {
  
  /**
   * The host name of the domain. For example, `example.com`.
   */
  host: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The localization of the domain, if the domain doesn't redirect.
   */
  localization?: DomainLocalization;
  
  /**
   * The web presence of the domain.
   */
  marketWebPresence?: MarketWebPresence;
  
  /**
   * Whether SSL is enabled.
   */
  sslEnabled: boolean;
  
  /**
   * The URL of the domain (for example, `https://example.com`).
   */
  url: URL;
}

/**
 * The country and language settings assigned to a domain.
 */
export interface DomainLocalization {
  
  /**
   * The ISO codes for the domain’s alternate locales. For example, `["en"]`.
   */
  alternateLocales: Array<string>;
  
  /**
   * The ISO code for the country assigned to the domain. For example, `"CA"` or "*" for a domain set to "Rest of world".
   */
  country?: string;
  
  /**
   * The ISO code for the domain’s default locale. For example, `"en"`.
   */
  defaultLocale: string;
}

/**
 * The URL for the homepage of the online store in the context of a particular market and a
 * particular locale.
 * 
 */
export interface MarketWebPresenceRootUrl {
  
  /**
   * The locale that the storefront loads in.
   */
  locale: string;
  
  /**
   * The URL.
   */
  url: URL;
}

/**
 * An auto-generated type for paginating through multiple MarketWebPresences.
 * 
 */
export interface MarketWebPresenceConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<MarketWebPresenceEdge>;
  
  /**
   * A list of the nodes contained in MarketWebPresenceEdge.
   */
  nodes: Array<MarketWebPresence>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one MarketWebPresence and a cursor during pagination.
 * 
 */
export interface MarketWebPresenceEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of MarketWebPresenceEdge.
   */
  node: MarketWebPresence;
}

/**
 * The set of valid sort keys for the ProductCollection query.
 */
export const enum ProductCollectionSortKeys {
  
  /**
   * Sort by the `title` value.
   */
  TITLE = 'TITLE',
  
  /**
   * Sort by the `price` value.
   */
  PRICE = 'PRICE',
  
  /**
   * Sort by the `best-selling` value.
   */
  BEST_SELLING = 'BEST_SELLING',
  
  /**
   * Sort by the `created` value.
   */
  CREATED = 'CREATED',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by the `manual` value.
   */
  MANUAL = 'MANUAL',
  
  /**
   * Sort by the `collection-default` value.
   */
  COLLECTION_DEFAULT = 'COLLECTION_DEFAULT',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple CollectionPublications.
 * 
 */
export interface CollectionPublicationConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<CollectionPublicationEdge>;
  
  /**
   * A list of the nodes contained in CollectionPublicationEdge.
   */
  nodes: Array<CollectionPublication>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one CollectionPublication and a cursor during pagination.
 * 
 */
export interface CollectionPublicationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of CollectionPublicationEdge.
   */
  node: CollectionPublication;
}

/**
 * Represents the publications where a collection is published.
 */
export interface CollectionPublication {
  
  /**
   * The channel where the collection will be published.
   * @deprecated Use `publication` instead.
   */
  channel: Channel;
  
  /**
   * The collection to be published on the publication.
   */
  collection: Collection;
  
  /**
   * Whether the publication is published or not.
   */
  isPublished: boolean;
  
  /**
   * The publication where the collection will be published.
   */
  publication: Publication;
  
  /**
   * The date that the publication was or is going to be published.
   */
  publishDate: DateTime;
}

/**
 * The set of rules that are used to determine which products are included in the collection.
 */
export interface CollectionRuleSet {
  
  /**
   * Whether products must match any or all of the rules to be included in the collection.
   * If true, then products must match at least one of the rules to be included in the collection.
   * If false, then products must match all of the rules to be included in the collection.
   * 
   */
  appliedDisjunctively: boolean;
  
  /**
   * The rules used to assign products to the collection.
   */
  rules: Array<CollectionRule>;
}

/**
 * Represents at rule that's used to assign products to a collection.
 */
export interface CollectionRule {
  
  /**
   * The attribute that the rule focuses on. For example, `title` or `product_type`.
   */
  column: CollectionRuleColumn;
  
  /**
   * The value that the operator is applied to. For example, `Hats`.
   */
  condition: string;
  
  /**
   * The value that the operator is applied to.
   */
  conditionObject?: CollectionRuleConditionObject;
  
  /**
   * The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
   * 
   */
  relation: CollectionRuleRelation;
}

/**
 * Specifies the attribute of a product being used to populate the smart collection.
 */
export const enum CollectionRuleColumn {
  
  /**
   * The [`tag`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
   */
  TAG = 'TAG',
  
  /**
   * The [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-title) attribute.
   */
  TITLE = 'TITLE',
  
  /**
   * The [`type`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
   */
  TYPE = 'TYPE',
  
  /**
   * The [`product_taxonomy_node_id`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-productcategory) attribute.
   */
  PRODUCT_TAXONOMY_NODE_ID = 'PRODUCT_TAXONOMY_NODE_ID',
  
  /**
   * The [`vendor`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-vendor) attribute.
   */
  VENDOR = 'VENDOR',
  
  /**
   * The [`variant_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-price) attribute.
   */
  VARIANT_PRICE = 'VARIANT_PRICE',
  
  /**
   * An attribute evaluated based on the `compare_at_price` attribute of the product's variants.
   * With `is_set` relation, the rule matches products with at least one variant with `compare_at_price` set.
   * With `is_not_set` relation, the rule matches matches products with at least one variant with `compare_at_price` not set.
   * 
   */
  IS_PRICE_REDUCED = 'IS_PRICE_REDUCED',
  
  /**
   * The [`variant_compare_at_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-compareatprice) attribute.
   */
  VARIANT_COMPARE_AT_PRICE = 'VARIANT_COMPARE_AT_PRICE',
  
  /**
   * The [`variant_weight`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-weight) attribute.
   */
  VARIANT_WEIGHT = 'VARIANT_WEIGHT',
  
  /**
   * The [`variant_inventory`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryquantity) attribute.
   */
  VARIANT_INVENTORY = 'VARIANT_INVENTORY',
  
  /**
   * The [`variant_title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-title) attribute.
   */
  VARIANT_TITLE = 'VARIANT_TITLE',
  
  /**
   * This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
   * 
   */
  PRODUCT_METAFIELD_DEFINITION = 'PRODUCT_METAFIELD_DEFINITION',
  
  /**
   * This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
   * 
   */
  VARIANT_METAFIELD_DEFINITION = 'VARIANT_METAFIELD_DEFINITION'
}

/**
 * Specifies object for the condition of the rule.
 */
export type CollectionRuleConditionObject =
CollectionRuleMetafieldCondition |
CollectionRuleProductCategoryCondition |
CollectionRuleTextCondition;

/** Use this to resolve union type CollectionRuleConditionObject */
export type PossibleCollectionRuleConditionObjectTypeNames =
'CollectionRuleMetafieldCondition' |
'CollectionRuleProductCategoryCondition' |
'CollectionRuleTextCondition';

export interface CollectionRuleConditionObjectNameMap {
  CollectionRuleConditionObject: CollectionRuleConditionObject;
  CollectionRuleMetafieldCondition: CollectionRuleMetafieldCondition;
  CollectionRuleProductCategoryCondition: CollectionRuleProductCategoryCondition;
  CollectionRuleTextCondition: CollectionRuleTextCondition;
}

/**
 * Identifies a metafield definition used as a rule for the smart collection.
 */
export interface CollectionRuleMetafieldCondition {
  
  /**
   * The metafield definition associated with the condition.
   */
  metafieldDefinition: MetafieldDefinition;
}

/**
 * Specifies the condition for a Product Category field.
 */
export interface CollectionRuleProductCategoryCondition {
  
  /**
   * The value of the condition.
   */
  value: ProductTaxonomyNode;
}

/**
 * Specifies the condition for a text field.
 */
export interface CollectionRuleTextCondition {
  
  /**
   * The value of the condition.
   */
  value: string;
}

/**
 * Specifies the relationship between the `column` and the `condition`.
 */
export const enum CollectionRuleRelation {
  
  /**
   * The attribute contains the condition.
   */
  CONTAINS = 'CONTAINS',
  
  /**
   * The attribute ends with the condition.
   */
  ENDS_WITH = 'ENDS_WITH',
  
  /**
   * The attribute is equal to the condition.
   */
  EQUALS = 'EQUALS',
  
  /**
   * The attribute is greater than the condition.
   */
  GREATER_THAN = 'GREATER_THAN',
  
  /**
   * The attribute is not set (equal to `null`).
   */
  IS_NOT_SET = 'IS_NOT_SET',
  
  /**
   * The attribute is set (not equal to `null`).
   */
  IS_SET = 'IS_SET',
  
  /**
   * The attribute is less than the condition.
   */
  LESS_THAN = 'LESS_THAN',
  
  /**
   * The attribute does not contain the condition.
   */
  NOT_CONTAINS = 'NOT_CONTAINS',
  
  /**
   * The attribute does not equal the condition.
   */
  NOT_EQUALS = 'NOT_EQUALS',
  
  /**
   * The attribute starts with the condition.
   */
  STARTS_WITH = 'STARTS_WITH'
}

/**
 * Specifies the sort order for the products in the collection.
 */
export const enum CollectionSortOrder {
  
  /**
   * Alphabetically, in ascending order (A - Z).
   */
  ALPHA_ASC = 'ALPHA_ASC',
  
  /**
   * Alphabetically, in descending order (Z - A).
   */
  ALPHA_DESC = 'ALPHA_DESC',
  
  /**
   * By best-selling products.
   */
  BEST_SELLING = 'BEST_SELLING',
  
  /**
   * By date created, in ascending order (oldest - newest).
   */
  CREATED = 'CREATED',
  
  /**
   * By date created, in descending order (newest - oldest).
   */
  CREATED_DESC = 'CREATED_DESC',
  
  /**
   * In the order set manually by the merchant.
   */
  MANUAL = 'MANUAL',
  
  /**
   * By price, in ascending order (lowest - highest).
   */
  PRICE_ASC = 'PRICE_ASC',
  
  /**
   * By price, in descending order (highest - lowest).
   */
  PRICE_DESC = 'PRICE_DESC'
}

/**
 * Represents any file other than HTML.
 * 
 */
export interface GenericFile extends File, Node {
  
  /**
   * A word or phrase to describe the contents or the function of a file.
   */
  alt?: string;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
   * 
   */
  createdAt: DateTime;
  
  /**
   * Any errors that have occurred on the file.
   */
  fileErrors: Array<FileError>;
  
  /**
   * The status of the file.
   */
  fileStatus: FileStatus;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The generic file's MIME type.
   */
  mimeType?: string;
  
  /**
   * The generic file's size in bytes.
   */
  originalFileSize?: number;
  
  /**
   * The preview image for the media.
   */
  preview?: MediaPreviewImage;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * The generic file's URL.
   */
  url?: URL;
}

/**
 * A file interface.
 */
export interface File {
  
  /**
   * A word or phrase to describe the contents or the function of a file.
   */
  alt?: string;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
   * 
   */
  createdAt: DateTime;
  
  /**
   * Any errors that have occurred on the file.
   */
  fileErrors: Array<FileError>;
  
  /**
   * The status of the file.
   */
  fileStatus: FileStatus;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The preview image for the media.
   */
  preview?: MediaPreviewImage;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
   */
  updatedAt: DateTime;
}

/** Use this to resolve interface type File */
export type PossibleFileTypeNames = 'GenericFile' | 'MediaImage' | 'Video';

export interface FileNameMap {
  File: File;
  GenericFile: GenericFile;
  MediaImage: MediaImage;
  Video: Video;
}

/**
 * A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.
 * Check the file before attempting to upload again.
 * 
 */
export interface FileError {
  
  /**
   * Code representing the type of error.
   */
  code: FileErrorCode;
  
  /**
   * Additional details regarding the error.
   */
  details?: string;
  
  /**
   * Translated error message.
   */
  message: string;
}

/**
 * The error types for a file.
 */
export const enum FileErrorCode {
  
  /**
   * File error has occurred for an unknown reason.
   */
  UNKNOWN = 'UNKNOWN',
  
  /**
   * File could not be processed because the signed URL was invalid.
   */
  INVALID_SIGNED_URL = 'INVALID_SIGNED_URL',
  
  /**
   * File could not be processed because the image could not be downloaded.
   */
  IMAGE_DOWNLOAD_FAILURE = 'IMAGE_DOWNLOAD_FAILURE',
  
  /**
   * File could not be processed because the image could not be processed.
   */
  IMAGE_PROCESSING_FAILURE = 'IMAGE_PROCESSING_FAILURE',
  
  /**
   * File timed out because it is currently being modified by another operation.
   */
  MEDIA_TIMEOUT_ERROR = 'MEDIA_TIMEOUT_ERROR',
  
  /**
   * File could not be created because the external video could not be found.
   */
  EXTERNAL_VIDEO_NOT_FOUND = 'EXTERNAL_VIDEO_NOT_FOUND',
  
  /**
   * File could not be created because the external video is not listed or is private.
   */
  EXTERNAL_VIDEO_UNLISTED = 'EXTERNAL_VIDEO_UNLISTED',
  
  /**
   * File could not be created because the external video has an invalid aspect ratio.
   */
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO = 'EXTERNAL_VIDEO_INVALID_ASPECT_RATIO',
  
  /**
   * File could not be created because embed permissions are disabled for this video.
   */
  EXTERNAL_VIDEO_EMBED_DISABLED = 'EXTERNAL_VIDEO_EMBED_DISABLED',
  
  /**
   * File could not be created because video is either not found or still transcoding.
   */
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING = 'EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING',
  
  /**
   * File could not be processed because the source could not be downloaded.
   */
  GENERIC_FILE_DOWNLOAD_FAILURE = 'GENERIC_FILE_DOWNLOAD_FAILURE',
  
  /**
   * File could not be created because the size is too large.
   */
  GENERIC_FILE_INVALID_SIZE = 'GENERIC_FILE_INVALID_SIZE',
  
  /**
   * File could not be created because the metadata could not be read.
   */
  VIDEO_METADATA_READ_ERROR = 'VIDEO_METADATA_READ_ERROR',
  
  /**
   * File could not be created because it has an invalid file type.
   */
  VIDEO_INVALID_FILETYPE_ERROR = 'VIDEO_INVALID_FILETYPE_ERROR',
  
  /**
   * File could not be created because it does not meet the minimum width requirement.
   */
  VIDEO_MIN_WIDTH_ERROR = 'VIDEO_MIN_WIDTH_ERROR',
  
  /**
   * File could not be created because it does not meet the maximum width requirement.
   */
  VIDEO_MAX_WIDTH_ERROR = 'VIDEO_MAX_WIDTH_ERROR',
  
  /**
   * File could not be created because it does not meet the minimum height requirement.
   */
  VIDEO_MIN_HEIGHT_ERROR = 'VIDEO_MIN_HEIGHT_ERROR',
  
  /**
   * File could not be created because it does not meet the maximum height requirement.
   */
  VIDEO_MAX_HEIGHT_ERROR = 'VIDEO_MAX_HEIGHT_ERROR',
  
  /**
   * File could not be created because it does not meet the minimum duration requirement.
   */
  VIDEO_MIN_DURATION_ERROR = 'VIDEO_MIN_DURATION_ERROR',
  
  /**
   * File could not be created because it does not meet the maximum duration requirement.
   */
  VIDEO_MAX_DURATION_ERROR = 'VIDEO_MAX_DURATION_ERROR',
  
  /**
   * Video failed validation.
   */
  VIDEO_VALIDATION_ERROR = 'VIDEO_VALIDATION_ERROR',
  
  /**
   * Model failed validation.
   */
  MODEL3D_VALIDATION_ERROR = 'MODEL3D_VALIDATION_ERROR',
  
  /**
   * File could not be created because the model's thumbnail generation failed.
   */
  MODEL3D_THUMBNAIL_GENERATION_ERROR = 'MODEL3D_THUMBNAIL_GENERATION_ERROR',
  
  /**
   * There was an issue while trying to generate a new thumbnail.
   */
  MODEL3D_THUMBNAIL_REGENERATION_ERROR = 'MODEL3D_THUMBNAIL_REGENERATION_ERROR',
  
  /**
   * File could not be created because the model can't be converted to USDZ format.
   */
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR = 'MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR',
  
  /**
   * File could not be created because the model file failed processing.
   */
  MODEL3D_GLB_OUTPUT_CREATION_ERROR = 'MODEL3D_GLB_OUTPUT_CREATION_ERROR',
  
  /**
   * File could not be created because the model file failed processing.
   */
  MODEL3D_PROCESSING_FAILURE = 'MODEL3D_PROCESSING_FAILURE',
  
  /**
   * File could not be created because the image is an unsupported file type.
   */
  UNSUPPORTED_IMAGE_FILE_TYPE = 'UNSUPPORTED_IMAGE_FILE_TYPE',
  
  /**
   * File could not be created because the image size is too large.
   */
  INVALID_IMAGE_FILE_SIZE = 'INVALID_IMAGE_FILE_SIZE',
  
  /**
   * File could not be created because the image has an invalid aspect ratio.
   */
  INVALID_IMAGE_ASPECT_RATIO = 'INVALID_IMAGE_ASPECT_RATIO',
  
  /**
   * File could not be created because the image's resolution exceeds the max limit.
   */
  INVALID_IMAGE_RESOLUTION = 'INVALID_IMAGE_RESOLUTION',
  
  /**
   * File could not be created because the cumulative file storage limit would be exceeded.
   */
  FILE_STORAGE_LIMIT_EXCEEDED = 'FILE_STORAGE_LIMIT_EXCEEDED',
  
  /**
   * File could not be created because a file with the same name already exists.
   */
  DUPLICATE_FILENAME_ERROR = 'DUPLICATE_FILENAME_ERROR'
}

/**
 * The possible statuses for a file object.
 */
export const enum FileStatus {
  
  /**
   * File has been uploaded but hasn't been processed.
   */
  UPLOADED = 'UPLOADED',
  
  /**
   * File is being processed.
   */
  PROCESSING = 'PROCESSING',
  
  /**
   * File is ready to be displayed.
   */
  READY = 'READY',
  
  /**
   * File processing has failed.
   */
  FAILED = 'FAILED'
}

/**
 * An image hosted on Shopify.
 * 
 */
export interface MediaImage extends File, HasMetafields, Media, Node {
  
  /**
   * A word or phrase to share the nature or contents of a media.
   */
  alt?: string;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
   * 
   */
  createdAt: DateTime;
  
  /**
   * Any errors that have occurred on the file.
   */
  fileErrors: Array<FileError>;
  
  /**
   * The status of the file.
   */
  fileStatus: FileStatus;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The image for the media. Returns `null` until `status` is `READY`.
   */
  image?: Image;
  
  /**
   * The media content type.
   */
  mediaContentType: MediaContentType;
  
  /**
   * Any errors which have occurred on the media.
   */
  mediaErrors: Array<MediaError>;
  
  /**
   * The warnings attached to the media.
   */
  mediaWarnings: Array<MediaWarning>;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * The MIME type of the image.
   */
  mimeType?: string;
  
  /**
   * The original source of the image.
   */
  originalSource?: MediaImageOriginalSource;
  
  /**
   * The preview image for the media.
   */
  preview?: MediaPreviewImage;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * Current status of the media.
   */
  status: MediaStatus;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
   */
  updatedAt: DateTime;
}

/**
 * The original source for an image.
 * 
 */
export interface MediaImageOriginalSource {
  
  /**
   * The size of the original file in bytes.
   */
  fileSize?: number;
  
  /**
   * The URL of the original image, valid only for a short period.
   */
  url?: URL;
}

/**
 * Provides an object instance represented by a MetaobjectDefinition.
 */
export interface Metaobject extends Node {
  
  /**
   * Metaobject capabilities for this Metaobject.
   */
  capabilities: MetaobjectCapabilityData;
  
  /**
   * The app used to create the object.
   */
  createdBy: App;
  
  /**
   * The app used to create the object.
   * 
   */
  createdByApp: App;
  
  /**
   * The staff member who created the metaobject.
   * 
   */
  createdByStaff?: StaffMember;
  
  /**
   * The MetaobjectDefinition that models this object type.
   */
  definition: MetaobjectDefinition;
  
  /**
   * The preferred display name field value of the metaobject.
   */
  displayName: string;
  
  /**
   * The field for an object key, or null if the key has no field definition.
   */
  field?: MetaobjectField;
  
  /**
   * All ordered fields of the metaobject with their definitions and values.
   */
  fields: Array<MetaobjectField>;
  
  /**
   * The unique handle of the object, useful as a custom ID.
   */
  handle: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * List of back references metafields that belong to the resource.
   */
  referencedBy: MetafieldRelationConnection;
  
  /**
   * The staff member who created the metaobject.
   * @deprecated Use `createdByStaff` instead.
   */
  staffMember?: StaffMember;
  
  /**
   * The recommended field to visually represent this metaobject. May be a file reference or color         field.
   */
  thumbnailField?: MetaobjectField;
  
  /**
   * The type of the metaobject.
   */
  type: string;
  
  /**
   * When the object was last updated.
   */
  updatedAt: DateTime;
}

/**
 * Provides the capabilities of a metaobject.
 */
export interface MetaobjectCapabilityData {
  
  /**
   * The Online Store capability for this metaobject.
   */
  onlineStore?: MetaobjectCapabilityDataOnlineStore;
  
  /**
   * The publishable capability for this metaobject.
   */
  publishable?: MetaobjectCapabilityDataPublishable;
}

/**
 * The Online Store capability for the parent metaobject.
 */
export interface MetaobjectCapabilityDataOnlineStore {
  
  /**
   * The theme template used when viewing the metaobject in a store.
   */
  templateSuffix?: string;
}

/**
 * The publishable capability for the parent metaobject.
 */
export interface MetaobjectCapabilityDataPublishable {
  
  /**
   * The visibility status of this metaobject across all channels.
   */
  status: MetaobjectStatus;
}

/**
 * Defines visibility status for metaobjects.
 */
export const enum MetaobjectStatus {
  
  /**
   * The metaobjects is an internal record.
   */
  DRAFT = 'DRAFT',
  
  /**
   * The metaobjects is active for public use.
   */
  ACTIVE = 'ACTIVE'
}

/**
 * Represents the data about a staff member's Shopify account. Merchants can use staff member data to get more information about the staff members in their store.
 * 
 */
export interface StaffMember extends Node {
  
  /**
   * Whether the staff member is active.
   */
  active: boolean;
  
  /**
   * The image used as the staff member's avatar in the Shopify admin.
   */
  avatar: Image;
  
  /**
   * The staff member's email address.
   */
  email: string;
  
  /**
   * Whether the staff member's account exists.
   */
  exists: boolean;
  
  /**
   * The staff member's first name.
   */
  firstName?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The staff member's initials, if available.
   */
  initials?: Array<string>;
  
  /**
   * Whether the staff member is the shop owner.
   */
  isShopOwner: boolean;
  
  /**
   * The staff member's last name.
   */
  lastName?: string;
  
  /**
   * The staff member's preferred locale. Locale values use the format `language` or `language-COUNTRY`, where `language` is a two-letter language code, and `COUNTRY` is a two-letter country code. For example: `en` or `en-US`
   */
  locale: string;
  
  /**
   * The staff member's full name.
   */
  name: string;
  
  /**
   * The staff member's phone number.
   */
  phone?: string;
  
  /**
   * The data used to customize the Shopify admin experience for the staff member.
   */
  privateData: StaffMemberPrivateData;
}

/**
 * Represents the fallback avatar image for a staff member. This is used only if the staff member has no avatar image.
 */
export const enum StaffMemberDefaultImage {
  
  /**
   * Returns a default avatar image for the staff member.
   */
  DEFAULT = 'DEFAULT',
  
  /**
   * Returns a transparent avatar image for the staff member.
   */
  TRANSPARENT = 'TRANSPARENT',
  
  /**
   * Returns a URL that returns a 404 error if the image is not present.
   */
  NOT_FOUND = 'NOT_FOUND'
}

/**
 * Represents the data used to customize the Shopify admin experience for a logged-in staff member.
 */
export interface StaffMemberPrivateData {
  
  /**
   * The URL to the staff member's account settings page.
   */
  accountSettingsUrl: URL;
  
  /**
   * The date and time when the staff member was created.
   */
  createdAt: DateTime;
  
  /**
   * Access permissions for the staff member.
   * @deprecated Use StaffMember.permissions.userPermissions instead
   */
  permissions: Array<StaffMemberPermission>;
}

/**
 * Represents access permissions for a staff member.
 */
export const enum StaffMemberPermission {
  
  /**
   * The staff member can manage and install apps and channels.
   */
  APPLICATIONS = 'APPLICATIONS',
  
  /**
   * The staff member can manage and install sales channels.
   */
  CHANNELS = 'CHANNELS',
  
  /**
   * The staff member can view, create, update, and delete customers, and respond to customer messages in the Shopify Messaging API.
   */
  CUSTOMERS = 'CUSTOMERS',
  
  /**
   * The staff member can view the Shopify Home page, which includes sales information and other shop data.
   */
  DASHBOARD = 'DASHBOARD',
  
  /**
   * The staff member can view, buy, and manage domains.
   */
  DOMAINS = 'DOMAINS',
  
  /**
   * The staff member can create, update, and delete draft orders.
   */
  DRAFT_ORDERS = 'DRAFT_ORDERS',
  
  /**
   * The staff member can update orders.
   */
  EDIT_ORDERS = 'EDIT_ORDERS',
  
  /**
   * The staff has the same permissions as the [store owner](https://shopify.dev/en/manual/your-account/staff-accounts/staff-permissions#store-owner-permissions) with some exceptions, such as modifying the account billing or deleting staff accounts.
   * @deprecated Use the list of the staff member's explicit permissions returned in the `StaffMember.permissions.userPermissions` field instead of `full` permission.
   */
  FULL = 'FULL',
  
  /**
   * The staff member can view, create, issue, and export gift cards to a CSV file.
   */
  GIFT_CARDS = 'GIFT_CARDS',
  
  /**
   * The staff member can view and modify links and navigation menus.
   */
  LINKS = 'LINKS',
  
  /**
   * The staff member can create, update, and delete locations where inventory is stocked or managed.
   */
  LOCATIONS = 'LOCATIONS',
  
  /**
   * The staff member can view and create discount codes and automatic discounts, and export discounts to a CSV file.
   */
  MARKETING = 'MARKETING',
  
  /**
   * The staff member can view, create, and automate marketing campaigns.
   */
  MARKETING_SECTION = 'MARKETING_SECTION',
  
  /**
   * The staff member can view, create, update, delete, and cancel orders, and receive order notifications. The staff member can still create draft orders without this permission.
   */
  ORDERS = 'ORDERS',
  
  /**
   * The staff member can view the Overview and Live view pages, which include sales information, and other shop and sales channels data.
   */
  OVERVIEWS = 'OVERVIEWS',
  
  /**
   * The staff member can view, create, update, publish, and delete blog posts and pages.
   */
  PAGES = 'PAGES',
  
  /**
   * The staff member can pay for an order by using a vaulted card.
   */
  PAY_ORDERS_BY_VAULTED_CARD = 'PAY_ORDERS_BY_VAULTED_CARD',
  
  /**
   * The staff member can view the preferences and configuration of a shop.
   */
  PREFERENCES = 'PREFERENCES',
  
  /**
   * The staff member can view, create, import, and update products, collections, and inventory.
   */
  PRODUCTS = 'PRODUCTS',
  
  /**
   * The staff member can view and create all reports, which includes sales information and other shop data.
   */
  REPORTS = 'REPORTS',
  
  /**
   * The staff member can view, update, and publish themes.
   */
  THEMES = 'THEMES',
  
  /**
   * The staff member can view and create translations.
   * @deprecated Unused.
   */
  TRANSLATIONS = 'TRANSLATIONS'
}

/**
 * Provides the definition of a generic object structure composed of metafields.
 */
export interface MetaobjectDefinition extends Node {
  
  /**
   * Access configuration for the metaobject definition.
   */
  access: MetaobjectAccess;
  
  /**
   * The capabilities of the metaobject definition.
   */
  capabilities: MetaobjectCapabilities;
  
  /**
   * The app used to create the metaobject definition.
   */
  createdByApp: App;
  
  /**
   * The staff member who created the metaobject definition.
   */
  createdByStaff?: StaffMember;
  
  /**
   * The administrative description.
   */
  description?: string;
  
  /**
   * The key of a field to reference as the display name for each object.
   */
  displayNameKey?: string;
  
  /**
   * The fields defined for this object type.
   */
  fieldDefinitions: Array<MetaobjectFieldDefinition>;
  
  /**
   * Whether this metaobject definition has field whose type can visually represent a metaobject with        the `thumbnailField`.
   */
  hasThumbnailField: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * A paginated connection to the metaobjects associated with the definition.
   */
  metaobjects: MetaobjectConnection;
  
  /**
   * The count of metaobjects created for the definition.
   */
  metaobjectsCount: number;
  
  /**
   * The human-readable name.
   */
  name: string;
  
  /**
   * The type of the object definition. Defines the namespace of associated metafields.
   */
  type: string;
}

/**
 * Provides metaobject definition's access configuration.
 */
export interface MetaobjectAccess {
  
  /**
   * Access configuration for Admin API surface areas, including the GraphQL Admin API.
   * 
   */
  admin: MetaobjectAdminAccess;
  
  /**
   * Access configuration for Storefront surface areas, including the GraphQL Storefront API and Liquid.
   * 
   */
  storefront: MetaobjectStorefrontAccess;
}

/**
 * Defines how the metaobjects of a definition can be accessed in admin API surface areas.
 */
export const enum MetaobjectAdminAccess {
  
  /**
   * Only the application that owns a metaobject can read and write to it.
   * 
   */
  PRIVATE = 'PRIVATE',
  
  /**
   * Applications that act on behalf of merchants can read metaobjects.
   * Only the owning application can write metaobjects.
   * 
   */
  MERCHANT_READ = 'MERCHANT_READ',
  
  /**
   * The owning application, as well as applications that act on behalf of merchants can read and write metaobjects.
   * No other applications can read or write metaobjects.
   * 
   */
  MERCHANT_READ_WRITE = 'MERCHANT_READ_WRITE',
  
  /**
   * All applications with the `metaobjects` access scope can read metaobjects.
   * Only the owning application can write metaobjects.
   * 
   */
  PUBLIC_READ = 'PUBLIC_READ',
  
  /**
   * All applications with the `metaobjects` access scope can read and write metaobjects.
   * 
   */
  PUBLIC_READ_WRITE = 'PUBLIC_READ_WRITE'
}

/**
 * Defines how the metaobjects of a definition can be accessed in Storefront API surface areas, including Liquid and the GraphQL Storefront API.
 * 
 */
export const enum MetaobjectStorefrontAccess {
  
  /**
   * Metaobjects are not accessible in any Storefront API surface area.
   * 
   */
  NONE = 'NONE',
  
  /**
   * Metaobjects are accessible in the GraphQL Storefront API by any application with the `unauthenticated_read_metaobjects` access scope.
   * Metaobjects are accessible in online store Liquid templates.
   * 
   */
  PUBLIC_READ = 'PUBLIC_READ'
}

/**
 * Provides the capabilities of a metaobject definition.
 */
export interface MetaobjectCapabilities {
  
  /**
   * Indicates whether a metaobject definition can be displayed as a page on the Online Store.
   */
  onlineStore?: MetaobjectCapabilitiesOnlineStore;
  
  /**
   * Indicate whether a metaobject definition is publishable.
   */
  publishable: MetaobjectCapabilitiesPublishable;
  
  /**
   * Indicate whether a metaobject definition is renderable and exposes SEO data.
   */
  renderable?: MetaobjectCapabilitiesRenderable;
  
  /**
   * Indicate whether a metaobject definition is translatable.
   */
  translatable: MetaobjectCapabilitiesTranslatable;
}

/**
 * The Online Store capability of a metaobject definition.
 */
export interface MetaobjectCapabilitiesOnlineStore {
  
  /**
   * The data associated with the Online Store capability.
   */
  data?: MetaobjectCapabilityDefinitionDataOnlineStore;
  
  /**
   * Indicates if the capability is enabled.
   */
  enabled: boolean;
}

/**
 * The Online Store capability data for the metaobject definition.
 */
export interface MetaobjectCapabilityDefinitionDataOnlineStore {
  
  /**
   * Flag indicating if a sufficient number of redirects are available to redirect all published entries.
   */
  canCreateRedirects: boolean;
  
  /**
   * The URL handle for accessing pages of this metaobject type in the Online Store.
   */
  urlHandle: string;
}

/**
 * The publishable capability of a metaobject definition.
 */
export interface MetaobjectCapabilitiesPublishable {
  
  /**
   * Indicates if the capability is enabled.
   */
  enabled: boolean;
}

/**
 * The renderable capability of a metaobject definition.
 */
export interface MetaobjectCapabilitiesRenderable {
  
  /**
   * The data associated with the renderable capability.
   */
  data?: MetaobjectCapabilityDefinitionDataRenderable;
  
  /**
   * Indicates if the capability is enabled.
   */
  enabled: boolean;
}

/**
 * The renderable capability data for the metaobject definition.
 */
export interface MetaobjectCapabilityDefinitionDataRenderable {
  
  /**
   * The metaobject field used as an alias for the SEO page description.
   */
  metaDescriptionKey?: string;
  
  /**
   * The metaobject field used as an alias for the SEO page title.
   */
  metaTitleKey?: string;
}

/**
 * The translatable capability of a metaobject definition.
 */
export interface MetaobjectCapabilitiesTranslatable {
  
  /**
   * Indicates if the capability is enabled.
   */
  enabled: boolean;
}

/**
 * Defines a field for a MetaobjectDefinition with properties
 * such as the field's data type and validations.
 * 
 */
export interface MetaobjectFieldDefinition {
  
  /**
   * The administrative description.
   */
  description?: string;
  
  /**
   * A key name used to identify the field within the metaobject composition.
   */
  key: string;
  
  /**
   * The human-readable name.
   */
  name: string;
  
  /**
   * Required status of the field within the metaobject composition.
   */
  required: boolean;
  
  /**
   * The type of data that the field stores.
   */
  type: MetafieldDefinitionType;
  
  /**
   * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
   * the field. For example, a field with the type `date` can set a minimum date requirement.
   * 
   */
  validations: Array<MetafieldDefinitionValidation>;
}

/**
 * An auto-generated type for paginating through multiple Metaobjects.
 * 
 */
export interface MetaobjectConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<MetaobjectEdge>;
  
  /**
   * A list of the nodes contained in MetaobjectEdge.
   */
  nodes: Array<Metaobject>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Metaobject and a cursor during pagination.
 * 
 */
export interface MetaobjectEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of MetaobjectEdge.
   */
  node: Metaobject;
}

/**
 * Provides a field definition and the data value assigned to it.
 */
export interface MetaobjectField {
  
  /**
   * The field definition for this object key.
   */
  definition: MetaobjectFieldDefinition;
  
  /**
   * The object key of this field.
   */
  key: string;
  
  /**
   * For resource reference fields, provides the referenced object.
   */
  reference?: MetafieldReference;
  
  /**
   * For resource reference list fields, provides the list of referenced objects.
   */
  references?: MetafieldReferenceConnection;
  
  /**
   * For file reference or color fields, provides visual attributes for this field.
   */
  thumbnail?: MetaobjectThumbnail;
  
  /**
   * The type of the field.
   */
  type: string;
  
  /**
   * The assigned field value, always stored as a string regardless of the field type.
   */
  value?: string;
}

/**
 * An auto-generated type for paginating through multiple MetafieldReferences.
 * 
 */
export interface MetafieldReferenceConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<MetafieldReferenceEdge>;
  
  /**
   * A list of the nodes contained in MetafieldReferenceEdge.
   */
  nodes: Array<MetafieldReference | null>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one MetafieldReference and a cursor during pagination.
 * 
 */
export interface MetafieldReferenceEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of MetafieldReferenceEdge.
   */
  node?: MetafieldReference;
}

/**
 * Provides attributes for visual representation.
 */
export interface MetaobjectThumbnail {
  
  /**
   * The file to be used for visual representation of this metaobject.
   */
  file?: File;
  
  /**
   * The hexadecimal color code to be used for respresenting this metaobject.
   */
  hex?: string;
}

/**
 * An auto-generated type for paginating through multiple MetafieldRelations.
 * 
 */
export interface MetafieldRelationConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<MetafieldRelationEdge>;
  
  /**
   * A list of the nodes contained in MetafieldRelationEdge.
   */
  nodes: Array<MetafieldRelation>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one MetafieldRelation and a cursor during pagination.
 * 
 */
export interface MetafieldRelationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of MetafieldRelationEdge.
   */
  node: MetafieldRelation;
}

/**
 * Defines a relation between two resources via a reference metafield.
 * The referencer owns the joining field with a given namespace and key,
 * while the target is referenced by the field.
 * 
 */
export interface MetafieldRelation {
  
  /**
   * The key of the field making the reference.
   */
  key: string;
  
  /**
   * The name of the field making the reference.
   */
  name: string;
  
  /**
   * The namespace of the metafield making the reference, or type of the metaobject.
   */
  namespace: string;
  
  /**
   * The resource making the reference.
   */
  referencer: MetafieldReferencer;
  
  /**
   * The referenced resource.
   */
  target: MetafieldReference;
}

/**
 * Types of resources that may use metafields to reference other resources.
 * 
 */
export type MetafieldReferencer =
AppInstallation |
Collection |
Customer |
DeliveryCustomization |
DiscountAutomaticNode |
DiscountCodeNode |
DiscountNode |
DraftOrder |
FulfillmentOrder |
Location |
Market |
Metaobject |
OnlineStoreArticle |
OnlineStoreBlog |
OnlineStorePage |
Order |
PaymentCustomization |
Product |
ProductVariant |
Shop;

/** Use this to resolve union type MetafieldReferencer */
export type PossibleMetafieldReferencerTypeNames =
'AppInstallation' |
'Collection' |
'Customer' |
'DeliveryCustomization' |
'DiscountAutomaticNode' |
'DiscountCodeNode' |
'DiscountNode' |
'DraftOrder' |
'FulfillmentOrder' |
'Location' |
'Market' |
'Metaobject' |
'OnlineStoreArticle' |
'OnlineStoreBlog' |
'OnlineStorePage' |
'Order' |
'PaymentCustomization' |
'Product' |
'ProductVariant' |
'Shop';

export interface MetafieldReferencerNameMap {
  MetafieldReferencer: MetafieldReferencer;
  AppInstallation: AppInstallation;
  Collection: Collection;
  Customer: Customer;
  DeliveryCustomization: DeliveryCustomization;
  DiscountAutomaticNode: DiscountAutomaticNode;
  DiscountCodeNode: DiscountCodeNode;
  DiscountNode: DiscountNode;
  DraftOrder: DraftOrder;
  FulfillmentOrder: FulfillmentOrder;
  Location: Location;
  Market: Market;
  Metaobject: Metaobject;
  OnlineStoreArticle: OnlineStoreArticle;
  OnlineStoreBlog: OnlineStoreBlog;
  OnlineStorePage: OnlineStorePage;
  Order: Order;
  PaymentCustomization: PaymentCustomization;
  Product: Product;
  ProductVariant: ProductVariant;
  Shop: Shop;
}

/**
 * Represents information about a customer of the shop, such as the customer's contact details, their order
 * history, and whether they've agreed to receive marketing material by email.
 * 
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 * 
 */
export interface Customer extends CommentEventSubject, HasEvents, HasMetafieldDefinitions, HasMetafields, LegacyInteroperability, Node {
  
  /**
   * A list of addresses associated with the customer.
   */
  addresses: Array<MailingAddress>;
  
  /**
   * The total amount that the customer has spent on orders in their lifetime.
   */
  amountSpent: MoneyV2;
  
  /**
   * Whether the merchant can delete the customer from their store.
   * 
   * A customer can be deleted from a store only if they haven't yet made an order. After a customer makes an
   * order, they can't be deleted from a store.
   * 
   */
  canDelete: boolean;
  
  /**
   * A list of the customer's company contact profiles.
   */
  companyContactProfiles: Array<CompanyContact>;
  
  /**
   * The date and time when the customer was added to the store.
   */
  createdAt: DateTime;
  
  /**
   * The default address associated with the customer.
   */
  defaultAddress?: MailingAddress;
  
  /**
   * The full name of the customer, based on the values for first_name and last_name. If the first_name and
   * last_name are not available, then this falls back to the customer's email address, and if that is not available, the customer's phone number.
   * 
   */
  displayName: string;
  
  /**
   * The customer's email address.
   */
  email?: string;
  
  /**
   * The current email marketing state for the customer.
   * If the customer doesn't have an email address, then this property is `null`.
   * 
   */
  emailMarketingConsent?: CustomerEmailMarketingConsentState;
  
  /**
   * A list of events associated with the customer.
   */
  events: EventConnection;
  
  /**
   * The customer's first name.
   */
  firstName?: string;
  
  /**
   * Whether the merchant has added timeline comments about the customer on the customer's page.
   * @deprecated To query for comments on the timeline, use the events connection and a `query` argument containing `verb:comment`, or look for a `CommentEvent` in the `__typename` of events.
   */
  hasTimelineComment: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The image associated with the customer.
   */
  image: Image;
  
  /**
   * The customer's last name.
   */
  lastName?: string;
  
  /**
   * The customer's last order.
   */
  lastOrder?: Order;
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
  
  /**
   * The amount of time since the customer was first added to the store.
   * 
   * Example: 'about 12 years'.
   * 
   */
  lifetimeDuration: string;
  
  /**
   * The customer's locale.
   */
  locale: string;
  
  /**
   * The market that includes the customer’s default address.
   */
  market?: Market;
  
  /**
   * Whether the customer can be merged with another customer.
   */
  mergeable: CustomerMergeable;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafield definitions.
   */
  metafieldDefinitions: MetafieldDefinitionConnection;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * A unique identifier for the customer that's used with Multipass login.
   */
  multipassIdentifier?: string;
  
  /**
   * A note about the customer.
   */
  note?: string;
  
  /**
   * The number of orders that the customer has made at the store in their lifetime.
   */
  numberOfOrders: UnsignedInt64;
  
  /**
   * A list of the customer's orders.
   */
  orders: OrderConnection;
  
  /**
   * A list of the customer's payment methods.
   */
  paymentMethods: CustomerPaymentMethodConnection;
  
  /**
   * The customer's phone number.
   */
  phone?: string;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * Possible subscriber states of a customer defined by their subscription contracts.
   */
  productSubscriberStatus: CustomerProductSubscriberStatus;
  
  /**
   * The current SMS marketing state for the customer's phone number.
   * 
   * If the customer does not have a phone number, then this property is `null`.
   * 
   */
  smsMarketingConsent?: CustomerSmsMarketingConsentState;
  
  /**
   * The state of the customer's account with the shop.
   */
  state: CustomerState;
  
  /**
   * The statistics for a given customer.
   */
  statistics: CustomerStatistics;
  
  /**
   * A list of the customer's subscription contracts.
   */
  subscriptionContracts: SubscriptionContractConnection;
  
  /**
   * A comma separated list of tags that have been added to the customer.
   */
  tags: Array<string>;
  
  /**
   * Whether the customer is exempt from being charged taxes on their orders.
   */
  taxExempt: boolean;
  
  /**
   * The list of tax exemptions applied to the customer.
   */
  taxExemptions: Array<TaxExemption>;
  
  /**
   * The URL to unsubscribe the customer from the mailing list.
   */
  unsubscribeUrl: URL;
  
  /**
   * The date and time when the customer was last updated.
   */
  updatedAt: DateTime;
  
  /**
   * Whether the email address is formatted correctly.
   * 
   * Returns `true` when the email is formatted correctly and
   * belongs to an existing domain. This doesn't guarantee that
   * the email address actually exists.
   * 
   */
  validEmailAddress: boolean;
  
  /**
   * Whether the customer has verified their email address. Defaults to `true` if the customer is created through the Shopify admin or API.
   */
  verifiedEmail: boolean;
}

/**
 * The subject line of a comment event.
 */
export interface CommentEventSubject {
  
  /**
   * Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
   */
  hasTimelineComment: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
}

/** Use this to resolve interface type CommentEventSubject */
export type PossibleCommentEventSubjectTypeNames =
'Customer' |
'Company' |
'DraftOrder' |
'Order' |
'CompanyLocation' |
'PriceRule';

export interface CommentEventSubjectNameMap {
  CommentEventSubject: CommentEventSubject;
  Customer: Customer;
  Company: Company;
  DraftOrder: DraftOrder;
  Order: Order;
  CompanyLocation: CompanyLocation;
  PriceRule: PriceRule;
}

/**
 * Represents an object that has a list of events.
 */
export interface HasEvents {
  
  /**
   * The paginated list of events associated with the host subject.
   */
  events: EventConnection;
}

/** Use this to resolve interface type HasEvents */
export type PossibleHasEventsTypeNames =
'Customer' |
'Company' |
'DraftOrder' |
'Order' |
'CompanyLocation' |
'DiscountAutomaticNode' |
'DiscountAutomaticBxgy' |
'DiscountCodeNode' |
'DiscountNode' |
'PriceRule';

export interface HasEventsNameMap {
  HasEvents: HasEvents;
  Customer: Customer;
  Company: Company;
  DraftOrder: DraftOrder;
  Order: Order;
  CompanyLocation: CompanyLocation;
  DiscountAutomaticNode: DiscountAutomaticNode;
  DiscountAutomaticBxgy: DiscountAutomaticBxgy;
  DiscountCodeNode: DiscountCodeNode;
  DiscountNode: DiscountNode;
  PriceRule: PriceRule;
}

/**
 * The set of valid sort keys for the Event query.
 */
export const enum EventSortKeys {
  
  /**
   * Sort by the `created_at` value.
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple Events.
 * 
 */
export interface EventConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<EventEdge>;
  
  /**
   * A list of the nodes contained in EventEdge.
   */
  nodes: Array<Event>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Event and a cursor during pagination.
 * 
 */
export interface EventEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of EventEdge.
   */
  node: Event;
}

/**
 * Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
 * addition of a product.
 * 
 */
export interface Event {
  
  /**
   * The name of the app that created the event.
   */
  appTitle?: string;
  
  /**
   * Whether the event was created by an app.
   */
  attributeToApp: boolean;
  
  /**
   * Whether the event was caused by an admin user.
   */
  attributeToUser: boolean;
  
  /**
   * The date and time when the event was created.
   */
  createdAt: DateTime;
  
  /**
   * Whether the event is critical.
   */
  criticalAlert: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Human readable text that describes the event.
   */
  message: FormattedString;
}

/** Use this to resolve interface type Event */
export type PossibleEventTypeNames = 'BasicEvent' | 'CommentEvent';

export interface EventNameMap {
  Event: Event;
  BasicEvent: BasicEvent;
  CommentEvent: CommentEvent;
}

/**
 * Represents a customer mailing address.
 * 
 * For example, a customer's default address and an order's billing address are both mailling addresses.
 * 
 */
export interface MailingAddress extends Node {
  
  /**
   * The first line of the address. Typically the street address or PO Box number.
   */
  address1?: string;
  
  /**
   * The second line of the address. Typically the number of the apartment, suite, or unit.
   * 
   */
  address2?: string;
  
  /**
   * The name of the city, district, village, or town.
   * 
   */
  city?: string;
  
  /**
   * The name of the customer's company or organization.
   * 
   */
  company?: string;
  
  /**
   * Whether the address coordinates are valid.
   */
  coordinatesValidated: boolean;
  
  /**
   * The name of the country.
   * 
   */
  country?: string;
  
  /**
   * The two-letter code for the country of the address.
   * 
   * For example, US.
   * 
   * @deprecated Use `countryCodeV2` instead.
   */
  countryCode?: string;
  
  /**
   * The two-letter code for the country of the address.
   * 
   * For example, US.
   * 
   */
  countryCodeV2?: CountryCode;
  
  /**
   * The first name of the customer.
   */
  firstName?: string;
  
  /**
   * A formatted version of the address, customized by the provided arguments.
   */
  formatted: Array<string>;
  
  /**
   * A comma-separated list of the values for city, province, and country.
   */
  formattedArea?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The last name of the customer.
   */
  lastName?: string;
  
  /**
   * The latitude coordinate of the customer address.
   */
  latitude?: number;
  
  /**
   * The longitude coordinate of the customer address.
   */
  longitude?: number;
  
  /**
   * The full name of the customer, based on firstName and lastName.
   * 
   */
  name?: string;
  
  /**
   * A unique phone number for the customer.
   * 
   * Formatted using E.164 standard. For example, _+16135551111_.
   * 
   */
  phone?: string;
  
  /**
   * The region of the address, such as the province, state, or district.
   */
  province?: string;
  
  /**
   * The two-letter code for the region.
   * 
   * For example, ON.
   * 
   */
  provinceCode?: string;
  
  /**
   * The time zone of the address.
   */
  timeZone?: string;
  
  /**
   * The zip or postal code of the address.
   */
  zip?: string;
}

/**
 * A person that acts on behalf of company associated to [a customer](https://shopify.dev/api/admin-graphql/latest/objects/customer).
 */
export interface CompanyContact extends Node {
  
  /**
   * The company to which the contact belongs.
   */
  company: Company;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was created at Shopify.
   */
  createdAt: DateTime;
  
  /**
   * The customer associated to this contact.
   */
  customer: Customer;
  
  /**
   * The list of draft orders for the company contact.
   */
  draftOrders: DraftOrderConnection;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Whether the contact is the main contact of the company.
   */
  isMainContact: boolean;
  
  /**
   * The lifetime duration of the company contact, since its creation date on Shopify. Examples: `1 year`, `2 months`, `3 days`.
   */
  lifetimeDuration: string;
  
  /**
   * The company contact's locale (language).
   */
  locale?: string;
  
  /**
   * The list of orders for the company contact.
   */
  orders: OrderConnection;
  
  /**
   * The list of roles assigned to this company contact.
   */
  roleAssignments: CompanyContactRoleAssignmentConnection;
  
  /**
   * The company contact's job title.
   */
  title?: string;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company contact was last updated.
   */
  updatedAt: DateTime;
}

/**
 * Represents information about a company which is also a customer of the shop.
 */
export interface Company extends CommentEventSubject, HasEvents, HasMetafieldDefinitions, HasMetafields, Navigable, Node {
  
  /**
   * The number of contacts that belong to the company.
   */
  contactCount: number;
  
  /**
   * The list of roles for the company contacts.
   */
  contactRoles: CompanyContactRoleConnection;
  
  /**
   * The list of contacts in the company.
   */
  contacts: CompanyContactConnection;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was created in Shopify.
   */
  createdAt: DateTime;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company became the customer.
   */
  customerSince: DateTime;
  
  /**
   * A default cursor that returns the single next record, sorted ascending by ID.
   * 
   */
  defaultCursor: string;
  
  /**
   * The role proposed by default for a contact at the company.
   */
  defaultRole?: CompanyContactRole;
  
  /**
   * The list of the company's draft orders.
   */
  draftOrders: DraftOrderConnection;
  
  /**
   * The paginated list of events associated with the host subject.
   */
  events: EventConnection;
  
  /**
   * A unique externally-supplied ID for the company.
   */
  externalId?: string;
  
  /**
   * Whether the merchant added a timeline comment to the company.
   */
  hasTimelineComment: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The lifetime duration of the company, since it became a customer of the shop. Examples: `2 days`, `3 months`, `1 year`.
   */
  lifetimeDuration: string;
  
  /**
   * The number of locations that belong to the company.
   */
  locationCount: number;
  
  /**
   * The list of locations in the company.
   */
  locations: CompanyLocationConnection;
  
  /**
   * The main contact for the company.
   */
  mainContact?: CompanyContact;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafield definitions.
   */
  metafieldDefinitions: MetafieldDefinitionConnection;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * The name of the company.
   */
  name: string;
  
  /**
   * A note about the company.
   */
  note?: string;
  
  /**
   * The total number of orders placed for this company, across all its locations.
   */
  orderCount: number;
  
  /**
   * The list of the company's orders.
   */
  orders: OrderConnection;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * The total amount spent by this company, across all its locations.
   */
  totalSpent: MoneyV2;
  
  /**
   * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was last modified.
   */
  updatedAt: DateTime;
}

/**
 * The set of valid sort keys for the CompanyContactRole query.
 */
export const enum CompanyContactRoleSortKeys {
  
  /**
   * Sort by the `created_at` value.
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Sort by the `updated_at` value.
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple CompanyContactRoles.
 * 
 */
export interface CompanyContactRoleConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<CompanyContactRoleEdge>;
  
  /**
   * A list of the nodes contained in CompanyContactRoleEdge.
   */
  nodes: Array<CompanyContactRole>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one CompanyContactRole and a cursor during pagination.
 * 
 */
export interface CompanyContactRoleEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of CompanyContactRoleEdge.
   */
  node: CompanyContactRole;
}

/**
 * The role for a [company contact](https://shopify.dev/api/admin-graphql/latest/objects/companycontact).
 */
export interface CompanyContactRole extends Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The name of a role.
   * For example, `admin` or `buyer`.
   * 
   */
  name: string;
  
  /**
   * A note for the role.
   */
  note?: string;
}

/**
 * The set of valid sort keys for the CompanyContact query.
 */
export const enum CompanyContactSortKeys {
  
  /**
   * Sort by the `created_at` value.
   */
  CREATED_AT = 'CREATED_AT',
  
  /**
   * Sort by the `updated_at` value.
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Sort by the `title` value.
   */
  TITLE = 'TITLE',
  
  /**
   * Sort by the `company_id` value.
   */
  COMPANY_ID = 'COMPANY_ID',
  
  /**
   * Sort by the `name` value.
   */
  NAME = 'NAME',
  
  /**
   * Sort by the `email` value.
   */
  EMAIL = 'EMAIL',
  
  /**
   * Sort by the `name_email` value.
   */
  NAME_EMAIL = 'NAME_EMAIL',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple CompanyContacts.
 * 
 */
export interface CompanyContactConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<CompanyContactEdge>;
  
  /**
   * A list of the nodes contained in CompanyContactEdge.
   */
  nodes: Array<CompanyContact>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one CompanyContact and a cursor during pagination.
 * 
 */
export interface CompanyContactEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of CompanyContactEdge.
   */
  node: CompanyContact;
}

/**
 * The set of valid sort keys for the DraftOrder query.
 */
export const enum DraftOrderSortKeys {
  
  /**
   * Sort by the `number` value.
   */
  NUMBER = 'NUMBER',
  
  /**
   * Sort by the `updated_at` value.
   */
  UPDATED_AT = 'UPDATED_AT',
  
  /**
   * Sort by the `status` value.
   */
  STATUS = 'STATUS',
  
  /**
   * Sort by the `total_price` value.
   */
  TOTAL_PRICE = 'TOTAL_PRICE',
  
  /**
   * Sort by the `customer_name` value.
   */
  CUSTOMER_NAME = 'CUSTOMER_NAME',
  
  /**
   * Sort by the `id` value.
   */
  ID = 'ID',
  
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   * 
   */
  RELEVANCE = 'RELEVANCE'
}

/**
 * An auto-generated type for paginating through multiple DraftOrders.
 * 
 */
export interface DraftOrderConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<DraftOrderEdge>;
  
  /**
   * A list of the nodes contained in DraftOrderEdge.
   */
  nodes: Array<DraftOrder>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one DraftOrder and a cursor during pagination.
 * 
 */
export interface DraftOrderEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of DraftOrderEdge.
   */
  node: DraftOrder;
}

/**
 * An order that a merchant creates on behalf of a customer. Draft orders are useful for merchants that need to do the following tasks:
 * 
 * - Create new orders for sales made by phone, in person, by chat, or elsewhere. When a merchant accepts payment for a draft order, an order is created.
 * - Send invoices to customers to pay with a secure checkout link.
 * - Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
 * - Re-create orders manually from active sales channels.
 * - Sell products at discount or wholesale rates.
 * - Take pre-orders.
 * - Save an order as a draft and resume working on it later.
 * 
 * For Draft orders in multiple currencies `presentment_money` is the source of truth for what a customer is going to be charged and `shop_money` is an estimate of what the merchant might receive in their local currency.
 * 
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 * 
 */
export interface DraftOrder extends CommentEventSubject, HasEvents, HasLocalizationExtensions, HasMetafields, LegacyInteroperability, Navigable, Node {
  
  /**
   * The order-level discount applied to the draft order.
   */
  appliedDiscount?: DraftOrderAppliedDiscount;
  
  /**
   * The billing address of the customer.
   * 
   */
  billingAddress?: MailingAddress;
  
  /**
   * Whether the billing address matches the shipping address.
   */
  billingAddressMatchesShippingAddress: boolean;
  
  /**
   * The date and time when the draft order converted to a new order,
   * and the draft order's status changed to **Completed**.
   * 
   */
  completedAt?: DateTime;
  
  /**
   * The date and time when the draft order was created in Shopify.
   */
  createdAt: DateTime;
  
  /**
   * The three letter code for the currency of the store at the time of the most recent update to the draft order.
   * 
   */
  currencyCode: CurrencyCode;
  
  /**
   * The custom information added to the draft order on behalf of the customer.
   * 
   */
  customAttributes: Array<Attribute>;
  
  /**
   * The customer who will be sent an invoice for the draft order, if there is one.
   */
  customer?: Customer;
  
  /**
   * A default cursor that returns the single next record, sorted ascending by ID.
   * 
   */
  defaultCursor: string;
  
  /**
   * The email address of the customer, which is used to send notifications.
   */
  email?: string;
  
  /**
   * The list of events associated with the draft order.
   */
  events: EventConnection;
  
  /**
   * Whether the merchant has added timeline comments to the draft order.
   */
  hasTimelineComment: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The subject defined for the draft invoice email template.
   */
  invoiceEmailTemplateSubject: string;
  
  /**
   * The date and time when the invoice was last emailed to the customer.
   */
  invoiceSentAt?: DateTime;
  
  /**
   * The link to the checkout, which is sent to the customer in the invoice email.
   */
  invoiceUrl?: URL;
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
  
  /**
   * The list of the line items in the draft order.
   */
  lineItems: DraftOrderLineItemConnection;
  
  /**
   * The subtotal of the line items and corresponding discounts. The subtotal doesn't include shipping charges, shipping discounts, taxes, or order discounts.
   */
  lineItemsSubtotalPrice: MoneyBag;
  
  /**
   * List of localization extensions for the resource.
   */
  localizationExtensions: LocalizationExtensionConnection;
  
  /**
   * The name of the selected market.
   */
  marketName: string;
  
  /**
   * The selected country code that determines the pricing of the draft order.
   */
  marketRegionCountryCode: CountryCode;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * The identifier for the draft order, which is unique within the store. For example, _#D1223_.
   * 
   */
  name: string;
  
  /**
   * The text from an optional note attached to the draft order.
   */
  note2?: string;
  
  /**
   * The order that was created from this draft order.
   */
  order?: Order;
  
  /**
   * The associated payment terms for this draft order.
   */
  paymentTerms?: PaymentTerms;
  
  /**
   * The phone number assigned to the draft order.
   */
  phone?: string;
  
  /**
   * The purchase order number.
   */
  poNumber?: string;
  
  /**
   * The payment currency of the customer for this draft order.
   */
  presentmentCurrencyCode: CurrencyCode;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * The purchasing entity for the draft order.
   */
  purchasingEntity?: PurchasingEntity;
  
  /**
   * Whether the Draft Order is ready and can be completed. Draft Orders might have asynchronous operations that can take time to finish.
   */
  ready: boolean;
  
  /**
   * The time after which inventory will automatically be restocked.
   */
  reserveInventoryUntil?: DateTime;
  
  /**
   * The shipping address of the customer.
   */
  shippingAddress?: MailingAddress;
  
  /**
   * The line item that contains the shipping costs.
   */
  shippingLine?: ShippingLine;
  
  /**
   * Status of the draft order.
   */
  status: DraftOrderStatus;
  
  /**
   * The subtotal of the line items and their discounts. The subtotal doesn't include shipping charges, shipping discounts, or taxes.
   * 
   */
  subtotalPrice: Money;
  
  /**
   * A subtotal of the line items and corresponding discounts. The subtotal doesn't include shipping charges, shipping discounts, or taxes.
   */
  subtotalPriceSet: MoneyBag;
  
  /**
   * A comma separated list of tags associated with the draft order. Updating `tags` overwrites
   * any existing tags that were previously added to the draft order. To add new tags without overwriting
   * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   * 
   */
  tags: Array<string>;
  
  /**
   * Whether the draft order is tax exempt.
   */
  taxExempt: boolean;
  
  /**
   * Total amount of taxes charged for each line item and shipping line.
   */
  taxLines: Array<TaxLine>;
  
  /**
   * Whether the line item prices include taxes.
   */
  taxesIncluded: boolean;
  
  /**
   * The total discounts for this draft order.
   */
  totalDiscountsSet: MoneyBag;
  
  /**
   * The total price of line items for this draft order.
   */
  totalLineItemsPriceSet: MoneyBag;
  
  /**
   * The total amount of the draft order, including taxes, shipping charges, and discounts.
   */
  totalPrice: Money;
  
  /**
   * The total amount of the draft order including taxes, shipping charges, and discounts.
   */
  totalPriceSet: MoneyBag;
  
  /**
   * The total shipping charge for the draft order.
   */
  totalShippingPrice: Money;
  
  /**
   * The total shipping charge for the draft order.
   */
  totalShippingPriceSet: MoneyBag;
  
  /**
   * The total amount of taxes for the draft order.
   */
  totalTax: Money;
  
  /**
   * The total amount of taxes for the draft order.
   */
  totalTaxSet: MoneyBag;
  
  /**
   * The total weight in grams of the draft order.
   */
  totalWeight: UnsignedInt64;
  
  /**
   * The date and time when the draft order was last changed.
   * The format is YYYY-MM-DD HH:mm:ss. For example, 2016-02-05 17:04:01.
   * 
   */
  updatedAt: DateTime;
  
  /**
   * Whether the draft order will be visible to the customer on the self-serve portal.
   */
  visibleToCustomer: boolean;
}

/**
 * Localization extensions associated with the specified resource. For example, the tax id for government invoice.
 * 
 */
export interface HasLocalizationExtensions {
  
  /**
   * List of localization extensions for the resource.
   */
  localizationExtensions: LocalizationExtensionConnection;
}

/** Use this to resolve interface type HasLocalizationExtensions */
export type PossibleHasLocalizationExtensionsTypeNames = 'DraftOrder' | 'Order';

export interface HasLocalizationExtensionsNameMap {
  HasLocalizationExtensions: HasLocalizationExtensions;
  DraftOrder: DraftOrder;
  Order: Order;
}

/**
 * The purpose of a localization extension.
 */
export const enum LocalizationExtensionPurpose {
  
  /**
   * Extensions that are used for shipping purposes, for example, customs clearance.
   */
  SHIPPING = 'SHIPPING',
  
  /**
   * Extensions that are used for taxes purposes, for example, invoicing.
   */
  TAX = 'TAX'
}

/**
 * An auto-generated type for paginating through multiple LocalizationExtensions.
 * 
 */
export interface LocalizationExtensionConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<LocalizationExtensionEdge>;
  
  /**
   * A list of the nodes contained in LocalizationExtensionEdge.
   */
  nodes: Array<LocalizationExtension>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one LocalizationExtension and a cursor during pagination.
 * 
 */
export interface LocalizationExtensionEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of LocalizationExtensionEdge.
   */
  node: LocalizationExtension;
}

/**
 * Represents the value captured by a localization extension. Localization extensions are additional fields required by certain countries on international orders. For example, some countries require additional fields for customs information or tax identification numbers.
 */
export interface LocalizationExtension {
  
  /**
   * Country ISO 3166-1 alpha-2 code.
   */
  countryCode: CountryCode;
  
  /**
   * The localized extension keys that are allowed.
   */
  key: LocalizationExtensionKey;
  
  /**
   * The purpose of this localization extension.
   */
  purpose: LocalizationExtensionPurpose;
  
  /**
   * The localized extension title.
   */
  title: string;
  
  /**
   * The value of the field.
   */
  value: string;
}

/**
 * The key of a localization extension.
 */
export const enum LocalizationExtensionKey {
  
  /**
   * Extension key 'tax_credential_br' for country BR.
   */
  TAX_CREDENTIAL_BR = 'TAX_CREDENTIAL_BR',
  
  /**
   * Extension key 'shipping_credential_br' for country BR.
   */
  SHIPPING_CREDENTIAL_BR = 'SHIPPING_CREDENTIAL_BR',
  
  /**
   * Extension key 'shipping_credential_cn' for country CN.
   */
  SHIPPING_CREDENTIAL_CN = 'SHIPPING_CREDENTIAL_CN',
  
  /**
   * Extension key 'tax_credential_it' for country IT.
   */
  TAX_CREDENTIAL_IT = 'TAX_CREDENTIAL_IT',
  
  /**
   * Extension key 'tax_email_it' for country IT.
   */
  TAX_EMAIL_IT = 'TAX_EMAIL_IT',
  
  /**
   * Extension key 'shipping_credential_kr' for country KR.
   */
  SHIPPING_CREDENTIAL_KR = 'SHIPPING_CREDENTIAL_KR'
}

/**
 * The order-level discount applied to a draft order.
 */
export interface DraftOrderAppliedDiscount {
  
  /**
   * Amount of the order-level discount that's applied to the draft order.
   * @deprecated Use `amountV2` instead.
   */
  amount: Money;
  
  /**
   * The amount of money discounted, with values shown in both shop currency and presentment currency.
   */
  amountSet: MoneyBag;
  
  /**
   * Amount of money discounted.
   */
  amountV2: MoneyV2;
  
  /**
   * Description of the order-level discount.
   */
  description: string;
  
  /**
   * Name of the order-level discount.
   */
  title?: string;
  
  /**
   * The order level discount amount. If `valueType` is `"percentage"`,
   * then `value` is the percentage discount.
   * 
   */
  value: number;
  
  /**
   * Type of the order-level discount.
   */
  valueType: DraftOrderAppliedDiscountType;
}

/**
 * The valid discount types that can be applied to a draft order.
 */
export const enum DraftOrderAppliedDiscountType {
  
  /**
   * A fixed amount in the store's currency.
   */
  FIXED_AMOUNT = 'FIXED_AMOUNT',
  
  /**
   * A percentage of the order subtotal.
   */
  PERCENTAGE = 'PERCENTAGE'
}

/**
 * An auto-generated type for paginating through multiple DraftOrderLineItems.
 * 
 */
export interface DraftOrderLineItemConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<DraftOrderLineItemEdge>;
  
  /**
   * A list of the nodes contained in DraftOrderLineItemEdge.
   */
  nodes: Array<DraftOrderLineItem>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.
 * 
 */
export interface DraftOrderLineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of DraftOrderLineItemEdge.
   */
  node: DraftOrderLineItem;
}

/**
 * A line item included in a draft order.
 */
export interface DraftOrderLineItem extends Node {
  
  /**
   * The discount that will be applied to the line item or the overall order.
   * 
   */
  appliedDiscount?: DraftOrderAppliedDiscount;
  
  /**
   * Whether the line item is a custom line item (`true`) or a product variant line item (`false`).
   * 
   */
  custom: boolean;
  
  /**
   * A list of attributes that represent custom features or special requests.
   */
  customAttributes: Array<Attribute>;
  
  /**
   * Additional information (metafields) about the line item with the associated types.
   */
  customAttributesV2: Array<TypedAttribute>;
  
  /**
   * The line item price after discounts are applied.
   * 
   */
  discountedTotal: Money;
  
  /**
   * The line item price after discounts are applied.
   */
  discountedTotalSet: MoneyBag;
  
  /**
   * The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
   * 
   */
  discountedUnitPrice: Money;
  
  /**
   * The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
   */
  discountedUnitPriceSet: MoneyBag;
  
  /**
   * Name of the service provider who fulfilled the order.
   * 
   * Valid values are either **manual** or the name of the provider.
   * For example, **amazon**, **shipwire**.
   * 
   * Deleted fulfillment services will return null.
   * 
   */
  fulfillmentService?: FulfillmentService;
  
  /**
   * The weight of the line item in grams. The weight can only be specified if the line item is a custom
   * line item.
   * 
   * @deprecated Use `weight` instead.
   */
  grams?: number;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The image associated with the draft order line item.
   */
  image?: Image;
  
  /**
   * Whether the line item is a gift card.
   */
  isGiftCard: boolean;
  
  /**
   * The name of the product.
   */
  name: string;
  
  /**
   * The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
   * 
   */
  originalTotal: Money;
  
  /**
   * The total price (without discounts) of the line item,based on the original unit price of the variant x quantity.
   */
  originalTotalSet: MoneyBag;
  
  /**
   * The variant price without any discounts applied.
   */
  originalUnitPrice: Money;
  
  /**
   * The variant price without any discounts applied.
   */
  originalUnitPriceSet: MoneyBag;
  
  /**
   * The product corresponding to the line item’s product variant.
   * 
   */
  product?: Product;
  
  /**
   * The number of product variants that are requested in the draft order.
   */
  quantity: number;
  
  /**
   * Whether physical shipping is required for the variant.
   */
  requiresShipping: boolean;
  
  /**
   * The SKU number of the product variant.
   */
  sku?: string;
  
  /**
   * A list of tax line objects, each of which details the total taxes applicable to the order.
   * 
   */
  taxLines: Array<TaxLine>;
  
  /**
   * Whether the variant is taxable.
   */
  taxable: boolean;
  
  /**
   * The title of the product or variant. This field only applies to custom line items.
   */
  title: string;
  
  /**
   * The total value of the discount that's applied to the line item.
   * 
   */
  totalDiscount: Money;
  
  /**
   * The total value of the discount that's applied to the line item.
   */
  totalDiscountSet: MoneyBag;
  
  /**
   * The associated variant for the line item.
   * 
   */
  variant?: ProductVariant;
  
  /**
   * The name of the variant.
   */
  variantTitle?: string;
  
  /**
   * The name of the vendor who created the product variant.
   */
  vendor?: string;
  
  /**
   * The weight unit and value for a draft order line item.
   */
  weight?: Weight;
}

/**
 * Represents a typed custom attribute.
 */
export interface TypedAttribute {
  
  /**
   * Key or name of the attribute.
   */
  key: string;
  
  /**
   * Value of the attribute.
   */
  value: string;
}

/**
 * Represents a single tax applied to the associated line item.
 */
export interface TaxLine {
  
  /**
   * Whether the channel that submitted the tax line is liable for remitting. A value of null indicates unknown liability for this tax line.
   */
  channelLiable?: boolean;
  
  /**
   * The amount of tax, in shop currency, after discounts and before returns.
   * @deprecated Use `priceSet` instead.
   */
  price: Money;
  
  /**
   * The amount of tax, in shop and presentment currencies, after discounts and before returns.
   */
  priceSet: MoneyBag;
  
  /**
   * The proportion of the line item price that the tax represents as a decimal.
   */
  rate?: number;
  
  /**
   * The proportion of the line item price that the tax represents as a percentage.
   */
  ratePercentage?: number;
  
  /**
   * The name of the tax.
   */
  title: string;
}

/**
 * An order is a customer's request to purchase one or more products from a shop. You can retrieve and update orders using the `Order` object.
 * Learn more about
 * [editing an existing order with the GraphQL Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
 * 
 * Only the last 60 days' worth of orders from a store are accessible from the `Order` object by default. If you want to access older orders,
 * then you need to [request access to all orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
 * access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
 * [Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by this change and are automatically granted the scope.
 * 
 * **Caution:** Only use this data if it's required for your app's functionality. Shopify will restrict [access to scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a legitimate use for the associated data.
 * 
 */
export interface Order extends CommentEventSubject, HasEvents, HasLocalizationExtensions, HasMetafieldDefinitions, HasMetafields, LegacyInteroperability, Node {
  
  /**
   * A list of addtional fees applied to the order.
   */
  additionalFees: Array<AdditionalFee>;
  
  /**
   * A list of sales agreements associated with the order.
   */
  agreements: SalesAgreementConnection;
  
  /**
   * A list of messages that appear on the order page in the Shopify admin.
   * 
   */
  alerts: Array<ResourceAlert>;
  
  /**
   * The application that created the order.
   */
  app?: OrderApp;
  
  /**
   * The billing address of the customer.
   */
  billingAddress?: MailingAddress;
  
  /**
   * Whether the billing address matches the shipping address.
   */
  billingAddressMatchesShippingAddress: boolean;
  
  /**
   * Whether the order can be manually marked as paid.
   */
  canMarkAsPaid: boolean;
  
  /**
   * Whether a customer email exists for the order.
   */
  canNotifyCustomer: boolean;
  
  /**
   * The reason provided when the order was canceled.
   * Returns `null` if the order wasn't canceled.
   * 
   */
  cancelReason?: OrderCancelReason;
  
  /**
   * Cancellation details for the order.
   */
  cancellation?: OrderCancellation;
  
  /**
   * The date and time when the order was canceled.
   * Returns `null` if the order wasn't canceled.
   * 
   */
  cancelledAt?: DateTime;
  
  /**
   * Whether payment for the order can be captured.
   * 
   */
  capturable: boolean;
  
  /**
   * The total order-level discount amount, before returns, in shop currency.
   * @deprecated Use `cartDiscountAmountSet` instead.
   */
  cartDiscountAmount?: Money;
  
  /**
   * The total order-level discount amount, before returns, in shop and presentment currencies.
   */
  cartDiscountAmountSet?: MoneyBag;
  
  /**
   * The channel that created the order.
   * @deprecated Use `publication` instead.
   */
  channel?: Channel;
  
  /**
   * Details about the channel that created the order.
   */
  channelInformation?: ChannelInformation;
  
  /**
   * The IP address of the API client that created the order.
   */
  clientIp?: string;
  
  /**
   * Whether the order is closed.
   */
  closed: boolean;
  
  /**
   * The date and time when the order was closed.
   * Returns `null` if the order isn't closed.
   * 
   */
  closedAt?: DateTime;
  
  /**
   * A randomly generated alpha-numeric identifier for the order that may be shown to the customer
   * instead of the sequential order name. For example, "XPAV284CT", "R50KELTJP" or "35PKUN0UJ".
   * This value isn't guaranteed to be unique.
   * 
   */
  confirmationNumber?: string;
  
  /**
   * Whether inventory has been reserved for the order.
   */
  confirmed: boolean;
  
  /**
   * Date and time when the order was created in Shopify.
   */
  createdAt: DateTime;
  
  /**
   * The shop currency when the order was placed.
   */
  currencyCode: CurrencyCode;
  
  /**
   * The current order-level discount amount after all order updates, in shop and presentment currencies.
   * 
   */
  currentCartDiscountAmountSet: MoneyBag;
  
  /**
   * The sum of the quantities for all line items that contribute to the order's current subtotal price.
   */
  currentSubtotalLineItemsQuantity: number;
  
  /**
   * The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
   * If `taxesIncluded` is `true`, then the subtotal also includes tax.
   * 
   */
  currentSubtotalPriceSet: MoneyBag;
  
  /**
   * A list of all tax lines applied to line items on the order, after returns.
   * Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
   * 
   */
  currentTaxLines: Array<TaxLine>;
  
  /**
   * The total amount of additional fees after returns, in shop and presentment currencies.
   * Returns `null` if there are no additional fees for the order.
   * 
   */
  currentTotalAdditionalFeesSet?: MoneyBag;
  
  /**
   * The total amount discounted on the order after returns, in shop and presentment currencies.
   * This includes both order and line level discounts.
   * 
   */
  currentTotalDiscountsSet: MoneyBag;
  
  /**
   * The total amount of duties after returns, in shop and presentment currencies.
   * Returns `null` if duties aren't applicable.
   * 
   */
  currentTotalDutiesSet?: MoneyBag;
  
  /**
   * The total price of the order, after returns, in shop and presentment currencies.
   * This includes taxes and discounts.
   * 
   */
  currentTotalPriceSet: MoneyBag;
  
  /**
   * The sum of the prices of all tax lines applied to line items on the order, after returns, in shop and presentment currencies.
   * 
   */
  currentTotalTaxSet: MoneyBag;
  
  /**
   * The total weight of the order after returns, in grams.
   */
  currentTotalWeight: UnsignedInt64;
  
  /**
   * A list of the custom attributes added to the order.
   * 
   */
  customAttributes: Array<Attribute>;
  
  /**
   * The customer that placed the order.
   */
  customer?: Customer;
  
  /**
   * Whether the customer agreed to receive marketing materials.
   */
  customerAcceptsMarketing: boolean;
  
  /**
   * The customer's visits and interactions with the online store before placing the order.
   * 
   * @deprecated Use `customerJourneySummary` instead.
   */
  customerJourney?: CustomerJourney;
  
  /**
   * The customer's visits and interactions with the online store before placing the order.
   * 
   */
  customerJourneySummary?: CustomerJourneySummary;
  
  /**
   * A two-letter or three-letter language code, optionally followed by a region modifier.
   * 
   */
  customerLocale?: string;
  
  /**
   * A list of discounts that are applied to the order, not including order edits and refunds.
   */
  discountApplications: DiscountApplicationConnection;
  
  /**
   * The discount code used for the order.
   */
  discountCode?: string;
  
  /**
   * The discount codes used for the order.
   */
  discountCodes: Array<string>;
  
  /**
   * The primary address of the customer.
   * Returns `null` if neither the shipping address nor the billing address was provided.
   * 
   */
  displayAddress?: MailingAddress;
  
  /**
   * The financial status of the order that can be shown to the merchant.
   * This field doesn't capture all the details of an order's financial state. It should only be used for display summary purposes.
   * 
   */
  displayFinancialStatus?: OrderDisplayFinancialStatus;
  
  /**
   * The fulfillment status for the order that can be shown to the merchant.
   * This field does not capture all the details of an order's fulfillment state. It should only be used for display summary purposes.
   * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   * 
   */
  displayFulfillmentStatus: OrderDisplayFulfillmentStatus;
  
  /**
   * A list of the disputes associated with the order.
   */
  disputes: Array<OrderDisputeSummary>;
  
  /**
   * Whether the order has had any edits applied.
   */
  edited: boolean;
  
  /**
   * The email address associated with the customer.
   */
  email?: string;
  
  /**
   * Whether taxes on the order are estimated.
   * This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
   * 
   */
  estimatedTaxes: boolean;
  
  /**
   * A list of events associated with the order.
   */
  events: EventConnection;
  
  /**
   * A list of ExchangeV2s for the order.
   */
  exchangeV2s: ExchangeV2Connection;
  
  /**
   * Whether there are line items that can be fulfilled.
   * This field returns `false` when the order has no fulfillable line items.
   * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   * 
   */
  fulfillable: boolean;
  
  /**
   * A list of fulfillment orders for a specific order.
   * 
   * [FulfillmentOrder API access scopes](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder#api-access-scopes)
   * govern which fulfillments orders are returned.
   * An API client will only receive a subset of the fulfillment orders which belong to an order
   * if they don't have the necessary access scopes to view all of the fulfillment orders.
   * In the case that an API client does not have the access scopes necessary to view
   * any of the fulfillment orders that belong to an order, an empty array will be returned.
   * 
   */
  fulfillmentOrders: FulfillmentOrderConnection;
  
  /**
   * List of shipments for the order.
   */
  fulfillments: Array<Fulfillment>;
  
  /**
   * Whether the order has been paid in full.
   */
  fullyPaid: boolean;
  
  /**
   * Whether the merchant added a timeline comment to the order.
   */
  hasTimelineComment: boolean;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The URL of the first page of the online store that the customer visited before they submitted the order.
   * @deprecated Use `customerJourneySummary.lastVisit.landingPageHtml` instead
   */
  landingPageDisplayText?: string;
  
  /**
   * The first page of the online store that the customer visited before they submitted the order.
   * @deprecated Use `customerJourneySummary.lastVisit.landingPage` instead
   */
  landingPageUrl?: URL;
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
  
  /**
   * A list of the order's line items.
   */
  lineItems: LineItemConnection;
  
  /**
   * A list of the order's line items.
   * @deprecated Use `lineItems` instead.
   */
  lineItemsMutable: LineItemMutableConnection;
  
  /**
   * List of localization extensions for the resource.
   */
  localizationExtensions: LocalizationExtensionConnection;
  
  /**
   * The fulfillment location that was assigned when the order was created.
   * Orders can have multiple fulfillment orders. These fulfillment orders can each be assigned to a different location which is responsible for fulfilling a subset of the items in an order. The `Order.location` field will only point to one of these locations.
   * Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder)
   * object for up-to-date fulfillment location information.
   * 
   * @deprecated Use `physicalLocation` instead.
   */
  location?: string;
  
  /**
   * Whether the order can be edited by the merchant. For example, canceled orders can’t be edited.
   */
  merchantEditable: boolean;
  
  /**
   * A list of reasons why the order can't be edited. For example, "Canceled orders can't be edited".
   */
  merchantEditableErrors: Array<string>;
  
  /**
   * The application acting as the Merchant of Record for the order.
   */
  merchantOfRecordApp?: OrderApp;
  
  /**
   * Returns a metafield by namespace and key that belongs to the resource.
   */
  metafield?: Metafield;
  
  /**
   * List of metafield definitions.
   */
  metafieldDefinitions: MetafieldDefinitionConnection;
  
  /**
   * List of metafields that belong to the resource.
   */
  metafields: MetafieldConnection;
  
  /**
   * The unique identifier for the order that appears on the order page in the Shopify admin and the <b>Order status</b> page.
   * For example, "#1001", "EN1001", or "1001-A".
   * This value isn't unique across multiple stores.
   * 
   */
  name: string;
  
  /**
   * The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
   * 
   * @deprecated Use `netPaymentSet` instead.
   */
  netPayment: Money;
  
  /**
   * The net payment for the order, based on the total amount received minus the total amount refunded, in shop and presentment currencies.
   */
  netPaymentSet: MoneyBag;
  
  /**
   * A list of line items that can't be fulfilled.
   * For example, tips and fully refunded line items can't be fulfilled.
   * For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
   * 
   */
  nonFulfillableLineItems: LineItemConnection;
  
  /**
   * The contents of the note associated with the order.
   * 
   */
  note?: string;
  
  /**
   * The total amount of additional fees after returns, in shop and presentment currencies.
   * Returns `null` if there are no additional fees for the order.
   * 
   */
  originalTotalAdditionalFeesSet?: MoneyBag;
  
  /**
   * The total amount of duties before returns, in shop and presentment currencies.
   * Returns `null` if duties aren't applicable.
   * 
   */
  originalTotalDutiesSet?: MoneyBag;
  
  /**
   * The total price of the order at the time of order creation, in shop and presentment currencies.
   */
  originalTotalPriceSet: MoneyBag;
  
  /**
   * The payment collection details for the order.
   */
  paymentCollectionDetails: OrderPaymentCollectionDetails;
  
  /**
   * A list of the names of all payment gateways used for the order.
   * For example, "Shopify Payments" and "Cash on Delivery (COD)".
   * 
   */
  paymentGatewayNames: Array<string>;
  
  /**
   * The payment terms associated with the order.
   */
  paymentTerms?: PaymentTerms;
  
  /**
   * The phone number associated with the customer.
   */
  phone?: string;
  
  /**
   * The fulfillment location that was assigned when the order was created.
   * Orders can have multiple fulfillment orders. These fulfillment orders can each be assigned to a different location which is responsible for fulfilling a subset of the items in an order. The `Order.physicalLocation` field will only point to one of these locations.
   * Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder)
   * object for up to date fulfillment location information.
   * 
   * @deprecated Use `fulfillmentOrders` to get the fulfillment location for the order
   */
  physicalLocation?: Location;
  
  /**
   * The PO number associated with the order.
   */
  poNumber?: string;
  
  /**
   * The payment `CurrencyCode` of the customer for the order.
   */
  presentmentCurrencyCode: CurrencyCode;
  
  /**
   * Returns a private metafield by namespace and key that belongs to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafield?: PrivateMetafield;
  
  /**
   * List of private metafields that belong to the resource.
   * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
   * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
   * 
   */
  privateMetafields: PrivateMetafieldConnection;
  
  /**
   * The date and time when the order was processed.
   * This date and time might not match the date and time when the order was created.
   * 
   */
  processedAt: DateTime;
  
  /**
   * The publication that the order was created from.
   */
  publication?: Publication;
  
  /**
   * The purchasing entity for the order.
   */
  purchasingEntity?: PurchasingEntity;
  
  /**
   * The marketing referral code from the link that the customer clicked to visit the store.
   * Supports the following URL attributes: "ref", "source", or "r".
   * For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
   * 
   * @deprecated Use `customerJourneySummary.lastVisit.referralCode` instead
   */
  referralCode?: string;
  
  /**
   * A web domain or short description of the source that sent the customer to your online store. For example, "shopify.com" or "email".
   * 
   * @deprecated Use `customerJourneySummary.lastVisit.referralInfoHtml` instead
   */
  referrerDisplayText?: string;
  
  /**
   * The URL of the webpage where the customer clicked a link that sent them to your online store.
   * 
   * @deprecated Use `customerJourneySummary.lastVisit.referrerUrl` instead
   */
  referrerUrl?: URL;
  
  /**
   * The difference between the suggested and actual refund amount of all refunds that have been applied to the order. A positive value indicates a difference in the merchant's favor, and a negative value indicates a difference in the customer's favor.
   */
  refundDiscrepancySet: MoneyBag;
  
  /**
   * Whether the order can be refunded.
   * 
   */
  refundable: boolean;
  
  /**
   * A list of refunds that have been applied to the order.
   */
  refunds: Array<Refund>;
  
  /**
   * The URL of the source that the order originated from, if found in the domain registry.
   */
  registeredSourceUrl?: URL;
  
  /**
   * Whether the order has shipping lines or at least one line item on the order that requires shipping.
   * 
   */
  requiresShipping: boolean;
  
  /**
   * Whether any line item on the order can be restocked.
   * 
   */
  restockable: boolean;
  
  /**
   * The order's aggregated return status for display purposes.
   */
  returnStatus: OrderReturnStatus;
  
  /**
   * A list of returns for the order.
   */
  returns: ReturnConnection;
  
  /**
   * The fraud risk level of the order.
   * @deprecated This field is deprecated in version 2024-04. Please use OrderRiskAssessment.riskLevel
   */
  riskLevel: OrderRiskLevel;
  
  /**
   * A list of risks associated with the order.
   * @deprecated This field is deprecated in version 2024-04. Please use OrderRiskAssessment
   */
  risks: Array<OrderRisk>;
  
  /**
   * The mailing address of the customer.
   */
  shippingAddress?: MailingAddress;
  
  /**
   * A summary of all shipping costs on the order.
   */
  shippingLine?: ShippingLine;
  
  /**
   * A list of the order's shipping lines.
   */
  shippingLines: ShippingLineConnection;
  
  /**
   * The Shopify Protect details for the order. If Shopify Protect is disabled for the shop, then this will be null.
   */
  shopifyProtect?: ShopifyProtectOrderSummary;
  
  /**
   * A unique POS or third party order identifier.
   * For example, "1234-12-1000" or "111-98567-54". The `receipt_number` field is derived from this value for POS orders.
   * 
   */
  sourceIdentifier?: string;
  
  /**
   * The sum of the quantities for all line items that contribute to the order's subtotal price.
   */
  subtotalLineItemsQuantity: number;
  
  /**
   * The sum of the prices for all line items after discounts and before returns, in shop currency.
   * If `taxesIncluded` is `true`, then the subtotal also includes tax.
   * 
   * @deprecated Use `subtotalPriceSet` instead.
   */
  subtotalPrice?: Money;
  
  /**
   * The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
   * If `taxesIncluded` is `true`, then the subtotal also includes tax.
   * 
   */
  subtotalPriceSet?: MoneyBag;
  
  /**
   * A suggested refund for the order.
   */
  suggestedRefund?: SuggestedRefund;
  
  /**
   * A comma separated list of tags associated with the order. Updating `tags` overwrites
   * any existing tags that were previously added to the order. To add new tags without overwriting
   * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
   * mutation.
   * 
   */
  tags: Array<string>;
  
  /**
   * Whether taxes are exempt on the order.
   */
  taxExempt: boolean;
  
  /**
   * A list of all tax lines applied to line items on the order, before returns.
   * Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
   * 
   */
  taxLines: Array<TaxLine>;
  
  /**
   * Whether taxes are included in the subtotal price of the order.
   */
  taxesIncluded: boolean;
  
  /**
   * Whether the order is a test.
   * Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
   * A test order can't be converted into a real order and vice versa.
   * 
   */
  test: boolean;
  
  /**
   * The authorized amount that's uncaptured or undercaptured, in shop currency.
   * This amount isn't adjusted for returns.
   * 
   * @deprecated Use `totalCapturableSet` instead.
   */
  totalCapturable: Money;
  
  /**
   * The authorized amount that's uncaptured or undercaptured, in shop and presentment currencies.
   * This amount isn't adjusted for returns.
   * 
   */
  totalCapturableSet: MoneyBag;
  
  /**
   * The total amount discounted on the order before returns, in shop currency.
   * This includes both order and line level discounts.
   * 
   * @deprecated Use `totalDiscountsSet` instead.
   */
  totalDiscounts?: Money;
  
  /**
   * The total amount discounted on the order before returns, in shop and presentment currencies.
   * This includes both order and line level discounts.
   * 
   */
  totalDiscountsSet?: MoneyBag;
  
  /**
   * The total amount not yet transacted for the order, in shop and presentment currencies.
   * A positive value indicates a difference in the merchant's favor (payment from customer to merchant) and a negative value indicates a difference in the customer's favor (refund from merchant to customer).
   * 
   */
  totalOutstandingSet: MoneyBag;
  
  /**
   * The total price of the order, before returns, in shop currency.
   * This includes taxes and discounts.
   * 
   * @deprecated Use `totalPriceSet` instead.
   */
  totalPrice: Money;
  
  /**
   * The total price of the order, before returns, in shop and presentment currencies.
   * This includes taxes and discounts.
   * 
   */
  totalPriceSet: MoneyBag;
  
  /**
   * The total amount received from the customer before returns, in shop currency.
   * @deprecated Use `totalReceivedSet` instead.
   */
  totalReceived: Money;
  
  /**
   * The total amount received from the customer before returns, in shop and presentment currencies.
   */
  totalReceivedSet: MoneyBag;
  
  /**
   * The total amount that was refunded, in shop currency.
   * @deprecated Use `totalRefundedSet` instead.
   */
  totalRefunded: Money;
  
  /**
   * The total amount that was refunded, in shop and presentment currencies.
   */
  totalRefundedSet: MoneyBag;
  
  /**
   * The total amount of shipping that was refunded, in shop and presentment currencies.
   */
  totalRefundedShippingSet: MoneyBag;
  
  /**
   * The total shipping amount before discounts and returns, in shop currency.
   * @deprecated Use `totalShippingPriceSet` instead.
   */
  totalShippingPrice: Money;
  
  /**
   * The total shipping amount before discounts and returns, in shop and presentment currencies.
   */
  totalShippingPriceSet: MoneyBag;
  
  /**
   * The total tax amount before returns, in shop currency.
   * @deprecated Use `totalTaxSet` instead.
   */
  totalTax?: Money;
  
  /**
   * The total tax amount before returns, in shop and presentment currencies.
   */
  totalTaxSet?: MoneyBag;
  
  /**
   * The sum of all tip amounts for the order, in shop currency.
   * @deprecated Use `totalTipReceivedSet` instead.
   */
  totalTipReceived: MoneyV2;
  
  /**
   * The sum of all tip amounts for the order, in shop and presentment currencies.
   */
  totalTipReceivedSet: MoneyBag;
  
  /**
   * The total weight of the order before returns, in grams.
   */
  totalWeight?: UnsignedInt64;
  
  /**
   * A list of transactions associated with the order.
   */
  transactions: Array<OrderTransaction>;
  
  /**
   * Whether no payments have been made for the order.
   * 
   */
  unpaid: boolean;
  
  /**
   * The date and time when the order was modified last.
   */
  updatedAt: DateTime;
}

/**
 * The additional fees that have been applied to the order.
 */
export interface AdditionalFee extends Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The name of the additional fee.
   */
  name: string;
  
  /**
   * The price of the additional fee.
   */
  price: MoneyBag;
  
  /**
   * A list of taxes charged on the additional fee.
   */
  taxLines: Array<TaxLine>;
}

/**
 * An auto-generated type for paginating through multiple SalesAgreements.
 * 
 */
export interface SalesAgreementConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<SalesAgreementEdge>;
  
  /**
   * A list of the nodes contained in SalesAgreementEdge.
   */
  nodes: Array<SalesAgreement>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one SalesAgreement and a cursor during pagination.
 * 
 */
export interface SalesAgreementEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of SalesAgreementEdge.
   */
  node: SalesAgreement;
}

/**
 * A contract between a merchant and a customer to do business. Shopify creates a sales agreement whenever an order is placed, edited, or refunded. A sales agreement has one or more sales records, which provide itemized details about the initial agreement or subsequent changes made to the order. For example, when a customer places an order, Shopify creates the order, generates a sales agreement, and records a sale for each line item purchased in the order. A sale record is specific to a type of order line. Order lines can represent different things such as a purchased product, a tip added by a customer, shipping costs collected at checkout, and more.
 */
export interface SalesAgreement {
  
  /**
   * The application that created the agreement.
   */
  app?: App;
  
  /**
   * The date and time at which the agreement occured.
   */
  happenedAt: DateTime;
  
  /**
   * The unique ID for the agreement.
   */
  id: string;
  
  /**
   * The reason the agremeent was created.
   */
  reason: OrderActionType;
  
  /**
   * The sales associated with the agreement.
   */
  sales: SaleConnection;
  
  /**
   * The staff member associated with the agreement.
   */
  user?: StaffMember;
}

/** Use this to resolve interface type SalesAgreement */
export type PossibleSalesAgreementTypeNames =
'OrderAgreement' |
'OrderEditAgreement' |
'RefundAgreement';

export interface SalesAgreementNameMap {
  SalesAgreement: SalesAgreement;
  OrderAgreement: OrderAgreement;
  OrderEditAgreement: OrderEditAgreement;
  RefundAgreement: RefundAgreement;
}

/**
 * The possible order action types for a
 * [sales agreement](https://shopify.dev/api/admin-graphql/latest/interfaces/salesagreement).
 * 
 */
export const enum OrderActionType {
  
  /**
   * An order with a purchase or charge.
   */
  ORDER = 'ORDER',
  
  /**
   * An edit to the order.
   */
  ORDER_EDIT = 'ORDER_EDIT',
  
  /**
   * A refund on the order.
   */
  REFUND = 'REFUND',
  
  /**
   * An unknown agreement action. Represents new actions that may be added in future versions.
   */
  UNKNOWN = 'UNKNOWN'
}

/**
 * An auto-generated type for paginating through multiple Sales.
 * 
 */
export interface SaleConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<SaleEdge>;
  
  /**
   * A list of the nodes contained in SaleEdge.
   */
  nodes: Array<Sale>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Sale and a cursor during pagination.
 * 
 */
export interface SaleEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of SaleEdge.
   */
  node: Sale;
}

/**
 * An individual sale record associated with a sales agreement. Every money value in an order's sales data is represented in the currency's smallest unit. When amounts are divided across multiple line items, such as taxes or order discounts, the amounts might not divide evenly across all of the line items on the order. To address this, the remaining currency units that couldn't be divided evenly are allocated one at a time, starting with the first line item, until they are all accounted for. In aggregate, the values sum up correctly. In isolation, one line item might have a different tax or discount amount than another line item of the same price, before taxes and discounts. This is because the amount could not be divided evenly across the items. The allocation of currency units across line items is immutable. After they are allocated, currency units are never reallocated or redistributed among the line items.
 */
export interface Sale {
  
  /**
   * The type of order action that the sale represents.
   */
  actionType: SaleActionType;
  
  /**
   * The unique ID for the sale.
   */
  id: string;
  
  /**
   * The line type assocated with the sale.
   */
  lineType: SaleLineType;
  
  /**
   * The number of units either ordered or intended to be returned.
   */
  quantity?: number;
  
  /**
   * All individual taxes associated with the sale.
   */
  taxes: Array<SaleTax>;
  
  /**
   * The total sale amount after taxes and discounts.
   */
  totalAmount: MoneyBag;
  
  /**
   * The total discounts allocated to the sale after taxes.
   */
  totalDiscountAmountAfterTaxes: MoneyBag;
  
  /**
   * The total discounts allocated to the sale before taxes.
   */
  totalDiscountAmountBeforeTaxes: MoneyBag;
  
  /**
   * The total amount of taxes for the sale.
   */
  totalTaxAmount: MoneyBag;
}

/** Use this to resolve interface type Sale */
export type PossibleSaleTypeNames =
'AdditionalFeeSale' |
'AdjustmentSale' |
'DutySale' |
'GiftCardSale' |
'ProductSale' |
'ShippingLineSale' |
'TipSale' |
'UnknownSale';

export interface SaleNameMap {
  Sale: Sale;
  AdditionalFeeSale: AdditionalFeeSale;
  AdjustmentSale: AdjustmentSale;
  DutySale: DutySale;
  GiftCardSale: GiftCardSale;
  ProductSale: ProductSale;
  ShippingLineSale: ShippingLineSale;
  TipSale: TipSale;
  UnknownSale: UnknownSale;
}

/**
 * The possible order action types for a sale.
 */
export const enum SaleActionType {
  
  /**
   * A purchase or charge.
   */
  ORDER = 'ORDER',
  
  /**
   * A removal or return.
   */
  RETURN = 'RETURN',
  
  /**
   * A change to the price, taxes, or discounts for a prior purchase.
   */
  UPDATE = 'UPDATE',
  
  /**
   * An unknown order action. Represents new actions that may be added in future versions.
   */
  UNKNOWN = 'UNKNOWN'
}

/**
 * The possible line types for a sale record. One of the possible order line types for a sale is an adjustment. Sales adjustments occur when a refund is issued for a line item that is either more or less than the total value of the line item. Examples are restocking fees and goodwill payments. When this happens, Shopify produces a sales agreement with sale records for each line item that is returned or refunded and an additional sale record for the adjustment (for example, a restocking fee). The sales records for the returned or refunded items represent the reversal of the original line item sale value. The additional adjustment sale record represents the difference between the original total value of all line items that were refunded, and the actual amount refunded.
 */
export const enum SaleLineType {
  
  /**
   * A product purchased, returned or exchanged.
   */
  PRODUCT = 'PRODUCT',
  
  /**
   * A tip added by the customer.
   */
  TIP = 'TIP',
  
  /**
   * A gift card.
   */
  GIFT_CARD = 'GIFT_CARD',
  
  /**
   * A shipping cost.
   */
  SHIPPING = 'SHIPPING',
  
  /**
   * A duty charge.
   */
  DUTY = 'DUTY',
  
  /**
   * An additional fee.
   */
  ADDITIONAL_FEE = 'ADDITIONAL_FEE',
  
  /**
   * An unknown sale line. Represents new types that may be added in future versions.
   */
  UNKNOWN = 'UNKNOWN',
  
  /**
   * A sale adjustment.
   */
  ADJUSTMENT = 'ADJUSTMENT'
}

/**
 * The tax allocated to a sale from a single tax line.
 */
export interface SaleTax {
  
  /**
   * The portion of the total tax amount on the related sale that comes from the associated tax line.
   */
  amount: MoneyBag;
  
  /**
   * The unique ID for the sale tax.
   */
  id: string;
  
  /**
   * The tax line associated with the sale.
   */
  taxLine: TaxLine;
}

/**
 * An alert message that appears in the Shopify admin about a problem with a store resource, with 1 or more actions to take. For example, you could use an alert to indicate that you're not charging taxes on some product variants.
 * They can optionally have a specific icon and be dismissed by merchants.
 * 
 */
export interface ResourceAlert {
  
  /**
   * Buttons in the alert that link to related information.
   * For example, _Edit variants_.
   * 
   */
  actions: Array<ResourceAlertAction>;
  
  /**
   * The secondary text in the alert that includes further information or instructions about how to solve a problem.
   * 
   */
  content: HTML;
  
  /**
   * Unique identifier that appears when an alert is manually closed by the merchant.
   * Most alerts can't be manually closed.
   * 
   */
  dismissibleHandle?: string;
  
  /**
   * An icon that's optionally displayed with the alert.
   */
  icon?: ResourceAlertIcon;
  
  /**
   * Indication of how important the alert is.
   */
  severity: ResourceAlertSeverity;
  
  /**
   * The primary text in the alert that includes information or describes the problem.
   */
  title: string;
}

/**
 * An action associated to a resource alert, such as editing variants.
 */
export interface ResourceAlertAction {
  
  /**
   * Whether the action appears as a button or as a link.
   */
  primary: boolean;
  
  /**
   * Resource for the action to show.
   */
  show?: string;
  
  /**
   * The text for the button in the alert. For example, _Edit variants_.
   */
  title: string;
  
  /**
   * The target URL that the button links to.
   */
  url: URL;
}

/**
 * The available icons for resource alerts.
 */
export const enum ResourceAlertIcon {
  
  /**
   * A checkmark inside a circle.
   */
  CHECKMARK_CIRCLE = 'CHECKMARK_CIRCLE',
  
  /**
   * A lowercase `i` inside a circle.
   */
  INFORMATION_CIRCLE = 'INFORMATION_CIRCLE'
}

/**
 * The possible severity levels for a resource alert.
 */
export const enum ResourceAlertSeverity {
  
  /**
   * Indicates a neutral alert. For example, an accepted dispute.
   */
  DEFAULT = 'DEFAULT',
  
  /**
   * Indicates an informative alert. For example, an escalated dispute.
   */
  INFO = 'INFO',
  
  /**
   * Indicates an informative alert. For example, a new dispute.
   */
  WARNING = 'WARNING',
  
  /**
   * Indicates a success alert. For example, a winning a dispute.
   */
  SUCCESS = 'SUCCESS',
  
  /**
   * Indicates a critical alert. For example, a blocked app.
   */
  CRITICAL = 'CRITICAL',
  
  /**
   * 
   * @deprecated `ERROR` severity is being deprecated in favour of `WARNING` or `CRITICAL` instead.
   */
  ERROR = 'ERROR'
}

/**
 * The [application](https://shopify.dev/apps) that created the order.
 * 
 */
export interface OrderApp {
  
  /**
   * The application icon.
   */
  icon: Image;
  
  /**
   * The application ID.
   */
  id: string;
  
  /**
   * The name of the application.
   */
  name: string;
}

/**
 * Represents the reason for the order's cancellation.
 */
export const enum OrderCancelReason {
  
  /**
   * The customer wanted to cancel the order.
   */
  CUSTOMER = 'CUSTOMER',
  
  /**
   * Payment was declined.
   */
  DECLINED = 'DECLINED',
  
  /**
   * The order was fraudulent.
   */
  FRAUD = 'FRAUD',
  
  /**
   * There was insufficient inventory.
   */
  INVENTORY = 'INVENTORY',
  
  /**
   * Staff made an error.
   */
  STAFF = 'STAFF',
  
  /**
   * The order was canceled for an unlisted reason.
   */
  OTHER = 'OTHER'
}

/**
 * Details about the order cancellation.
 */
export interface OrderCancellation {
  
  /**
   * Staff provided note for the order cancellation.
   */
  staffNote?: string;
}

/**
 * Contains the information for a given sales channel.
 * 
 */
export interface ChannelInformation extends Node {
  
  /**
   * The app associated with the channel.
   */
  app: App;
  
  /**
   * The channel definition associated with the channel.
   */
  channelDefinition?: ChannelDefinition;
  
  /**
   * The unique ID for the channel.
   */
  channelId: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
}

/**
 * A channel definition represents channels surfaces on the platform.
 * A channel definition can be a platform or a subsegment of it such as Facebook Home, Instagram Live, Instagram Shops, or WhatsApp chat.
 * 
 */
export interface ChannelDefinition extends Node {
  
  /**
   * Name of the channel that this sub channel belongs to.
   */
  channelName: string;
  
  /**
   * Unique string used as a public identifier for the channel definition.
   */
  handle: string;
  
  /**
   * The unique ID for the channel definition.
   */
  id: string;
  
  /**
   * Whether this channel definition represents a marketplace.
   */
  isMarketplace: boolean;
  
  /**
   * Name of the sub channel (e.g. Online Store, Instagram Shopping, TikTok Live).
   */
  subChannelName: string;
  
  /**
   * Icon displayed when showing the channel in admin.
   */
  svgIcon?: string;
}

/**
 * Represents a customer's visiting activities on a shop's online store.
 */
export interface CustomerJourney {
  
  /**
   * The position of the current order within the customer's order history.
   */
  customerOrderIndex: number;
  
  /**
   * The amount of days between first session and order creation date. First session represents first session since the last order, or first session within the 30 day attribution window, if more than 30 days has passed since the last order.
   */
  daysToConversion: number;
  
  /**
   * The customer's first session going into the shop.
   */
  firstVisit: CustomerVisit;
  
  /**
   * The last session before an order is made.
   */
  lastVisit?: CustomerVisit;
  
  /**
   * Events preceding a customer order, such as shop sessions.
   */
  moments: Array<CustomerMoment>;
}

/**
 * Represents a customer's session visiting a shop's online store, including information about the marketing activity attributed to starting the session.
 */
export interface CustomerVisit extends CustomerMoment, Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * URL of the first page the customer landed on for the session.
   */
  landingPage?: URL;
  
  /**
   * Landing page information with URL linked in HTML. For example, the first page the customer visited was store.myshopify.com/products/1.
   */
  landingPageHtml?: HTML;
  
  /**
   * Represent actions taken by an app, on behalf of a merchant,
   * to market Shopify resources such as products, collections, and discounts.
   * 
   */
  marketingEvent?: MarketingEvent;
  
  /**
   * The date and time when the customer's session occurred.
   */
  occurredAt: DateTime;
  
  /**
   * Marketing referral code from the link that the customer clicked to visit the store.
   * Supports the following URL attributes: _ref_, _source_, or _r_.
   * For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
   * 
   */
  referralCode?: string;
  
  /**
   * Referral information with URLs linked in HTML.
   */
  referralInfoHtml: FormattedString;
  
  /**
   * Webpage where the customer clicked a link that sent them to the online store.
   * For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
   * 
   */
  referrerUrl?: URL;
  
  /**
   * Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
   * a website domain, QR code, or unknown.
   * 
   */
  source: string;
  
  /**
   * Describes the source explicitly for first or last session.
   */
  sourceDescription?: string;
  
  /**
   * Type of marketing tactic.
   */
  sourceType?: MarketingTactic;
  
  /**
   * A set of UTM parameters gathered from the URL parameters of the referrer.
   */
  utmParameters?: UTMParameters;
}

/**
 * Represents a session preceding an order, often used for building a timeline of events leading to an order.
 */
export interface CustomerMoment {
  
  /**
   * The date and time when the customer's session occurred.
   */
  occurredAt: DateTime;
}

/** Use this to resolve interface type CustomerMoment */
export type PossibleCustomerMomentTypeNames = 'CustomerVisit';

export interface CustomerMomentNameMap {
  CustomerMoment: CustomerMoment;
  CustomerVisit: CustomerVisit;
}

/**
 * Represents actions that market a merchant's store or products.
 */
export interface MarketingEvent extends LegacyInteroperability, Node {
  
  /**
   * The app that the marketing event is attributed to.
   */
  app: App;
  
  /**
   * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
   * @deprecated Use `marketingChannelType` instead.
   */
  channel?: MarketingChannel;
  
  /**
   * The unique string identifier of the channel to which this activity belongs. For the correct handle for your channel, contact your partner manager.
   */
  channelHandle?: string;
  
  /**
   * A human-readable description of the marketing event.
   */
  description?: string;
  
  /**
   * The date and time when the marketing event ended.
   */
  endedAt?: DateTime;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
  
  /**
   * The URL where the marketing event can be managed.
   */
  manageUrl?: URL;
  
  /**
   * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
   */
  marketingChannelType?: MarketingChannel;
  
  /**
   * The URL where the marketing event can be previewed.
   */
  previewUrl?: URL;
  
  /**
   * An optional ID that helps Shopify validate engagement data.
   */
  remoteId?: string;
  
  /**
   * The date and time when the marketing event is scheduled to end.
   */
  scheduledToEndAt?: DateTime;
  
  /**
   * Where the `MarketingEvent` occurred and what kind of content was used.
   * Because `utmSource` and `utmMedium` are often used interchangeably, this is
   * based on a combination of `marketingChannel`, `referringDomain`, and `type` to
   * provide a consistent representation for any given piece of marketing
   * regardless of the app that created it.
   * 
   */
  sourceAndMedium: string;
  
  /**
   * The date and time when the marketing event started.
   */
  startedAt: DateTime;
  
  /**
   * The display text for the marketing event type.
   * @deprecated Use `sourceAndMedium` instead.
   */
  targetTypeDisplayText: string;
  
  /**
   * The marketing event type.
   */
  type: MarketingTactic;
  
  /**
   * The name of the marketing campaign.
   */
  utmCampaign?: string;
  
  /**
   * The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
   */
  utmMedium?: string;
  
  /**
   * The referrer of the marketing event. Example values: `google`, `newsletter`.
   */
  utmSource?: string;
}

/**
 * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
 */
export const enum MarketingChannel {
  
  /**
   * Paid search.
   */
  SEARCH = 'SEARCH',
  
  /**
   * Displayed ads.
   */
  DISPLAY = 'DISPLAY',
  
  /**
   * Social media.
   */
  SOCIAL = 'SOCIAL',
  
  /**
   * Email.
   */
  EMAIL = 'EMAIL',
  
  /**
   * Referral links.
   */
  REFERRAL = 'REFERRAL'
}

/**
 * The available types of marketing event.
 */
export const enum MarketingTactic {
  
  /**
   * An abandoned cart recovery email.
   */
  ABANDONED_CART = 'ABANDONED_CART',
  
  /**
   * An ad, such as a Facebook ad.
   */
  AD = 'AD',
  
  /**
   * An affiliate link.
   */
  AFFILIATE = 'AFFILIATE',
  
  /**
   * A link.
   */
  LINK = 'LINK',
  
  /**
   * A loyalty program.
   */
  LOYALTY = 'LOYALTY',
  
  /**
   * A messaging app, such as Facebook Messenger.
   */
  MESSAGE = 'MESSAGE',
  
  /**
   * A newsletter.
   */
  NEWSLETTER = 'NEWSLETTER',
  
  /**
   * A notification in the Shopify admin.
   */
  NOTIFICATION = 'NOTIFICATION',
  
  /**
   * A blog post.
   */
  POST = 'POST',
  
  /**
   * A retargeting ad.
   */
  RETARGETING = 'RETARGETING',
  
  /**
   * A transactional email.
   */
  TRANSACTIONAL = 'TRANSACTIONAL',
  
  /**
   * Search engine optimization.
   */
  SEO = 'SEO',
  
  /**
   * A direct visit to the online store.
   */
  DIRECT = 'DIRECT',
  
  /**
   * A popup on the online store.
   */
  STOREFRONT_APP = 'STOREFRONT_APP',
  
  /**
   * A display ad.
   * @deprecated `DISPLAY` is deprecated. Use `AD` instead.
   */
  DISPLAY = 'DISPLAY',
  
  /**
   * Paid search.
   * @deprecated `SEARCH` is deprecated. Use `AD` instead.
   */
  SEARCH = 'SEARCH',
  
  /**
   * A follow-up email.
   * @deprecated 'FOLLOW_UP' is deprecated. Use 'TRANSACTIONAL' instead.
   */
  FOLLOW_UP = 'FOLLOW_UP',
  
  /**
   * A promotional receipt.
   * @deprecated 'RECEIPT' is deprecated. Use 'TRANSACTIONAL' instead.
   */
  RECEIPT = 'RECEIPT'
}

/**
 * Represents a set of UTM parameters.
 */
export interface UTMParameters {
  
  /**
   * The name of a marketing campaign.
   */
  campaign?: string;
  
  /**
   * Identifies specific content in a marketing campaign. Used to differentiate between similar content or links in a marketing campaign to determine which is the most effective.
   */
  content?: string;
  
  /**
   * The medium of a marketing campaign, such as a banner or email newsletter.
   */
  medium?: string;
  
  /**
   * The source of traffic to the merchant's store, such as Google or an email newsletter.
   */
  source?: string;
  
  /**
   * Paid search terms used by a marketing campaign.
   */
  term?: string;
}

/**
 * Represents a customer's visiting activities on a shop's online store.
 */
export interface CustomerJourneySummary {
  
  /**
   * The position of the current order within the customer's order history. Test orders aren't included.
   */
  customerOrderIndex?: number;
  
  /**
   * The number of days between the first session and the order creation date. The first session represents the first session since the last order, or the first session within the 30 day attribution window, if more than 30 days have passed since the last order.
   */
  daysToConversion?: number;
  
  /**
   * The customer's first session going into the shop.
   */
  firstVisit?: CustomerVisit;
  
  /**
   * The last session before an order is made.
   */
  lastVisit?: CustomerVisit;
  
  /**
   * The events preceding a customer's order, such as shop sessions.
   */
  moments?: CustomerMomentConnection;
  
  /**
   * The total number of customer moments associated with this order. Returns null if the order is still in the process of being attributed.
   */
  momentsCount?: number;
  
  /**
   * Whether the attributed sessions for the order have been created yet.
   */
  ready: boolean;
}

/**
 * An auto-generated type for paginating through multiple CustomerMoments.
 * 
 */
export interface CustomerMomentConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<CustomerMomentEdge>;
  
  /**
   * A list of the nodes contained in CustomerMomentEdge.
   */
  nodes: Array<CustomerMoment>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one CustomerMoment and a cursor during pagination.
 * 
 */
export interface CustomerMomentEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of CustomerMomentEdge.
   */
  node: CustomerMoment;
}

/**
 * An auto-generated type for paginating through multiple DiscountApplications.
 * 
 */
export interface DiscountApplicationConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<DiscountApplicationEdge>;
  
  /**
   * A list of the nodes contained in DiscountApplicationEdge.
   */
  nodes: Array<DiscountApplication>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one DiscountApplication and a cursor during pagination.
 * 
 */
export interface DiscountApplicationEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of DiscountApplicationEdge.
   */
  node: DiscountApplication;
}

/**
 * Discount applications capture the intentions of a discount source at
 * the time of application on an order's line items or shipping lines.
 * 
 * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
 * 
 */
export interface DiscountApplication {
  
  /**
   * The method by which the discount's value is applied to its entitled items.
   */
  allocationMethod: DiscountApplicationAllocationMethod;
  
  /**
   * An ordered index that can be used to identify the discount application and indicate the precedence
   * of the discount application for calculations.
   * 
   */
  index: number;
  
  /**
   * How the discount amount is distributed on the discounted lines.
   */
  targetSelection: DiscountApplicationTargetSelection;
  
  /**
   * Whether the discount is applied on line items or shipping lines.
   */
  targetType: DiscountApplicationTargetType;
  
  /**
   * The value of the discount application.
   */
  value: PricingValue;
}

/** Use this to resolve interface type DiscountApplication */
export type PossibleDiscountApplicationTypeNames =
'AutomaticDiscountApplication' |
'DiscountCodeApplication' |
'ManualDiscountApplication' |
'ScriptDiscountApplication';

export interface DiscountApplicationNameMap {
  DiscountApplication: DiscountApplication;
  AutomaticDiscountApplication: AutomaticDiscountApplication;
  DiscountCodeApplication: DiscountCodeApplication;
  ManualDiscountApplication: ManualDiscountApplication;
  ScriptDiscountApplication: ScriptDiscountApplication;
}

/**
 * The method by which the discount's value is allocated onto its entitled lines.
 */
export const enum DiscountApplicationAllocationMethod {
  
  /**
   * The value is spread across all entitled lines.
   */
  ACROSS = 'ACROSS',
  
  /**
   * The value is applied onto every entitled line.
   */
  EACH = 'EACH',
  
  /**
   * The value is specifically applied onto a particular line.
   * @deprecated Use ACROSS instead.
   */
  ONE = 'ONE'
}

/**
 * The lines on the order to which the discount is applied, of the type defined by
 * the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of
 * `LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
 * The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.
 * 
 */
export const enum DiscountApplicationTargetSelection {
  
  /**
   * The discount is allocated onto all the lines.
   */
  ALL = 'ALL',
  
  /**
   * The discount is allocated onto only the lines that it's entitled for.
   */
  ENTITLED = 'ENTITLED',
  
  /**
   * The discount is allocated onto explicitly chosen lines.
   */
  EXPLICIT = 'EXPLICIT'
}

/**
 * The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.
 * 
 */
export const enum DiscountApplicationTargetType {
  
  /**
   * The discount applies onto line items.
   */
  LINE_ITEM = 'LINE_ITEM',
  
  /**
   * The discount applies onto shipping lines.
   */
  SHIPPING_LINE = 'SHIPPING_LINE'
}

/**
 * The type of value given to a customer when a discount is applied to an order. For example, the application of the discount might give the customer a percentage off a specified item. Alternatively, the application of the discount might give the customer a monetary value in a given currency off an order.
 */
export type PricingValue = MoneyV2 | PricingPercentageValue;

/** Use this to resolve union type PricingValue */
export type PossiblePricingValueTypeNames =
'MoneyV2' |
'PricingPercentageValue';

export interface PricingValueNameMap {
  PricingValue: PricingValue;
  MoneyV2: MoneyV2;
  PricingPercentageValue: PricingPercentageValue;
}

/**
 * One type of value given to a customer when a discount is applied to an order.
 * The application of a discount with this value gives the customer the specified percentage off a specified item.
 * 
 */
export interface PricingPercentageValue {
  
  /**
   * The percentage value of the object. This is a number between -100 (free) and 0 (no discount).
   * 
   */
  percentage: number;
}

/**
 * Represents the order's current financial status.
 */
export const enum OrderDisplayFinancialStatus {
  
  /**
   * Displayed as **Pending**.
   */
  PENDING = 'PENDING',
  
  /**
   * Displayed as **Authorized**.
   */
  AUTHORIZED = 'AUTHORIZED',
  
  /**
   * Displayed as **Partially paid**.
   */
  PARTIALLY_PAID = 'PARTIALLY_PAID',
  
  /**
   * Displayed as **Partially refunded**.
   */
  PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED',
  
  /**
   * Displayed as **Voided**.
   */
  VOIDED = 'VOIDED',
  
  /**
   * Displayed as **Paid**.
   */
  PAID = 'PAID',
  
  /**
   * Displayed as **Refunded**.
   */
  REFUNDED = 'REFUNDED',
  
  /**
   * Displayed as **Expired**.
   */
  EXPIRED = 'EXPIRED'
}

/**
 * Represents the order's aggregated fulfillment status for display purposes.
 */
export const enum OrderDisplayFulfillmentStatus {
  
  /**
   * Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
   */
  UNFULFILLED = 'UNFULFILLED',
  
  /**
   * Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
   */
  PARTIALLY_FULFILLED = 'PARTIALLY_FULFILLED',
  
  /**
   * Displayed as **Fulfilled**. All the items in the order have been fulfilled.
   */
  FULFILLED = 'FULFILLED',
  
  /**
   * Displayed as **Restocked**. All the items in the order have been restocked. Replaced by the "UNFULFILLED" status.
   */
  RESTOCKED = 'RESTOCKED',
  
  /**
   * Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by the "IN_PROGRESS" status.
   */
  PENDING_FULFILLMENT = 'PENDING_FULFILLMENT',
  
  /**
   * Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status.
   */
  OPEN = 'OPEN',
  
  /**
   * Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service.
   */
  IN_PROGRESS = 'IN_PROGRESS',
  
  /**
   * Displayed as **On hold**. All of the unfulfilled items in this order are on hold.
   */
  ON_HOLD = 'ON_HOLD',
  
  /**
   * Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time.
   */
  SCHEDULED = 'SCHEDULED'
}

/**
 * A summary of the important details for a dispute on an order.
 */
export interface OrderDisputeSummary extends Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The type that the dispute was initiated as.
   */
  initiatedAs: DisputeType;
  
  /**
   * The current status of the dispute.
   */
  status: DisputeStatus;
}

/**
 * The possible types for a dispute.
 */
export const enum DisputeType {
  
  /**
   * The dispute has turned into a chargeback.
   */
  CHARGEBACK = 'CHARGEBACK',
  
  /**
   * The dispute is in the inquiry phase.
   */
  INQUIRY = 'INQUIRY'
}

/**
 * The possible statuses of a dispute.
 */
export const enum DisputeStatus {
  NEEDS_RESPONSE = 'NEEDS_RESPONSE',
  UNDER_REVIEW = 'UNDER_REVIEW',
  ACCEPTED = 'ACCEPTED',
  WON = 'WON',
  LOST = 'LOST',
  
  /**
   * Status previously used by Stripe to indicate that a dispute led to a refund.
   * @deprecated CHARGE_REFUNDED is no longer supported.
   */
  CHARGE_REFUNDED = 'CHARGE_REFUNDED'
}

/**
 * An auto-generated type for paginating through multiple ExchangeV2s.
 * 
 */
export interface ExchangeV2Connection {
  
  /**
   * A list of edges.
   */
  edges: Array<ExchangeV2Edge>;
  
  /**
   * A list of the nodes contained in ExchangeV2Edge.
   */
  nodes: Array<ExchangeV2>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ExchangeV2 and a cursor during pagination.
 * 
 */
export interface ExchangeV2Edge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ExchangeV2Edge.
   */
  node: ExchangeV2;
}

/**
 * An exchange where existing items on an order are returned and new items are added to the order.
 */
export interface ExchangeV2 extends Node {
  
  /**
   * The details of the new items in the exchange.
   */
  additions: ExchangeV2Additions;
  
  /**
   * The date and time when the exchange was completed.
   */
  completedAt?: DateTime;
  
  /**
   * The date and time when the exchange was created.
   */
  createdAt: DateTime;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The location where the exchange happened.
   */
  location?: Location;
  
  /**
   * The text of an optional note that a shop owner can attach to the exchange.
   */
  note?: string;
  
  /**
   * The refunds processed during the exchange.
   */
  refunds: Array<Refund>;
  
  /**
   * The details of the returned items in the exchange.
   */
  returns: ExchangeV2Returns;
  
  /**
   * The staff member associated with the exchange.
   */
  staffMember?: StaffMember;
  
  /**
   * The amount of money that was paid or refunded as part of the exchange.
   */
  totalAmountProcessedSet: MoneyBag;
  
  /**
   * The difference in values of the items that were exchanged.
   */
  totalPriceSet: MoneyBag;
  
  /**
   * The order transactions related to the exchange.
   */
  transactions: Array<OrderTransaction>;
}

/**
 * New items associated to the exchange.
 */
export interface ExchangeV2Additions {
  
  /**
   * The list of new items for the exchange.
   */
  lineItems: Array<ExchangeV2LineItem>;
  
  /**
   * The subtotal of the items being added, including discounts.
   */
  subtotalPriceSet: MoneyBag;
  
  /**
   * The summary of all taxes of the items being added.
   */
  taxLines: Array<TaxLine>;
  
  /**
   * The total price of the items being added, including discounts and taxes.
   */
  totalPriceSet: MoneyBag;
}

/**
 * Contains information about an item in the exchange.
 */
export interface ExchangeV2LineItem {
  
  /**
   * A list of attributes that represent custom features or special requests.
   */
  customAttributes: Array<Attribute>;
  
  /**
   * The total line price, in shop and presentment currencies, after discounts are applied.
   */
  discountedTotalSet: MoneyBag;
  
  /**
   * The price, in shop and presentment currencies,
   * of a single variant unit after line item discounts are applied.
   * 
   */
  discountedUnitPriceSet: MoneyBag;
  
  /**
   * Name of the service provider who fulfilled the order.
   * 
   * Valid values are either **manual** or the name of the provider.
   * For example, **amazon**, **shipwire**.
   * 
   * Deleted fulfillment services will return null.
   * 
   */
  fulfillmentService?: FulfillmentService;
  
  /**
   * Indiciates if this line item is a gift card.
   */
  giftCard: boolean;
  
  /**
   * The gift cards associated with the line item.
   */
  giftCards: Array<GiftCard>;
  
  /**
   * The line item associated with this object.
   */
  lineItem?: LineItem;
  
  /**
   * The name of the product.
   */
  name: string;
  
  /**
   * The total price, in shop and presentment currencies, before discounts are applied.
   */
  originalTotalSet: MoneyBag;
  
  /**
   * The price, in shop and presentment currencies,
   * of a single variant unit before line item discounts are applied.
   * 
   */
  originalUnitPriceSet: MoneyBag;
  
  /**
   * The number of products that were purchased.
   */
  quantity: number;
  
  /**
   * Whether physical shipping is required for the variant.
   */
  requiresShipping: boolean;
  
  /**
   * The SKU number of the product variant.
   */
  sku?: string;
  
  /**
   * The TaxLine object connected to this line item.
   */
  taxLines: Array<TaxLine>;
  
  /**
   * Whether the variant is taxable.
   */
  taxable: boolean;
  
  /**
   * The title of the product or variant. This field only applies to custom line items.
   */
  title: string;
  
  /**
   * The product variant of the line item.
   */
  variant?: ProductVariant;
  
  /**
   * The name of the variant.
   */
  variantTitle?: string;
  
  /**
   * The name of the vendor who created the product variant.
   */
  vendor?: string;
}

/**
 * Represents an issued gift card.
 */
export interface GiftCard extends Node {
  
  /**
   * The gift card's remaining balance.
   */
  balance: MoneyV2;
  
  /**
   * The date and time at which the gift card was created.
   */
  createdAt: DateTime;
  
  /**
   * The customer who will receive the gift card.
   */
  customer?: Customer;
  
  /**
   * The date and time at which the gift card was disabled.
   */
  disabledAt?: DateTime;
  
  /**
   * Whether the gift card is enabled.
   */
  enabled: boolean;
  
  /**
   * The date at which the gift card will expire.
   */
  expiresOn?: Date;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The initial value of the gift card.
   */
  initialValue: MoneyV2;
  
  /**
   * The final four characters of the gift card code.
   */
  lastCharacters: string;
  
  /**
   * The gift card code. Everything but the final four characters is masked.
   */
  maskedCode: string;
  
  /**
   * The note associated with the gift card, which isn't visible to the customer.
   */
  note?: string;
  
  /**
   * The order associated with the gift card. This value is `null` if the gift card was issued manually.
   * 
   */
  order?: Order;
}

/**
 * Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date string.
 * For example, September 7, 2019 is represented as `"2019-07-16"`.
 * 
 */
export type Date = any;

/**
 * Represents individual products and quantities purchased in the associated order.
 */
export interface LineItem extends Node {
  
  /**
   * Whether the line item can be restocked.
   * @deprecated Use `restockable` instead.
   */
  canRestock: boolean;
  
  /**
   * The subscription contract associated with this line item.
   */
  contract?: SubscriptionContract;
  
  /**
   * The number of units ordered, excluding refunded and removed units.
   */
  currentQuantity: number;
  
  /**
   * A list of attributes that represent custom features or special requests.
   */
  customAttributes: Array<Attribute>;
  
  /**
   * The discounts that have been allocated to the line item by discount applications, including discounts allocated to refunded and removed quantities.
   */
  discountAllocations: Array<DiscountAllocation>;
  
  /**
   * The total discounted price of the line item in shop currency, including refunded and removed quantities. This value doesn't include order-level discounts.
   * @deprecated Use `discountedTotalSet` instead.
   */
  discountedTotal: Money;
  
  /**
   * The total discounted price of the line item in shop and presentment currencies, including refunded and removed quantities. This value doesn't include order-level discounts. Code-based discounts aren't included by default.
   */
  discountedTotalSet: MoneyBag;
  
  /**
   * The approximate unit price of the line item in shop currency. This value includes line-level discounts and discounts applied to refunded and removed quantities. It doesn't include order-level discounts.
   * @deprecated Use `discountedUnitPriceSet` instead.
   */
  discountedUnitPrice: Money;
  
  /**
   * The approximate unit price of the line item in shop and presentment currencies. This value includes discounts applied to refunded and removed quantities.
   */
  discountedUnitPriceAfterAllDiscountsSet: MoneyBag;
  
  /**
   * The approximate unit price of the line item in shop and presentment currencies. This value includes line-level discounts and discounts applied to refunded and removed quantities. It doesn't include order-level discounts.
   */
  discountedUnitPriceSet: MoneyBag;
  
  /**
   * The duties associated with the line item.
   */
  duties: Array<Duty>;
  
  /**
   * The total number of units to fulfill.
   * @deprecated Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead.
   */
  fulfillableQuantity: number;
  
  /**
   * The fulfillment service that stocks the product variant belonging to a line item.
   * 
   * This is a third-party fulfillment service in the following scenarios:
   * 
   * **Scenario 1**
   * - The product variant is stocked by a single fulfillment service.
   * - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService) is a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
   * 
   * **Scenario 2**
   * - Multiple fulfillment services stock the product variant.
   * - The last time that the line item was unfulfilled, it was awaiting fulfillment by a third-party fulfillment service. Third-party fulfillment services don't have a handle with the value `manual`.
   * 
   * If none of the above conditions are met, then the fulfillment service has the `manual` handle.
   * 
   * @deprecated 
   * The [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [inventoryItem field](/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryitem) if you need to determine where a product variant is stocked.
   * 
   * If you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available.
   * 
   * Altering the locations which stock a product variant won't change the value of this field for existing orders.
   * 
   * Learn about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states).
   * 
   */
  fulfillmentService?: FulfillmentService;
  
  /**
   * The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
   * 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
   * 
   * @deprecated Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead
   */
  fulfillmentStatus: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The image associated to the line item's variant.
   */
  image?: Image;
  
  /**
   * The line item group associated to the line item.
   */
  lineItemGroup?: LineItemGroup;
  
  /**
   * Whether the line item can be edited or not.
   */
  merchantEditable: boolean;
  
  /**
   * The title of the product, optionally appended with the title of the variant (if applicable).
   */
  name: string;
  
  /**
   * The total number of units that can't be fulfilled. For example, if items have been refunded, or the item is not something that can be fulfilled, like a tip. Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object for more fulfillment details.
   */
  nonFulfillableQuantity: number;
  
  /**
   * In shop currency, the total price of the line item when the order was created.
   * This value doesn't include discounts.
   * 
   * @deprecated Use `originalTotalSet` instead.
   */
  originalTotal: Money;
  
  /**
   * In shop and presentment currencies, the total price of the line item when the order was created.
   * This value doesn't include discounts.
   * 
   */
  originalTotalSet: MoneyBag;
  
  /**
   * In shop currency, the unit price of the line item when the order was created. This value doesn't include discounts.
   * @deprecated Use `originalUnitPriceSet` instead.
   */
  originalUnitPrice: Money;
  
  /**
   * In shop and presentment currencies, the unit price of the line item when the order was created. This value doesn't include discounts.
   */
  originalUnitPriceSet: MoneyBag;
  
  /**
   * The Product object associated with this line item's variant.
   */
  product?: Product;
  
  /**
   * The number of units ordered, including refunded and removed units.
   */
  quantity: number;
  
  /**
   * The number of units ordered, excluding refunded units.
   */
  refundableQuantity: number;
  
  /**
   * Whether physical shipping is required for the variant.
   */
  requiresShipping: boolean;
  
  /**
   * Whether the line item can be restocked.
   */
  restockable: boolean;
  
  /**
   * The selling plan details associated with the line item.
   */
  sellingPlan?: LineItemSellingPlan;
  
  /**
   * The variant SKU number.
   */
  sku?: string;
  
  /**
   * Staff attributed to the line item.
   */
  staffMember?: StaffMember;
  
  /**
   * The taxes charged for the line item, including taxes charged for refunded and removed quantities.
   */
  taxLines: Array<TaxLine>;
  
  /**
   * Whether the variant is taxable.
   */
  taxable: boolean;
  
  /**
   * The title of the product at time of order creation.
   */
  title: string;
  
  /**
   * The total discount allocated to the line item in shop currency, including the total allocated to refunded and removed quantities. This value doesn't include order-level discounts.
   * @deprecated Use `totalDiscountSet` instead.
   */
  totalDiscount: Money;
  
  /**
   * The total discount allocated to the line item in shop and presentment currencies, including the total allocated to refunded and removed quantities. This value doesn't include order-level discounts.
   */
  totalDiscountSet: MoneyBag;
  
  /**
   * In shop currency, the total discounted price of the unfulfilled quantity for the line item.
   * @deprecated Use `unfulfilledDiscountedTotalSet` instead.
   */
  unfulfilledDiscountedTotal: Money;
  
  /**
   * In shop and presentment currencies, the total discounted price of the unfulfilled quantity for the line item.
   */
  unfulfilledDiscountedTotalSet: MoneyBag;
  
  /**
   * In shop currency, the total price of the unfulfilled quantity for the line item. This value doesn't include discounts.
   * @deprecated Use `unfulfilledOriginalTotalSet` instead.
   */
  unfulfilledOriginalTotal: Money;
  
  /**
   * In shop and presentment currencies, the total price of the unfulfilled quantity for the line item. This value doesn't include discounts.
   */
  unfulfilledOriginalTotalSet: MoneyBag;
  
  /**
   * The number of units not yet fulfilled.
   */
  unfulfilledQuantity: number;
  
  /**
   * The Variant object associated with this line item.
   */
  variant?: ProductVariant;
  
  /**
   * The title of the variant at time of order creation.
   */
  variantTitle?: string;
  
  /**
   * The name of the vendor who made the variant.
   */
  vendor?: string;
}

/**
 * Represents a Subscription Contract.
 */
export interface SubscriptionContract extends Node, SubscriptionContractBase {
  
  /**
   * The subscription app that the subscription contract is registered to.
   */
  app?: App;
  
  /**
   * The URL of the subscription contract page on the subscription app.
   */
  appAdminUrl?: URL;
  
  /**
   * The list of billing attempts associated with the subscription contract.
   */
  billingAttempts: SubscriptionBillingAttemptConnection;
  
  /**
   * The billing policy associated with the subscription contract.
   */
  billingPolicy: SubscriptionBillingPolicy;
  
  /**
   * The date and time when the subscription contract was created.
   */
  createdAt: DateTime;
  
  /**
   * The currency that's used for the subscription contract.
   */
  currencyCode: CurrencyCode;
  
  /**
   * A list of the custom attributes to be added to the generated orders.
   */
  customAttributes: Array<Attribute>;
  
  /**
   * The customer to whom the subscription contract belongs.
   */
  customer?: Customer;
  
  /**
   * The customer payment method that's used for the subscription contract.
   */
  customerPaymentMethod?: CustomerPaymentMethod;
  
  /**
   * The delivery method for each billing of the subscription contract.
   */
  deliveryMethod?: SubscriptionDeliveryMethod;
  
  /**
   * The delivery policy associated with the subscription contract.
   */
  deliveryPolicy: SubscriptionDeliveryPolicy;
  
  /**
   * The delivery price for each billing of the subscription contract.
   */
  deliveryPrice: MoneyV2;
  
  /**
   * The list of subscription discounts associated with the subscription contract.
   */
  discounts: SubscriptionManualDiscountConnection;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The current status of the last payment.
   */
  lastPaymentStatus?: SubscriptionContractLastPaymentStatus;
  
  /**
   * The number of lines associated with the subscription contract.
   */
  lineCount: number;
  
  /**
   * The list of subscription lines associated with the subscription contract.
   */
  lines: SubscriptionLineConnection;
  
  /**
   * The next billing date for the subscription contract. This field is managed by the apps.
   *         Alternatively you can utilize our
   *         [Billing Cycles APIs](https://shopify.dev/docs/apps/selling-strategies/subscriptions/billing-cycles),
   *         which provide auto-computed billing dates and additional functionalities.
   */
  nextBillingDate?: DateTime;
  
  /**
   * The note field that will be applied to the generated orders.
   */
  note?: string;
  
  /**
   * A list of the subscription contract's orders.
   */
  orders: OrderConnection;
  
  /**
   * The order from which this contract originated.
   */
  originOrder?: Order;
  
  /**
   * The revision id of the contract.
   */
  revisionId: UnsignedInt64;
  
  /**
   * The current status of the subscription contract.
   */
  status: SubscriptionContractSubscriptionStatus;
  
  /**
   * The date and time when the subscription contract was updated.
   */
  updatedAt: DateTime;
}

/**
 * Represents subscription contract common fields.
 */
export interface SubscriptionContractBase {
  
  /**
   * The subscription app that the subscription contract is registered to.
   */
  app?: App;
  
  /**
   * The URL of the subscription contract page on the subscription app.
   */
  appAdminUrl?: URL;
  
  /**
   * The currency that's used for the subscription contract.
   */
  currencyCode: CurrencyCode;
  
  /**
   * A list of the custom attributes to be added to the generated orders.
   */
  customAttributes: Array<Attribute>;
  
  /**
   * The customer to whom the subscription contract belongs.
   */
  customer?: Customer;
  
  /**
   * The customer payment method that's used for the subscription contract.
   */
  customerPaymentMethod?: CustomerPaymentMethod;
  
  /**
   * The delivery method for each billing of the subscription contract.
   */
  deliveryMethod?: SubscriptionDeliveryMethod;
  
  /**
   * The delivery price for each billing of the subscription contract.
   */
  deliveryPrice: MoneyV2;
  
  /**
   * The list of subscription discounts associated with the subscription contract.
   */
  discounts: SubscriptionManualDiscountConnection;
  
  /**
   * The number of lines associated with the subscription contract.
   */
  lineCount: number;
  
  /**
   * The list of subscription lines associated with the subscription contract.
   */
  lines: SubscriptionLineConnection;
  
  /**
   * The note field that will be applied to the generated orders.
   */
  note?: string;
  
  /**
   * A list of the subscription contract's orders.
   */
  orders: OrderConnection;
  
  /**
   * The date and time when the subscription contract was updated.
   */
  updatedAt: DateTime;
}

/** Use this to resolve interface type SubscriptionContractBase */
export type PossibleSubscriptionContractBaseTypeNames =
'SubscriptionContract' |
'SubscriptionBillingCycleEditedContract';

export interface SubscriptionContractBaseNameMap {
  SubscriptionContractBase: SubscriptionContractBase;
  SubscriptionContract: SubscriptionContract;
  SubscriptionBillingCycleEditedContract: SubscriptionBillingCycleEditedContract;
}

/**
 * A customer's payment method.
 */
export interface CustomerPaymentMethod extends Node {
  
  /**
   * The customer to whom the payment method belongs.
   */
  customer?: Customer;
  
  /**
   * The ID of this payment method.
   */
  id: string;
  
  /**
   * The instrument for this payment method.
   */
  instrument?: CustomerPaymentInstrument;
  
  /**
   * The time that the payment method was revoked.
   */
  revokedAt?: DateTime;
  
  /**
   * The revocation reason for this payment method.
   */
  revokedReason?: CustomerPaymentMethodRevocationReason;
  
  /**
   * List Subscription Contracts.
   */
  subscriptionContracts: SubscriptionContractConnection;
}

/**
 * All possible instruments for CustomerPaymentMethods.
 */
export type CustomerPaymentInstrument =
CustomerCreditCard |
CustomerPaypalBillingAgreement |
CustomerShopPayAgreement;

/** Use this to resolve union type CustomerPaymentInstrument */
export type PossibleCustomerPaymentInstrumentTypeNames =
'CustomerCreditCard' |
'CustomerPaypalBillingAgreement' |
'CustomerShopPayAgreement';

export interface CustomerPaymentInstrumentNameMap {
  CustomerPaymentInstrument: CustomerPaymentInstrument;
  CustomerCreditCard: CustomerCreditCard;
  CustomerPaypalBillingAgreement: CustomerPaypalBillingAgreement;
  CustomerShopPayAgreement: CustomerShopPayAgreement;
}

/**
 * Represents a card instrument for customer payment method.
 */
export interface CustomerCreditCard {
  
  /**
   * The billing address of the card.
   */
  billingAddress?: CustomerCreditCardBillingAddress;
  
  /**
   * The brand of the card.
   */
  brand: string;
  
  /**
   * Whether the card is about to expire.
   */
  expiresSoon: boolean;
  
  /**
   * The expiry month of the card.
   */
  expiryMonth: number;
  
  /**
   * The expiry year of the card.
   */
  expiryYear: number;
  
  /**
   * The card's BIN number.
   */
  firstDigits?: string;
  
  /**
   * The payment method can be revoked if there are no active subscription contracts.
   */
  isRevocable: boolean;
  
  /**
   * The last 4 digits of the card.
   */
  lastDigits: string;
  
  /**
   * The masked card number with only the last 4 digits displayed.
   */
  maskedNumber: string;
  
  /**
   * The name of the card holder.
   */
  name: string;
  
  /**
   * The source of the card if coming from a wallet such as Apple Pay.
   */
  source?: string;
  
  /**
   * The last 4 digits of the Device Account Number.
   */
  virtualLastDigits?: string;
}

/**
 * The billing address of a credit card payment instrument.
 */
export interface CustomerCreditCardBillingAddress {
  
  /**
   * The first line of the address. Typically the street address or PO Box number.
   */
  address1?: string;
  
  /**
   * The name of the city, district, village, or town.
   */
  city?: string;
  
  /**
   * The name of the country.
   */
  country?: string;
  
  /**
   * The two-letter code for the country of the address.
   * For example, US.
   * 
   */
  countryCode?: CountryCode;
  
  /**
   * The first name in the billing address.
   */
  firstName?: string;
  
  /**
   * The last name in the billing address.
   */
  lastName?: string;
  
  /**
   * The region of the address, such as the province, state, or district.
   */
  province?: string;
  
  /**
   * The two-letter code for the region.
   * For example, ON.
   * 
   */
  provinceCode?: string;
  
  /**
   * The zip or postal code of the address.
   */
  zip?: string;
}

/**
 * Represents a PayPal instrument for customer payment method.
 */
export interface CustomerPaypalBillingAgreement {
  
  /**
   * The billing address of this payment method.
   */
  billingAddress?: CustomerPaymentInstrumentBillingAddress;
  
  /**
   * Whether the PayPal billing agreement is inactive.
   */
  inactive: boolean;
  
  /**
   * Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.
   */
  isRevocable: boolean;
  
  /**
   * The customers's PayPal account email address.
   */
  paypalAccountEmail?: string;
}

/**
 * The billing address of a payment instrument.
 */
export interface CustomerPaymentInstrumentBillingAddress {
  
  /**
   * The first line of the address. Typically the street address or PO Box number.
   */
  address1?: string;
  
  /**
   * The name of the city, district, village, or town.
   */
  city?: string;
  
  /**
   * The name of the country.
   */
  country?: string;
  
  /**
   * The two-letter code for the country of the address.
   * For example, US.
   * 
   */
  countryCode?: CountryCode;
  
  /**
   * The name of the buyer of the address.
   */
  name?: string;
  
  /**
   * The region of the address, such as the province, state, or district.
   */
  province?: string;
  
  /**
   * The two-letter code for the region.
   * For example, ON.
   * 
   */
  provinceCode?: string;
  
  /**
   * The zip or postal code of the address.
   */
  zip?: string;
}

/**
 * Represents a Shop Pay card instrument for customer payment method.
 */
export interface CustomerShopPayAgreement {
  
  /**
   * The billing address of the card.
   */
  billingAddress?: CustomerCreditCardBillingAddress;
  
  /**
   * Whether the card is about to expire.
   */
  expiresSoon: boolean;
  
  /**
   * The expiry month of the card.
   */
  expiryMonth: number;
  
  /**
   * The expiry year of the card.
   */
  expiryYear: number;
  
  /**
   * Whether the Shop Pay billing agreement is inactive.
   */
  inactive: boolean;
  
  /**
   * The payment method can be revoked if there are no active subscription contracts.
   */
  isRevocable: boolean;
  
  /**
   * The last 4 digits of the card.
   */
  lastDigits: string;
  
  /**
   * The masked card number with only the last 4 digits displayed.
   */
  maskedNumber: string;
  
  /**
   * The name of the card holder.
   */
  name: string;
}

/**
 * The revocation reason types for a customer payment method.
 */
export const enum CustomerPaymentMethodRevocationReason {
  
  /**
   * The Authorize.net payment gateway is not enabled.
   */
  AUTHORIZE_NET_GATEWAY_NOT_ENABLED = 'AUTHORIZE_NET_GATEWAY_NOT_ENABLED',
  
  /**
   * Authorize.net did not return any payment methods. Make sure that the correct Authorize.net account is linked.
   */
  AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD = 'AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD',
  
  /**
   * The credit card failed to update.
   */
  FAILED_TO_UPDATE_CREDIT_CARD = 'FAILED_TO_UPDATE_CREDIT_CARD',
  
  /**
   * Failed to contact the Stripe API.
   */
  STRIPE_API_AUTHENTICATION_ERROR = 'STRIPE_API_AUTHENTICATION_ERROR',
  
  /**
   * Invalid request. Failed to retrieve payment method from Stripe.
   */
  STRIPE_API_INVALID_REQUEST_ERROR = 'STRIPE_API_INVALID_REQUEST_ERROR',
  
  /**
   * The Stripe payment gateway is not enabled.
   */
  STRIPE_GATEWAY_NOT_ENABLED = 'STRIPE_GATEWAY_NOT_ENABLED',
  
  /**
   * Stripe did not return any payment methods. Make sure that the correct Stripe account is linked.
   */
  STRIPE_RETURNED_NO_PAYMENT_METHOD = 'STRIPE_RETURNED_NO_PAYMENT_METHOD',
  
  /**
   * The Stripe payment method type should be card.
   */
  STRIPE_PAYMENT_METHOD_NOT_CARD = 'STRIPE_PAYMENT_METHOD_NOT_CARD',
  
  /**
   * Failed to contact Braintree API.
   */
  BRAINTREE_API_AUTHENTICATION_ERROR = 'BRAINTREE_API_AUTHENTICATION_ERROR',
  
  /**
   * The Braintree payment gateway is not enabled.
   */
  BRAINTREE_GATEWAY_NOT_ENABLED = 'BRAINTREE_GATEWAY_NOT_ENABLED',
  
  /**
   * Braintree returned no payment methods. Make sure the correct Braintree account is linked.
   */
  BRAINTREE_RETURNED_NO_PAYMENT_METHOD = 'BRAINTREE_RETURNED_NO_PAYMENT_METHOD',
  
  /**
   * The Braintree payment method type should be a credit card or Apple Pay card.
   */
  BRAINTREE_PAYMENT_METHOD_NOT_CARD = 'BRAINTREE_PAYMENT_METHOD_NOT_CARD',
  
  /**
   * The payment method was manually revoked.
   */
  MANUALLY_REVOKED = 'MANUALLY_REVOKED',
  
  /**
   * The payment method was replaced with an existing payment method. The associated contracts have been migrated to the other payment method.
   */
  MERGED = 'MERGED'
}

/**
 * An auto-generated type for paginating through multiple SubscriptionContracts.
 * 
 */
export interface SubscriptionContractConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<SubscriptionContractEdge>;
  
  /**
   * A list of the nodes contained in SubscriptionContractEdge.
   */
  nodes: Array<SubscriptionContract>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one SubscriptionContract and a cursor during pagination.
 * 
 */
export interface SubscriptionContractEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of SubscriptionContractEdge.
   */
  node: SubscriptionContract;
}

/**
 * Describes the delivery method to use to get the physical goods to the customer.
 */
export type SubscriptionDeliveryMethod =
SubscriptionDeliveryMethodLocalDelivery |
SubscriptionDeliveryMethodPickup |
SubscriptionDeliveryMethodShipping;

/** Use this to resolve union type SubscriptionDeliveryMethod */
export type PossibleSubscriptionDeliveryMethodTypeNames =
'SubscriptionDeliveryMethodLocalDelivery' |
'SubscriptionDeliveryMethodPickup' |
'SubscriptionDeliveryMethodShipping';

export interface SubscriptionDeliveryMethodNameMap {
  SubscriptionDeliveryMethod: SubscriptionDeliveryMethod;
  SubscriptionDeliveryMethodLocalDelivery: SubscriptionDeliveryMethodLocalDelivery;
  SubscriptionDeliveryMethodPickup: SubscriptionDeliveryMethodPickup;
  SubscriptionDeliveryMethodShipping: SubscriptionDeliveryMethodShipping;
}

/**
 * A subscription delivery method for local delivery.
 * The other subscription delivery methods can be found in the `SubscriptionDeliveryMethod` union type.
 * 
 */
export interface SubscriptionDeliveryMethodLocalDelivery {
  
  /**
   * The address to deliver to.
   */
  address: SubscriptionMailingAddress;
  
  /**
   * The details of the local delivery method to use.
   */
  localDeliveryOption: SubscriptionDeliveryMethodLocalDeliveryOption;
}

/**
 * Represents a Mailing Address on a Subscription.
 */
export interface SubscriptionMailingAddress {
  
  /**
   * The first line of the address. Typically the street address or PO Box number.
   */
  address1?: string;
  
  /**
   * The second line of the address. Typically the number of the apartment, suite, or unit.
   */
  address2?: string;
  
  /**
   * The name of the city, district, village, or town.
   */
  city?: string;
  
  /**
   * The name of the customer's company or organization.
   */
  company?: string;
  
  /**
   * The name of the country.
   */
  country?: string;
  
  /**
   * The two-letter code for the country of the address.
   * 
   * For example, US.
   * 
   */
  countryCode?: CountryCode;
  
  /**
   * The first name of the customer.
   */
  firstName?: string;
  
  /**
   * The last name of the customer.
   */
  lastName?: string;
  
  /**
   * The full name of the customer, based on firstName and lastName.
   */
  name?: string;
  
  /**
   * A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone?: string;
  
  /**
   * The region of the address, such as the province, state, or district.
   */
  province?: string;
  
  /**
   * The two-letter code for the region.
   * 
   * For example, ON.
   * 
   */
  provinceCode?: string;
  
  /**
   * The zip or postal code of the address.
   */
  zip?: string;
}

/**
 * The selected delivery option on a subscription contract.
 */
export interface SubscriptionDeliveryMethodLocalDeliveryOption {
  
  /**
   * A custom reference to the delivery method for use with automations.
   */
  code?: string;
  
  /**
   * The details displayed to the customer to describe the local delivery option.
   */
  description?: string;
  
  /**
   * The delivery instructions that the customer can provide to the merchant.
   */
  instructions?: string;
  
  /**
   * The phone number that the customer provided to the merchant.
   * Formatted using E.164 standard. For example, `+16135551111`.
   * 
   */
  phone: string;
  
  /**
   * The presentment title of the local delivery option.
   */
  presentmentTitle?: string;
  
  /**
   * The title of the local delivery option.
   */
  title?: string;
}

/**
 * A delivery method with a pickup option.
 */
export interface SubscriptionDeliveryMethodPickup {
  
  /**
   * The details of the pickup delivery method to use.
   */
  pickupOption: SubscriptionDeliveryMethodPickupOption;
}

/**
 * Represents the selected pickup option on a subscription contract.
 */
export interface SubscriptionDeliveryMethodPickupOption {
  
  /**
   * A custom reference to the delivery method for use with automations.
   */
  code?: string;
  
  /**
   * The details displayed to the customer to describe the pickup option.
   */
  description?: string;
  
  /**
   * The location where the customer will pickup the merchandise.
   */
  location: Location;
  
  /**
   * The presentment title of the pickup option.
   */
  presentmentTitle?: string;
  
  /**
   * The title of the pickup option.
   */
  title?: string;
}

/**
 * Represents a shipping delivery method: a mailing address and a shipping option.
 */
export interface SubscriptionDeliveryMethodShipping {
  
  /**
   * The address to ship to.
   */
  address: SubscriptionMailingAddress;
  
  /**
   * The details of the shipping method to use.
   */
  shippingOption: SubscriptionDeliveryMethodShippingOption;
}

/**
 * Represents the selected shipping option on a subscription contract.
 */
export interface SubscriptionDeliveryMethodShippingOption {
  
  /**
   * The carrier service that's providing this shipping option.
   * This field isn't currently supported and returns null.
   * 
   * @deprecated This field has never been implemented.
   */
  carrierService?: DeliveryCarrierService;
  
  /**
   * The code of the shipping option.
   */
  code?: string;
  
  /**
   * The description of the shipping option.
   */
  description?: string;
  
  /**
   * The presentment title of the shipping option.
   */
  presentmentTitle?: string;
  
  /**
   * The title of the shipping option.
   */
  title?: string;
}

/**
 * An auto-generated type for paginating through multiple SubscriptionManualDiscounts.
 * 
 */
export interface SubscriptionManualDiscountConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<SubscriptionManualDiscountEdge>;
  
  /**
   * A list of the nodes contained in SubscriptionManualDiscountEdge.
   */
  nodes: Array<SubscriptionManualDiscount>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.
 * 
 */
export interface SubscriptionManualDiscountEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of SubscriptionManualDiscountEdge.
   */
  node: SubscriptionManualDiscount;
}

/**
 * Custom subscription discount.
 */
export interface SubscriptionManualDiscount {
  
  /**
   * Entitled line items used to apply the subscription discount on.
   */
  entitledLines: SubscriptionDiscountEntitledLines;
  
  /**
   * The unique ID.
   */
  id: string;
  
  /**
   * The maximum number of times the subscription discount will be applied on orders.
   */
  recurringCycleLimit?: number;
  
  /**
   * The reason that the discount on the subscription draft is rejected.
   */
  rejectionReason?: SubscriptionDiscountRejectionReason;
  
  /**
   * Type of line the discount applies on.
   */
  targetType: DiscountTargetType;
  
  /**
   * The title associated with the subscription discount.
   */
  title?: string;
  
  /**
   * The type of the subscription discount.
   */
  type: DiscountType;
  
  /**
   * The number of times the discount was applied.
   */
  usageCount: number;
  
  /**
   * The value of the subscription discount.
   */
  value: SubscriptionDiscountValue;
}

/**
 * Represents the subscription lines the discount applies on.
 */
export interface SubscriptionDiscountEntitledLines {
  
  /**
   * Specify whether the subscription discount will apply on all subscription lines.
   */
  all: boolean;
  
  /**
   * The list of subscription lines associated with the subscription discount.
   */
  lines: SubscriptionLineConnection;
}

/**
 * An auto-generated type for paginating through multiple SubscriptionLines.
 * 
 */
export interface SubscriptionLineConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<SubscriptionLineEdge>;
  
  /**
   * A list of the nodes contained in SubscriptionLineEdge.
   */
  nodes: Array<SubscriptionLine>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one SubscriptionLine and a cursor during pagination.
 * 
 */
export interface SubscriptionLineEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of SubscriptionLineEdge.
   */
  node: SubscriptionLine;
}

/**
 * Represents a Subscription Line.
 */
export interface SubscriptionLine {
  
  /**
   * The price per unit for the subscription line in the contract's currency.
   */
  currentPrice: MoneyV2;
  
  /**
   * List of custom attributes associated to the line item.
   */
  customAttributes: Array<Attribute>;
  
  /**
   * Discount allocations.
   */
  discountAllocations: Array<SubscriptionDiscountAllocation>;
  
  /**
   * The unique ID.
   */
  id: string;
  
  /**
   * Total line price including all discounts.
   */
  lineDiscountedPrice: MoneyV2;
  
  /**
   * Describe the price changes of the line over time.
   */
  pricingPolicy?: SubscriptionPricingPolicy;
  
  /**
   * The product ID associated with the subscription line.
   */
  productId?: string;
  
  /**
   * The quantity of the unit selected for the subscription line.
   */
  quantity: number;
  
  /**
   * Whether physical shipping is required for the variant.
   */
  requiresShipping: boolean;
  
  /**
   * The selling plan ID associated to the line.
   * 
   * Indicates which selling plan was used to create this
   * contract line initially. The selling plan ID is also used to
   * find the associated delivery profile.
   * 
   * The subscription contract, subscription line, or selling plan might have
   * changed. As a result, the selling plan's attributes might not
   * match the information on the contract.
   * 
   */
  sellingPlanId?: string;
  
  /**
   * The selling plan name associated to the line. This name describes
   * the order line items created from this subscription line
   * for both merchants and customers.
   * 
   * The value can be different from the selling plan's name, because both
   * the selling plan's name and the subscription line's selling_plan_name
   * attribute can be updated independently.
   * 
   */
  sellingPlanName?: string;
  
  /**
   * Variant SKU number of the item associated with the subscription line.
   */
  sku?: string;
  
  /**
   * Whether the variant is taxable.
   */
  taxable: boolean;
  
  /**
   * Product title of the item associated with the subscription line.
   */
  title: string;
  
  /**
   * The product variant ID associated with the subscription line.
   */
  variantId?: string;
  
  /**
   * The image associated with the line item's variant or product.
   */
  variantImage?: Image;
  
  /**
   * Product variant title of the item associated with the subscription line.
   */
  variantTitle?: string;
}

/**
 * Represents what a particular discount reduces from a line price.
 */
export interface SubscriptionDiscountAllocation {
  
  /**
   * Allocation amount.
   */
  amount: MoneyV2;
  
  /**
   * Discount that created the allocation.
   */
  discount: SubscriptionDiscount;
}

/**
 * Subscription draft discount types.
 */
export type SubscriptionDiscount =
SubscriptionAppliedCodeDiscount |
SubscriptionManualDiscount;

/** Use this to resolve union type SubscriptionDiscount */
export type PossibleSubscriptionDiscountTypeNames =
'SubscriptionAppliedCodeDiscount' |
'SubscriptionManualDiscount';

export interface SubscriptionDiscountNameMap {
  SubscriptionDiscount: SubscriptionDiscount;
  SubscriptionAppliedCodeDiscount: SubscriptionAppliedCodeDiscount;
  SubscriptionManualDiscount: SubscriptionManualDiscount;
}

/**
 * Represents an applied code discount.
 */
export interface SubscriptionAppliedCodeDiscount {
  
  /**
   * The unique ID.
   */
  id: string;
  
  /**
   * The redeem code of the discount that applies on the subscription.
   */
  redeemCode: string;
  
  /**
   * The reason that the discount on the subscription draft is rejected.
   */
  rejectionReason?: SubscriptionDiscountRejectionReason;
}

/**
 * The reason a discount on a subscription draft was rejected.
 */
export const enum SubscriptionDiscountRejectionReason {
  
  /**
   * Discount code is not found.
   */
  NOT_FOUND = 'NOT_FOUND',
  
  /**
   * Discount does not apply to any of the given line items.
   */
  NO_ENTITLED_LINE_ITEMS = 'NO_ENTITLED_LINE_ITEMS',
  
  /**
   * Quantity of items does not qualify for the discount.
   */
  QUANTITY_NOT_IN_RANGE = 'QUANTITY_NOT_IN_RANGE',
  
  /**
   * Purchase amount of items does not qualify for the discount.
   */
  PURCHASE_NOT_IN_RANGE = 'PURCHASE_NOT_IN_RANGE',
  
  /**
   * Given customer does not qualify for the discount.
   */
  CUSTOMER_NOT_ELIGIBLE = 'CUSTOMER_NOT_ELIGIBLE',
  
  /**
   * Discount usage limit has been reached.
   */
  USAGE_LIMIT_REACHED = 'USAGE_LIMIT_REACHED',
  
  /**
   * Customer usage limit has been reached.
   */
  CUSTOMER_USAGE_LIMIT_REACHED = 'CUSTOMER_USAGE_LIMIT_REACHED',
  
  /**
   * Discount is inactive.
   */
  CURRENTLY_INACTIVE = 'CURRENTLY_INACTIVE',
  
  /**
   * No applicable shipping lines.
   */
  NO_ENTITLED_SHIPPING_LINES = 'NO_ENTITLED_SHIPPING_LINES',
  
  /**
   * Purchase type does not qualify for the discount.
   */
  INCOMPATIBLE_PURCHASE_TYPE = 'INCOMPATIBLE_PURCHASE_TYPE',
  
  /**
   * Internal error during discount code validation.
   */
  INTERNAL_ERROR = 'INTERNAL_ERROR'
}

/**
 * Represents a Subscription Line Pricing Policy.
 */
export interface SubscriptionPricingPolicy {
  
  /**
   * The base price per unit for the subscription line in the contract's currency.
   */
  basePrice: MoneyV2;
  
  /**
   * The adjustments per cycle for the subscription line.
   */
  cycleDiscounts: Array<SubscriptionCyclePriceAdjustment>;
}

/**
 * Represents a Subscription Line Pricing Cycle Adjustment.
 */
export interface SubscriptionCyclePriceAdjustment {
  
  /**
   * Price adjustment type.
   */
  adjustmentType: SellingPlanPricingPolicyAdjustmentType;
  
  /**
   * Price adjustment value.
   */
  adjustmentValue: SellingPlanPricingPolicyAdjustmentValue;
  
  /**
   * The number of cycles required before this pricing policy applies.
   */
  afterCycle: number;
  
  /**
   * The computed price after the adjustments applied.
   */
  computedPrice: MoneyV2;
}

/**
 * The type of line (line item or shipping line) on an order that the subscription discount is applicable towards.
 */
export const enum DiscountTargetType {
  
  /**
   * The discount applies onto line items.
   */
  LINE_ITEM = 'LINE_ITEM',
  
  /**
   * The discount applies onto shipping lines.
   */
  SHIPPING_LINE = 'SHIPPING_LINE'
}

/**
 * The type of the subscription discount.
 */
export const enum DiscountType {
  
  /**
   * Manual discount type.
   */
  MANUAL = 'MANUAL',
  
  /**
   * Code discount type.
   */
  CODE_DISCOUNT = 'CODE_DISCOUNT',
  
  /**
   * Automatic discount type.
   */
  AUTOMATIC_DISCOUNT = 'AUTOMATIC_DISCOUNT'
}

/**
 * The value of the discount and how it will be applied.
 */
export type SubscriptionDiscountValue =
SubscriptionDiscountFixedAmountValue |
SubscriptionDiscountPercentageValue;

/** Use this to resolve union type SubscriptionDiscountValue */
export type PossibleSubscriptionDiscountValueTypeNames =
'SubscriptionDiscountFixedAmountValue' |
'SubscriptionDiscountPercentageValue';

export interface SubscriptionDiscountValueNameMap {
  SubscriptionDiscountValue: SubscriptionDiscountValue;
  SubscriptionDiscountFixedAmountValue: SubscriptionDiscountFixedAmountValue;
  SubscriptionDiscountPercentageValue: SubscriptionDiscountPercentageValue;
}

/**
 * The value of the discount and how it will be applied.
 */
export interface SubscriptionDiscountFixedAmountValue {
  
  /**
   * The fixed amount value of the discount.
   */
  amount: MoneyV2;
  
  /**
   * Whether the amount is applied per item.
   */
  appliesOnEachItem: boolean;
}

/**
 * The percentage value of the discount.
 */
export interface SubscriptionDiscountPercentageValue {
  
  /**
   * The percentage value of the discount.
   */
  percentage: number;
}

/**
 * An auto-generated type for paginating through multiple Orders.
 * 
 */
export interface OrderConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<OrderEdge>;
  
  /**
   * A list of the nodes contained in OrderEdge.
   */
  nodes: Array<Order>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Order and a cursor during pagination.
 * 
 */
export interface OrderEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of OrderEdge.
   */
  node: Order;
}

/**
 * An auto-generated type for paginating through multiple SubscriptionBillingAttempts.
 * 
 */
export interface SubscriptionBillingAttemptConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<SubscriptionBillingAttemptEdge>;
  
  /**
   * A list of the nodes contained in SubscriptionBillingAttemptEdge.
   */
  nodes: Array<SubscriptionBillingAttempt>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.
 * 
 */
export interface SubscriptionBillingAttemptEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of SubscriptionBillingAttemptEdge.
   */
  node: SubscriptionBillingAttempt;
}

/**
 * A record of an execution of the subscription billing process. Billing attempts use
 * idempotency keys to avoid duplicate order creation. A successful billing attempt
 * will create an order.
 * 
 */
export interface SubscriptionBillingAttempt extends Node {
  
  /**
   * The date and time when the billing attempt was completed.
   */
  completedAt?: DateTime;
  
  /**
   * The date and time when the billing attempt was created.
   */
  createdAt: DateTime;
  
  /**
   * A code corresponding to a payment error during processing.
   */
  errorCode?: SubscriptionBillingAttemptErrorCode;
  
  /**
   * A message describing a payment error during processing.
   */
  errorMessage?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * A unique key generated by the client to avoid duplicate payments.
   */
  idempotencyKey: string;
  
  /**
   * The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
   * 
   */
  nextActionUrl?: URL;
  
  /**
   * The result of this billing attempt if completed successfully.
   */
  order?: Order;
  
  /**
   * The date and time used to calculate fulfillment intervals for a billing attempt that
   * successfully completed after the current anchor date. To prevent fulfillment from being
   * pushed to the next anchor date, this field can override the billing attempt date.
   * 
   */
  originTime?: DateTime;
  
  /**
   * Whether the billing attempt is still processing.
   */
  ready: boolean;
  
  /**
   * The subscription contract.
   */
  subscriptionContract: SubscriptionContract;
}

/**
 * The possible error codes associated with making billing attempts. The error codes supplement the
 * `error_message` to provide consistent results and help with dunning management.
 * 
 */
export const enum SubscriptionBillingAttemptErrorCode {
  
  /**
   * Payment method was not found.
   * 
   */
  PAYMENT_METHOD_NOT_FOUND = 'PAYMENT_METHOD_NOT_FOUND',
  
  /**
   * Payment provider is not enabled.
   * 
   */
  PAYMENT_PROVIDER_IS_NOT_ENABLED = 'PAYMENT_PROVIDER_IS_NOT_ENABLED',
  
  /**
   * Payment method is invalid. Please update or create a new payment method.
   * 
   */
  INVALID_PAYMENT_METHOD = 'INVALID_PAYMENT_METHOD',
  
  /**
   * There was an unexpected error during the billing attempt.
   * 
   */
  UNEXPECTED_ERROR = 'UNEXPECTED_ERROR',
  
  /**
   * Payment method is expired.
   * 
   */
  EXPIRED_PAYMENT_METHOD = 'EXPIRED_PAYMENT_METHOD',
  
  /**
   * Payment method was declined by processor.
   * 
   */
  PAYMENT_METHOD_DECLINED = 'PAYMENT_METHOD_DECLINED',
  
  /**
   * There was an error during the authentication.
   * 
   */
  AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR',
  
  /**
   * Gateway is in test mode and attempted to bill a live payment method.
   * 
   */
  TEST_MODE = 'TEST_MODE',
  
  /**
   * Payment method was canceled by buyer.
   */
  BUYER_CANCELED_PAYMENT_METHOD = 'BUYER_CANCELED_PAYMENT_METHOD',
  
  /**
   * Customer was not found.
   */
  CUSTOMER_NOT_FOUND = 'CUSTOMER_NOT_FOUND',
  
  /**
   * Customer is invalid.
   */
  CUSTOMER_INVALID = 'CUSTOMER_INVALID',
  
  /**
   * The shipping address is either missing or invalid.
   */
  INVALID_SHIPPING_ADDRESS = 'INVALID_SHIPPING_ADDRESS',
  
  /**
   * The billing agreement ID or the transaction ID for the customer's payment method is invalid.
   */
  INVALID_CUSTOMER_BILLING_AGREEMENT = 'INVALID_CUSTOMER_BILLING_AGREEMENT',
  
  /**
   * A payment has already been made for this invoice.
   */
  INVOICE_ALREADY_PAID = 'INVOICE_ALREADY_PAID',
  
  /**
   * Payment method cannot be used with the current payment gateway test mode configuration.
   */
  PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG = 'PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG',
  
  /**
   * The amount is too small.
   */
  AMOUNT_TOO_SMALL = 'AMOUNT_TOO_SMALL',
  
  /**
   * No inventory location found or enabled.
   */
  INVENTORY_ALLOCATIONS_NOT_FOUND = 'INVENTORY_ALLOCATIONS_NOT_FOUND',
  
  /**
   * Transient error, try again later.
   */
  TRANSIENT_ERROR = 'TRANSIENT_ERROR'
}

/**
 * Represents a Subscription Billing Policy.
 */
export interface SubscriptionBillingPolicy {
  
  /**
   * Specific anchor dates upon which the billing interval calculations should be made.
   */
  anchors: Array<SellingPlanAnchor>;
  
  /**
   * The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).
   */
  interval: SellingPlanInterval;
  
  /**
   * The number of billing intervals between invoices.
   */
  intervalCount: number;
  
  /**
   * Maximum amount of cycles after which the subscription ends.
   */
  maxCycles?: number;
  
  /**
   * Minimum amount of cycles required in the subscription.
   */
  minCycles?: number;
}

/**
 * Represents a Subscription Delivery Policy.
 */
export interface SubscriptionDeliveryPolicy {
  
  /**
   * The specific anchor dates upon which the delivery interval calculations should be made.
   */
  anchors: Array<SellingPlanAnchor>;
  
  /**
   * The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).
   */
  interval: SellingPlanInterval;
  
  /**
   * The number of delivery intervals between deliveries.
   */
  intervalCount: number;
}

/**
 * The possible status values of the last payment on a subscription contract.
 */
export const enum SubscriptionContractLastPaymentStatus {
  
  /**
   * Successful subscription billing attempt.
   */
  SUCCEEDED = 'SUCCEEDED',
  
  /**
   * Failed subscription billing attempt.
   */
  FAILED = 'FAILED'
}

/**
 * The possible status values of a subscription.
 */
export const enum SubscriptionContractSubscriptionStatus {
  
  /**
   * The contract is active and continuing per its policies.
   */
  ACTIVE = 'ACTIVE',
  
  /**
   * The contract is temporarily paused and is expected to resume in the future.
   */
  PAUSED = 'PAUSED',
  
  /**
   * The contract was ended by an unplanned customer action.
   */
  CANCELLED = 'CANCELLED',
  
  /**
   * The contract has ended per the expected circumstances. All billing and deliverycycles of the subscriptions were executed.
   */
  EXPIRED = 'EXPIRED',
  
  /**
   * The contract ended because billing failed and no further billing attempts are expected.
   */
  FAILED = 'FAILED'
}

/**
 * An amount that's allocated to a line based on an associated discount application.
 */
export interface DiscountAllocation {
  
  /**
   * The money amount that's allocated to a line based on the associated discount application.
   * @deprecated Use `allocatedAmountSet` instead.
   */
  allocatedAmount: MoneyV2;
  
  /**
   * The money amount that's allocated to a line based on the associated discount application in shop and presentment currencies.
   */
  allocatedAmountSet: MoneyBag;
  
  /**
   * The discount application that the allocated amount originated from.
   */
  discountApplication: DiscountApplication;
}

/**
 * The duty details for a line item.
 */
export interface Duty extends Node {
  
  /**
   * The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
   */
  countryCodeOfOrigin?: CountryCode;
  
  /**
   * The harmonized system code of the item used in calculating the duty.
   */
  harmonizedSystemCode?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The amount of the duty.
   */
  price: MoneyBag;
  
  /**
   * A list of taxes charged on the duty.
   */
  taxLines: Array<TaxLine>;
}

/**
 * A line item group (bundle) to which a line item belongs to.
 */
export interface LineItemGroup {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Quantity of the line item group on the order.
   */
  quantity: number;
  
  /**
   * Title of the line item group.
   */
  title: string;
  
  /**
   * ID of the variant of the line item group.
   */
  variantId?: string;
  
  /**
   * SKU of the variant of the line item group.
   */
  variantSku?: string;
}

/**
 * Represents the selling plan for a line item.
 */
export interface LineItemSellingPlan {
  
  /**
   * The name of the selling plan for display purposes.
   */
  name: string;
  
  /**
   * The ID of the selling plan associated with the line item.
   */
  sellingPlanId?: string;
}

/**
 * The record of the line items and transactions that were refunded to a customer, along with restocking instructions for refunded line items.
 */
export interface Refund extends LegacyInteroperability, Node {
  
  /**
   * The date and time when the refund was created.
   */
  createdAt?: DateTime;
  
  /**
   * A list of the refunded duties as part of this refund.
   */
  duties?: Array<RefundDuty>;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The ID of the corresponding resource in the REST Admin API.
   */
  legacyResourceId: UnsignedInt64;
  
  /**
   * The optional note associated with the refund.
   */
  note?: string;
  
  /**
   * The order associated with the refund.
   */
  order: Order;
  
  /**
   * The `RefundLineItem` resources attached to the refund.
   */
  refundLineItems: RefundLineItemConnection;
  
  /**
   * The return associated with the refund.
   */
  return?: Return;
  
  /**
   * The staff member who created the refund.
   */
  staffMember?: StaffMember;
  
  /**
   * The total amount across all transactions for the refund.
   * @deprecated Use `totalRefundedSet` instead.
   */
  totalRefunded: MoneyV2;
  
  /**
   * The total amount across all transactions for the refund, in shop and presentment currencies.
   */
  totalRefundedSet: MoneyBag;
  
  /**
   * The transactions associated with the refund.
   */
  transactions: OrderTransactionConnection;
  
  /**
   * The date and time when the refund was updated.
   */
  updatedAt: DateTime;
}

/**
 * Represents a refunded duty.
 */
export interface RefundDuty {
  
  /**
   * The amount of a refunded duty in shop and presentment currencies.
   */
  amountSet: MoneyBag;
  
  /**
   * The duty associated with this refunded duty.
   */
  originalDuty?: Duty;
}

/**
 * An auto-generated type for paginating through multiple RefundLineItems.
 * 
 */
export interface RefundLineItemConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<RefundLineItemEdge>;
  
  /**
   * A list of the nodes contained in RefundLineItemEdge.
   */
  nodes: Array<RefundLineItem>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one RefundLineItem and a cursor during pagination.
 * 
 */
export interface RefundLineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of RefundLineItemEdge.
   */
  node: RefundLineItem;
}

/**
 * A line item that's included in a refund.
 */
export interface RefundLineItem {
  
  /**
   * The `LineItem` resource associated to the refunded line item.
   */
  lineItem: LineItem;
  
  /**
   * The inventory restock location.
   */
  location?: Location;
  
  /**
   * The price of a refunded line item.
   * @deprecated Use `priceSet` instead.
   */
  price: Money;
  
  /**
   * The price of a refunded line item in shop and presentment currencies.
   */
  priceSet: MoneyBag;
  
  /**
   * The quantity of a refunded line item.
   */
  quantity: number;
  
  /**
   * The type of restock for the refunded line item.
   */
  restockType: RefundLineItemRestockType;
  
  /**
   * Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
   */
  restocked: boolean;
  
  /**
   * The subtotal price of a refunded line item.
   * @deprecated Use `subtotalSet` instead.
   */
  subtotal: Money;
  
  /**
   * The subtotal price of a refunded line item in shop and presentment currencies.
   */
  subtotalSet: MoneyBag;
  
  /**
   * The total tax charged on a refunded line item.
   * @deprecated Use `totalTaxSet` instead.
   */
  totalTax: Money;
  
  /**
   * The total tax charged on a refunded line item in shop and presentment currencies.
   */
  totalTaxSet: MoneyBag;
}

/**
 * The type of restock performed for a particular refund line item.
 */
export const enum RefundLineItemRestockType {
  
  /**
   * The refund line item was returned. Use this when restocking line items that were fulfilled.
   */
  RETURN = 'RETURN',
  
  /**
   * The refund line item was canceled. Use this when restocking unfulfilled line items.
   */
  CANCEL = 'CANCEL',
  
  /**
   * Deprecated. The refund line item was restocked, without specifically beingidentified as a return or cancelation. This value is not accepted when creating new refunds.
   */
  LEGACY_RESTOCK = 'LEGACY_RESTOCK',
  
  /**
   * Refund line item was not restocked.
   */
  NO_RESTOCK = 'NO_RESTOCK'
}

/**
 * Represents a return.
 */
export interface Return extends Node {
  
  /**
   * Additional information about the declined return.
   */
  decline?: ReturnDecline;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The name of the return.
   */
  name: string;
  
  /**
   * The order that the return belongs to.
   */
  order: Order;
  
  /**
   * The list of refunds associated with the return.
   */
  refunds: RefundConnection;
  
  /**
   * The return line items attached to the return.
   */
  returnLineItems: ReturnLineItemConnection;
  
  /**
   * The list of reverse fulfillment orders for the return.
   */
  reverseFulfillmentOrders: ReverseFulfillmentOrderConnection;
  
  /**
   * The status of the return.
   */
  status: ReturnStatus;
  
  /**
   * A suggested refund for the return.
   */
  suggestedRefund?: SuggestedReturnRefund;
  
  /**
   * The sum of all return line item quantities for the return.
   */
  totalQuantity: number;
}

/**
 * Additional information about why a merchant declined the customer's return request.
 */
export interface ReturnDecline {
  
  /**
   * The notification message sent to the customer about their declined return request.
   * Maximum length: 500 characters.
   * 
   */
  note?: string;
  
  /**
   * The reason the customer's return request was declined.
   */
  reason: ReturnDeclineReason;
}

/**
 * The reason why the merchant declined a customer's return request.
 */
export const enum ReturnDeclineReason {
  
  /**
   * The return period has ended.
   */
  RETURN_PERIOD_ENDED = 'RETURN_PERIOD_ENDED',
  
  /**
   * The return contains final sale items.
   */
  FINAL_SALE = 'FINAL_SALE',
  
  /**
   * The return is declined for another reason.
   */
  OTHER = 'OTHER'
}

/**
 * An auto-generated type for paginating through multiple Refunds.
 * 
 */
export interface RefundConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<RefundEdge>;
  
  /**
   * A list of the nodes contained in RefundEdge.
   */
  nodes: Array<Refund>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one Refund and a cursor during pagination.
 * 
 */
export interface RefundEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of RefundEdge.
   */
  node: Refund;
}

/**
 * An auto-generated type for paginating through multiple ReturnLineItems.
 * 
 */
export interface ReturnLineItemConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ReturnLineItemEdge>;
  
  /**
   * A list of the nodes contained in ReturnLineItemEdge.
   */
  nodes: Array<ReturnLineItem>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ReturnLineItem and a cursor during pagination.
 * 
 */
export interface ReturnLineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ReturnLineItemEdge.
   */
  node: ReturnLineItem;
}

/**
 * A return line item.
 */
export interface ReturnLineItem extends Node {
  
  /**
   * A note from the customer that describes the item to be returned. Maximum length: 300 characters.
   */
  customerNote?: string;
  
  /**
   * The fulfillment line item from which items are returned.
   */
  fulfillmentLineItem: FulfillmentLineItem;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The quantity being returned.
   */
  quantity: number;
  
  /**
   * The quantity that can be refunded.
   */
  refundableQuantity: number;
  
  /**
   * The quantity that was refunded.
   */
  refundedQuantity: number;
  
  /**
   * The reason for returning the item.
   */
  returnReason: ReturnReason;
  
  /**
   * Additional information about the reason for the return. Maximum length: 255 characters.
   */
  returnReasonNote: string;
  
  /**
   * The total weight of the item.
   */
  totalWeight?: Weight;
  
  /**
   * The total line price after all discounts on the line item, including both line item level discounts and code-based line item discounts, are applied.
   */
  withCodeDiscountedTotalPriceSet: MoneyBag;
}

/**
 * Represents a line item from an order that's included in a fulfillment.
 */
export interface FulfillmentLineItem extends Node {
  
  /**
   * The total price after discounts are applied.
   * @deprecated Use `discountedTotalSet` instead.
   */
  discountedTotal: Money;
  
  /**
   * The total price after discounts are applied in shop and presentment currencies.
   */
  discountedTotalSet: MoneyBag;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The associated order's line item.
   */
  lineItem: LineItem;
  
  /**
   * The total price before discounts are applied.
   * @deprecated Use `originalTotalSet` instead.
   */
  originalTotal: Money;
  
  /**
   * The total price before discounts are applied in shop and presentment currencies.
   */
  originalTotalSet: MoneyBag;
  
  /**
   * Number of line items in the fulfillment.
   */
  quantity?: number;
}

/**
 * The reason for returning the return line item.
 */
export const enum ReturnReason {
  
  /**
   * The item is returned because the size was too small.
   */
  SIZE_TOO_SMALL = 'SIZE_TOO_SMALL',
  
  /**
   * The item is returned because the size was too large.
   */
  SIZE_TOO_LARGE = 'SIZE_TOO_LARGE',
  
  /**
   * The item is returned because the customer changed their mind.
   */
  UNWANTED = 'UNWANTED',
  
  /**
   * The item is returned because it was not as described.
   */
  NOT_AS_DESCRIBED = 'NOT_AS_DESCRIBED',
  
  /**
   * The item is returned because the customer received the wrong one.
   */
  WRONG_ITEM = 'WRONG_ITEM',
  
  /**
   * The item is returned because it is damaged or defective.
   */
  DEFECTIVE = 'DEFECTIVE',
  
  /**
   * The item is returned because the buyer did not like the style.
   */
  STYLE = 'STYLE',
  
  /**
   * The item is returned because the buyer did not like the color.
   */
  COLOR = 'COLOR',
  
  /**
   * The item is returned for another reason. For this value, a return reason note is also provided.
   */
  OTHER = 'OTHER',
  
  /**
   * The item is returned because of an unknown reason.
   */
  UNKNOWN = 'UNKNOWN'
}

/**
 * An auto-generated type for paginating through multiple ReverseFulfillmentOrders.
 * 
 */
export interface ReverseFulfillmentOrderConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ReverseFulfillmentOrderEdge>;
  
  /**
   * A list of the nodes contained in ReverseFulfillmentOrderEdge.
   */
  nodes: Array<ReverseFulfillmentOrder>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ReverseFulfillmentOrder and a cursor during pagination.
 * 
 */
export interface ReverseFulfillmentOrderEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ReverseFulfillmentOrderEdge.
   */
  node: ReverseFulfillmentOrder;
}

/**
 * A group of one or more items in a return that will be processed at a fulfillment service.
 * There can be more than one reverse fulfillment order for a return at a given location.
 * 
 */
export interface ReverseFulfillmentOrder extends Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The list of reverse fulfillment order line items for the reverse fulfillment order.
   */
  lineItems: ReverseFulfillmentOrderLineItemConnection;
  
  /**
   * The order associated with the reverse fulfillment order.
   */
  order: Order;
  
  /**
   * The list of reverse deliveries for the reverse fulfillment order.
   */
  reverseDeliveries: ReverseDeliveryConnection;
  
  /**
   * The status of the reverse fulfillment order.
   */
  status: ReverseFulfillmentOrderStatus;
  
  /**
   * The current confirmation for the reverse fulfillment order from a third-party logistics service. 
   * If no third-party service is involved, then this value is `nil`.
   * 
   */
  thirdPartyConfirmation?: ReverseFulfillmentOrderThirdPartyConfirmation;
}

/**
 * An auto-generated type for paginating through multiple ReverseFulfillmentOrderLineItems.
 * 
 */
export interface ReverseFulfillmentOrderLineItemConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ReverseFulfillmentOrderLineItemEdge>;
  
  /**
   * A list of the nodes contained in ReverseFulfillmentOrderLineItemEdge.
   */
  nodes: Array<ReverseFulfillmentOrderLineItem>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ReverseFulfillmentOrderLineItem and a cursor during pagination.
 * 
 */
export interface ReverseFulfillmentOrderLineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ReverseFulfillmentOrderLineItemEdge.
   */
  node: ReverseFulfillmentOrderLineItem;
}

/**
 * The details about a reverse fulfillment order line item.
 * 
 */
export interface ReverseFulfillmentOrderLineItem extends Node {
  
  /**
   * The dispositions of the item.
   */
  dispositions: Array<ReverseFulfillmentOrderDisposition>;
  
  /**
   * The corresponding fulfillment line item for a reverse fulfillment order line item.
   */
  fulfillmentLineItem: FulfillmentLineItem;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The total number of units to be processed.
   */
  totalQuantity: number;
}

/**
 * The details of the arrangement of an item.
 */
export interface ReverseFulfillmentOrderDisposition extends Node {
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The location where the disposition occurred.
   */
  location?: Location;
  
  /**
   * The number of disposed units.
   */
  quantity: number;
  
  /**
   * The final arrangement of an item.
   */
  type: ReverseFulfillmentOrderDispositionType;
}

/**
 * The final arrangement of an item from a reverse fulfillment order.
 */
export const enum ReverseFulfillmentOrderDispositionType {
  
  /**
   * An item that was restocked.
   */
  RESTOCKED = 'RESTOCKED',
  
  /**
   * An item that requires further processing before being restocked or discarded.
   */
  PROCESSING_REQUIRED = 'PROCESSING_REQUIRED',
  
  /**
   * An item that wasn't restocked.
   */
  NOT_RESTOCKED = 'NOT_RESTOCKED',
  
  /**
   * An item that was expected but absent.
   */
  MISSING = 'MISSING'
}

/**
 * An auto-generated type for paginating through multiple ReverseDeliveries.
 * 
 */
export interface ReverseDeliveryConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ReverseDeliveryEdge>;
  
  /**
   * A list of the nodes contained in ReverseDeliveryEdge.
   */
  nodes: Array<ReverseDelivery>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ReverseDelivery and a cursor during pagination.
 * 
 */
export interface ReverseDeliveryEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ReverseDeliveryEdge.
   */
  node: ReverseDelivery;
}

/**
 * A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.
 * For example, a buyer requests a return, and a merchant sends the buyer a shipping label.
 * The reverse delivery contains the context of the items sent back, how they're being sent back
 * (for example, a shipping label), and the current state of the delivery (tracking information).
 * 
 */
export interface ReverseDelivery extends Node {
  
  /**
   * The deliverable associated with the reverse delivery.
   */
  deliverable?: ReverseDeliveryDeliverable;
  
  /**
   * The ID of the reverse delivery.
   */
  id: string;
  
  /**
   * The reverse delivery line items attached to the reverse delivery.
   */
  reverseDeliveryLineItems: ReverseDeliveryLineItemConnection;
  
  /**
   * The `ReverseFulfillmentOrder` associated with the reverse delivery.
   */
  reverseFulfillmentOrder: ReverseFulfillmentOrder;
}

/**
 * The delivery method and artifacts associated with a reverse delivery.
 */
export type ReverseDeliveryDeliverable = ReverseDeliveryShippingDeliverable;

/** Use this to resolve union type ReverseDeliveryDeliverable */
export type PossibleReverseDeliveryDeliverableTypeNames =
'ReverseDeliveryShippingDeliverable';

export interface ReverseDeliveryDeliverableNameMap {
  ReverseDeliveryDeliverable: ReverseDeliveryDeliverable;
  ReverseDeliveryShippingDeliverable: ReverseDeliveryShippingDeliverable;
}

/**
 * A reverse shipping deliverable that may include a label and tracking information.
 */
export interface ReverseDeliveryShippingDeliverable {
  
  /**
   * The return label attached to the reverse delivery.
   */
  label?: ReverseDeliveryLabelV2;
  
  /**
   * The information to track the reverse delivery.
   */
  tracking?: ReverseDeliveryTrackingV2;
}

/**
 * The return label file information for a reverse delivery.
 */
export interface ReverseDeliveryLabelV2 {
  
  /**
   * The date and time when the reverse delivery label was created.
   */
  createdAt: DateTime;
  
  /**
   * A public link that can be used to download the label image.
   */
  publicFileUrl?: URL;
  
  /**
   * The date and time when the reverse delivery label was updated.
   */
  updatedAt: DateTime;
}

/**
 * Represents the information used to track a reverse delivery.
 */
export interface ReverseDeliveryTrackingV2 {
  
  /**
   * The provider of the tracking information, in a human-readable format for display purposes.
   */
  carrierName?: string;
  
  /**
   * The identifier used by the courier to identify the shipment.
   */
  number?: string;
  
  /**
   * The URL to track a shipment.
   */
  url?: URL;
}

/**
 * An auto-generated type for paginating through multiple ReverseDeliveryLineItems.
 * 
 */
export interface ReverseDeliveryLineItemConnection {
  
  /**
   * A list of edges.
   */
  edges: Array<ReverseDeliveryLineItemEdge>;
  
  /**
   * A list of the nodes contained in ReverseDeliveryLineItemEdge.
   */
  nodes: Array<ReverseDeliveryLineItem>;
  
  /**
   * Information to aid in pagination.
   */
  pageInfo: PageInfo;
}

/**
 * An auto-generated type which holds one ReverseDeliveryLineItem and a cursor during pagination.
 * 
 */
export interface ReverseDeliveryLineItemEdge {
  
  /**
   * A cursor for use in pagination.
   */
  cursor: string;
  
  /**
   * The item at the end of ReverseDeliveryLineItemEdge.
   */
  node: ReverseDeliveryLineItem;
}

/**
 * The details about a reverse delivery line item.
 */
export interface ReverseDeliveryLineItem extends Node {
  
  /**
   * The dispositions of the item.
   */
  dispositions: Array<ReverseFulfillmentOrderDisposition>;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The expected number of units.
   */
  quantity: number;
  
  /**
   * The corresponding reverse fulfillment order line item.
   */
  reverseFulfillmentOrderLineItem: ReverseFulfillmentOrderLineItem;
}

/**
 * The status of a reverse fulfillment order.
 */
export const enum ReverseFulfillmentOrderStatus {
  
  /**
   * The reverse fulfillment order has been canceled.
   */
  CANCELED = 'CANCELED',
  
  /**
   * The reverse fulfillment order has been completed.
   */
  CLOSED = 'CLOSED',
  
  /**
   * The reverse fulfillment order is in progress.
   */
  OPEN = 'OPEN'
}

/**
 * The third-party confirmation of a reverse fulfillment order.
 */
export interface ReverseFulfillmentOrderThirdPartyConfirmation {
  
  /**
   * The status of the reverse fulfillment order third-party confirmation.
   */
  status: ReverseFulfillmentOrderThirdPartyConfirmationStatus;
}

/**
 * The status of a reverse fulfillment order third-party confirmation.
 */
export const enum ReverseFulfillmentOrderThirdPartyConfirmationStatus {
  
  /**
   * The reverse fulfillment order was accepted by the fulfillment service.
   */
  ACCEPTED = 'ACCEPTED',
  
  /**
   * The reverse fulfillment order cancelation was accepted by the fulfillment service.
   */
  CANCEL_ACCEPTED = 'CANCEL_ACCEPTED',
  
  /**
   * The reverse fulfillment order cancelation was rejected by the fulfillment service.
   */
  CANCEL_REJECTED = 'CANCEL_REJECTED',
  
  /**
   * The reverse fulfillment order is awaiting acceptance by the fulfillment service.
   */
  PENDING_ACCEPTANCE = 'PENDING_ACCEPTANCE',
  
  /**
   * The reverse fulfillment order is awaiting cancelation by the fulfillment service.
   */
  PENDING_CANCELATION = 'PENDING_CANCELATION',
  
  /**
   * The reverse fulfillment order was rejected by the fulfillment service.
   */
  REJECTED = 'REJECTED'
}

/**
 * The status of a return.
 */
export const enum ReturnStatus {
  
  /**
   * The return has been canceled.
   */
  CANCELED = 'CANCELED',
  
  /**
   * The return has been completed.
   */
  CLOSED = 'CLOSED',
  
  /**
   * The return is in progress.
   */
  OPEN = 'OPEN',
  
  /**
   * The return was requested.
   */
  REQUESTED = 'REQUESTED',
  
  /**
   * The return was declined.
   */
  DECLINED = 'DECLINED'
}

/**
 * The input fields for a return refund line item.
 */
export interface ReturnRefundLineItemInput {
  
  /**
   * The ID of the return line item to be refunded.
   */
  returnLineItemId: string;
  
  /**
   * The quantity of the return line item to be refunded.
   */
  quantity: number;
}

/**
 * The input fields for the shipping cost to refund.
 */
export interface RefundShippingInput {
  
  /**
   * The input fields required to refund shipping cost, in the presentment currency of the order.
   * This overrides the `fullRefund` argument.
   * 
   */
  shippingRefundAmount?: MoneyInput;
  
  /**
   * Whether to refund the full shipping amount.
   */
  fullRefund?: boolean;
}

/**
 * The input fields for a monetary value with currency.
 */
export interface MoneyInput {
  
  /**
   * Decimal money amount.
   */
  amount: Decimal;
  
  /**
   * Currency of the money.
   */
  currencyCode: CurrencyCode;
}

/**
 * The input fields required to reimburse duties on a refund.
 */
export interface RefundDutyInput {
  
  /**
   * The ID of the duty in the refund.
   */
  dutyId: string;
  
  /**
   * The type of refund for this duty.
   */
  refundType?: RefundDutyRefundType;
}

/**
 * The type of refund to perform for a particular refund duty.
 */
export const enum RefundDutyRefundType {
  
  /**
   * The duty is proportionally refunded based on the quantity of the refunded line item.
   */
  PROPORTIONAL = 'PROPORTIONAL',
  
  /**
   * The duty is fully refunded.
   */
  FULL = 'FULL'
}

/**
 * Represents a return refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund for the return.
 */
export interface SuggestedReturnRefund {
  
  /**
   * The total monetary value to be refunded in shop and presentment currencies.
   */
  amount: MoneyBag;
  
  /**
   * The sum of all the discounted prices of the line items being refunded.
   */
  discountedSubtotal: MoneyBag;
  
  /**
   * The total monetary value available to refund in shop and presentment currencies.
   */
  maximumRefundable: MoneyBag;
  
  /**
   * A list of duties to be refunded from the order.
   */
  refundDuties: Array<RefundDuty>;
  
  /**
   * The shipping costs to be refunded from the order.
   */
  shipping: ShippingRefund;
  
  /**
   * The sum of all the prices of the line items being refunded in shop and presentment currencies.
   */
  subtotal: MoneyBag;
  
  /**
   * A list of suggested order transactions.
   */
  suggestedTransactions: Array<SuggestedOrderTransaction>;
  
  /**
   * The total cart discount amount that was applied to all line items in this refund.
   */
  totalCartDiscountAmount: MoneyBag;
  
  /**
   * The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
   */
  totalDuties: MoneyBag;
  
  /**
   * The sum of the taxes being refunded in shop and presentment currencies. The value must be positive.
   */
  totalTax: MoneyBag;
}

/**
 * Represents the shipping costs refunded on the Refund.
 */
export interface ShippingRefund {
  
  /**
   * The monetary value of the shipping fees to be refunded.
   * @deprecated Use `amountSet` instead.
   */
  amount: Money;
  
  /**
   * The monetary value of the shipping fees to be refunded in shop and presentment currencies.
   */
  amountSet: MoneyBag;
  
  /**
   * The maximum amount of shipping fees currently refundable.
   * @deprecated Use `maximumRefundableSet` instead.
   */
  maximumRefundable: Money;
  
  /**
   * The maximum amount of shipping fees currently refundable in shop and presentment currencies.
   */
  maximumRefundableSet: MoneyBag;
  
  /**
   * The monetary value of the tax allocated to shipping fees to be refunded.
   * @deprecated Use `taxSet` instead.
   */
  tax: Money;
  
  /**
   * The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.
   */
  taxSet: MoneyBag;
}

/**
 * A suggested transaction. Suggested transaction are usually used in the context of refunds
 * and exchanges.
 * 
 */
export interface SuggestedOrderTransaction {
  
  /**
   * The masked account number associated with the payment method.
   */
  accountNumber?: string;
  
  /**
   * The amount of the transaction.
   * @deprecated Use `amountSet` instead.
   */
  amount: Money;
  
  /**
   * The amount and currency of the suggested order transaction in shop and presentment currencies.
   */
  amountSet: MoneyBag;
  
  /**
   * The human-readable payment gateway name suggested to process the transaction.
   */
  formattedGateway?: string;
  
  /**
   * The suggested payment gateway used to process the transaction.
   */
  gateway?: string;
  
  /**
   * Specifies the kind of the suggested order transaction.
   */
  kind: SuggestedOrderTransactionKind;
  
  /**
   * Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
   * @deprecated Use `maximumRefundableSet` instead.
   */
  maximumRefundable?: Money;
  
  /**
   * Specifies the available amount to refund on the gateway in shop and presentment currencies. Only available within SuggestedRefund.
   */
  maximumRefundableSet?: MoneyBag;
  
  /**
   * The associated parent transaction, for example the authorization of a capture.
   */
  parentTransaction?: OrderTransaction;
  
  /**
   * The associated payment details related to the transaction.
   */
  paymentDetails?: PaymentDetails;
}

/**
 * Specifies the kind of the suggested order transaction.
 */
export const enum SuggestedOrderTransactionKind {
  
  /**
   * A suggested refund transaction for an order.
   */
  SUGGESTED_REFUND = 'SUGGESTED_REFUND'
}

/**
 * A payment transaction in the context of an order.
 * 
 */
export interface OrderTransaction extends Node {
  
  /**
   * The masked account number associated with the payment method.
   */
  accountNumber?: string;
  
  /**
   * The amount of money.
   * @deprecated Use `amountSet` instead.
   */
  amount: Money;
  
  /**
   * The amount and currency of the transaction in shop and presentment currencies.
   */
  amountSet: MoneyBag;
  
  /**
   * The amount and currency of the transaction.
   * @deprecated Use `amountSet` instead.
   */
  amountV2: MoneyV2;
  
  /**
   * Authorization code associated with the transaction.
   */
  authorizationCode?: string;
  
  /**
   * The time when the authorization expires. This field is available only to stores on a Shopify Plus plan and is populated only for Shopify Payments authorizations.
   * 
   */
  authorizationExpiresAt?: DateTime;
  
  /**
   * Date and time when the transaction was created.
   */
  createdAt: DateTime;
  
  /**
   * A standardized error code, independent of the payment provider.
   */
  errorCode?: OrderTransactionErrorCode;
  
  /**
   * The transaction fees charged on the order transaction. Only present for Shopify Payments transactions.
   * 
   */
  fees: Array<TransactionFee>;
  
  /**
   * The human-readable payment gateway name used to process the transaction.
   */
  formattedGateway?: string;
  
  /**
   * The payment gateway used to process the transaction.
   */
  gateway?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * The kind of transaction.
   */
  kind: OrderTransactionKind;
  
  /**
   * Whether the transaction can be manually captured.
   */
  manuallyCapturable: boolean;
  
  /**
   * Specifies the available amount to refund on the gateway.
   * This value is only available for transactions of type `SuggestedRefund`.
   * 
   * @deprecated Use `maximumRefundableV2` instead.
   */
  maximumRefundable?: Money;
  
  /**
   * Specifies the available amount with currency to refund on the gateway.
   * This value is only available for transactions of type `SuggestedRefund`.
   * 
   */
  maximumRefundableV2?: MoneyV2;
  
  /**
   * Whether the transaction can be captured multiple times.
   */
  multiCapturable: boolean;
  
  /**
   * The associated order.
   */
  order?: Order;
  
  /**
   * The associated parent transaction, for example the authorization of a capture.
   */
  parentTransaction?: OrderTransaction;
  
  /**
   * The payment details for the transaction.
   */
  paymentDetails?: PaymentDetails;
  
  /**
   * The payment icon to display for the transaction.
   */
  paymentIcon?: Image;
  
  /**
   * The payment ID associated with the transaction.
   */
  paymentId?: string;
  
  /**
   * The payment method used for the transaction. This value is `null` if the payment method is unknown.
   * @deprecated Use `paymentIcon` instead.
   */
  paymentMethod?: PaymentMethods;
  
  /**
   * Date and time when the transaction was processed.
   */
  processedAt?: DateTime;
  
  /**
   * The transaction receipt that the payment gateway attaches to the transaction.
   * The value of this field depends on which payment gateway processed the transaction.
   * 
   * @deprecated Use `receiptJson` instead.
   */
  receipt?: string;
  
  /**
   * The transaction receipt that the payment gateway attaches to the transaction.
   * The value of this field depends on which payment gateway processed the transaction.
   * 
   */
  receiptJson?: JSON;
  
  /**
   * The settlement currency.
   */
  settlementCurrency?: CurrencyCode;
  
  /**
   * The rate used when converting the transaction amount to settlement currency.
   */
  settlementCurrencyRate?: Decimal;
  
  /**
   * Contains all Shopify Payments information related to an order transaction. This field is available only to stores on a Shopify Plus plan.
   * 
   */
  shopifyPaymentsSet?: ShopifyPaymentsTransactionSet;
  
  /**
   * The status of this transaction.
   */
  status: OrderTransactionStatus;
  
  /**
   * Whether the transaction is a test transaction.
   */
  test: boolean;
  
  /**
   * Specifies the available amount to capture on the gateway.
   * Only available when an amount is capturable or manually mark as paid.
   * 
   * @deprecated Use `totalUnsettledSet` instead.
   */
  totalUnsettled?: Money;
  
  /**
   * Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
   * Only available when an amount is capturable or manually mark as paid.
   * 
   */
  totalUnsettledSet?: MoneyBag;
  
  /**
   * Specifies the available amount with currency to capture on the gateway.
   * Only available when an amount is capturable or manually mark as paid.
   * 
   * @deprecated Use `totalUnsettledSet` instead.
   */
  totalUnsettledV2?: MoneyV2;
  
  /**
   * Staff member who was logged into the Shopify POS device when the transaction was processed.
   */
  user?: StaffMember;
}

/**
 * A standardized error code, independent of the payment provider.
 */
export const enum OrderTransactionErrorCode {
  
  /**
   * The card number is incorrect.
   */
  INCORRECT_NUMBER = 'INCORRECT_NUMBER',
  
  /**
   * The format of the card number is incorrect.
   */
  INVALID_NUMBER = 'INVALID_NUMBER',
  
  /**
   * The format of the expiry date is incorrect.
   */
  INVALID_EXPIRY_DATE = 'INVALID_EXPIRY_DATE',
  
  /**
   * The format of the CVC is incorrect.
   */
  INVALID_CVC = 'INVALID_CVC',
  
  /**
   * The card is expired.
   */
  EXPIRED_CARD = 'EXPIRED_CARD',
  
  /**
   * The CVC does not match the card number.
   */
  INCORRECT_CVC = 'INCORRECT_CVC',
  
  /**
   * The ZIP or postal code does not match the card number.
   */
  INCORRECT_ZIP = 'INCORRECT_ZIP',
  
  /**
   * The address does not match the card number.
   */
  INCORRECT_ADDRESS = 'INCORRECT_ADDRESS',
  
  /**
   * The entered PIN is incorrect.
   */
  INCORRECT_PIN = 'INCORRECT_PIN',
  
  /**
   * The card was declined.
   */
  CARD_DECLINED = 'CARD_DECLINED',
  
  /**
   * There was an error while processing the payment.
   */
  PROCESSING_ERROR = 'PROCESSING_ERROR',
  
  /**
   * Call the card issuer.
   */
  CALL_ISSUER = 'CALL_ISSUER',
  
  /**
   * The card has been reported as lost or stolen, and the card issuer has requested that the merchant keep the card and call the number on the back.
   * 
   */
  PICK_UP_CARD = 'PICK_UP_CARD',
  
  /**
   * There is an error in the gateway or merchant configuration.
   */
  CONFIG_ERROR = 'CONFIG_ERROR',
  
  /**
   * A real card was used but the gateway was in test mode.
   */
  TEST_MODE_LIVE_CARD = 'TEST_MODE_LIVE_CARD',
  
  /**
   * The gateway or merchant configuration doesn't support a feature, such as network tokenization.
   */
  UNSUPPORTED_FEATURE = 'UNSUPPORTED_FEATURE',
  
  /**
   * There was an unknown error with processing the payment.
   */
  GENERIC_ERROR = 'GENERIC_ERROR',
  
  /**
   * The payment method is not available in the customer's country.
   */
  INVALID_COUNTRY = 'INVALID_COUNTRY',
  
  /**
   * The amount is either too high or too low for the provider.
   */
  INVALID_AMOUNT = 'INVALID_AMOUNT',
  
  /**
   * The payment method is momentarily unavailable.
   */
  PAYMENT_METHOD_UNAVAILABLE = 'PAYMENT_METHOD_UNAVAILABLE',
  
  /**
   * The payment method was invalid.
   */
  AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD = 'AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD',
  
  /**
   * The maximum amount has been captured.
   */
  AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED = 'AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED',
  
  /**
   * The maximum amount has been refunded.
   */
  AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED = 'AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED',
  
  /**
   * The maximum of 10 authorizations has been captured for an order.
   */
  AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED = 'AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED',
  
  /**
   * The maximum of 10 refunds has been processed for an order.
   */
  AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED = 'AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED',
  
  /**
   * The order was canceled, which canceled all open authorizations.
   */
  AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED = 'AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED',
  
  /**
   * The order was not confirmed within three hours.
   */
  AMAZON_PAYMENTS_STALE = 'AMAZON_PAYMENTS_STALE'
}

/**
 * Transaction fee related to an order transaction.
 */
export interface TransactionFee extends Node {
  
  /**
   * Amount of the fee.
   */
  amount: MoneyV2;
  
  /**
   * Flat rate charge for a transaction.
   */
  flatFee: MoneyV2;
  
  /**
   * Name of the credit card flat fee.
   */
  flatFeeName?: string;
  
  /**
   * A globally-unique ID.
   */
  id: string;
  
  /**
   * Percentage charge.
   */
  rate: Decimal;
  
  /**
   * Name of the credit card rate.
   */
  rateName?: string;
  
  /**
   * Tax amount charged on the fee.
   */
  taxAmount: MoneyV2;
  
  /**
   * Name of the type of fee.
   */
  type: string;
}

/**
 * The different kinds of order transactions.
 */
export const enum OrderTransactionKind {
  
  /**
   * An authorization and capture performed together in a single step.
   */
  SALE = 'SALE',
  
  /**
   * A transfer of the money that was reserved by an authorization.
   */
  CAPTURE = 'CAPTURE',
  
  /**
   * An amount reserved against the cardholder's funding source.
   * Money does not change hands until the authorization is captured.
   * 
   */
  AUTHORIZATION = 'AUTHORIZATION',
  
  /**
   * A cancelation of an authorization transaction.
   */
  VOID = 'VOID',
  
  /**
   * A partial or full return of captured funds to the cardholder.
   * A refund can happen only after a capture is processed.
   * 
   */
  REFUND = 'REFUND',
  
  /**
   * The money returned to the customer when they've paid too much during a cash transaction.
   * 
   */
  CHANGE = 'CHANGE',
  
  /**
   * An authorization for a payment taken with an EMV credit card reader.
   */
  EMV_AUTHORIZATION = 'EMV_AUTHORIZATION',
  
  /**
   * A suggested refund transaction that can be used to create a refund.
   */
  SUGGESTED_REFUND = 'SUGGESTED_REFUND'
}

/**
 * Payment details related to a transaction.
 */
export type PaymentDetails =
CardPaymentDetails |
ShopPayInstallmentsPaymentDetails;

/** Use this to resolve union type PaymentDetails */
export type PossiblePaymentDetailsTypeNames =
'CardPaymentDetails' |
'ShopPayInstallmentsPaymentDetails';

export interface PaymentDetailsNameMap {
  PaymentDetails: PaymentDetails;
  CardPaymentDetails: CardPaymentDetails;
  ShopPayInstallmentsPaymentDetails: ShopPayInstallmentsPaymentDetails;
}

/**
 * Card payment details related to a transaction.
 */
export interface CardPaymentDetails extends BasePaymentDetails {
  
  /**
   * The response code from the address verification system (AVS). The code is always a single letter.
   */
  avsResultCode?: string;
  
  /**
   * The issuer identification number (IIN), formerly known as bank identification number (BIN) of the customer's credit card. This is made up of the first few digits of the credit card number.
   */
  bin?: string;
  
  /**
   * The name of the company that issued the customer's credit card.
   */
  company?: string;
  
  /**
   * The response code from the credit card company indicating whether the customer entered the card security code, or card verification value, correctly. The code is a single letter or empty string.
   */
  cvvResultCode?: string;
  
  /**
   * The month in which the used credit card expires.
   */
  expirationMonth?: number;
  
  /**
   * The year in which the used credit card expires.
   */
  expirationYear?: number;
  
  /**
   * The holder of the credit card.
   */
  name?: string;
  
  /**
   * The customer's credit card number, with most of the leading digits redacted.
   */
  number?: string;
  
  /**
   * The name of payment method used by the buyer.
   */
  paymentMethodName?: string;
  
  /**
   * Digital wallet used for the payment.
   */
  wallet?: DigitalWallet;
}

/**
 * Generic payment details that are related to a transaction.
 */
export interface BasePaymentDetails {
  
  /**
   * The name of payment method used by the buyer.
   */
  paymentMethodName?: string;
}

/** Use this to resolve interface type BasePaymentDetails */
export type PossibleBasePaymentDetailsTypeNames =
'CardPaymentDetails' |
'ShopPayInstallmentsPaymentDetails';

export interface BasePaymentDetailsNameMap {
  BasePaymentDetails: BasePaymentDetails;
  CardPaymentDetails: CardPaymentDetails;
  ShopPayInstallmentsPaymentDetails: ShopPayInstallmentsPaymentDetails;
}

/**
 * Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
 */
export const enum DigitalWallet {
  
  /**
   * Apple Pay.
   */
  APPLE_PAY = 'APPLE_PAY',
  
  /**
   * Android Pay.
   */
  ANDROID_PAY = 'ANDROID_PAY',
  
  /**
   * Google Pay.
   */
  GOOGLE_PAY = 'GOOGLE_PAY',
  
  /**
   * Shopify Pay.
   */
  SHOPIFY_PAY = 'SHOPIFY_PAY'
}

/**
 * Shop Pay Installments payment details related to a transaction.
 */
export interface ShopPayInstallmentsPaymentDetails extends BasePaymentDetails {
  
  /**
   * The name of payment method used by the buyer.
   */
  paymentMethodName?: string;
}

/**
 * Some of the payment methods used in Shopify.
 */
export const enum PaymentMethods {
  VISA = 'VISA',
  MASTERCARD = 'MASTERCARD',
  DISCOVER = 'DISCOVER',
  AMERICAN_EXPRESS = 'AMERICAN_EXPRESS',
  DINERS_CLUB = 'DINERS_CLUB',
  JCB = 'JCB',
  
  /**
   * The payment method for UnionPay payment.
   */
  UNIONPAY = 'UNIONPAY',
  
  /**
   * The payment method for Elo payment.
   */
  ELO = 'ELO',
  DANKORT = 'DANKORT',
  MAESTRO = 'MAESTRO',
  FORBRUGSFORENINGEN = 'FORBRUGSFORENINGEN',
  PAYPAL = 'PAYPAL',
  BOGUS = 'BOGUS',
  BITCOIN = 'BITCOIN',
  LITECOIN = 'LITECOIN',
  DOGECOIN = 'DOGECOIN',
  
  /**
   * The payment method for Interac payment.
   */
  INTERAC = 'INTERAC',
  
  /**
   * The payment method for eftpos_au payment.
   */
  EFTPOS = 'EFTPOS'
}

/**
 * A [JSON](https://www.json.org/json-en.html) object.
 * 
 * Example value:
 * `{
   *   "product": {
     *     "id": "gid://shopify/Product/1346443542550",
     *     "title": "White T-shirt",
     *     "options": [{
       *       "name": "Size",
       *       "values": ["M", "L"]
       *     }]
     *   }
     * }`
     * 
     */
    export type JSON = any;
    
    /**
     * Presents all Shopify Payments specific information related to an order transaction.
     */
    export interface ShopifyPaymentsTransactionSet {
      
      /**
       * Contains all fields related to an extended authorization.
       * 
       */
      extendedAuthorizationSet?: ShopifyPaymentsExtendedAuthorization;
      
      /**
       * Contains all fields related to a refund.
       * 
       */
      refundSet?: ShopifyPaymentsRefundSet;
    }
    
    /**
     * Presents all Shopify Payments information related to an extended authorization.
     */
    export interface ShopifyPaymentsExtendedAuthorization {
      
      /**
       * The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.
       * 
       */
      extendedAuthorizationExpiresAt: DateTime;
      
      /**
       * The time after which capture will incur an additional fee.
       * 
       */
      standardAuthorizationExpiresAt: DateTime;
    }
    
    /**
     * Presents all Shopify Payments specific information related to an order refund.
     */
    export interface ShopifyPaymentsRefundSet {
      
      /**
       * The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.
       * 
       */
      acquirerReferenceNumber?: string;
    }
    
    /**
     * The different states that an `OrderTransaction` can have.
     */
    export const enum OrderTransactionStatus {
      
      /**
       * The transaction succeeded.
       */
      SUCCESS = 'SUCCESS',
      
      /**
       * The transaction failed.
       */
      FAILURE = 'FAILURE',
      
      /**
       * The transaction is pending.
       */
      PENDING = 'PENDING',
      
      /**
       * There was an error while processing the transaction.
       */
      ERROR = 'ERROR',
      
      /**
       * Awaiting a response.
       */
      AWAITING_RESPONSE = 'AWAITING_RESPONSE',
      
      /**
       * The transaction status is unknown.
       */
      UNKNOWN = 'UNKNOWN'
    }
    
    /**
     * An auto-generated type for paginating through multiple OrderTransactions.
     * 
     */
    export interface OrderTransactionConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<OrderTransactionEdge>;
      
      /**
       * A list of the nodes contained in OrderTransactionEdge.
       */
      nodes: Array<OrderTransaction>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one OrderTransaction and a cursor during pagination.
     * 
     */
    export interface OrderTransactionEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of OrderTransactionEdge.
       */
      node: OrderTransaction;
    }
    
    /**
     * Return items associated to the exchange.
     */
    export interface ExchangeV2Returns {
      
      /**
       * The list of return items for the exchange.
       */
      lineItems: Array<ExchangeV2LineItem>;
      
      /**
       * The amount of the order-level discount for the items and shipping being returned, which doesn't contain any line item discounts.
       * 
       */
      orderDiscountAmountSet: MoneyBag;
      
      /**
       * The amount of money to be refunded for shipping.
       */
      shippingRefundAmountSet: MoneyBag;
      
      /**
       * The subtotal of the items being returned.
       */
      subtotalPriceSet: MoneyBag;
      
      /**
       * The summary of all taxes of the items being returned.
       */
      taxLines: Array<TaxLine>;
      
      /**
       * The amount of money to be refunded for tip.
       */
      tipRefundAmountSet: MoneyBag;
      
      /**
       * The total value of the items being returned.
       */
      totalPriceSet: MoneyBag;
    }
    
    /**
     * An auto-generated type for paginating through multiple FulfillmentOrders.
     * 
     */
    export interface FulfillmentOrderConnection {
      
      /**
       * A list of edges.
       */
      edges: Array<FulfillmentOrderEdge>;
      
      /**
       * A list of the nodes contained in FulfillmentOrderEdge.
       */
      nodes: Array<FulfillmentOrder>;
      
      /**
       * Information to aid in pagination.
       */
      pageInfo: PageInfo;
    }
    
    /**
     * An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.
     * 
     */
    export interface FulfillmentOrderEdge {
      
      /**
       * A cursor for use in pagination.
       */
      cursor: string;
      
      /**
       * The item at the end of FulfillmentOrderEdge.
       */
      node: FulfillmentOrder;
    }
    
    /**
     * The FulfillmentOrder object represents either an item or a group of items in an
     * [Order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
     * that are expected to be fulfilled from the same location.
     * There can be more than one fulfillment order for an
     * [order](https://shopify.dev/api/admin-graphql/latest/objects/Order)
     * at a given location.
     * 
   * {{ '/api/reference/fulfillment_order_relationships.png' | image }}
   * 
   * Fulfillment orders represent the work which is intended to be done in relation to an order.
   * When fulfillment has started for one or more line items, a
   * [Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment)
   * is created by a merchant or third party to represent the ongoing or completed work of fulfillment.
   * 
   * [See below for more details on creating fulfillments](#the-lifecycle-of-a-fulfillment-order-at-a-location-which-is-managed-by-a-fulfillment-service).
   * 
   * > Note:
   * > Shopify creates fulfillment orders automatically when an order is created.
   * > It is not possible to manually create fulfillment orders.
   * >
   * > [See below for more details on the lifecycle of a fulfillment order](#the-lifecycle-of-a-fulfillment-order).
   * 
   * ## Retrieving fulfillment orders
   * 
   * ### Fulfillment orders from an order
   * 
   * All fulfillment orders related to a given order can be retrieved with the
   * [Order.fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Order#connection-order-fulfillmentorders)
   * connection.
   * 
   * [API access scopes](#api-access-scopes)
   * govern which fulfillments orders are returned to clients.
   * An API client will only receive a subset of the fulfillment orders which belong to an order
   * if they don't have the necessary access scopes to view all of the fulfillment orders.
   * 
   * ### Fulfillment orders assigned to the app for fulfillment
   * 
   * Fulfillment service apps can retrieve the fulfillment orders which have been assigned to their locations with the
   * [Shop.assignedFulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/objects/Shop#connection-shop-assignedfulfillmentorders)
   * connection.
   * Use the `assignmentStatus` argument to control whether all assigned fulfillment orders
   * should be returned or only those where a merchant has sent a
   * [fulfillment request](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderMerchantRequest)
   * and it has yet to be responded to.
   * 
   * The API client must be granted the `read_assigned_fulfillment_orders` access scope to access
   * the assigned fulfillment orders.
   * 
   * ### All fulfillment orders
   * 
   * Apps can retrieve all fulfillment orders with the
   * [fulfillmentOrders](https://shopify.dev/api/admin-graphql/latest/queries/fulfillmentOrders)
   * query. This query returns all assigned, merchant-managed, and third-party fulfillment orders on the shop,
   * which are accessible to the app according to the
   * [fulfillment order access scopes](#api-access-scopes) it was granted with.
   * 
   * ## The lifecycle of a fulfillment order
   * 
   * ### Fulfillment Order Creation
   * 
   * After an order is created, a background worker performs the order routing process which determines
   * which locations will be responsible for fulfilling the purchased items.
   * Once the order routing process is complete, one or more fulfillment orders will be created
   * and assigned to these locations. It is not possible to manually create fulfillment orders.
   * 
   * Once a fulfillment order has been created, it will have one of two different lifecycles depending on
   * the type of location which the fulfillment order is assigned to.
   * 
   * ### The lifecycle of a fulfillment order at a merchant managed location
   * 
   * Fulfillment orders are completed by creating
   * [fulfillments](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment).
   * Fulfillments represents the work done.
   * 
   * For digital products a merchant or an order management app would create a fulfilment once the digital asset
   * has been provisioned.
   * For example, in the case of a digital gift card, a merchant would to do this once
   * the gift card has been activated - before the email has been shipped.
   * 
   * On the other hand, for a traditional shipped order,
   * a merchant or an order management app would create a fulfillment after picking and packing the items relating
   * to a fulfillment order, but before the courier has collected the goods.
   * 
   * [Learn about managing fulfillment orders as an order management app](https://shopify.dev/apps/fulfillment/order-management-apps/manage-fulfillments).
   * 
   * ### The lifecycle of a fulfillment order at a location which is managed by a fulfillment service
   * 
   * For fulfillment orders which are assigned to a location that is managed by a fulfillment service,
   * a merchant or an Order Management App can
   * [send a fulfillment request](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitFulfillmentRequest)
   * to the fulfillment service which operates the location to request that they fulfill the associated items.
   * A fulfillment service has the option to
   * [accept](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderAcceptFulfillmentRequest)
   * or [reject](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderRejectFulfillmentRequest)
   * this fulfillment request.
   * 
   * Once the fulfillment service has accepted the request, the request can no longer be cancelled by the merchant
   * or order management app and instead a
   * [cancellation request must be submitted](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderSubmitCancellationRequest)
   * to the fulfillment service.
   * 
   * Once a fulfillment service accepts a fulfillment request,
   * then after they are ready to pack items and send them for delivery, they create fulfillments with the
   * [fulfillmentCreateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentCreateV2)
   * mutation.
   * They can provide tracking information right away or create fulfillments without it and then
   * update the tracking information for fulfillments with the
   * [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2)
   * mutation.
   * 
   * [Learn about managing fulfillment orders as a fulfillment service](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments).
   * 
   * ## API access scopes
   * 
   * Fulfillment orders are governed by the following API access scopes:
   * 
   * * The `read_merchant_managed_fulfillment_orders` and
   *   `write_merchant_managed_fulfillment_orders` access scopes
   *   grant access to fulfillment orders assigned to merchant-managed locations.
   * * The `read_assigned_fulfillment_orders` and `write_assigned_fulfillment_orders`
   *   access scopes are intended for fulfillment services.
   *   These scopes grant access to fulfillment orders assigned to locations that are being managed
   *   by fulfillment services.
   * * The `read_third_party_fulfillment_orders` and `write_third_party_fulfillment_orders`
   *   access scopes grant access to fulfillment orders
   *   assigned to locations managed by other fulfillment services.
   * 
   * ### Fulfillment service app access scopes
   * 
   * Usually, **fulfillment services** have the `write_assigned_fulfillment_orders` access scope
   * and don't have the `*_third_party_fulfillment_orders`
   * or `*_merchant_managed_fulfillment_orders` access scopes.
   * The app will only have access to the fulfillment orders assigned to their location
   * (or multiple locations if the app registers multiple fulfillment services on the shop).
   * The app will not have access to fulfillment orders assigned to merchant-managed locations
   * or locations owned by other fulfillment service apps.
   * 
   * ### Order management app access scopes
   * 
   * **Order management apps** will usually request `write_merchant_managed_fulfillment_orders` and
   * `write_third_party_fulfillment_orders` access scopes. This will allow them to manage all fulfillment orders
   * on behalf of a merchant.
   * 
   * If an app combines the functions of an order management app and a fulfillment service,
   * then the app should request all
   * access scopes to manage all assigned and all unassigned fulfillment orders.
   * 
   * ## Notifications about fulfillment orders
   * 
   * Fulfillment services are required to
   * [register](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
   * a self-hosted callback URL which has a number of uses. One of these uses is that this callback URL will be notified
   * whenever a merchant submits a fulfillment or cancellation request.
   * 
   * Both merchants and apps can
   * [subscribe](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
   * to the
   * [fulfillment order webhooks](https://shopify.dev/api/admin-graphql/latest/enums/WebhookSubscriptionTopic#value-fulfillmentorderscancellationrequestaccepted)
   * to be notified whenever fulfillment order related domain events occur.
   * 
   * [Learn about fulfillment workflows](https://shopify.dev/apps/fulfillment).
   * 
   */
  export interface FulfillmentOrder extends Node {
    
    /**
     * The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
     * 
     * The fulfillment order's assigned location might change in the following cases:
     * 
     * - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
     *   https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
     *   ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
     *   https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
     *   ) field within the mutation's response.
     * - Work on the fulfillment order hasn't yet begun, which means that the fulfillment order has the
     *     [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
     *     [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
     *     [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
     *     status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
     * 
     */
    assignedLocation: FulfillmentOrderAssignedLocation;
    
    /**
     * ID of the channel that created the order.
     */
    channelId?: string;
    
    /**
     * Date and time when the fulfillment order was created.
     */
    createdAt: DateTime;
    
    /**
     * Delivery method of this fulfillment order.
     */
    deliveryMethod?: DeliveryMethod;
    
    /**
     * The destination where the items should be sent.
     */
    destination?: FulfillmentOrderDestination;
    
    /**
     * The date and time at which the fulfillment order will be fulfillable. When this date and time is reached, the scheduled fulfillment order is automatically transitioned to open. For example, the `fulfill_at` date for a subscription order might be the 1st of each month, a pre-order `fulfill_at` date would be `nil`, and a standard order `fulfill_at` date would be the order creation date.
     */
    fulfillAt?: DateTime;
    
    /**
     * The latest date and time by which all items in the fulfillment order need to be fulfilled.
     */
    fulfillBy?: DateTime;
    
    /**
     * The fulfillment holds applied on the fulfillment order.
     */
    fulfillmentHolds: Array<FulfillmentHold>;
    
    /**
     * Fulfillment orders eligible for merging with the given fulfillment order.
     */
    fulfillmentOrdersForMerge: FulfillmentOrderConnection;
    
    /**
     * A list of fulfillments for the fulfillment order.
     */
    fulfillments: FulfillmentConnection;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The duties delivery method of this fulfillment order.
     */
    internationalDuties?: FulfillmentOrderInternationalDuties;
    
    /**
     * A list of the fulfillment order's line items.
     */
    lineItems: FulfillmentOrderLineItemConnection;
    
    /**
     * A list of locations that the fulfillment order can potentially move to.
     */
    locationsForMove: FulfillmentOrderLocationForMoveConnection;
    
    /**
     * A list of requests sent by the merchant or an order management app to the fulfillment service for the fulfillment order.
     */
    merchantRequests: FulfillmentOrderMerchantRequestConnection;
    
    /**
     * The order that's associated with the fulfillment order.
     */
    order: Order;
    
    /**
     * ID of the order that's associated with the fulfillment order.
     */
    orderId: string;
    
    /**
     * The unique identifier for the order that appears on the order page in the Shopify admin and the <b>Order status</b> page.
     * For example, "#1001", "EN1001", or "1001-A".
     * This value isn't unique across multiple stores.
     * 
     */
    orderName: string;
    
    /**
     * The date and time when the order was processed.
     * This date and time might not match the date and time when the order was created.
     * 
     */
    orderProcessedAt: DateTime;
    
    /**
     * The request status of the fulfillment order.
     */
    requestStatus: FulfillmentOrderRequestStatus;
    
    /**
     * The status of the fulfillment order.
     */
    status: FulfillmentOrderStatus;
    
    /**
     * The actions that can be performed on this fulfillment order.
     */
    supportedActions: Array<FulfillmentOrderSupportedAction>;
    
    /**
     * The date and time when the fulfillment order was last updated.
     */
    updatedAt: DateTime;
  }
  
  /**
   * The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
   * 
   *  The fulfillment order's assigned location might change in the following cases:
   * 
   *   - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
   *     https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
   *     ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
   *     https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
   *     ) field within the mutation's response.
   * 
   *   - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
   *       [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
   *       [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
   *       [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
   *       status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
   * 
   * If the [fulfillmentOrderMove](
   * https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
   * ) mutation has moved the fulfillment order's line items to a new location,
   * but hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location
   * doesn't change.
   * This happens if the fulfillment order is being split during the move, or if all line items can be moved
   * to an existing fulfillment order at a new location.
   * 
   * Once the fulfillment order has been taken into work or canceled,
   * which means that the fulfillment order has the
   * [IN_PROGRESS](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-inprogress),
   * [CLOSED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-closed),
   * [CANCELLED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-cancelled), or
   * [INCOMPLETE](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-incomplete)
   * status, `FulfillmentOrderAssignedLocation` acts as a snapshot of the shop's location content.
   * Up-to-date shop's location data may be queried through [location](
   *   https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderAssignedLocation#field-fulfillmentorderassignedlocation-location
   * ) connection.
   * 
   */
  export interface FulfillmentOrderAssignedLocation {
    
    /**
     * The first line of the address for the location.
     */
    address1?: string;
    
    /**
     * The second line of the address for the location.
     */
    address2?: string;
    
    /**
     * The city of the location.
     */
    city?: string;
    
    /**
     * The two-letter country code of the location.
     */
    countryCode: CountryCode;
    
    /**
     * The location where the fulfillment is expected to happen. This value might be different from
     * `FulfillmentOrderAssignedLocation` if the location's attributes were updated
     * after the fulfillment order was taken into work of canceled.
     * 
     */
    location?: Location;
    
    /**
     * The name of the location.
     */
    name: string;
    
    /**
     * The phone number of the location.
     */
    phone?: string;
    
    /**
     * The province of the location.
     */
    province?: string;
    
    /**
     * The ZIP code of the location.
     */
    zip?: string;
  }
  
  /**
   * The delivery method used by a fulfillment order.
   */
  export interface DeliveryMethod extends Node {
    
    /**
     * The branded promise that was presented to the buyer during checkout.  For example: Shop Promise.
     */
    brandedPromise?: DeliveryBrandedPromise;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The latest delivery date and time when the fulfillment is expected to arrive at the buyer's location.
     */
    maxDeliveryDateTime?: DateTime;
    
    /**
     * The type of the delivery method.
     */
    methodType: DeliveryMethodType;
    
    /**
     * The earliest delivery date and time when the fulfillment is expected to arrive at the buyer's location.
     */
    minDeliveryDateTime?: DateTime;
    
    /**
     * A reference to the shipping method.
     */
    serviceCode?: string;
  }
  
  /**
   * Represents a branded promise presented to buyers.
   * 
   */
  export interface DeliveryBrandedPromise {
    
    /**
     * The handle of the branded promise.  For example: `shop_promise`.
     */
    handle: string;
    
    /**
     * The name of the branded promise.  For example: `Shop Promise`.
     */
    name: string;
  }
  
  /**
   * Possible method types that a delivery method can have.
   */
  export const enum DeliveryMethodType {
    
    /**
     * The order is shipped.
     */
    SHIPPING = 'SHIPPING',
    
    /**
     * The order is picked up by the customer.
     */
    PICK_UP = 'PICK_UP',
    
    /**
     * No delivery is needed.
     */
    NONE = 'NONE',
    
    /**
     * The order is delivered to a retail store.
     */
    RETAIL = 'RETAIL',
    
    /**
     * The order is delivered using a local delivery service.
     */
    LOCAL = 'LOCAL'
  }
  
  /**
   * Represents the destination where the items should be sent upon fulfillment.
   * 
   */
  export interface FulfillmentOrderDestination extends Node {
    
    /**
     * The first line of the address of the destination.
     */
    address1?: string;
    
    /**
     * The second line of the address of the destination.
     */
    address2?: string;
    
    /**
     * The city of the destination.
     */
    city?: string;
    
    /**
     * The company of the destination.
     */
    company?: string;
    
    /**
     * The two-letter country code of the destination.
     */
    countryCode?: CountryCode;
    
    /**
     * The email of the customer at the destination.
     */
    email?: string;
    
    /**
     * The first name of the customer at the destination.
     */
    firstName?: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The last name of the customer at the destination.
     */
    lastName?: string;
    
    /**
     * The phone number of the customer at the destination.
     */
    phone?: string;
    
    /**
     * The province of the destination.
     */
    province?: string;
    
    /**
     * The ZIP code of the destination.
     */
    zip?: string;
  }
  
  /**
   * A fulfillment hold currently applied on a fulfillment order.
   * 
   */
  export interface FulfillmentHold {
    
    /**
     * The name of the app or service that applied the fulfillment hold.
     */
    heldBy?: string;
    
    /**
     * The reason for the fulfillment hold.
     */
    reason: FulfillmentHoldReason;
    
    /**
     * Additional information about the fulfillment hold reason.
     */
    reasonNotes?: string;
  }
  
  /**
   * The reason for a fulfillment hold.
   */
  export const enum FulfillmentHoldReason {
    
    /**
     * The fulfillment hold is applied because payment is pending.
     */
    AWAITING_PAYMENT = 'AWAITING_PAYMENT',
    
    /**
     * The fulfillment hold is applied because of a high risk of fraud.
     */
    HIGH_RISK_OF_FRAUD = 'HIGH_RISK_OF_FRAUD',
    
    /**
     * The fulfillment hold is applied because of an incorrect address.
     */
    INCORRECT_ADDRESS = 'INCORRECT_ADDRESS',
    
    /**
     * The fulfillment hold is applied because inventory is out of stock.
     */
    INVENTORY_OUT_OF_STOCK = 'INVENTORY_OUT_OF_STOCK',
    
    /**
     * The fulfillment hold is applied because of an unknown delivery date.
     */
    UNKNOWN_DELIVERY_DATE = 'UNKNOWN_DELIVERY_DATE',
    
    /**
     * The fulfillment hold is applied because of a post purchase upsell offer.
     */
    ONLINE_STORE_POST_PURCHASE_CROSS_SELL = 'ONLINE_STORE_POST_PURCHASE_CROSS_SELL',
    
    /**
     * The fulfillment hold is applied because of return items not yet received during an exchange.
     */
    AWAITING_RETURN_ITEMS = 'AWAITING_RETURN_ITEMS',
    
    /**
     * The fulfillment hold is applied for another reason.
     */
    OTHER = 'OTHER'
  }
  
  /**
   * An auto-generated type for paginating through multiple Fulfillments.
   * 
   */
  export interface FulfillmentConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<FulfillmentEdge>;
    
    /**
     * A list of the nodes contained in FulfillmentEdge.
     */
    nodes: Array<Fulfillment>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Fulfillment and a cursor during pagination.
   * 
   */
  export interface FulfillmentEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of FulfillmentEdge.
     */
    node: Fulfillment;
  }
  
  /**
   * Represents a fulfillment.
   * In Shopify, a fulfillment represents a shipment of one or more items in an order.
   * When an order has been completely fulfilled, it means that all the items that are included
   * in the order have been sent to the customer.
   * There can be more than one fulfillment for an order.
   * 
   */
  export interface Fulfillment extends LegacyInteroperability, Node {
    
    /**
     * The date and time when the fulfillment was created.
     */
    createdAt: DateTime;
    
    /**
     * The date that this fulfillment was delivered.
     */
    deliveredAt?: DateTime;
    
    /**
     * Human readable display status for this fulfillment.
     */
    displayStatus?: FulfillmentDisplayStatus;
    
    /**
     * The estimated date that this fulfillment will arrive.
     */
    estimatedDeliveryAt?: DateTime;
    
    /**
     * The history of events associated with this fulfillment.
     */
    events: FulfillmentEventConnection;
    
    /**
     * List of the fulfillment's line items.
     */
    fulfillmentLineItems: FulfillmentLineItemConnection;
    
    /**
     * A paginated list of fulfillment orders for the fulfillment.
     */
    fulfillmentOrders: FulfillmentOrderConnection;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The date and time when the fulfillment went into transit.
     */
    inTransitAt?: DateTime;
    
    /**
     * The ID of the corresponding resource in the REST Admin API.
     */
    legacyResourceId: UnsignedInt64;
    
    /**
     * The location that the fulfillment was processed at.
     */
    location?: Location;
    
    /**
     * Human readable reference identifier for this fulfillment.
     */
    name: string;
    
    /**
     * The order for which the fulfillment was created.
     */
    order: Order;
    
    /**
     * The address at which the fulfillment occurred. This field is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead.
     */
    originAddress?: FulfillmentOriginAddress;
    
    /**
     * Whether any of the line items in the fulfillment require shipping.
     */
    requiresShipping: boolean;
    
    /**
     * Fulfillment service associated with the fulfillment.
     */
    service?: FulfillmentService;
    
    /**
     * The status of the fulfillment.
     */
    status: FulfillmentStatus;
    
    /**
     * Sum of all line item quantities for the fulfillment.
     */
    totalQuantity: number;
    
    /**
     * Tracking information associated with the fulfillment,
     * such as the tracking company, tracking number, and tracking URL.
     * 
     */
    trackingInfo: Array<FulfillmentTrackingInfo>;
    
    /**
     * The date and time when the fulfillment was last modified.
     * 
     */
    updatedAt: DateTime;
  }
  
  /**
   * The display status of a fulfillment.
   */
  export const enum FulfillmentDisplayStatus {
    
    /**
     * Displayed as **Attempted delivery**.
     */
    ATTEMPTED_DELIVERY = 'ATTEMPTED_DELIVERY',
    
    /**
     * Displayed as **Canceled**.
     */
    CANCELED = 'CANCELED',
    
    /**
     * Displayed as **Confirmed**.
     */
    CONFIRMED = 'CONFIRMED',
    
    /**
     * Displayed as **Delivered**.
     */
    DELIVERED = 'DELIVERED',
    
    /**
     * Displayed as **Failure**.
     */
    FAILURE = 'FAILURE',
    
    /**
     * Displayed as **Fulfilled**.
     */
    FULFILLED = 'FULFILLED',
    
    /**
     * Displayed as **In transit**.
     */
    IN_TRANSIT = 'IN_TRANSIT',
    
    /**
     * Displayed as **Label printed**.
     */
    LABEL_PRINTED = 'LABEL_PRINTED',
    
    /**
     * Displayed as **Label purchased**.
     */
    LABEL_PURCHASED = 'LABEL_PURCHASED',
    
    /**
     * Displayed as **Label voided**.
     */
    LABEL_VOIDED = 'LABEL_VOIDED',
    
    /**
     * Displayed as **Marked as fulfilled**.
     */
    MARKED_AS_FULFILLED = 'MARKED_AS_FULFILLED',
    
    /**
     * Displayed as **Not delivered**.
     */
    NOT_DELIVERED = 'NOT_DELIVERED',
    
    /**
     * Displayed as **Out for delivery**.
     */
    OUT_FOR_DELIVERY = 'OUT_FOR_DELIVERY',
    
    /**
     * Displayed as **Ready for pickup**.
     */
    READY_FOR_PICKUP = 'READY_FOR_PICKUP',
    
    /**
     * Displayed as **Picked up**.
     */
    PICKED_UP = 'PICKED_UP',
    
    /**
     * Displayed as **Submitted**.
     */
    SUBMITTED = 'SUBMITTED'
  }
  
  /**
   * The set of valid sort keys for the FulfillmentEvent query.
   */
  export const enum FulfillmentEventSortKeys {
    
    /**
     * Sort by the `happened_at` value.
     */
    HAPPENED_AT = 'HAPPENED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple FulfillmentEvents.
   * 
   */
  export interface FulfillmentEventConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<FulfillmentEventEdge>;
    
    /**
     * A list of the nodes contained in FulfillmentEventEdge.
     */
    nodes: Array<FulfillmentEvent>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.
   * 
   */
  export interface FulfillmentEventEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of FulfillmentEventEdge.
     */
    node: FulfillmentEvent;
  }
  
  /**
   * The fulfillment event that describes the fulfilllment status at a particular time.
   */
  export interface FulfillmentEvent extends Node {
    
    /**
     * The street address where this fulfillment event occurred.
     */
    address1?: string;
    
    /**
     * The city where this fulfillment event occurred.
     */
    city?: string;
    
    /**
     * The country where this fulfillment event occurred.
     */
    country?: string;
    
    /**
     * The estimated delivery date and time of the fulfillment.
     */
    estimatedDeliveryAt?: DateTime;
    
    /**
     * The time at which this fulfillment event happened.
     */
    happenedAt: DateTime;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The latitude where this fulfillment event occurred.
     */
    latitude?: number;
    
    /**
     * The longitude where this fulfillment event occurred.
     */
    longitude?: number;
    
    /**
     * A message associated with this fulfillment event.
     */
    message?: string;
    
    /**
     * The province where this fulfillment event occurred.
     */
    province?: string;
    
    /**
     * The status of this fulfillment event.
     */
    status: FulfillmentEventStatus;
    
    /**
     * The zip code of the location where this fulfillment event occurred.
     */
    zip?: string;
  }
  
  /**
   * The status that describes a fulfillment or delivery event.
   */
  export const enum FulfillmentEventStatus {
    
    /**
     * A shipping label has been purchased.
     */
    LABEL_PURCHASED = 'LABEL_PURCHASED',
    
    /**
     * A purchased shipping label has been printed.
     */
    LABEL_PRINTED = 'LABEL_PRINTED',
    
    /**
     * The fulfillment is ready to be picked up.
     */
    READY_FOR_PICKUP = 'READY_FOR_PICKUP',
    
    /**
     * The fulfillment is confirmed. This is the default value when no other information is available.
     */
    CONFIRMED = 'CONFIRMED',
    
    /**
     * The fulfillment is in transit.
     */
    IN_TRANSIT = 'IN_TRANSIT',
    
    /**
     * The fulfillment is out for delivery.
     */
    OUT_FOR_DELIVERY = 'OUT_FOR_DELIVERY',
    
    /**
     * A delivery was attempted.
     */
    ATTEMPTED_DELIVERY = 'ATTEMPTED_DELIVERY',
    
    /**
     * The fulfillment was successfully delivered.
     */
    DELIVERED = 'DELIVERED',
    
    /**
     * The fulfillment request failed.
     */
    FAILURE = 'FAILURE'
  }
  
  /**
   * An auto-generated type for paginating through multiple FulfillmentLineItems.
   * 
   */
  export interface FulfillmentLineItemConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<FulfillmentLineItemEdge>;
    
    /**
     * A list of the nodes contained in FulfillmentLineItemEdge.
     */
    nodes: Array<FulfillmentLineItem>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
   * 
   */
  export interface FulfillmentLineItemEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of FulfillmentLineItemEdge.
     */
    node: FulfillmentLineItem;
  }
  
  /**
   * The address at which the fulfillment occurred. This object is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead.
   */
  export interface FulfillmentOriginAddress {
    
    /**
     * The street address of the fulfillment location.
     */
    address1?: string;
    
    /**
     * The second line of the address. Typically the number of the apartment, suite, or unit.
     */
    address2?: string;
    
    /**
     * The city in which the fulfillment location is located.
     */
    city?: string;
    
    /**
     * The country code of the fulfillment location.
     */
    countryCode: string;
    
    /**
     * The province code of the fulfillment location.
     */
    provinceCode?: string;
    
    /**
     * The zip code of the fulfillment location.
     */
    zip?: string;
  }
  
  /**
   * The status of a fulfillment.
   */
  export const enum FulfillmentStatus {
    
    /**
     * Shopify has created the fulfillment and is waiting for the third-party fulfillment service to transition it to `open` or `success`.
     * 
     * @deprecated This is a legacy status and is due to be deprecated.
     */
    PENDING = 'PENDING',
    
    /**
     * The third-party fulfillment service has acknowledged the fulfillment and is processing it.
     * 
     * @deprecated This is a legacy status and is due to be deprecated.
     */
    OPEN = 'OPEN',
    
    /**
     * The fulfillment was completed successfully.
     */
    SUCCESS = 'SUCCESS',
    
    /**
     * The fulfillment was canceled.
     */
    CANCELLED = 'CANCELLED',
    
    /**
     * There was an error with the fulfillment request.
     */
    ERROR = 'ERROR',
    
    /**
     * The fulfillment request failed.
     */
    FAILURE = 'FAILURE'
  }
  
  /**
   * Represents the tracking information for a fulfillment.
   */
  export interface FulfillmentTrackingInfo {
    
    /**
     * The name of the tracking company.
     * 
     * For tracking company names from the list below
     * Shopify will automatically build tracking URLs for all provided tracking numbers,
     * which will make the tracking numbers clickable in the interface.
     * 
     * Additionally, for the tracking companies listed on the
     * [Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
     * Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.
     * 
     * ### Supported tracking companies
     * 
     * The following tracking companies display for shops located in any country:
     * 
     *   * 4PX
     *   * AGS
     *   * Amazon Logistics UK
     *   * Amazon Logistics US
     *   * An Post
     *   * Anjun Logistics
     *   * APC
     *   * Asendia USA
     *   * Australia Post
     *   * Bonshaw
     *   * BPost
     *   * BPost International
     *   * Canada Post
     *   * Canpar
     *   * CDL Last Mile
     *   * China Post
     *   * Chronopost
     *   * Chukou1
     *   * Colissimo
     *   * Comingle
     *   * Coordinadora
     *   * Correios
     *   * Correos
     *   * CTT
     *   * CTT Express
     *   * Cyprus Post
     *   * Delnext
     *   * Deutsche Post
     *   * DHL eCommerce
     *   * DHL eCommerce Asia
     *   * DHL Express
     *   * DoorDash
     *   * DPD
     *   * DPD Local
     *   * DPD UK
     *   * DTD Express
     *   * DX
     *   * Eagle
     *   * Estes
     *   * Evri
     *   * FedEx
     *   * First Global Logistics
     *   * First Line
     *   * FSC
     *   * Fulfilla
     *   * GLS
     *   * Guangdong Weisuyi Information Technology (WSE)
     *   * Heppner Internationale Spedition GmbH & Co.
     *   * Iceland Post
     *   * IDEX
     *   * Israel Post
     *   * Japan Post (EN)
     *   * Japan Post (JA)
     *   * La Poste
     *   * Lasership
     *   * Latvia Post
     *   * Lietuvos Paštas
     *   * Logisters
     *   * Lone Star Overnight
     *   * M3 Logistics
     *   * Meteor Space
     *   * Mondial Relay
     *   * New Zealand Post
     *   * NinjaVan
     *   * North Russia Supply Chain (Shenzhen) Co.
     *   * OnTrac
     *   * Packeta
     *   * Pago Logistics
     *   * Ping An Da Tengfei Express
     *   * Pitney Bowes
     *   * Portal PostNord
     *   * Poste Italiane
     *   * PostNL
     *   * PostNord DK
     *   * PostNord NO
     *   * PostNord SE
     *   * Purolator
     *   * Qxpress
     *   * Qyun Express
     *   * Royal Mail
     *   * Royal Shipments
     *   * Sagawa (EN)
     *   * Sagawa (JA)
     *   * Sendle
     *   * SF Express
     *   * SFC Fulfillment
     *   * SHREE NANDAN COURIER
     *   * Singapore Post
     *   * Southwest Air Cargo
     *   * StarTrack
     *   * Step Forward Freight
     *   * Swiss Post
     *   * TForce Final Mile
     *   * Tinghao
     *   * TNT
     *   * Toll IPEC
     *   * United Delivery Service
     *   * UPS
     *   * USPS
     *   * Venipak
     *   * We Post
     *   * Whistl
     *   * Wizmo
     *   * WMYC
     *   * Xpedigo
     *   * XPO Logistics
     *   * Yamato (EN)
     *   * Yamato (JA)
     *   * YiFan Express
     *   * YunExpress
     * 
     * The following tracking companies are displayed for shops located in specific countries:
     * 
     *   * **Australia**: Australia Post, Sendle, Aramex Australia, TNT Australia, Hunter Express, Couriers Please, Bonds, Allied Express, Direct Couriers, Northline, GO Logistics
     *   * **Austria**: Österreichische Post
     *   * **Bulgaria**: Speedy
     *   * **Canada**: Intelcom, BoxKnight, Loomis, GLS
     *   * **China**: China Post, DHL eCommerce Asia, WanbExpress, YunExpress, Anjun Logistics, SFC Fulfillment, FSC
     *   * **Czechia**: Zásilkovna
     *   * **Germany**: Deutsche Post (DE), Deutsche Post (EN), DHL, DHL Express, Swiship, Hermes, GLS
     *   * **Spain**: SEUR
     *   * **France**: Colissimo, Mondial Relay, Colis Privé, GLS
     *   * **United Kingdom**: Evri, DPD UK, Parcelforce, Yodel, DHL Parcel, Tuffnells
     *   * **Greece**: ACS Courier
     *   * **Hong Kong SAR**: SF Express
     *   * **Ireland**: Fastway, DPD Ireland
     *   * **India**: DTDC, India Post, Delhivery, Gati KWE, Professional Couriers, XpressBees, Ecom Express, Ekart, Shadowfax, Bluedart
     *   * **Italy**: BRT, GLS Italy
     *   * **Japan**: エコ配, 西濃運輸, 西濃スーパーエキスプレス, 福山通運, 日本通運, 名鉄運輸, 第一貨物
     *   * **Netherlands**: DHL Parcel, DPD
     *   * **Norway**: Bring
     *   * **Poland**: Inpost
     *   * **Turkey**: PTT, Yurtiçi Kargo, Aras Kargo, Sürat Kargo
     *   * **United States**: GLS, Alliance Air Freight, Pilot Freight, LSO, Old Dominion, R+L Carriers, Southwest Air Cargo
     *   * **South Africa**: Fastway, Skynet.
     * 
     */
    company?: string;
    
    /**
     * The tracking number of the fulfillment.
     * 
     * The tracking number is clickable in the interface if one of the following applies
     * (the highest in the list has the highest priority):
     * 
     * * Tracking url provided in the `url` field.
     * * [Shopify-known tracking company name](#supported-tracking-companies) specified in the `company` field.
     *   Shopify will build the tracking URL automatically based on the tracking number specified.
     * * The tracking number has a Shopify-known format.
     *   Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
     *   Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
     *   This can result in an invalid tracking URL.
     *   It is highly recommended that you send the tracking company and the tracking URL.
     * 
     */
    number?: string;
    
    /**
     * The URLs to track the fulfillment.
     * 
     * The tracking URL is displayed in the merchant's admin on the order page.
     * The tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.
     * When accounts are enabled, it's also displayed in the customer's order history.
     * 
     */
    url?: URL;
  }
  
  /**
   * The international duties relevant to a fulfillment order.
   * 
   */
  export interface FulfillmentOrderInternationalDuties {
    
    /**
     * The method of duties payment. Example values: `DDP`, `DAP`.
     */
    incoterm: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
   * 
   */
  export interface FulfillmentOrderLineItemConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<FulfillmentOrderLineItemEdge>;
    
    /**
     * A list of the nodes contained in FulfillmentOrderLineItemEdge.
     */
    nodes: Array<FulfillmentOrderLineItem>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.
   * 
   */
  export interface FulfillmentOrderLineItemEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of FulfillmentOrderLineItemEdge.
     */
    node: FulfillmentOrderLineItem;
  }
  
  /**
   * Associates an order line item with quantities requiring fulfillment from the respective fulfillment order.
   * 
   */
  export interface FulfillmentOrderLineItem extends Node {
    
    /**
     * The financial summary for the Fulfillment Order's Line Items.
     */
    financialSummaries: Array<FulfillmentOrderLineItemFinancialSummary>;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The image associated to the line item's variant.
     */
    image?: Image;
    
    /**
     * The ID of the inventory item.
     */
    inventoryItemId?: string;
    
    /**
     * The associated order line item.
     * @deprecated           As of API version 2023-01, this field has been deprecated. The order line item associated with a `FulfillmentOrderLineItem`
     *           shouldn't be used to determine what to fulfill. Use the `FulfillmentOrderLineItem` and `FulfillmentOrder` objects
     *           instead. An order `LineItem` represents a single line item on an order, but it doesn't represent what should be fulfilled.
     * 
     */
    lineItem: LineItem;
    
    /**
     * The variant unit price without discounts applied, in shop and presentment currencies.
     * @deprecated Use `financialSummaries` instead.
     */
    originalUnitPriceSet: MoneyBag;
    
    /**
     * The title of the product.
     */
    productTitle: string;
    
    /**
     * The number of units remaining to be fulfilled.
     */
    remainingQuantity: number;
    
    /**
     * Whether physical shipping is required for the variant.
     */
    requiresShipping: boolean;
    
    /**
     * The variant SKU number.
     */
    sku?: string;
    
    /**
     * The total number of units to be fulfilled.
     */
    totalQuantity: number;
    
    /**
     * The name of the variant.
     */
    variantTitle?: string;
    
    /**
     * The name of the vendor who made the variant.
     */
    vendor?: string;
    
    /**
     * Warning messages for a fulfillment order line item.
     */
    warnings: Array<FulfillmentOrderLineItemWarning>;
    
    /**
     * The weight of a line item unit.
     */
    weight?: Weight;
  }
  
  /**
   * The financial details of a fulfillment order line item.
   * 
   */
  export interface FulfillmentOrderLineItemFinancialSummary {
    
    /**
     * The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.For the full picture of applied discounts, see discountAllocations.
     */
    approximateDiscountedUnitPriceSet: MoneyBag;
    
    /**
     * The discounts that have been allocated onto the line item by discount applications, not including order edits and refunds.
     */
    discountAllocations: Array<FinancialSummaryDiscountAllocation>;
    
    /**
     * The variant unit price without discounts applied, in shop and presentment currencies.
     */
    originalUnitPriceSet: MoneyBag;
    
    /**
     * Number of line items that this financial summary applies to.
     */
    quantity: number;
  }
  
  /**
   * An amount that's allocated to a line item based on an associated discount application.
   * 
   */
  export interface FinancialSummaryDiscountAllocation {
    
    /**
     * The money amount that's allocated per unit on the associated line based on the discount application in shop and presentment currencies. If the allocated amount for the line cannot be evenly divided by the quantity, then this amount will be an approximate amount, avoiding fractional pennies. For example, if the associated line had a quantity of 3 with a discount of 4 cents, then the discount distribution would be [0.01, 0.01, 0.02]. This field returns the highest number of the distribution. In this example, this would be 0.02.
     */
    approximateAllocatedAmountPerItem: MoneyBag;
    
    /**
     * The discount application that the allocated amount originated from.
     */
    discountApplication: FinancialSummaryDiscountApplication;
  }
  
  /**
   * Discount applications capture the intentions of a discount source at
   * the time of application on an order's line items or shipping lines.
   * 
   */
  export interface FinancialSummaryDiscountApplication {
    
    /**
     * The method by which the discount's value is applied to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * How the discount amount is distributed on the discounted lines.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * Whether the discount is applied on line items or shipping lines.
     */
    targetType: DiscountApplicationTargetType;
  }
  
  /**
   * A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected.
   * 
   */
  export interface FulfillmentOrderLineItemWarning {
    
    /**
     * The description of warning.
     */
    description?: string;
    
    /**
     * The title of warning.
     */
    title?: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.
   * 
   */
  export interface FulfillmentOrderLocationForMoveConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<FulfillmentOrderLocationForMoveEdge>;
    
    /**
     * A list of the nodes contained in FulfillmentOrderLocationForMoveEdge.
     */
    nodes: Array<FulfillmentOrderLocationForMove>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.
   * 
   */
  export interface FulfillmentOrderLocationForMoveEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of FulfillmentOrderLocationForMoveEdge.
     */
    node: FulfillmentOrderLocationForMove;
  }
  
  /**
   * A location that a fulfillment order can potentially move to.
   * 
   */
  export interface FulfillmentOrderLocationForMove {
    
    /**
     * Fulfillment order line items that can be moved from their current location to the given location.
     * 
     */
    availableLineItems: FulfillmentOrderLineItemConnection;
    
    /**
     * Total number of fulfillment order line items that can be moved from their current assigned location to the
     * given location.
     * 
     */
    availableLineItemsCount: UnsignedInt64;
    
    /**
     * The location being considered as the fulfillment order's new assigned location.
     */
    location: Location;
    
    /**
     * A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
     * moved to the location.
     * 
     */
    message?: string;
    
    /**
     * Whether the fulfillment order can be moved to the location.
     */
    movable: boolean;
    
    /**
     * Fulfillment order line items that cannot be moved from their current location to the given location.
     * 
     */
    unavailableLineItems: FulfillmentOrderLineItemConnection;
    
    /**
     * Total number of fulfillment order line items that can't be moved from their current assigned location to the
     * given location.
     * 
     */
    unavailableLineItemsCount: UnsignedInt64;
  }
  
  /**
   * The kinds of request merchants can make to a fulfillment service.
   */
  export const enum FulfillmentOrderMerchantRequestKind {
    
    /**
     * The merchant requests fulfillment for an `OPEN` fulfillment order.
     * 
     */
    FULFILLMENT_REQUEST = 'FULFILLMENT_REQUEST',
    
    /**
     * The merchant requests cancellation of an `IN_PROGRESS` fulfillment order.
     * 
     */
    CANCELLATION_REQUEST = 'CANCELLATION_REQUEST'
  }
  
  /**
   * An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.
   * 
   */
  export interface FulfillmentOrderMerchantRequestConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<FulfillmentOrderMerchantRequestEdge>;
    
    /**
     * A list of the nodes contained in FulfillmentOrderMerchantRequestEdge.
     */
    nodes: Array<FulfillmentOrderMerchantRequest>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.
   * 
   */
  export interface FulfillmentOrderMerchantRequestEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of FulfillmentOrderMerchantRequestEdge.
     */
    node: FulfillmentOrderMerchantRequest;
  }
  
  /**
   * A request made by the merchant or an order management app to a fulfillment service
   * for a fulfillment order.
   * 
   */
  export interface FulfillmentOrderMerchantRequest extends Node {
    
    /**
     * The fulfillment order associated with the merchant request.
     */
    fulfillmentOrder: FulfillmentOrder;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The kind of request made.
     */
    kind: FulfillmentOrderMerchantRequestKind;
    
    /**
     * The optional message that the merchant included in the request.
     */
    message?: string;
    
    /**
     * Additional options requested by the merchant. These depend on the `kind` of the request.
     * For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
     * merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
     * `notifyCustomer` when making calls to `FulfillmentCreateV2`.
     * 
     */
    requestOptions?: JSON;
    
    /**
     * The response from the fulfillment service.
     */
    responseData?: JSON;
    
    /**
     * The timestamp when the request was made.
     */
    sentAt: DateTime;
  }
  
  /**
   * The request status of a fulfillment order.
   */
  export const enum FulfillmentOrderRequestStatus {
    
    /**
     * The initial request status for the newly-created fulfillment orders. This is the only valid
     * request status for fulfillment orders that aren't assigned to a fulfillment service.
     * 
     */
    UNSUBMITTED = 'UNSUBMITTED',
    
    /**
     * The merchant requested fulfillment for this fulfillment order.
     */
    SUBMITTED = 'SUBMITTED',
    
    /**
     * The fulfillment service accepted the merchant's fulfillment request.
     */
    ACCEPTED = 'ACCEPTED',
    
    /**
     * The fulfillment service rejected the merchant's fulfillment request.
     */
    REJECTED = 'REJECTED',
    
    /**
     * The merchant requested a cancellation of the fulfillment request for this fulfillment order.
     * 
     */
    CANCELLATION_REQUESTED = 'CANCELLATION_REQUESTED',
    
    /**
     * The fulfillment service accepted the merchant's fulfillment cancellation request.
     * 
     */
    CANCELLATION_ACCEPTED = 'CANCELLATION_ACCEPTED',
    
    /**
     * The fulfillment service rejected the merchant's fulfillment cancellation request.
     * 
     */
    CANCELLATION_REJECTED = 'CANCELLATION_REJECTED',
    
    /**
     * The fulfillment service closed the fulfillment order without completing it.
     */
    CLOSED = 'CLOSED'
  }
  
  /**
   * The status of a fulfillment order.
   */
  export const enum FulfillmentOrderStatus {
    
    /**
     * The fulfillment order is ready for fulfillment.
     */
    OPEN = 'OPEN',
    
    /**
     * The fulfillment order is being processed.
     */
    IN_PROGRESS = 'IN_PROGRESS',
    
    /**
     * The fulfillment order has been cancelled by the merchant.
     */
    CANCELLED = 'CANCELLED',
    
    /**
     * The fulfillment order cannot be completed as requested.
     */
    INCOMPLETE = 'INCOMPLETE',
    
    /**
     * The fulfillment order has been completed and closed.
     */
    CLOSED = 'CLOSED',
    
    /**
     * The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`.
     */
    SCHEDULED = 'SCHEDULED',
    
    /**
     * The fulfillment order is on hold. The fulfillment process can't be initiated until the hold on the fulfillment order is released.
     */
    ON_HOLD = 'ON_HOLD'
  }
  
  /**
   * One of the actions that the fulfillment order supports in its current state.
   * 
   */
  export interface FulfillmentOrderSupportedAction {
    
    /**
     * The action value.
     */
    action: FulfillmentOrderAction;
    
    /**
     * The external URL to be used to initiate the fulfillment process outside Shopify.
     * Applicable only when the `action` value is `EXTERNAL`.
     * 
     */
    externalUrl?: URL;
  }
  
  /**
   * The actions that can be taken on a fulfillment order.
   */
  export const enum FulfillmentOrderAction {
    
    /**
     * Creates a fulfillment for selected line items in the fulfillment order. The corresponding mutation for this action is `fulfillmentCreateV2`.
     */
    CREATE_FULFILLMENT = 'CREATE_FULFILLMENT',
    
    /**
     * Sends a request for fulfilling selected line items in a fulfillment order to a fulfillment service. The corresponding mutation for this action is `fulfillmentOrderSubmitFulfillmentRequest`.
     */
    REQUEST_FULFILLMENT = 'REQUEST_FULFILLMENT',
    
    /**
     * Cancels a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderCancel`.
     */
    CANCEL_FULFILLMENT_ORDER = 'CANCEL_FULFILLMENT_ORDER',
    
    /**
     * Moves a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMove`.
     */
    MOVE = 'MOVE',
    
    /**
     * Sends a cancellation request to the fulfillment service of a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSubmitCancellationRequest`.
     */
    REQUEST_CANCELLATION = 'REQUEST_CANCELLATION',
    
    /**
     * Marks the fulfillment order as open. The corresponding mutation for this action is `fulfillmentOrderOpen`.
     */
    MARK_AS_OPEN = 'MARK_AS_OPEN',
    
    /**
     * Releases the fulfillment hold on the fulfillment order. The corresponding mutation for this action is `fulfillmentOrderReleaseHold`.
     */
    RELEASE_HOLD = 'RELEASE_HOLD',
    
    /**
     * Applies a fulfillment hold on an open fulfillment order. The corresponding mutation for this action is `fulfillmentOrderHold`.
     */
    HOLD = 'HOLD',
    
    /**
     * Opens an external URL to initiate the fulfillment process outside Shopify. This action should be paired with `FulfillmentOrderSupportedAction.externalUrl`.
     */
    EXTERNAL = 'EXTERNAL',
    
    /**
     * Splits a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderSplit`.
     */
    SPLIT = 'SPLIT',
    
    /**
     * Merges a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMerge`.
     */
    MERGE = 'MERGE'
  }
  
  /**
   * An auto-generated type for paginating through multiple LineItems.
   * 
   */
  export interface LineItemConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<LineItemEdge>;
    
    /**
     * A list of the nodes contained in LineItemEdge.
     */
    nodes: Array<LineItem>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one LineItem and a cursor during pagination.
   * 
   */
  export interface LineItemEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of LineItemEdge.
     */
    node: LineItem;
  }
  
  /**
   * An auto-generated type for paginating through multiple LineItemMutables.
   * 
   */
  export interface LineItemMutableConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<LineItemMutableEdge>;
    
    /**
     * A list of the nodes contained in LineItemMutableEdge.
     */
    nodes: Array<LineItemMutable>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one LineItemMutable and a cursor during pagination.
   * 
   */
  export interface LineItemMutableEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of LineItemMutableEdge.
     */
    node: LineItemMutable;
  }
  
  /**
   * Represents a single line item on an order.
   */
  export interface LineItemMutable extends Node {
    
    /**
     * Whether the line item can be restocked.
     * @deprecated Use `restockable` instead.
     */
    canRestock: boolean;
    
    /**
     * A list of attributes that represent custom features or special requests.
     */
    customAttributes: Array<Attribute>;
    
    /**
     * The discounts that have been allocated onto the line item by discount applications.
     */
    discountAllocations: Array<DiscountAllocation>;
    
    /**
     * The total line price after discounts are applied, in shop currency.
     * @deprecated Use `discountedTotalSet` instead.
     */
    discountedTotal: Money;
    
    /**
     * The total line price after discounts are applied, in shop and presentment currencies.
     */
    discountedTotalSet: MoneyBag;
    
    /**
     * The approximate split price of a line item unit, in shop currency. This value doesn't include discounts applied to the entire order.
     * @deprecated Use `discountedUnitPriceSet` instead.
     */
    discountedUnitPrice: Money;
    
    /**
     * The approximate split price of a line item unit, in shop and presentment currencies. This value doesn't include discounts applied to the entire order.
     */
    discountedUnitPriceSet: MoneyBag;
    
    /**
     * The total number of units to fulfill.
     */
    fulfillableQuantity: number;
    
    /**
     * The service provider that fulfills the line item.
     * 
     * Deleted fulfillment services will return null.
     * 
     */
    fulfillmentService?: FulfillmentService;
    
    /**
     * The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
     * 'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
     * 
     */
    fulfillmentStatus: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The image associated to the line item's variant.
     */
    image?: Image;
    
    /**
     * Whether the line item can be edited or not.
     */
    merchantEditable: boolean;
    
    /**
     * The name of the product.
     */
    name: string;
    
    /**
     * The total number of units that can't be fulfilled. For example, if items have been refunded, or the item isn't something that can be fulfilled, like a tip.
     */
    nonFulfillableQuantity: number;
    
    /**
     * The total price without any discounts applied, in shop currency. ""This value is based on the unit price of the variant x quantity.
     * 
     * @deprecated Use `originalTotalSet` instead.
     */
    originalTotal: Money;
    
    /**
     * The total price in shop and presentment currencies, without discounts applied. This value is based on the unit price of the variant x quantity.
     */
    originalTotalSet: MoneyBag;
    
    /**
     * The variant unit price without discounts applied, in shop currency.
     * @deprecated Use `originalUnitPriceSet` instead.
     */
    originalUnitPrice: Money;
    
    /**
     * The variant unit price without discounts applied, in shop and presentment currencies.
     */
    originalUnitPriceSet: MoneyBag;
    
    /**
     * The Product object associated with this line item's variant.
     */
    product?: Product;
    
    /**
     * The number of variant units ordered.
     */
    quantity: number;
    
    /**
     * The line item's quantity, minus the refunded quantity.
     */
    refundableQuantity: number;
    
    /**
     * Whether physical shipping is required for the variant.
     */
    requiresShipping: boolean;
    
    /**
     * Whether the line item can be restocked.
     */
    restockable: boolean;
    
    /**
     * The variant SKU number.
     */
    sku?: string;
    
    /**
     * Staff attributed to the line item.
     */
    staffMember?: StaffMember;
    
    /**
     * The TaxLine object connected to this line item.
     */
    taxLines: Array<TaxLine>;
    
    /**
     * Whether the variant is taxable.
     */
    taxable: boolean;
    
    /**
     * The title of the product.
     */
    title: string;
    
    /**
     * The total amount of the discount allocated to the line item in the shop currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information.
     * @deprecated Use `totalDiscountSet` instead.
     */
    totalDiscount: Money;
    
    /**
     * The total amount of the discount allocated to the line item in the presentment currency. This field must be explicitly set using draft orders, Shopify scripts, or the API. Instead of using this field, Shopify recommends using `discountAllocations`, which provides the same information.
     */
    totalDiscountSet: MoneyBag;
    
    /**
     * The total discounted value of unfulfilled units, in shop currency.
     * @deprecated Use `unfulfilledDiscountedTotalSet` instead.
     */
    unfulfilledDiscountedTotal: Money;
    
    /**
     * The total discounted value of unfulfilled units, in shop and presentment currencies.
     */
    unfulfilledDiscountedTotalSet: MoneyBag;
    
    /**
     * The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop currency.
     * @deprecated Use `unfulfilledOriginalTotalSet` instead.
     */
    unfulfilledOriginalTotal: Money;
    
    /**
     * The total price without any discounts applied. This value is based on the unit price of the variant x quantity of all unfulfilled units, in shop and presentment currencies.
     */
    unfulfilledOriginalTotalSet: MoneyBag;
    
    /**
     * The number of units not yet fulfilled.
     */
    unfulfilledQuantity: number;
    
    /**
     * The Variant object associated with this line item.
     */
    variant?: ProductVariant;
    
    /**
     * The name of the variant.
     */
    variantTitle?: string;
    
    /**
     * The name of the vendor who made the variant.
     */
    vendor?: string;
  }
  
  /**
   * The payment collection details for an order that requires additional payment following an edit to the order.
   */
  export interface OrderPaymentCollectionDetails {
    
    /**
     * The URL to use for collecting an additional payment on the order.
     */
    additionalPaymentCollectionUrl?: URL;
    
    /**
     * The list of vaulted payment methods for the order with their permissions.
     */
    vaultedPaymentMethods?: Array<PaymentMandate>;
  }
  
  /**
   * A payment instrument and the permission
   * the owner of the instrument gives to the merchant to debit it.
   * 
   */
  export interface PaymentMandate extends Node {
    
    /**
     * The unique ID of a payment mandate.
     */
    id: string;
    
    /**
     * The outputs details of the payment instrument.
     */
    paymentInstrument: PaymentInstrument;
  }
  
  /**
   * All possible instrument outputs for Payment Mandates.
   */
  export type PaymentInstrument = VaultCreditCard | VaultPaypalBillingAgreement;
  
  /** Use this to resolve union type PaymentInstrument */
  export type PossiblePaymentInstrumentTypeNames =
  'VaultCreditCard' |
  'VaultPaypalBillingAgreement';
  
  export interface PaymentInstrumentNameMap {
    PaymentInstrument: PaymentInstrument;
    VaultCreditCard: VaultCreditCard;
    VaultPaypalBillingAgreement: VaultPaypalBillingAgreement;
  }
  
  /**
   * Represents a credit card payment instrument.
   */
  export interface VaultCreditCard {
    
    /**
     * The billing address of the card.
     */
    billingAddress?: CustomerCreditCardBillingAddress;
    
    /**
     * The brand for the card.
     */
    brand: string;
    
    /**
     * Whether the card has been expired.
     */
    expired: boolean;
    
    /**
     * The expiry month of the card.
     */
    expiryMonth: number;
    
    /**
     * The expiry year of the card.
     */
    expiryYear: number;
    
    /**
     * The last four digits for the card.
     */
    lastDigits: string;
    
    /**
     * The name of the card holder.
     */
    name: string;
  }
  
  /**
   * Represents a paypal billing agreement payment instrument.
   */
  export interface VaultPaypalBillingAgreement {
    
    /**
     * Whether the paypal billing agreement is inactive.
     */
    inactive: boolean;
    
    /**
     * The paypal account name.
     */
    name: string;
    
    /**
     * The paypal account email address.
     */
    paypalAccountEmail: string;
  }
  
  /**
   * Represents the payment terms for an order or draft order.
   */
  export interface PaymentTerms extends Node {
    
    /**
     * The draft order associated with the payment terms.
     */
    draftOrder?: DraftOrder;
    
    /**
     * Duration of payment terms in days based on the payment terms template used to create the payment terms.
     * 
     */
    dueInDays?: number;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The order associated with the payment terms.
     */
    order?: Order;
    
    /**
     * Whether the payment terms have overdue payment schedules.
     */
    overdue: boolean;
    
    /**
     * List of schedules for the payment terms.
     */
    paymentSchedules: PaymentScheduleConnection;
    
    /**
     * The name of the payment terms template used to create the payment terms.
     */
    paymentTermsName: string;
    
    /**
     * The payment terms template type used to create the payment terms.
     */
    paymentTermsType: PaymentTermsType;
    
    /**
     * The payment terms name, translated into the shop admin's preferred language.
     */
    translatedName: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple PaymentSchedules.
   * 
   */
  export interface PaymentScheduleConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<PaymentScheduleEdge>;
    
    /**
     * A list of the nodes contained in PaymentScheduleEdge.
     */
    nodes: Array<PaymentSchedule>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one PaymentSchedule and a cursor during pagination.
   * 
   */
  export interface PaymentScheduleEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of PaymentScheduleEdge.
     */
    node: PaymentSchedule;
  }
  
  /**
   * Represents the payment schedule for a single payment defined in the payment terms.
   */
  export interface PaymentSchedule extends Node {
    
    /**
     * Amount owed for this payment schedule.
     */
    amount: MoneyV2;
    
    /**
     * Date and time when the payment schedule is paid or fulfilled.
     */
    completedAt?: DateTime;
    
    /**
     * Date and time when the payment schedule is due.
     */
    dueAt?: DateTime;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Date and time when the invoice is sent.
     */
    issuedAt?: DateTime;
    
    /**
     * The payment terms the payment schedule belongs to.
     */
    paymentTerms: PaymentTerms;
  }
  
  /**
   * The type of a payment terms or a payment terms template.
   */
  export const enum PaymentTermsType {
    
    /**
     * The payment terms or payment terms template is due on receipt.
     */
    RECEIPT = 'RECEIPT',
    
    /**
     * The payment terms or payment terms template is a net type. It's due a number of days after issue.
     */
    NET = 'NET',
    
    /**
     * The payment terms or payment terms template is a fixed type. It's due on a specified date.
     */
    FIXED = 'FIXED',
    
    /**
     * The payment terms or payment terms template is due on fulfillment.
     */
    FULFILLMENT = 'FULFILLMENT',
    
    /**
     * The type of the payment terms or payment terms template is unknown.
     */
    UNKNOWN = 'UNKNOWN'
  }
  
  /**
   * Represents information about the purchasing entity for the order or draft order.
   * 
   */
  export type PurchasingEntity = Customer | PurchasingCompany;
  
  /** Use this to resolve union type PurchasingEntity */
  export type PossiblePurchasingEntityTypeNames =
  'Customer' |
  'PurchasingCompany';
  
  export interface PurchasingEntityNameMap {
    PurchasingEntity: PurchasingEntity;
    Customer: Customer;
    PurchasingCompany: PurchasingCompany;
  }
  
  /**
   * Represents information about the purchasing company for the order or draft order.
   * 
   */
  export interface PurchasingCompany {
    
    /**
     * The company associated to the order or draft order.
     */
    company: Company;
    
    /**
     * The company contact associated to the order or draft order.
     */
    contact?: CompanyContact;
    
    /**
     * The company location associated to the order or draft order.
     */
    location: CompanyLocation;
  }
  
  /**
   * A location or branch of a [company that's a customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the shop. Configuration of B2B relationship, for example prices lists and checkout settings, may be done for a location.
   */
  export interface CompanyLocation extends CommentEventSubject, HasEvents, HasMetafieldDefinitions, HasMetafields, Navigable, Node {
    
    /**
     * The address used as billing address for the location.
     */
    billingAddress?: CompanyAddress;
    
    /**
     * The configuration for the buyer's B2B checkout.
     */
    buyerExperienceConfiguration?: BuyerExperienceConfiguration;
    
    /**
     * The list of catalogs associated with the company location.
     */
    catalogs: CatalogConnection;
    
    /**
     * The company that the company location belongs to.
     */
    company: Company;
    
    /**
     * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was created in Shopify.
     */
    createdAt: DateTime;
    
    /**
     * The location's currency based on the shipping address. If the shipping address is empty, then the value is the shop's primary market.
     */
    currency: CurrencyCode;
    
    /**
     * A default cursor that returns the single next record, sorted ascending by ID.
     * 
     */
    defaultCursor: string;
    
    /**
     * The list of draft orders for the company location.
     */
    draftOrders: DraftOrderConnection;
    
    /**
     * The paginated list of events associated with the host subject.
     */
    events: EventConnection;
    
    /**
     * A unique externally-supplied ID for the company location.
     */
    externalId?: string;
    
    /**
     * Whether the merchant added a timeline comment to the company location.
     */
    hasTimelineComment: boolean;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Whether the company location is assigned a specific catalog.
     */
    inCatalog: boolean;
    
    /**
     * The preferred locale of the company location.
     */
    locale?: string;
    
    /**
     * The market that includes the location's shipping address. If the shipping address is empty, then the value is the shop's primary market.
     */
    market: Market;
    
    /**
     * Returns a metafield by namespace and key that belongs to the resource.
     */
    metafield?: Metafield;
    
    /**
     * List of metafield definitions.
     */
    metafieldDefinitions: MetafieldDefinitionConnection;
    
    /**
     * List of metafields that belong to the resource.
     */
    metafields: MetafieldConnection;
    
    /**
     * The name of the company location.
     */
    name: string;
    
    /**
     * A note about the company location.
     */
    note?: string;
    
    /**
     * The total number of orders placed for the location.
     */
    orderCount: number;
    
    /**
     * The list of orders for the company location.
     */
    orders: OrderConnection;
    
    /**
     * The phone number of the company location.
     */
    phone?: string;
    
    /**
     * Returns a private metafield by namespace and key that belongs to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * List of private metafields that belong to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafields: PrivateMetafieldConnection;
    
    /**
     * The list of roles assigned to the company location.
     */
    roleAssignments: CompanyContactRoleAssignmentConnection;
    
    /**
     * The address used as shipping address for the location.
     */
    shippingAddress?: CompanyAddress;
    
    /**
     * The list of tax exemptions applied to the location.
     */
    taxExemptions: Array<TaxExemption>;
    
    /**
     * The tax registration ID for the company location.
     */
    taxRegistrationId?: string;
    
    /**
     * The total amount spent by the location.
     */
    totalSpent: MoneyV2;
    
    /**
     * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company location was last modified.
     */
    updatedAt: DateTime;
  }
  
  /**
   * Represents a billing or shipping address for a company location.
   */
  export interface CompanyAddress extends Node {
    
    /**
     * The first line of the address. Typically the street address or PO Box number.
     */
    address1: string;
    
    /**
     * The second line of the address. Typically the number of the apartment, suite, or unit.
     */
    address2?: string;
    
    /**
     * The name of the city, district, village, or town.
     */
    city?: string;
    
    /**
     * The name of the company.
     */
    companyName: string;
    
    /**
     * The name of the country.
     */
    country?: string;
    
    /**
     * The two-letter code for the country of the address.
     * For example, US.
     * 
     */
    countryCode: CountryCode;
    
    /**
     * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was created.
     * 
     */
    createdAt: DateTime;
    
    /**
     * The first name of the recipient.
     */
    firstName?: string;
    
    /**
     * The formatted version of the address.
     */
    formattedAddress: Array<string>;
    
    /**
     * A comma-separated list of the values for city, province, and country.
     */
    formattedArea?: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The last name of the recipient.
     */
    lastName?: string;
    
    /**
     * A unique phone number for the customer.
     * Formatted using E.164 standard. For example, _+16135551111_.
     * 
     */
    phone?: string;
    
    /**
     * The region of the address, such as the province, state, or district.
     */
    province?: string;
    
    /**
     * The identity of the recipient e.g. 'Receiving Department'.
     */
    recipient?: string;
    
    /**
     * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was last updated.
     * 
     */
    updatedAt: DateTime;
    
    /**
     * The zip or postal code of the address.
     */
    zip?: string;
    
    /**
     * The two-letter code for the region.
     * For example, ON.
     * 
     */
    zoneCode?: string;
  }
  
  /**
   * Settings describing the behavior of checkout for a B2B buyer.
   */
  export interface BuyerExperienceConfiguration {
    
    /**
     * Whether to checkout to draft order for merchant review.
     */
    checkoutToDraft: boolean;
    
    /**
     * Whether to allow customers to use editable shipping addresses.
     */
    editableShippingAddress: boolean;
    
    /**
     * Whether a buyer must pay at checkout or they can also choose to pay
     * later using net terms.
     * 
     */
    payNowOnly: boolean;
    
    /**
     * Represents the merchant configured payment terms.
     */
    paymentTermsTemplate?: PaymentTermsTemplate;
  }
  
  /**
   * Represents the payment terms template object.
   */
  export interface PaymentTermsTemplate extends Node {
    
    /**
     * The description of the payment terms template.
     */
    description: string;
    
    /**
     * The number of days between the issued date and due date if this is the net type of payment terms.
     */
    dueInDays?: number;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The name of the payment terms template.
     */
    name: string;
    
    /**
     * The type of the payment terms template.
     */
    paymentTermsType: PaymentTermsType;
    
    /**
     * The translated payment terms template name.
     */
    translatedName: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple Catalogs.
   * 
   */
  export interface CatalogConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CatalogEdge>;
    
    /**
     * A list of the nodes contained in CatalogEdge.
     */
    nodes: Array<Catalog>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
    
    /**
     * The total count of Catalogs.
     */
    totalCount: UnsignedInt64;
  }
  
  /**
   * An auto-generated type which holds one Catalog and a cursor during pagination.
   * 
   */
  export interface CatalogEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CatalogEdge.
     */
    node: Catalog;
  }
  
  /**
   * The set of valid sort keys for the Order query.
   */
  export const enum OrderSortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `customer_name` value.
     */
    CUSTOMER_NAME = 'CUSTOMER_NAME',
    
    /**
     * Sort orders by their shipping address country and city.
     */
    DESTINATION = 'DESTINATION',
    
    /**
     * Sort by the `financial_status` value.
     */
    FINANCIAL_STATUS = 'FINANCIAL_STATUS',
    
    /**
     * Sort by the `fulfillment_status` value.
     */
    FULFILLMENT_STATUS = 'FULFILLMENT_STATUS',
    
    /**
     * Sort by the `order_number` value.
     */
    ORDER_NUMBER = 'ORDER_NUMBER',
    
    /**
     * Sort by the `processed_at` value.
     */
    PROCESSED_AT = 'PROCESSED_AT',
    
    /**
     * Sort orders by the total quantity of all line items.
     */
    TOTAL_ITEMS_QUANTITY = 'TOTAL_ITEMS_QUANTITY',
    
    /**
     * Sort by the `total_price` value.
     */
    TOTAL_PRICE = 'TOTAL_PRICE',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort orders by their purchase order number.
     */
    PO_NUMBER = 'PO_NUMBER',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * The set of valid sort keys for the CompanyContactRoleAssignment query.
   */
  export const enum CompanyContactRoleAssignmentSortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `location_name` value.
     */
    LOCATION_NAME = 'LOCATION_NAME',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple CompanyContactRoleAssignments.
   * 
   */
  export interface CompanyContactRoleAssignmentConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CompanyContactRoleAssignmentEdge>;
    
    /**
     * A list of the nodes contained in CompanyContactRoleAssignmentEdge.
     */
    nodes: Array<CompanyContactRoleAssignment>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one CompanyContactRoleAssignment and a cursor during pagination.
   * 
   */
  export interface CompanyContactRoleAssignmentEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CompanyContactRoleAssignmentEdge.
     */
    node: CompanyContactRoleAssignment;
  }
  
  /**
   * The CompanyContactRoleAssignment describes the company and location associated to a company contact's role.
   */
  export interface CompanyContactRoleAssignment extends Node {
    
    /**
     * The company this role assignment belongs to.
     */
    company: Company;
    
    /**
     * The company contact for whom this role is assigned.
     */
    companyContact: CompanyContact;
    
    /**
     * The company location to which the role is assigned.
     */
    companyLocation: CompanyLocation;
    
    /**
     * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was created.
     */
    createdAt: DateTime;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The role that's assigned to the company contact.
     */
    role: CompanyContactRole;
    
    /**
     * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was last updated.
     */
    updatedAt: DateTime;
  }
  
  /**
   * Available customer tax exemptions.
   */
  export const enum TaxExemption {
    
    /**
     * This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada.
     */
    CA_STATUS_CARD_EXEMPTION = 'CA_STATUS_CARD_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia.
     */
    CA_BC_RESELLER_EXEMPTION = 'CA_BC_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba.
     */
    CA_MB_RESELLER_EXEMPTION = 'CA_MB_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan.
     */
    CA_SK_RESELLER_EXEMPTION = 'CA_SK_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada.
     */
    CA_DIPLOMAT_EXEMPTION = 'CA_DIPLOMAT_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia.
     */
    CA_BC_COMMERCIAL_FISHERY_EXEMPTION = 'CA_BC_COMMERCIAL_FISHERY_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba.
     */
    CA_MB_COMMERCIAL_FISHERY_EXEMPTION = 'CA_MB_COMMERCIAL_FISHERY_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia.
     */
    CA_NS_COMMERCIAL_FISHERY_EXEMPTION = 'CA_NS_COMMERCIAL_FISHERY_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island.
     */
    CA_PE_COMMERCIAL_FISHERY_EXEMPTION = 'CA_PE_COMMERCIAL_FISHERY_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan.
     */
    CA_SK_COMMERCIAL_FISHERY_EXEMPTION = 'CA_SK_COMMERCIAL_FISHERY_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia.
     */
    CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION = 'CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan.
     */
    CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION = 'CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia.
     */
    CA_BC_SUB_CONTRACTOR_EXEMPTION = 'CA_BC_SUB_CONTRACTOR_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan.
     */
    CA_SK_SUB_CONTRACTOR_EXEMPTION = 'CA_SK_SUB_CONTRACTOR_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia.
     */
    CA_BC_CONTRACTOR_EXEMPTION = 'CA_BC_CONTRACTOR_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan.
     */
    CA_SK_CONTRACTOR_EXEMPTION = 'CA_SK_CONTRACTOR_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario.
     */
    CA_ON_PURCHASE_EXEMPTION = 'CA_ON_PURCHASE_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba.
     */
    CA_MB_FARMER_EXEMPTION = 'CA_MB_FARMER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia.
     */
    CA_NS_FARMER_EXEMPTION = 'CA_NS_FARMER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan.
     */
    CA_SK_FARMER_EXEMPTION = 'CA_SK_FARMER_EXEMPTION',
    
    /**
     * This customer is exempt from VAT for purchases within the EU that is shipping from outside of customer's country.
     */
    EU_REVERSE_CHARGE_EXEMPTION_RULE = 'EU_REVERSE_CHARGE_EXEMPTION_RULE',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alabama.
     */
    US_AL_RESELLER_EXEMPTION = 'US_AL_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alaska.
     */
    US_AK_RESELLER_EXEMPTION = 'US_AK_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arizona.
     */
    US_AZ_RESELLER_EXEMPTION = 'US_AZ_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arkansas.
     */
    US_AR_RESELLER_EXEMPTION = 'US_AR_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in California.
     */
    US_CA_RESELLER_EXEMPTION = 'US_CA_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Colorado.
     */
    US_CO_RESELLER_EXEMPTION = 'US_CO_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Connecticut.
     */
    US_CT_RESELLER_EXEMPTION = 'US_CT_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Delaware.
     */
    US_DE_RESELLER_EXEMPTION = 'US_DE_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Florida.
     */
    US_FL_RESELLER_EXEMPTION = 'US_FL_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Georgia.
     */
    US_GA_RESELLER_EXEMPTION = 'US_GA_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Hawaii.
     */
    US_HI_RESELLER_EXEMPTION = 'US_HI_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Idaho.
     */
    US_ID_RESELLER_EXEMPTION = 'US_ID_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Illinois.
     */
    US_IL_RESELLER_EXEMPTION = 'US_IL_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Indiana.
     */
    US_IN_RESELLER_EXEMPTION = 'US_IN_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Iowa.
     */
    US_IA_RESELLER_EXEMPTION = 'US_IA_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kansas.
     */
    US_KS_RESELLER_EXEMPTION = 'US_KS_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kentucky.
     */
    US_KY_RESELLER_EXEMPTION = 'US_KY_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Louisiana.
     */
    US_LA_RESELLER_EXEMPTION = 'US_LA_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maine.
     */
    US_ME_RESELLER_EXEMPTION = 'US_ME_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maryland.
     */
    US_MD_RESELLER_EXEMPTION = 'US_MD_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Massachusetts.
     */
    US_MA_RESELLER_EXEMPTION = 'US_MA_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Michigan.
     */
    US_MI_RESELLER_EXEMPTION = 'US_MI_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Minnesota.
     */
    US_MN_RESELLER_EXEMPTION = 'US_MN_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Mississippi.
     */
    US_MS_RESELLER_EXEMPTION = 'US_MS_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Missouri.
     */
    US_MO_RESELLER_EXEMPTION = 'US_MO_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Montana.
     */
    US_MT_RESELLER_EXEMPTION = 'US_MT_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nebraska.
     */
    US_NE_RESELLER_EXEMPTION = 'US_NE_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nevada.
     */
    US_NV_RESELLER_EXEMPTION = 'US_NV_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Hampshire.
     */
    US_NH_RESELLER_EXEMPTION = 'US_NH_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Jersey.
     */
    US_NJ_RESELLER_EXEMPTION = 'US_NJ_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Mexico.
     */
    US_NM_RESELLER_EXEMPTION = 'US_NM_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New York.
     */
    US_NY_RESELLER_EXEMPTION = 'US_NY_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Carolina.
     */
    US_NC_RESELLER_EXEMPTION = 'US_NC_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Dakota.
     */
    US_ND_RESELLER_EXEMPTION = 'US_ND_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Ohio.
     */
    US_OH_RESELLER_EXEMPTION = 'US_OH_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oklahoma.
     */
    US_OK_RESELLER_EXEMPTION = 'US_OK_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oregon.
     */
    US_OR_RESELLER_EXEMPTION = 'US_OR_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Pennsylvania.
     */
    US_PA_RESELLER_EXEMPTION = 'US_PA_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Rhode Island.
     */
    US_RI_RESELLER_EXEMPTION = 'US_RI_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Carolina.
     */
    US_SC_RESELLER_EXEMPTION = 'US_SC_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Dakota.
     */
    US_SD_RESELLER_EXEMPTION = 'US_SD_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Tennessee.
     */
    US_TN_RESELLER_EXEMPTION = 'US_TN_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Texas.
     */
    US_TX_RESELLER_EXEMPTION = 'US_TX_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Utah.
     */
    US_UT_RESELLER_EXEMPTION = 'US_UT_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Vermont.
     */
    US_VT_RESELLER_EXEMPTION = 'US_VT_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Virginia.
     */
    US_VA_RESELLER_EXEMPTION = 'US_VA_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington.
     */
    US_WA_RESELLER_EXEMPTION = 'US_WA_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in West Virginia.
     */
    US_WV_RESELLER_EXEMPTION = 'US_WV_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wisconsin.
     */
    US_WI_RESELLER_EXEMPTION = 'US_WI_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wyoming.
     */
    US_WY_RESELLER_EXEMPTION = 'US_WY_RESELLER_EXEMPTION',
    
    /**
     * This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington DC.
     */
    US_DC_RESELLER_EXEMPTION = 'US_DC_RESELLER_EXEMPTION'
  }
  
  /**
   * The order's aggregated return status that's used for display purposes.
   * An order might have multiple returns, so this field communicates the prioritized return status.
   * The `OrderReturnStatus` enum is a supported filter parameter in the [`orders` query](https://shopify.dev/api/admin-graphql/latest/queries/orders#:~:text=reference_location_id-,return_status,-risk_level).
   * 
   */
  export const enum OrderReturnStatus {
    
    /**
     * Some items in the order are being returned.
     */
    IN_PROGRESS = 'IN_PROGRESS',
    
    /**
     * All return shipments from a return in this order were inspected.
     */
    INSPECTION_COMPLETE = 'INSPECTION_COMPLETE',
    
    /**
     * No items in the order were returned.
     */
    NO_RETURN = 'NO_RETURN',
    
    /**
     * Some items in the order were returned.
     */
    RETURNED = 'RETURNED',
    
    /**
     * Some returns in the order were not completed successfully.
     */
    RETURN_FAILED = 'RETURN_FAILED',
    
    /**
     * A return was requested for some items in the order.
     */
    RETURN_REQUESTED = 'RETURN_REQUESTED'
  }
  
  /**
   * An auto-generated type for paginating through multiple Returns.
   * 
   */
  export interface ReturnConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ReturnEdge>;
    
    /**
     * A list of the nodes contained in ReturnEdge.
     */
    nodes: Array<Return>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Return and a cursor during pagination.
   * 
   */
  export interface ReturnEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ReturnEdge.
     */
    node: Return;
  }
  
  /**
   * The likelihood that an order is fraudulent.
   */
  export const enum OrderRiskLevel {
    
    /**
     * There is a low level of risk that this order is fraudulent.
     */
    LOW = 'LOW',
    
    /**
     * There is a medium level of risk that this order is fraudulent.
     */
    MEDIUM = 'MEDIUM',
    
    /**
     * There is a high level of risk that this order is fraudulent.
     */
    HIGH = 'HIGH'
  }
  
  /**
   * Represents a fraud check on an order.
   * As of version 2024-04 this resource is deprecated. Risk Assessments can be queried via the
   * [OrderRisk Assessments API](https://shopify.dev/api/admin-graphql/2024-04/objects/OrderRiskAssessment).
   * 
   */
  export interface OrderRisk {
    
    /**
     * Whether the risk level is shown in the Shopify admin. If false, then this order risk is ignored when Shopify determines the overall risk level for the order.
     * @deprecated This field is deprecated in version 2024-04
     */
    display: boolean;
    
    /**
     * The likelihood that an order is fraudulent, based on this order risk.
     * 
     * The level can be set by Shopify risk analysis or by an app.
     * 
     * @deprecated This field is deprecated in version 2024-04. Please use OrderRiskAssessment.riskLevel
     */
    level?: OrderRiskLevel;
    
    /**
     * The risk message that's shown to the merchant in the Shopify admin.
     * @deprecated This field is deprecated in version 2024-04
     */
    message?: string;
  }
  
  /**
   * Represents the shipping details that the customer chose for their order.
   */
  export interface ShippingLine {
    
    /**
     * A reference to the carrier service that provided the rate.
     * Present when the rate was computed by a third-party carrier service.
     * 
     */
    carrierIdentifier?: string;
    
    /**
     * A reference to the shipping method.
     */
    code?: string;
    
    /**
     * Whether the shipping line is custom or not.
     */
    custom: boolean;
    
    /**
     * The general classification of the delivery method.
     */
    deliveryCategory?: string;
    
    /**
     * The discounts that have been allocated to the shipping line.
     * 
     */
    discountAllocations: Array<DiscountAllocation>;
    
    /**
     * The pre-tax shipping price with discounts applied.
     * @deprecated Use `discountedPriceSet` instead.
     */
    discountedPrice: MoneyV2;
    
    /**
     * The shipping price after applying discounts. If the parent order.taxesIncluded field is true, then this price includes taxes. If not, it's the pre-tax price.
     * 
     */
    discountedPriceSet: MoneyBag;
    
    /**
     * A globally-unique ID.
     */
    id?: string;
    
    /**
     * The pre-tax shipping price without any discounts applied.
     * @deprecated Use `originalPriceSet` instead.
     */
    originalPrice: MoneyV2;
    
    /**
     * The pre-tax shipping price without any discounts applied.
     */
    originalPriceSet: MoneyBag;
    
    /**
     * The phone number at the shipping address.
     */
    phone?: string;
    
    /**
     * Returns the price of the shipping line.
     * @deprecated Use `originalPriceSet` instead.
     */
    price: Money;
    
    /**
     * The fulfillment service requested for the shipping method.
     * Present if the shipping method requires processing by a third party fulfillment service.
     * 
     */
    requestedFulfillmentService?: FulfillmentService;
    
    /**
     * A unique identifier for the shipping rate. The format can change without notice and isn't meant to be shown to users.
     */
    shippingRateHandle?: string;
    
    /**
     * Returns the rate source for the shipping line.
     */
    source?: string;
    
    /**
     * The TaxLine objects connected to this shipping line.
     */
    taxLines: Array<TaxLine>;
    
    /**
     * Returns the title of the shipping line.
     */
    title: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple ShippingLines.
   * 
   */
  export interface ShippingLineConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ShippingLineEdge>;
    
    /**
     * A list of the nodes contained in ShippingLineEdge.
     */
    nodes: Array<ShippingLine>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ShippingLine and a cursor during pagination.
   * 
   */
  export interface ShippingLineEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ShippingLineEdge.
     */
    node: ShippingLine;
  }
  
  /**
   * A summary of Shopify Protect details for an order.
   * 
   */
  export interface ShopifyProtectOrderSummary {
    
    /**
     * The eligibility details of an order's protection against fraudulent chargebacks.
     */
    eligibility: ShopifyProtectOrderEligibility;
    
    /**
     * The status of the order's protection against fraudulent chargebacks.
     */
    status: ShopifyProtectStatus;
  }
  
  /**
   * The eligibility details of an order's protection against fraudulent chargebacks by Shopify Protect.
   */
  export interface ShopifyProtectOrderEligibility {
    
    /**
     * The status of whether an order is eligible for protection against fraudulent chargebacks.
     */
    status: ShopifyProtectEligibilityStatus;
  }
  
  /**
   * The status of an order's eligibility for protection against fraudulent chargebacks by Shopify Protect.
   * 
   */
  export const enum ShopifyProtectEligibilityStatus {
    
    /**
     * The eligibility of the order is pending and has not yet been determined.
     */
    PENDING = 'PENDING',
    
    /**
     * The order is eligible for protection against fraudulent chargebacks.
     * If an order is updated, the order's eligibility may change and protection could be removed.
     * 
     */
    ELIGIBLE = 'ELIGIBLE',
    
    /**
     * The order isn't eligible for protection against fraudulent chargebacks.
     */
    NOT_ELIGIBLE = 'NOT_ELIGIBLE'
  }
  
  /**
   * The status of an order's protection with Shopify Protect.
   */
  export const enum ShopifyProtectStatus {
    
    /**
     * The protection for the order is pending and has not yet been determined.
     */
    PENDING = 'PENDING',
    
    /**
     * The protection for the order is active and eligible for reimbursement against fraudulent chargebacks.
     * If an order is updated, the order's eligibility may change and protection could become inactive.
     * 
     */
    ACTIVE = 'ACTIVE',
    
    /**
     * The protection for an order isn't active because the order didn't meet eligibility requirements.
     */
    INACTIVE = 'INACTIVE',
    
    /**
     * The order received a fraudulent chargeback and it was protected.
     */
    PROTECTED = 'PROTECTED',
    
    /**
     * The order received a chargeback but the order wasn't protected because it didn't meet coverage requirements.
     * 
     */
    NOT_PROTECTED = 'NOT_PROTECTED'
  }
  
  /**
   * The input fields required to reimburse line items on a refund.
   */
  export interface RefundLineItemInput {
    
    /**
     * The ID of the line item in the refund.
     */
    lineItemId: string;
    
    /**
     * The quantity of the associated line item to be refunded.
     */
    quantity: number;
    
    /**
     * The type of restock for this line item.
     */
    restockType?: RefundLineItemRestockType;
    
    /**
     * The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty.`
     */
    locationId?: string;
  }
  
  /**
   * Represents a refund suggested by Shopify based on the items being reimbursed. You can then use the suggested refund object to generate an actual refund.
   */
  export interface SuggestedRefund {
    
    /**
     * The total monetary value to be refunded.
     * @deprecated Use `amountSet` instead.
     */
    amount: Money;
    
    /**
     * The total monetary value to be refunded in shop and presentment currencies.
     */
    amountSet: MoneyBag;
    
    /**
     * The sum of all the discounted prices of the line items being refunded.
     */
    discountedSubtotalSet: MoneyBag;
    
    /**
     * The total monetary value available to refund.
     * @deprecated Use `maximumRefundableSet` instead.
     */
    maximumRefundable: Money;
    
    /**
     * The total monetary value available to refund in shop and presentment currencies.
     */
    maximumRefundableSet: MoneyBag;
    
    /**
     * A list of duties to be refunded from the order.
     */
    refundDuties: Array<RefundDuty>;
    
    /**
     * A list of line items to be refunded, along with restock instructions.
     */
    refundLineItems: Array<RefundLineItem>;
    
    /**
     * The shipping costs to be refunded from the order.
     */
    shipping: ShippingRefund;
    
    /**
     * The sum of all the prices of the line items being refunded.
     * @deprecated Use `subtotalSet` instead.
     */
    subtotal: Money;
    
    /**
     * The sum of all the prices of the line items being refunded in shop and presentment currencies.
     */
    subtotalSet: MoneyBag;
    
    /**
     * A list of suggested order transactions.
     */
    suggestedTransactions: Array<SuggestedOrderTransaction>;
    
    /**
     * The total cart discount amount that was applied to all line items in this refund.
     */
    totalCartDiscountAmountSet: MoneyBag;
    
    /**
     * The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
     */
    totalDutiesSet: MoneyBag;
    
    /**
     * The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.
     */
    totalTaxSet: MoneyBag;
    
    /**
     * The sum of the taxes being refunded from the order. The value must be positive.
     * @deprecated Use `totalTaxSet` instead.
     */
    totalTaxes: Money;
  }
  
  /**
   * The valid statuses for a draft order.
   */
  export const enum DraftOrderStatus {
    
    /**
     * The draft order has been paid.
     */
    COMPLETED = 'COMPLETED',
    
    /**
     * An invoice for the draft order has been sent to the customer.
     */
    INVOICE_SENT = 'INVOICE_SENT',
    
    /**
     * The draft order is open. It has not been paid, and an invoice hasn't been sent.
     */
    OPEN = 'OPEN'
  }
  
  /**
   * The set of valid sort keys for the CompanyLocation query.
   */
  export const enum CompanyLocationSortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `name` value.
     */
    NAME = 'NAME',
    
    /**
     * Sort by the `company_id` value.
     */
    COMPANY_ID = 'COMPANY_ID',
    
    /**
     * Sort by the `company_and_location_name` value.
     */
    COMPANY_AND_LOCATION_NAME = 'COMPANY_AND_LOCATION_NAME',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple CompanyLocations.
   * 
   */
  export interface CompanyLocationConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CompanyLocationEdge>;
    
    /**
     * A list of the nodes contained in CompanyLocationEdge.
     */
    nodes: Array<CompanyLocation>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one CompanyLocation and a cursor during pagination.
   * 
   */
  export interface CompanyLocationEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CompanyLocationEdge.
     */
    node: CompanyLocation;
  }
  
  /**
   * The record of when a customer consented to receive marketing material by email.
   * 
   */
  export interface CustomerEmailMarketingConsentState {
    
    /**
     * The date and time at which the customer consented to receive marketing material by email.
     * The customer's consent state reflects the consent record with the most recent `consent_updated_at` date.
     * If no date is provided, then the date and time at which the consent information was sent is used.
     * 
     */
    consentUpdatedAt?: DateTime;
    
    /**
     * The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
     * that the customer gave when they consented to receive marketing material by email.
     * 
     */
    marketingOptInLevel?: CustomerMarketingOptInLevel;
    
    /**
     * The current email marketing state for the customer.
     */
    marketingState: CustomerEmailMarketingState;
  }
  
  /**
   * The possible values for the marketing subscription opt-in level enabled at the time the customer consented to receive marketing information.
   * 
   * The levels are defined by [the M3AAWG best practices guideline
   *   document](https://www.m3aawg.org/sites/maawg/files/news/M3AAWG_Senders_BCP_Ver3-2015-02.pdf).
   * 
   */
  export const enum CustomerMarketingOptInLevel {
    
    /**
     * After providing their information, the customer receives marketing information without any
     * intermediate steps.
     * 
     */
    SINGLE_OPT_IN = 'SINGLE_OPT_IN',
    
    /**
     * After providing their information, the customer receives a confirmation and is required to
     * perform a intermediate step before receiving marketing information.
     * 
     */
    CONFIRMED_OPT_IN = 'CONFIRMED_OPT_IN',
    
    /**
     * The customer receives marketing information but how they were opted in is unknown.
     * 
     */
    UNKNOWN = 'UNKNOWN'
  }
  
  /**
   * The possible email marketing states for a customer.
   * 
   */
  export const enum CustomerEmailMarketingState {
    
    /**
     * The customer isn't subscribed to email marketing.
     * 
     */
    NOT_SUBSCRIBED = 'NOT_SUBSCRIBED',
    
    /**
     * The customer is in the process of subscribing to email marketing.
     * 
     */
    PENDING = 'PENDING',
    
    /**
     * The customer is subscribed to email marketing.
     * 
     */
    SUBSCRIBED = 'SUBSCRIBED',
    
    /**
     * The customer isn't currently subscribed to email marketing but was previously subscribed.
     * 
     */
    UNSUBSCRIBED = 'UNSUBSCRIBED',
    
    /**
     * The customer's personal data is erased. This value is internally-set and read-only.
     * 
     */
    REDACTED = 'REDACTED',
    
    /**
     * The customer’s email address marketing state is invalid.
     * 
     */
    INVALID = 'INVALID'
  }
  
  /**
   * An object that represents whether a customer can be merged with another customer.
   * 
   */
  export interface CustomerMergeable {
    
    /**
     * The list of fields preventing the customer from being merged.
     * 
     */
    errorFields: Array<CustomerMergeErrorFieldType>;
    
    /**
     * Whether the customer can be merged with another customer.
     * 
     */
    isMergeable: boolean;
    
    /**
     * The merge request if one is currently in progress.
     * 
     */
    mergeInProgress?: CustomerMergeRequest;
    
    /**
     * The reason why the customer can't be merged with another customer.
     * 
     */
    reason?: string;
  }
  
  /**
   * The types of the hard blockers preventing a customer from being merged to another customer.
   * 
   */
  export const enum CustomerMergeErrorFieldType {
    
    /**
     * The customer does not exist.
     */
    DELETED_AT = 'DELETED_AT',
    
    /**
     * The customer has a pending or completed redaction.
     */
    REDACTED_AT = 'REDACTED_AT',
    
    /**
     * The customer has a subscription history.
     */
    SUBSCRIPTIONS = 'SUBSCRIPTIONS',
    
    /**
     * The customer has a merge in progress.
     */
    MERGE_IN_PROGRESS = 'MERGE_IN_PROGRESS',
    
    /**
     * The customer has gift cards.
     */
    GIFT_CARDS = 'GIFT_CARDS',
    
    /**
     * The customer is a company contact.
     */
    COMPANY_CONTACT = 'COMPANY_CONTACT',
    
    /**
     * The customer has payment methods.
     */
    CUSTOMER_PAYMENT_METHODS = 'CUSTOMER_PAYMENT_METHODS',
    
    /**
     * The customer has a pending data request.
     */
    PENDING_DATA_REQUEST = 'PENDING_DATA_REQUEST',
    
    /**
     * The customer has a multipass identifier.
     */
    MULTIPASS_IDENTIFIER = 'MULTIPASS_IDENTIFIER'
  }
  
  /**
   * A merge request for merging two customers.
   * 
   */
  export interface CustomerMergeRequest {
    
    /**
     * The merge errors that occurred during the customer merge request.
     */
    customerMergeErrors: Array<CustomerMergeError>;
    
    /**
     * The UUID of the merge job.
     */
    jobId?: string;
    
    /**
     * The ID of the customer resulting from the merge.
     */
    resultingCustomerId: string;
    
    /**
     * The status of the customer merge request.
     */
    status: CustomerMergeRequestStatus;
  }
  
  /**
   * The error blocking a customer merge.
   */
  export interface CustomerMergeError {
    
    /**
     * The list of fields preventing the customer from being merged.
     */
    errorFields: Array<CustomerMergeErrorFieldType>;
    
    /**
     * The customer merge error message.
     */
    message: string;
  }
  
  /**
   * The status of the customer merge request.
   * 
   */
  export const enum CustomerMergeRequestStatus {
    
    /**
     * The customer merge request has been requested.
     * 
     */
    REQUESTED = 'REQUESTED',
    
    /**
     * The customer merge request is currently in progress.
     * 
     */
    IN_PROGRESS = 'IN_PROGRESS',
    
    /**
     * The customer merge request has been completed.
     * 
     */
    COMPLETED = 'COMPLETED',
    
    /**
     * The customer merge request has failed.
     * 
     */
    FAILED = 'FAILED'
  }
  
  /**
   * An auto-generated type for paginating through multiple CustomerPaymentMethods.
   * 
   */
  export interface CustomerPaymentMethodConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CustomerPaymentMethodEdge>;
    
    /**
     * A list of the nodes contained in CustomerPaymentMethodEdge.
     */
    nodes: Array<CustomerPaymentMethod>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.
   * 
   */
  export interface CustomerPaymentMethodEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CustomerPaymentMethodEdge.
     */
    node: CustomerPaymentMethod;
  }
  
  /**
   * The possible product subscription states for a customer, as defined by the customer's subscription contracts.
   * 
   */
  export const enum CustomerProductSubscriberStatus {
    
    /**
     * The customer has at least one active subscription contract.
     * 
     */
    ACTIVE = 'ACTIVE',
    
    /**
     * The customer's last subscription contract was cancelled and there are no other active or paused
     * subscription contracts.
     * 
     */
    CANCELLED = 'CANCELLED',
    
    /**
     * The customer's last subscription contract expired and there are no other active or paused
     * subscription contracts.
     * 
     */
    EXPIRED = 'EXPIRED',
    
    /**
     * The customer's last subscription contract failed and there are no other active or paused
     * subscription contracts.
     * 
     */
    FAILED = 'FAILED',
    
    /**
     * The customer has never had a subscription contract.
     * 
     */
    NEVER_SUBSCRIBED = 'NEVER_SUBSCRIBED',
    
    /**
     * The customer has at least one paused subscription contract and there are no other active
     * subscription contracts.
     * 
     */
    PAUSED = 'PAUSED'
  }
  
  /**
   * The record of when a customer consented to receive marketing material by SMS.
   * 
   * The customer's consent state reflects the record with the most recent date when consent was updated.
   * 
   */
  export interface CustomerSmsMarketingConsentState {
    
    /**
     * The source from which the SMS marketing information for the customer was collected.
     */
    consentCollectedFrom?: CustomerConsentCollectedFrom;
    
    /**
     * The date and time when the customer consented to receive marketing material by SMS.
     * If no date is provided, then the date and time when the consent information was sent is used.
     * 
     */
    consentUpdatedAt?: DateTime;
    
    /**
     * The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
     * 
     */
    marketingOptInLevel: CustomerMarketingOptInLevel;
    
    /**
     * The current SMS marketing state for the customer.
     */
    marketingState: CustomerSmsMarketingState;
  }
  
  /**
   * The source that collected the customer's consent to receive marketing materials.
   * 
   */
  export const enum CustomerConsentCollectedFrom {
    
    /**
     * The customer consent was collected by Shopify.
     * 
     */
    SHOPIFY = 'SHOPIFY',
    
    /**
     * The customer consent was collected outside of Shopify.
     * 
     */
    OTHER = 'OTHER'
  }
  
  /**
   * The valid SMS marketing states for a customer’s phone number.
   * 
   */
  export const enum CustomerSmsMarketingState {
    
    /**
     * The customer hasn't subscribed to SMS marketing.
     * 
     */
    NOT_SUBSCRIBED = 'NOT_SUBSCRIBED',
    
    /**
     * The customer is in the process of subscribing to SMS marketing.
     * 
     */
    PENDING = 'PENDING',
    
    /**
     * The customer is subscribed to SMS marketing.
     * 
     */
    SUBSCRIBED = 'SUBSCRIBED',
    
    /**
     * The customer isn't currently subscribed to SMS marketing but was previously subscribed.
     * 
     */
    UNSUBSCRIBED = 'UNSUBSCRIBED',
    
    /**
     * The customer's personal data is erased. This value is internally-set and read-only.
     * 
     */
    REDACTED = 'REDACTED'
  }
  
  /**
   * The valid values for the state of a customer's account with a shop.
   */
  export const enum CustomerState {
    
    /**
     * The customer declined the email invite to create an account.
     * 
     */
    DECLINED = 'DECLINED',
    
    /**
     * The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time.
     * 
     */
    DISABLED = 'DISABLED',
    
    /**
     * The customer has created an account.
     * 
     */
    ENABLED = 'ENABLED',
    
    /**
     * The customer has received an email invite to create an account.
     * 
     */
    INVITED = 'INVITED'
  }
  
  /**
   * A customer's computed statistics.
   */
  export interface CustomerStatistics {
    
    /**
     * The predicted spend tier of a customer with a shop.
     */
    predictedSpendTier?: CustomerPredictedSpendTier;
  }
  
  /**
   * The valid tiers for the predicted spend of a customer with a shop.
   */
  export const enum CustomerPredictedSpendTier {
    
    /**
     * The customer's spending is predicted to be in the top spending range for the shop in the following year.
     * 
     */
    HIGH = 'HIGH',
    
    /**
     * The customer's spending is predicted to be in the normal spending range for the shop in the following year.
     * 
     */
    MEDIUM = 'MEDIUM',
    
    /**
     * The customer's spending is predicted to be zero, or in the lowest spending range for the shop in the following year.
     * 
     */
    LOW = 'LOW'
  }
  
  /**
   * A delivery customization.
   */
  export interface DeliveryCustomization extends HasMetafieldDefinitions, HasMetafields, Node {
    
    /**
     * The enabled status of the delivery customization.
     */
    enabled: boolean;
    
    /**
     * The error history on the most recent version of the delivery customization.
     */
    errorHistory?: FunctionsErrorHistory;
    
    /**
     * The ID of the Shopify Function implementing the delivery customization.
     */
    functionId: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Returns a metafield by namespace and key that belongs to the resource.
     */
    metafield?: Metafield;
    
    /**
     * List of metafield definitions.
     */
    metafieldDefinitions: MetafieldDefinitionConnection;
    
    /**
     * List of metafields that belong to the resource.
     */
    metafields: MetafieldConnection;
    
    /**
     * Returns a private metafield by namespace and key that belongs to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * List of private metafields that belong to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafields: PrivateMetafieldConnection;
    
    /**
     * The Shopify Function implementing the delivery customization.
     */
    shopifyFunction: ShopifyFunction;
    
    /**
     * The title of the delivery customization.
     */
    title: string;
  }
  
  /**
   * The error history from running a Shopify Function.
   */
  export interface FunctionsErrorHistory {
    
    /**
     * The date and time that the first error occurred.
     */
    errorsFirstOccurredAt: DateTime;
    
    /**
     * The date and time that the first error occurred.
     */
    firstOccurredAt: DateTime;
    
    /**
     * Whether the merchant has shared all the recent errors with the developer.
     */
    hasBeenSharedSinceLastError: boolean;
    
    /**
     * Whether the merchant has shared all the recent errors with the developer.
     */
    hasSharedRecentErrors: boolean;
  }
  
  /**
   * A Shopify Function.
   */
  export interface ShopifyFunction {
    
    /**
     * The API type of the Shopify Function.
     */
    apiType: string;
    
    /**
     * The API version of the Shopify Function.
     */
    apiVersion: string;
    
    /**
     * The app that owns the Shopify Function.
     */
    app: App;
    
    /**
     * The App Bridge information for the Shopify Function.
     */
    appBridge: FunctionsAppBridge;
    
    /**
     * The client ID of the app that owns the Shopify Function.
     */
    appKey: string;
    
    /**
     * The description of the Shopify Function.
     */
    description?: string;
    
    /**
     * The ID of the Shopify Function.
     */
    id: string;
    
    /**
     * The input query of the Shopify Function.
     */
    inputQuery?: string;
    
    /**
     * The title of the Shopify Function.
     */
    title: string;
    
    /**
     * If the Shopify Function uses the creation UI in the Admin.
     */
    useCreationUi: boolean;
  }
  
  /**
   * The App Bridge information for a Shopify Function.
   */
  export interface FunctionsAppBridge {
    
    /**
     * The relative path for creating a customization.
     */
    createPath: string;
    
    /**
     * The relative path for viewing a customization.
     */
    detailsPath: string;
  }
  
  /**
   * A node containing an automatic discount and its related events.
   */
  export interface DiscountAutomaticNode extends HasEvents, HasMetafieldDefinitions, HasMetafields, Node {
    
    /**
     * The automatic discount object.
     */
    automaticDiscount: DiscountAutomatic;
    
    /**
     * The paginated list of events associated with the host subject.
     */
    events: EventConnection;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Returns a metafield by namespace and key that belongs to the resource.
     */
    metafield?: Metafield;
    
    /**
     * List of metafield definitions.
     */
    metafieldDefinitions: MetafieldDefinitionConnection;
    
    /**
     * List of metafields that belong to the resource.
     */
    metafields: MetafieldConnection;
    
    /**
     * Returns a private metafield by namespace and key that belongs to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * List of private metafields that belong to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafields: PrivateMetafieldConnection;
  }
  
  /**
   * The type of discount associated to the automatic discount. For example, the automatic discount might offer a basic discount using a fixed percentage, or a fixed amount, on specific products from the order. The automatic discount may also be a BXGY discount, which offers customer discounts on select products if they add a specific product to their order.
   */
  export type DiscountAutomatic =
  DiscountAutomaticApp |
  DiscountAutomaticBasic |
  DiscountAutomaticBxgy |
  DiscountAutomaticFreeShipping;
  
  /** Use this to resolve union type DiscountAutomatic */
  export type PossibleDiscountAutomaticTypeNames =
  'DiscountAutomaticApp' |
  'DiscountAutomaticBasic' |
  'DiscountAutomaticBxgy' |
  'DiscountAutomaticFreeShipping';
  
  export interface DiscountAutomaticNameMap {
    DiscountAutomatic: DiscountAutomatic;
    DiscountAutomaticApp: DiscountAutomaticApp;
    DiscountAutomaticBasic: DiscountAutomaticBasic;
    DiscountAutomaticBxgy: DiscountAutomaticBxgy;
    DiscountAutomaticFreeShipping: DiscountAutomaticFreeShipping;
  }
  
  /**
   * An automatic app discount.
   */
  export interface DiscountAutomaticApp {
    
    /**
     * The app discount type providing the discount type.
     */
    appDiscountType: AppDiscountType;
    
    /**
     * The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
     */
    asyncUsageCount: number;
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith: DiscountCombinesWith;
    
    /**
     * The date and time when the discount was created.
     */
    createdAt: DateTime;
    
    /**
     * The class of the discount for combining purposes.
     */
    discountClass: DiscountClass;
    
    /**
     * The ID for the discount.
     */
    discountId: string;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * The error history on the most recent version of the app discount.
     */
    errorHistory?: FunctionsErrorHistory;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt: DateTime;
    
    /**
     * The status of the discount.
     */
    status: DiscountStatus;
    
    /**
     * The title of the discount.
     */
    title: string;
    
    /**
     * The date and time when the discount was updated.
     */
    updatedAt: DateTime;
  }
  
  /**
   * A script that defines a discount type.
   */
  export interface AppDiscountType {
    
    /**
     * The app providing the app discount type.
     */
    app: App;
    
    /**
     * The App Bridge details for discount type configuration.
     */
    appBridge: FunctionsAppBridge;
    
    /**
     * The client ID of the app providing the app discount type.
     */
    appKey: string;
    
    /**
     * A description of the app discount type.
     */
    description?: string;
    
    /**
     * The class of the app discount type.
     */
    discountClass: DiscountClass;
    
    /**
     * The ID of the function providing the app discount type.
     */
    functionId: string;
    
    /**
     * The target type of the app discount type. Possible values: `SHIPPING_LINE` and `LINE_ITEM`.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The title of the app discount type.
     */
    title: string;
  }
  
  /**
   * The class of the discount for combining purposes.
   */
  export const enum DiscountClass {
    
    /**
     * Combined as a product discount.
     */
    PRODUCT = 'PRODUCT',
    
    /**
     * Combined as an order discount.
     */
    ORDER = 'ORDER',
    
    /**
     * Combined as a shipping discount.
     */
    SHIPPING = 'SHIPPING'
  }
  
  /**
   * Determines which discount classes the discount can combine with.
   */
  export interface DiscountCombinesWith {
    
    /**
     * Combines with order discounts.
     */
    orderDiscounts: boolean;
    
    /**
     * Combines with product discounts.
     */
    productDiscounts: boolean;
    
    /**
     * Combines with shipping discounts.
     */
    shippingDiscounts: boolean;
  }
  
  /**
   * The status of the discount.
   */
  export const enum DiscountStatus {
    
    /**
     * The discount is active.
     */
    ACTIVE = 'ACTIVE',
    
    /**
     * The discount is expired.
     */
    EXPIRED = 'EXPIRED',
    
    /**
     * The discount is scheduled when it has a start date in the future.
     */
    SCHEDULED = 'SCHEDULED'
  }
  
  /**
   * An automatic discount that offers customers a percentage discount, or fixed amount discount, on specific products, collections, or the entire order.
   */
  export interface DiscountAutomaticBasic {
    
    /**
     * The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
     */
    asyncUsageCount: number;
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith: DiscountCombinesWith;
    
    /**
     * The date and time when the discount was created.
     */
    createdAt: DateTime;
    
    /**
     * The qualifying items in an order, the quantity of each one, and the total value of the discount.
     */
    customerGets: DiscountCustomerGets;
    
    /**
     * The class of the discount for combining purposes.
     */
    discountClass: MerchandiseDiscountClass;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * The minimum subtotal or quantity that's required for the discount to be applied.
     */
    minimumRequirement: DiscountMinimumRequirement;
    
    /**
     * The number of times a discount applies on recurring purchases (subscriptions).
     */
    recurringCycleLimit: number;
    
    /**
     * A short summary of the discount.
     */
    shortSummary: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt: DateTime;
    
    /**
     * The status of the discount.
     */
    status: DiscountStatus;
    
    /**
     * A detailed summary of the discount.
     */
    summary: string;
    
    /**
     * The title of the discount.
     */
    title: string;
    
    /**
     * The date and time when the discount was updated.
     */
    updatedAt: DateTime;
    
    /**
     * The number of times that the discount has been used.
     * @deprecated Use `asyncUsageCount` instead.
     */
    usageCount: number;
  }
  
  /**
   * The qualifying items in an order, the quantity of each one, and the total value of the discount.
   */
  export interface DiscountCustomerGets {
    
    /**
     * Whether the discount applies on regular one-time-purchase items.
     */
    appliesOnOneTimePurchase: boolean;
    
    /**
     * Whether the discount applies on subscription items.
     */
    appliesOnSubscription: boolean;
    
    /**
     * The items to which the discount applies.
     */
    items: DiscountItems;
    
    /**
     * Entitled quantity and the discount value.
     */
    value: DiscountCustomerGetsValue;
  }
  
  /**
   * The type used to target the items required for discount eligibility, or the items to which the application of a discount might apply. For example, for a customer to be eligible for a discount, they're required to add an item from a specified collection to their order. Alternatively, a customer might be required to add a specific product or product variant. When using this type to target which items the discount will apply to, the discount might apply to all items on the order, or to specific products and product variants, or items in a given collection.
   */
  export type DiscountItems =
  AllDiscountItems |
  DiscountCollections |
  DiscountProducts;
  
  /** Use this to resolve union type DiscountItems */
  export type PossibleDiscountItemsTypeNames =
  'AllDiscountItems' |
  'DiscountCollections' |
  'DiscountProducts';
  
  export interface DiscountItemsNameMap {
    DiscountItems: DiscountItems;
    AllDiscountItems: AllDiscountItems;
    DiscountCollections: DiscountCollections;
    DiscountProducts: DiscountProducts;
  }
  
  /**
   * Targets all items the cart for a specified discount.
   */
  export interface AllDiscountItems {
    
    /**
     * Whether all items are eligible for the discount. This value always returns `true`.
     */
    allItems: boolean;
  }
  
  /**
   * A list of collections that the discount can have as a prerequisite or a list of collections to which the discount can be applied.
   */
  export interface DiscountCollections {
    
    /**
     * The list of collections that the discount can have as a prerequisite or the list of collections to which the discount can be applied.
     */
    collections: CollectionConnection;
  }
  
  /**
   * A list of products and product variants that the discount can have as a prerequisite or a list of products and product variants to which the discount can be applied.
   */
  export interface DiscountProducts {
    
    /**
     * The list of product variants that the discount can have as a prerequisite or the list of product variants to which the discount can be applied.
     */
    productVariants: ProductVariantConnection;
    
    /**
     * The list of products that the discount can have as a prerequisite or the list of products to which the discount can be applied.
     */
    products: ProductConnection;
  }
  
  /**
   * The type of the discount value and how it will be applied. For example, it might be a percentage discount on a fixed number of items. Alternatively, it might be a fixed amount evenly distributed across all items or on each individual item. A third example is a percentage discount on all items.
   */
  export type DiscountCustomerGetsValue =
  DiscountAmount |
  DiscountOnQuantity |
  DiscountPercentage;
  
  /** Use this to resolve union type DiscountCustomerGetsValue */
  export type PossibleDiscountCustomerGetsValueTypeNames =
  'DiscountAmount' |
  'DiscountOnQuantity' |
  'DiscountPercentage';
  
  export interface DiscountCustomerGetsValueNameMap {
    DiscountCustomerGetsValue: DiscountCustomerGetsValue;
    DiscountAmount: DiscountAmount;
    DiscountOnQuantity: DiscountOnQuantity;
    DiscountPercentage: DiscountPercentage;
  }
  
  /**
   * The fixed amount value of a discount, and whether the amount is applied to each entitled item or spread evenly across the entitled items.
   */
  export interface DiscountAmount {
    
    /**
     * The value of the discount.
     */
    amount: MoneyV2;
    
    /**
     * If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
     */
    appliesOnEachItem: boolean;
  }
  
  /**
   * The quantity of items discounted, the discount value, and how the discount will be applied.
   */
  export interface DiscountOnQuantity {
    
    /**
     * The discount's effect on qualifying items.
     */
    effect: DiscountEffect;
    
    /**
     * The number of items being discounted. The customer must have at least this many items of specified products or product variants in their order to be eligible for the discount.
     */
    quantity: DiscountQuantity;
  }
  
  /**
   * The type of discount that will be applied. Currently, only a percentage discount is supported.
   */
  export type DiscountEffect = DiscountAmount | DiscountPercentage;
  
  /** Use this to resolve union type DiscountEffect */
  export type PossibleDiscountEffectTypeNames =
  'DiscountAmount' |
  'DiscountPercentage';
  
  export interface DiscountEffectNameMap {
    DiscountEffect: DiscountEffect;
    DiscountAmount: DiscountAmount;
    DiscountPercentage: DiscountPercentage;
  }
  
  /**
   * A discount effect that gives customers a percentage off of specified items on their order.
   */
  export interface DiscountPercentage {
    
    /**
     * The percentage value of the discount.
     */
    percentage: number;
  }
  
  /**
   * A quantity of items in the context of a discount. This object can be used to define the minimum quantity of items required to apply a discount. Alternatively, it can be used to define the quantity of items that can be discounted.
   */
  export interface DiscountQuantity {
    
    /**
     * The quantity of items.
     */
    quantity: UnsignedInt64;
  }
  
  /**
   * The class of the discount for combining purposes.
   */
  export const enum MerchandiseDiscountClass {
    
    /**
     * Combined as a product discount.
     */
    PRODUCT = 'PRODUCT',
    
    /**
     * Combined as an order discount.
     */
    ORDER = 'ORDER'
  }
  
  /**
   * The type of minimum requirement that must be met for the discount to be applied. For example, a customer must spend a minimum subtotal to be eligible for the discount. Alternatively, a customer must purchase a minimum quantity of items to be eligible for the discount.
   */
  export type DiscountMinimumRequirement =
  DiscountMinimumQuantity |
  DiscountMinimumSubtotal;
  
  /** Use this to resolve union type DiscountMinimumRequirement */
  export type PossibleDiscountMinimumRequirementTypeNames =
  'DiscountMinimumQuantity' |
  'DiscountMinimumSubtotal';
  
  export interface DiscountMinimumRequirementNameMap {
    DiscountMinimumRequirement: DiscountMinimumRequirement;
    DiscountMinimumQuantity: DiscountMinimumQuantity;
    DiscountMinimumSubtotal: DiscountMinimumSubtotal;
  }
  
  /**
   * The minimum quantity of items required for the discount to apply.
   */
  export interface DiscountMinimumQuantity {
    
    /**
     * The minimum quantity of items that's required for the discount to be applied.
     */
    greaterThanOrEqualToQuantity: UnsignedInt64;
  }
  
  /**
   * The minimum subtotal required for the discount to apply.
   */
  export interface DiscountMinimumSubtotal {
    
    /**
     * The minimum subtotal that's required for the discount to be applied.
     */
    greaterThanOrEqualToSubtotal: MoneyV2;
  }
  
  /**
   * An automatic discount that offers customers a Buy X, Get Y (BXGY) discount.
   */
  export interface DiscountAutomaticBxgy extends HasEvents, Node {
    
    /**
     * The number of times the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
     */
    asyncUsageCount: number;
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith: DiscountCombinesWith;
    
    /**
     * The date and time when the discount was created.
     */
    createdAt: DateTime;
    
    /**
     * The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
     */
    customerBuys: DiscountCustomerBuys;
    
    /**
     * The qualifying items in an order, the quantity of each one, and the total value of the discount.
     */
    customerGets: DiscountCustomerGets;
    
    /**
     * The class of the discount for combining purposes.
     */
    discountClass: MerchandiseDiscountClass;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * The paginated list of events associated with the host subject.
     */
    events: EventConnection;
    
    /**
     * A legacy unique ID for the discount.
     * @deprecated Use DiscountAutomaticNode.id instead.
     */
    id: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt: DateTime;
    
    /**
     * The status of the discount.
     */
    status: DiscountStatus;
    
    /**
     * A detailed summary of the discount.
     */
    summary: string;
    
    /**
     * The title of the discount.
     */
    title: string;
    
    /**
     * The date and time when the discount was updated.
     */
    updatedAt: DateTime;
    
    /**
     * The number of times that the discount has been used.
     * @deprecated Use `asyncUsageCount` instead.
     */
    usageCount: number;
    
    /**
     * The maximum number of times that the discount can be applied to an order.
     */
    usesPerOrderLimit?: number;
  }
  
  /**
   * The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable.
   */
  export interface DiscountCustomerBuys {
    
    /**
     * The items required for the discount to be applicable.
     */
    items: DiscountItems;
    
    /**
     * The prerequisite value.
     */
    value: DiscountCustomerBuysValue;
  }
  
  /**
   * The prerequisite for the discount to be applicable. For example, the discount might require a customer to buy a minimum quantity of select items. Alternatively, the discount might require a customer to spend a minimum amount on select items.
   */
  export type DiscountCustomerBuysValue =
  DiscountPurchaseAmount |
  DiscountQuantity;
  
  /** Use this to resolve union type DiscountCustomerBuysValue */
  export type PossibleDiscountCustomerBuysValueTypeNames =
  'DiscountPurchaseAmount' |
  'DiscountQuantity';
  
  export interface DiscountCustomerBuysValueNameMap {
    DiscountCustomerBuysValue: DiscountCustomerBuysValue;
    DiscountPurchaseAmount: DiscountPurchaseAmount;
    DiscountQuantity: DiscountQuantity;
  }
  
  /**
   * A purchase amount in the context of a discount. This object can be used to define the minimum purchase amount required for a discount to be applicable.
   */
  export interface DiscountPurchaseAmount {
    
    /**
     * The purchase amount in decimal format.
     */
    amount: Decimal;
  }
  
  /**
   * An automatic discount that offers customers free shipping on their order.
   */
  export interface DiscountAutomaticFreeShipping {
    
    /**
     * Whether the discount applies on regular one-time-purchase shipping lines.
     */
    appliesOnOneTimePurchase: boolean;
    
    /**
     * Whether the discount applies on subscription shipping lines.
     */
    appliesOnSubscription: boolean;
    
    /**
     * The number of times that the discount has been used. This value is updated asynchronously and can be different than the actual usage count.
     */
    asyncUsageCount: number;
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith: DiscountCombinesWith;
    
    /**
     * The date and time when the discount was created.
     */
    createdAt: DateTime;
    
    /**
     * A shipping destination that qualifies for the discount.
     */
    destinationSelection: DiscountShippingDestinationSelection;
    
    /**
     * The class of the discount for combining purposes.
     */
    discountClass: ShippingDiscountClass;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * Indicates whether there are any timeline comments on the discount.
     */
    hasTimelineComment: boolean;
    
    /**
     * The maximum shipping price amount accepted to qualify for the discount.
     */
    maximumShippingPrice?: MoneyV2;
    
    /**
     * The minimum subtotal or quantity that's required for the discount to be applied.
     */
    minimumRequirement: DiscountMinimumRequirement;
    
    /**
     * The number of times a discount applies on recurring purchases (subscriptions).
     */
    recurringCycleLimit: number;
    
    /**
     * A short summary of the discount.
     */
    shortSummary: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt: DateTime;
    
    /**
     * The status of the discount.
     */
    status: DiscountStatus;
    
    /**
     * A detailed summary of the discount.
     */
    summary: string;
    
    /**
     * The title of the discount.
     */
    title: string;
    
    /**
     * The total sales from orders where the discount was used.
     */
    totalSales?: MoneyV2;
    
    /**
     * The date and time when the discount was updated.
     */
    updatedAt: DateTime;
  }
  
  /**
   * The type used to target the eligible countries of an order's shipping destination for which the discount applies. For example, the discount might be applicable when shipping to all countries, or only to a set of countries.
   */
  export type DiscountShippingDestinationSelection =
  DiscountCountries |
  DiscountCountryAll;
  
  /** Use this to resolve union type DiscountShippingDestinationSelection */
  export type PossibleDiscountShippingDestinationSelectionTypeNames =
  'DiscountCountries' |
  'DiscountCountryAll';
  
  export interface DiscountShippingDestinationSelectionNameMap {
    DiscountShippingDestinationSelection: DiscountShippingDestinationSelection;
    DiscountCountries: DiscountCountries;
    DiscountCountryAll: DiscountCountryAll;
  }
  
  /**
   * The shipping destinations where the discount can be applied.
   */
  export interface DiscountCountries {
    
    /**
     * The codes for the countries where the discount can be applied.
     */
    countries: Array<CountryCode>;
    
    /**
     * Whether the discount is applicable to countries that haven't been defined in the shop's shipping zones.
     */
    includeRestOfWorld: boolean;
  }
  
  /**
   * The `DiscountCountryAll` object lets you target all countries as shipping destination for discount eligibility.
   */
  export interface DiscountCountryAll {
    
    /**
     * Whether the discount can be applied to all countries as shipping destination. This value is always `true`.
     */
    allCountries: boolean;
  }
  
  /**
   * The class of the discount for combining purposes.
   */
  export const enum ShippingDiscountClass {
    
    /**
     * Combined as a shipping discount.
     */
    SHIPPING = 'SHIPPING'
  }
  
  /**
   * A node containing a code discount and its related events.
   */
  export interface DiscountCodeNode extends HasEvents, HasMetafieldDefinitions, HasMetafields, Node {
    
    /**
     * The underlying code discount object.
     */
    codeDiscount: DiscountCode;
    
    /**
     * The paginated list of events associated with the host subject.
     */
    events: EventConnection;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Returns a metafield by namespace and key that belongs to the resource.
     */
    metafield?: Metafield;
    
    /**
     * List of metafield definitions.
     */
    metafieldDefinitions: MetafieldDefinitionConnection;
    
    /**
     * List of metafields that belong to the resource.
     */
    metafields: MetafieldConnection;
    
    /**
     * Returns a private metafield by namespace and key that belongs to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * List of private metafields that belong to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafields: PrivateMetafieldConnection;
  }
  
  /**
   * The type of discount associated with the discount code. For example, the discount code might offer a basic discount of a fixed percentage, or a fixed amount, on specific products or the order. Alternatively, the discount might offer the customer free shipping on their order. A third option is a Buy X, Get Y (BXGY) discount, which offers a customer discounts on select products if they add a specific product to their order.
   */
  export type DiscountCode =
  DiscountCodeApp |
  DiscountCodeBasic |
  DiscountCodeBxgy |
  DiscountCodeFreeShipping;
  
  /** Use this to resolve union type DiscountCode */
  export type PossibleDiscountCodeTypeNames =
  'DiscountCodeApp' |
  'DiscountCodeBasic' |
  'DiscountCodeBxgy' |
  'DiscountCodeFreeShipping';
  
  export interface DiscountCodeNameMap {
    DiscountCode: DiscountCode;
    DiscountCodeApp: DiscountCodeApp;
    DiscountCodeBasic: DiscountCodeBasic;
    DiscountCodeBxgy: DiscountCodeBxgy;
    DiscountCodeFreeShipping: DiscountCodeFreeShipping;
  }
  
  /**
   * A code app discount.
   */
  export interface DiscountCodeApp {
    
    /**
     * The app discount type providing the discount type.
     */
    appDiscountType: AppDiscountType;
    
    /**
     * Whether the discount can be applied only once per customer.
     */
    appliesOncePerCustomer: boolean;
    
    /**
     * The number of times that the discount has been used.
     */
    asyncUsageCount: number;
    
    /**
     * The number of redeem codes for the discount.
     */
    codeCount: number;
    
    /**
     * A list of redeem codes for the discount.
     */
    codes: DiscountRedeemCodeConnection;
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith: DiscountCombinesWith;
    
    /**
     * The date and time when the discount was created.
     */
    createdAt: DateTime;
    
    /**
     * The customers that can use the discount.
     */
    customerSelection: DiscountCustomerSelection;
    
    /**
     * The class of the discount for combining purposes.
     */
    discountClass: DiscountClass;
    
    /**
     * The ID for the discount.
     */
    discountId: string;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * The error history on the most recent version of the discount.
     */
    errorHistory?: FunctionsErrorHistory;
    
    /**
     * Indicates whether there are any timeline comments on the discount.
     */
    hasTimelineComment: boolean;
    
    /**
     * The number of times a discount applies on recurring purchases (subscriptions).
     */
    recurringCycleLimit?: number;
    
    /**
     * URLs that can be used to share the discount.
     */
    shareableUrls: Array<DiscountShareableUrl>;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt: DateTime;
    
    /**
     * The status of the discount.
     */
    status: DiscountStatus;
    
    /**
     * The title of the discount.
     */
    title: string;
    
    /**
     * The total sales from orders where the discount was used.
     */
    totalSales?: MoneyV2;
    
    /**
     * The date and time when the discount was updated.
     */
    updatedAt: DateTime;
    
    /**
     * The maximum number of times that the discount can be used.
     */
    usageLimit?: number;
  }
  
  /**
   * The set of valid sort keys for the DiscountCode query.
   */
  export const enum DiscountCodeSortKeys {
    
    /**
     * Sort by the `code` value.
     */
    CODE = 'CODE',
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple DiscountRedeemCodes.
   * 
   */
  export interface DiscountRedeemCodeConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<DiscountRedeemCodeEdge>;
    
    /**
     * A list of the nodes contained in DiscountRedeemCodeEdge.
     */
    nodes: Array<DiscountRedeemCode>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.
   * 
   */
  export interface DiscountRedeemCodeEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of DiscountRedeemCodeEdge.
     */
    node: DiscountRedeemCode;
  }
  
  /**
   * A code that a customer can use at checkout to receive a discount. For example, a customer can use the redeem code 'SUMMER20' at checkout to receive a 20% discount on their entire order.
   */
  export interface DiscountRedeemCode {
    
    /**
     * The number of times that the discount redeem code has been used. This value is updated asynchronously and can be different than the actual usage count.
     */
    asyncUsageCount: number;
    
    /**
     * The code that a customer can use at checkout to receive a discount.
     */
    code: string;
    
    /**
     * The application that created the discount redeem code.
     */
    createdBy?: App;
    
    /**
     * A globally-unique ID of the discount redeem code.
     */
    id: string;
  }
  
  /**
   * The type used for targeting a set of customers who are eligible for the discount. For example, the discount might be available to all customers or it might only be available to a specific set of customers. You can define the set of customers by targeting a list of customer segments, or by targeting a list of specific customers.
   */
  export type DiscountCustomerSelection =
  DiscountCustomerAll |
  DiscountCustomerSegments |
  DiscountCustomers;
  
  /** Use this to resolve union type DiscountCustomerSelection */
  export type PossibleDiscountCustomerSelectionTypeNames =
  'DiscountCustomerAll' |
  'DiscountCustomerSegments' |
  'DiscountCustomers';
  
  export interface DiscountCustomerSelectionNameMap {
    DiscountCustomerSelection: DiscountCustomerSelection;
    DiscountCustomerAll: DiscountCustomerAll;
    DiscountCustomerSegments: DiscountCustomerSegments;
    DiscountCustomers: DiscountCustomers;
  }
  
  /**
   * The `DiscountCustomerAll` object lets you target all customers for discount eligibility.
   */
  export interface DiscountCustomerAll {
    
    /**
     * Whether the discount can be applied by all customers. This value is always `true`.
     */
    allCustomers: boolean;
  }
  
  /**
   * A list of customer segments that contain the customers that the discount applies to.
   */
  export interface DiscountCustomerSegments {
    
    /**
     * A list of customer segments that contain the customers who can use the discount.
     */
    segments: Array<Segment>;
  }
  
  /**
   * A dynamic collection of customers based on specific criteria.
   * 
   */
  export interface Segment extends Node {
    
    /**
     * The date and time when the segment was added to the store.
     */
    creationDate: DateTime;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The date and time when the segment was last updated.
     */
    lastEditDate: DateTime;
    
    /**
     * The name of the segment.
     */
    name: string;
    
    /**
     * A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers.
     */
    query: string;
  }
  
  /**
   * A list of customers eligible for the discount.
   */
  export interface DiscountCustomers {
    
    /**
     * The list of customers eligible for the discount.
     */
    customers: Array<Customer>;
  }
  
  /**
   * A shareable URL for a discount code.
   */
  export interface DiscountShareableUrl {
    
    /**
     * The image URL of the item (product or collection) to which the discount applies.
     */
    targetItemImage?: Image;
    
    /**
     * The type of page that's associated with the URL.
     */
    targetType: DiscountShareableUrlTargetType;
    
    /**
     * The title of the page that's associated with the URL.
     */
    title: string;
    
    /**
     * The URL for the discount code.
     */
    url: URL;
  }
  
  /**
   * The type of page where a shareable discount URL lands.
   */
  export const enum DiscountShareableUrlTargetType {
    
    /**
     * The URL lands on a home page.
     */
    HOME = 'HOME',
    
    /**
     * The URL lands on a product page.
     */
    PRODUCT = 'PRODUCT',
    
    /**
     * The URL lands on a collection page.
     */
    COLLECTION = 'COLLECTION'
  }
  
  /**
   * A code discount that offers customers a percentage or fixed amount discount on specific products, collections, or the entire order.
   */
  export interface DiscountCodeBasic {
    
    /**
     * Whether the discount can be applied only once per customer.
     */
    appliesOncePerCustomer: boolean;
    
    /**
     * The number of times that the discount has been used.
     */
    asyncUsageCount: number;
    
    /**
     * The number of redeem codes for the discount.
     */
    codeCount: number;
    
    /**
     * A list of redeem codes for the discount.
     */
    codes: DiscountRedeemCodeConnection;
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith: DiscountCombinesWith;
    
    /**
     * The date and time when the discount was created.
     */
    createdAt: DateTime;
    
    /**
     * The qualifying items in an order, the quantity of each one, and the total value of the discount.
     */
    customerGets: DiscountCustomerGets;
    
    /**
     * The customers that can use the discount.
     */
    customerSelection: DiscountCustomerSelection;
    
    /**
     * The class of the discount for combining purposes.
     */
    discountClass: MerchandiseDiscountClass;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * Indicates whether there are any timeline comments on the discount.
     */
    hasTimelineComment: boolean;
    
    /**
     * The minimum subtotal or quantity that's required for the discount to be applied.
     */
    minimumRequirement?: DiscountMinimumRequirement;
    
    /**
     * The number of times a discount applies on recurring purchases (subscriptions).
     */
    recurringCycleLimit?: number;
    
    /**
     * URLs that can be used to share the discount.
     */
    shareableUrls: Array<DiscountShareableUrl>;
    
    /**
     * A short summary of the discount.
     */
    shortSummary: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt: DateTime;
    
    /**
     * The status of the discount.
     */
    status: DiscountStatus;
    
    /**
     * A detailed summary of the discount.
     */
    summary: string;
    
    /**
     * The title of the discount.
     */
    title: string;
    
    /**
     * The total sales from orders where the discount was used.
     */
    totalSales?: MoneyV2;
    
    /**
     * The date and time when the discount was updated.
     */
    updatedAt: DateTime;
    
    /**
     * The maximum number of times that the discount can be used.
     */
    usageLimit?: number;
  }
  
  /**
   * A code discount that offers customers a Buy X, Get Y (BXGY) discount.
   */
  export interface DiscountCodeBxgy {
    
    /**
     * Whether the discount can be applied only once per customer.
     */
    appliesOncePerCustomer: boolean;
    
    /**
     * The number of times that the discount has been used.
     */
    asyncUsageCount: number;
    
    /**
     * The number of redeem codes for the discount.
     */
    codeCount: number;
    
    /**
     * A list of redeem codes for the discount.
     */
    codes: DiscountRedeemCodeConnection;
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith: DiscountCombinesWith;
    
    /**
     * The date and time when the discount was created.
     */
    createdAt: DateTime;
    
    /**
     * The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
     */
    customerBuys: DiscountCustomerBuys;
    
    /**
     * The qualifying items in an order, the quantity of each one, and the total value of the discount.
     */
    customerGets: DiscountCustomerGets;
    
    /**
     * The customers that can use the discount.
     */
    customerSelection: DiscountCustomerSelection;
    
    /**
     * The class of the discount for combining purposes.
     */
    discountClass: MerchandiseDiscountClass;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * Indicates whether there are any timeline comments on the discount.
     */
    hasTimelineComment: boolean;
    
    /**
     * URLs that can be used to share the discount.
     */
    shareableUrls: Array<DiscountShareableUrl>;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt: DateTime;
    
    /**
     * The status of the discount.
     */
    status: DiscountStatus;
    
    /**
     * A detailed summary of the discount.
     */
    summary: string;
    
    /**
     * The title of the discount.
     */
    title: string;
    
    /**
     * The total sales from orders where the discount was used.
     */
    totalSales?: MoneyV2;
    
    /**
     * The date and time when the discount was updated.
     */
    updatedAt: DateTime;
    
    /**
     * The maximum number of times that the discount can be used.
     */
    usageLimit?: number;
    
    /**
     * The maximum number of times that the discount can be applied to an order.
     */
    usesPerOrderLimit?: number;
  }
  
  /**
   * A code discount that offers customers free shipping on their order.
   */
  export interface DiscountCodeFreeShipping {
    
    /**
     * Whether the discount applies on regular one-time-purchase shipping lines.
     */
    appliesOnOneTimePurchase: boolean;
    
    /**
     * Whether the discount applies on subscription shipping lines.
     */
    appliesOnSubscription: boolean;
    
    /**
     * Whether the discount can be applied only once per customer.
     */
    appliesOncePerCustomer: boolean;
    
    /**
     * The number of times that the discount has been used.
     */
    asyncUsageCount: number;
    
    /**
     * The number of redeem codes for the discount.
     */
    codeCount: number;
    
    /**
     * A list of redeem codes for the discount.
     */
    codes: DiscountRedeemCodeConnection;
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith: DiscountCombinesWith;
    
    /**
     * The date and time when the discount was created.
     */
    createdAt: DateTime;
    
    /**
     * The customers that can use the discount.
     */
    customerSelection: DiscountCustomerSelection;
    
    /**
     * A shipping destination that qualifies for the discount.
     */
    destinationSelection: DiscountShippingDestinationSelection;
    
    /**
     * The class of the discount for combining purposes.
     */
    discountClass: ShippingDiscountClass;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * Indicates whether there are any timeline comments on the discount.
     */
    hasTimelineComment: boolean;
    
    /**
     * The maximum shipping price amount accepted to qualify for the discount.
     */
    maximumShippingPrice?: MoneyV2;
    
    /**
     * The minimum subtotal or quantity that's required for the discount to be applied.
     */
    minimumRequirement?: DiscountMinimumRequirement;
    
    /**
     * The number of times a discount applies on recurring purchases (subscriptions).
     */
    recurringCycleLimit?: number;
    
    /**
     * URLs that can be used to share the discount.
     */
    shareableUrls: Array<DiscountShareableUrl>;
    
    /**
     * A short summary of the discount.
     */
    shortSummary: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt: DateTime;
    
    /**
     * The status of the discount.
     */
    status: DiscountStatus;
    
    /**
     * A detailed summary of the discount.
     */
    summary: string;
    
    /**
     * The title of the discount.
     */
    title: string;
    
    /**
     * The total sales from orders where the discount was used.
     */
    totalSales?: MoneyV2;
    
    /**
     * The date and time when the discount was updated.
     */
    updatedAt: DateTime;
    
    /**
     * The maximum number of times that the discount can be used.
     */
    usageLimit?: number;
  }
  
  /**
   * A discount wrapper node.
   */
  export interface DiscountNode extends HasEvents, HasMetafieldDefinitions, HasMetafields, Node {
    
    /**
     * A discount.
     */
    discount: Discount;
    
    /**
     * The paginated list of events associated with the host subject.
     */
    events: EventConnection;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Returns a metafield by namespace and key that belongs to the resource.
     */
    metafield?: Metafield;
    
    /**
     * List of metafield definitions.
     */
    metafieldDefinitions: MetafieldDefinitionConnection;
    
    /**
     * List of metafields that belong to the resource.
     */
    metafields: MetafieldConnection;
    
    /**
     * Returns a private metafield by namespace and key that belongs to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * List of private metafields that belong to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafields: PrivateMetafieldConnection;
  }
  
  /**
   * A discount.
   */
  export type Discount =
  DiscountAutomaticApp |
  DiscountAutomaticBasic |
  DiscountAutomaticBxgy |
  DiscountAutomaticFreeShipping |
  DiscountCodeApp |
  DiscountCodeBasic |
  DiscountCodeBxgy |
  DiscountCodeFreeShipping;
  
  /** Use this to resolve union type Discount */
  export type PossibleDiscountTypeNames =
  'DiscountAutomaticApp' |
  'DiscountAutomaticBasic' |
  'DiscountAutomaticBxgy' |
  'DiscountAutomaticFreeShipping' |
  'DiscountCodeApp' |
  'DiscountCodeBasic' |
  'DiscountCodeBxgy' |
  'DiscountCodeFreeShipping';
  
  export interface DiscountNameMap {
    Discount: Discount;
    DiscountAutomaticApp: DiscountAutomaticApp;
    DiscountAutomaticBasic: DiscountAutomaticBasic;
    DiscountAutomaticBxgy: DiscountAutomaticBxgy;
    DiscountAutomaticFreeShipping: DiscountAutomaticFreeShipping;
    DiscountCodeApp: DiscountCodeApp;
    DiscountCodeBasic: DiscountCodeBasic;
    DiscountCodeBxgy: DiscountCodeBxgy;
    DiscountCodeFreeShipping: DiscountCodeFreeShipping;
  }
  
  /**
   * An article in the blogging system. You can query articles from
   * [the REST API](https://shopify.dev/api/admin-rest/latest/resources/article)
   * if you need to access more information about an article. Currently, `OnlineStoreArticle` is
   * only useful to pass an article `id` to the `tagsAdd` mutation. For more information, refer to
   * the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
   * 
   */
  export interface OnlineStoreArticle extends HasPublishedTranslations, Navigable, Node {
    
    /**
     * A default cursor that returns the single next record, sorted ascending by ID.
     * 
     */
    defaultCursor: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The translations associated with the resource.
     */
    translations: Array<Translation>;
  }
  
  /**
   * Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
   * to be used as a type of magazine or newsletter for the shop, with content that changes over time.
   * 
   */
  export interface OnlineStoreBlog extends HasPublishedTranslations, Node {
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The translations associated with the resource.
     */
    translations: Array<Translation>;
  }
  
  /**
   * A custom page on the Online Store.
   */
  export interface OnlineStorePage extends HasPublishedTranslations, Navigable, Node {
    
    /**
     * A default cursor that returns the single next record, sorted ascending by ID.
     * 
     */
    defaultCursor: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The translations associated with the resource.
     */
    translations: Array<Translation>;
  }
  
  /**
   * A payment customization.
   */
  export interface PaymentCustomization extends HasMetafieldDefinitions, HasMetafields, Node {
    
    /**
     * The enabled status of the payment customization.
     */
    enabled: boolean;
    
    /**
     * The error history on the most recent version of the payment customization.
     */
    errorHistory?: FunctionsErrorHistory;
    
    /**
     * The ID of the Shopify Function implementing the payment customization.
     */
    functionId: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Returns a metafield by namespace and key that belongs to the resource.
     */
    metafield?: Metafield;
    
    /**
     * List of metafield definitions.
     */
    metafieldDefinitions: MetafieldDefinitionConnection;
    
    /**
     * List of metafields that belong to the resource.
     */
    metafields: MetafieldConnection;
    
    /**
     * Returns a private metafield by namespace and key that belongs to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * List of private metafields that belong to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafields: PrivateMetafieldConnection;
    
    /**
     * The Shopify Function implementing the payment customization.
     */
    shopifyFunction: ShopifyFunction;
    
    /**
     * The title of the payment customization.
     */
    title: string;
  }
  
  /**
   * Represents a collection of general settings and information about the shop.
   * 
   */
  export interface Shop extends HasMetafields, HasPublishedTranslations, Node {
    
    /**
     * A list of the shop's active alert messages that appear in the Shopify admin.
     */
    alerts: Array<ShopAlert>;
    
    /**
     * A list of the shop's product categories. Limit: 1000 product categories.
     */
    allProductCategories: Array<ProductCategory>;
    
    /**
     * The token required to query the shop's reports or dashboards.
     * @deprecated Not supported anymore.
     */
    analyticsToken: string;
    
    /**
     * The paginated list of fulfillment orders assigned to the shop locations owned by the app.
     * 
     * Assigned fulfillment orders are fulfillment orders that are set to be fulfilled from locations
     * managed by
     * [fulfillment services](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentService)
     * that are registered by the app.
     * One app (api_client) can host multiple fulfillment services on a shop.
     * Each fulfillment service manages a dedicated location on a shop.
     * Assigned fulfillment orders can have associated
     * [fulfillment requests](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus),
     * or might currently not be requested to be fulfilled.
     * 
     * The app must have `read_assigned_fulfillment_orders`
     * [access scope](https://shopify.dev/docs/api/usage/access-scopes)
     * to be able to retrieve fulfillment orders assigned to its locations.
     * 
     * All assigned fulfillment orders (except those with the `CLOSED` status) will be returned by default.
     * Perform filtering with the `assignmentStatus` argument
     * to receive only fulfillment orders that have been requested to be fulfilled.
     * 
     */
    assignedFulfillmentOrders: FulfillmentOrderConnection;
    
    /**
     * The list of sales channels not currently installed on the shop.
     */
    availableChannelApps: AppConnection;
    
    /**
     * The shop's billing address information.
     */
    billingAddress: ShopAddress;
    
    /**
     * Exposes the number of channels.
     * @deprecated Use `publicationCount` instead.
     */
    channelCount: number;
    
    /**
     * List of all channel definitions associated with a shop.
     */
    channelDefinitionsForInstalledChannels: Array<AvailableChannelDefinitionsByChannel>;
    
    /**
     * List of the shop's active sales channels.
     * @deprecated Use `QueryRoot.channels` instead.
     */
    channels: ChannelConnection;
    
    /**
     * Specifies whether the shop supports checkouts via Checkout API.
     */
    checkoutApiSupported: boolean;
    
    /**
     * Return a collection by its handle.
     * @deprecated Use `QueryRoot.collectionByHandle` instead.
     */
    collectionByHandle?: Collection;
    
    /**
     * List of the shop's collection saved searches.
     * @deprecated Use `QueryRoot.collectionSavedSearches` instead.
     */
    collectionSavedSearches: SavedSearchConnection;
    
    /**
     * List of the shop's collections.
     * @deprecated Use `QueryRoot.collections` instead.
     */
    collections: CollectionConnection;
    
    /**
     * The public-facing contact email address for the shop.
     * Customers will use this email to communicate with the shop owner.
     * 
     */
    contactEmail: string;
    
    /**
     * Countries that have been defined in shipping zones for the shop.
     */
    countriesInShippingZones: CountriesInShippingZones;
    
    /**
     * The three letter code for the currency that the shop sells in.
     */
    currencyCode: CurrencyCode;
    
    /**
     * How currencies are displayed on your store.
     */
    currencyFormats: CurrencyFormats;
    
    /**
     * The presentment currency settings for the shop excluding the shop's own currency.
     */
    currencySettings: CurrencySettingConnection;
    
    /**
     * Whether customer accounts are required, optional, or disabled for the shop.
     */
    customerAccounts: ShopCustomerAccountsSetting;
    
    /**
     * Information about the shop's customer accounts.
     */
    customerAccountsV2: CustomerAccountsV2;
    
    /**
     * List of the shop's customer saved searches.
     * @deprecated Use `QueryRoot.customerSavedSearches` instead.
     */
    customerSavedSearches: SavedSearchConnection;
    
    /**
     * A list of tags that have been added to customer accounts.
     */
    customerTags: StringConnection;
    
    /**
     * Customer accounts associated to the shop.
     * @deprecated Use `QueryRoot.customers` instead.
     */
    customers: CustomerConnection;
    
    /**
     * The shop's meta description used in search engine results.
     */
    description?: string;
    
    /**
     * The domains configured for the shop.
     * @deprecated Use `domainsPaginated` instead.
     */
    domains: Array<Domain>;
    
    /**
     * List of the shop's draft order saved searches.
     * @deprecated Use `QueryRoot.draftOrderSavedSearches` instead.
     */
    draftOrderSavedSearches: SavedSearchConnection;
    
    /**
     * A list of tags that have been added to draft orders.
     */
    draftOrderTags: StringConnection;
    
    /**
     * List of saved draft orders on the shop.
     * @deprecated Use `QueryRoot.draftOrders` instead.
     */
    draftOrders: DraftOrderConnection;
    
    /**
     * The shop owner's email address.
     * Shopify will use this email address to communicate with the shop owner.
     * 
     */
    email: string;
    
    /**
     * The presentment currencies enabled for the shop.
     */
    enabledPresentmentCurrencies: Array<CurrencyCode>;
    
    /**
     * The set of features enabled for the shop.
     */
    features: ShopFeatures;
    
    /**
     * The paginated list of merchant-managed and third-party fulfillment orders.
     * @deprecated Use `QueryRoot.fulfillmentOrders` instead.
     */
    fulfillmentOrders: FulfillmentOrderConnection;
    
    /**
     * List of the shop's installed fulfillment services.
     */
    fulfillmentServices: Array<FulfillmentService>;
    
    /**
     * The shop's time zone as defined by the IANA.
     */
    ianaTimezone: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * List of the shop's inventory items.
     * @deprecated Use `QueryRoot.inventoryItems` instead.
     */
    inventoryItems: InventoryItemConnection;
    
    /**
     * The number of pendings orders on the shop.
     * Limited to a maximum of 10000.
     * 
     */
    limitedPendingOrderCount: LimitedPendingOrderCount;
    
    /**
     * List of active locations of the shop.
     * @deprecated Use `QueryRoot.locations` instead.
     */
    locations: LocationConnection;
    
    /**
     * List of a shop's marketing events.
     * @deprecated Use `QueryRoot.marketingEvents` instead.
     */
    marketingEvents: MarketingEventConnection;
    
    /**
     * The approval signals for a shop to support onboarding to channel apps.
     */
    merchantApprovalSignals?: MerchantApprovalSignals;
    
    /**
     * Returns a metafield by namespace and key that belongs to the resource.
     */
    metafield?: Metafield;
    
    /**
     * List of metafields that belong to the resource.
     */
    metafields: MetafieldConnection;
    
    /**
     * The shop's .myshopify.com domain name.
     */
    myshopifyDomain: string;
    
    /**
     * The shop's name.
     */
    name: string;
    
    /**
     * The shop's settings related to navigation.
     */
    navigationSettings: Array<NavigationItem>;
    
    /**
     * The prefix that appears before order numbers.
     */
    orderNumberFormatPrefix: string;
    
    /**
     * The suffix that appears after order numbers.
     */
    orderNumberFormatSuffix: string;
    
    /**
     * List of the shop's order saved searches.
     * @deprecated Use `QueryRoot.orderSavedSearches` instead.
     */
    orderSavedSearches: SavedSearchConnection;
    
    /**
     * A list of tags that have been added to orders.
     */
    orderTags: StringConnection;
    
    /**
     * A list of the shop's orders.
     * @deprecated Use `QueryRoot.orders` instead.
     */
    orders: OrderConnection;
    
    /**
     * The shop's settings related to payments.
     */
    paymentSettings: PaymentSettings;
    
    /**
     * Number of pending orders on the shop.
     * @deprecated Use `limitedPendingOrderCount` instead.
     */
    pendingOrderCount: number;
    
    /**
     * The shop's billing plan.
     */
    plan: ShopPlan;
    
    /**
     * List of the shop's price rule saved searches.
     * @deprecated Use `QueryRoot.priceRuleSavedSearches` instead.
     */
    priceRuleSavedSearches: SavedSearchConnection;
    
    /**
     * List of the shop’s price rules.
     * @deprecated Use `QueryRoot.priceRules` instead.
     */
    priceRules: PriceRuleConnection;
    
    /**
     * The primary domain of the shop's online store.
     */
    primaryDomain: Domain;
    
    /**
     * Returns a private metafield by namespace and key that belongs to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * List of private metafields that belong to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafields: PrivateMetafieldConnection;
    
    /**
     * Return a product by its handle.
     * @deprecated Use `QueryRoot.productByHandle` instead.
     */
    productByHandle?: Product;
    
    /**
     * The list of all images of all products for the shop.
     * @deprecated Use `files` instead. See [filesQuery](https://shopify.dev/docs/api/admin-graphql/latest/queries/files) and its [query](https://shopify.dev/docs/api/admin-graphql/2024-01/queries/files#argument-query) argument for more information.
     */
    productImages: ImageConnection;
    
    /**
     * List of the shop's product saved searches.
     * @deprecated Use `QueryRoot.productSavedSearches` instead.
     */
    productSavedSearches: SavedSearchConnection;
    
    /**
     * A list of tags that have been added to products.
     */
    productTags: StringConnection;
    
    /**
     * The list of types added to products.
     */
    productTypes: StringConnection;
    
    /**
     * List of the shop's product variants.
     * @deprecated Use `QueryRoot.productVariants` instead.
     */
    productVariants: ProductVariantConnection;
    
    /**
     * The list of vendors added to products.
     */
    productVendors: StringConnection;
    
    /**
     * List of the shop's products.
     * @deprecated Use `QueryRoot.products`.
     */
    products: ProductConnection;
    
    /**
     * The number of publications for the shop.
     */
    publicationCount: number;
    
    /**
     * The shop's limits for specific resources. For example, the maximum number ofvariants allowed per product, or the maximum number of locations allowed.
     */
    resourceLimits: ShopResourceLimits;
    
    /**
     * The URL of the rich text editor that can be used for mobile devices.
     */
    richTextEditorUrl: URL;
    
    /**
     * Fetches a list of admin search results by a specified query.
     */
    search: SearchResultConnection;
    
    /**
     * The list of search filter options for the shop. These can be used to filter productvisibility for the shop.
     */
    searchFilters: SearchFilterOptions;
    
    /**
     * Whether the shop has outstanding setup steps.
     */
    setupRequired: boolean;
    
    /**
     * The list of countries that the shop ships to.
     */
    shipsToCountries: Array<CountryCode>;
    
    /**
     * The list of all legal policies associated with a shop.
     */
    shopPolicies: Array<ShopPolicy>;
    
    /**
     * The paginated list of the shop's staff members.
     */
    staffMembers: StaffMemberConnection;
    
    /**
     * The storefront access token of a private application. These are scoped per-application.
     */
    storefrontAccessTokens: StorefrontAccessTokenConnection;
    
    /**
     * The URL of the shop's storefront.
     * @deprecated Use `url` instead.
     */
    storefrontUrl: URL;
    
    /**
     * Whether the shop charges taxes for shipping.
     */
    taxShipping: boolean;
    
    /**
     * Whether applicable taxes are included in the shop's product prices.
     */
    taxesIncluded: boolean;
    
    /**
     * The shop's time zone abbreviation.
     */
    timezoneAbbreviation: string;
    
    /**
     * The shop's time zone offset.
     */
    timezoneOffset: string;
    
    /**
     * The shop's time zone offset expressed as a number of minutes.
     */
    timezoneOffsetMinutes: number;
    
    /**
     * Whether transactional SMS sent by Shopify have been disabled for a shop.
     */
    transactionalSmsDisabled: boolean;
    
    /**
     * The translations associated with the resource.
     */
    translations: Array<Translation>;
    
    /**
     * The shop's unit system for weights and measures.
     */
    unitSystem: UnitSystem;
    
    /**
     * Fetches a list of images uploaded to the shop by their IDs.
     */
    uploadedImagesByIds: Array<Image>;
    
    /**
     * The URL of the shop's online store.
     */
    url: URL;
    
    /**
     * The shop's primary unit of weight for products and shipping.
     */
    weightUnit: WeightUnit;
  }
  
  /**
   * An alert message that appears in the Shopify admin about a problem with a store setting, with an action to take. For example, you could show an alert to ask the merchant to enter their billing information to activate Shopify Plus.
   * 
   */
  export interface ShopAlert {
    
    /**
     * The text for the button in the alert that links to related information. For example, _Add credit card_.
     * 
     */
    action: ShopAlertAction;
    
    /**
     * A description of the alert and further information, such as whether the merchant will be charged.
     */
    description: string;
  }
  
  /**
   * An action associated to a shop alert, such as adding a credit card.
   */
  export interface ShopAlertAction {
    
    /**
     * The text for the button in the alert. For example, _Add credit card_.
     */
    title: string;
    
    /**
     * The target URL that the button links to.
     */
    url: URL;
  }
  
  /**
   * The assigment status to be used to filter fulfillment orders.
   */
  export const enum FulfillmentOrderAssignmentStatus {
    
    /**
     * Fulfillment orders for which the merchant has requested cancellation of
     * the previously accepted fulfillment request.
     * 
     */
    CANCELLATION_REQUESTED = 'CANCELLATION_REQUESTED',
    
    /**
     * Fulfillment orders for which the merchant has requested fulfillment.
     * 
     */
    FULFILLMENT_REQUESTED = 'FULFILLMENT_REQUESTED',
    
    /**
     * Fulfillment orders for which the merchant's fulfillment request has been accepted.
     * Any number of fulfillments can be created on these fulfillment orders
     * to completely fulfill the requested items.
     * 
     */
    FULFILLMENT_ACCEPTED = 'FULFILLMENT_ACCEPTED'
  }
  
  /**
   * The set of valid sort keys for the FulfillmentOrder query.
   */
  export const enum FulfillmentOrderSortKeys {
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple Apps.
   * 
   */
  export interface AppConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<AppEdge>;
    
    /**
     * A list of the nodes contained in AppEdge.
     */
    nodes: Array<App>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one App and a cursor during pagination.
   * 
   */
  export interface AppEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of AppEdge.
     */
    node: App;
  }
  
  /**
   * The shop's billing address.
   */
  export interface ShopAddress extends Node {
    
    /**
     * The first line of the address. Typically the street address or PO Box number.
     */
    address1?: string;
    
    /**
     * The second line of the address. Typically the number of the apartment, suite, or unit.
     * 
     */
    address2?: string;
    
    /**
     * The name of the city, district, village, or town.
     * 
     */
    city?: string;
    
    /**
     * The name of the company or organization.
     */
    company?: string;
    
    /**
     * Whether the address coordinates are valid.
     */
    coordinatesValidated: boolean;
    
    /**
     * The name of the country.
     * 
     */
    country?: string;
    
    /**
     * The two-letter code for the country of the address.
     * 
     * For example, US.
     * 
     * @deprecated Use `countryCodeV2` instead.
     */
    countryCode?: string;
    
    /**
     * The two-letter code for the country of the address.
     * 
     * For example, US.
     * 
     */
    countryCodeV2?: CountryCode;
    
    /**
     * The first name.
     * @deprecated Always null in this context.
     */
    firstName?: string;
    
    /**
     * A formatted version of the address, customized by the provided arguments.
     */
    formatted: Array<string>;
    
    /**
     * A comma-separated list of the values for city, province, and country.
     */
    formattedArea?: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The last name.
     * @deprecated Always null in this context.
     */
    lastName?: string;
    
    /**
     * The latitude coordinate of the address.
     */
    latitude?: number;
    
    /**
     * The longitude coordinate of the address.
     */
    longitude?: number;
    
    /**
     * The full name, based on firstName and lastName.
     * 
     * @deprecated Always null in this context.
     */
    name?: string;
    
    /**
     * A phone number associated with the address.
     * 
     * Formatted using E.164 standard. For example, _+16135551111_.
     * 
     */
    phone?: string;
    
    /**
     * The region of the address, such as the province, state, or district.
     */
    province?: string;
    
    /**
     * The two-letter code for the region.
     * 
     * For example, ON.
     * 
     */
    provinceCode?: string;
    
    /**
     * The zip or postal code of the address.
     */
    zip?: string;
  }
  
  /**
   * Represents an object containing all information for channels available to a shop.
   * 
   */
  export interface AvailableChannelDefinitionsByChannel {
    
    /**
     * The channel definitions for channels installed on a shop.
     */
    channelDefinitions: Array<ChannelDefinition>;
    
    /**
     * The name of the channel.
     */
    channelName: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple SavedSearches.
   * 
   */
  export interface SavedSearchConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<SavedSearchEdge>;
    
    /**
     * A list of the nodes contained in SavedSearchEdge.
     */
    nodes: Array<SavedSearch>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one SavedSearch and a cursor during pagination.
   * 
   */
  export interface SavedSearchEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of SavedSearchEdge.
     */
    node: SavedSearch;
  }
  
  /**
   * A saved search is a representation of a search query saved in the admin.
   */
  export interface SavedSearch extends LegacyInteroperability, Node {
    
    /**
     * The filters of a saved search.
     */
    filters: Array<SearchFilter>;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The ID of the corresponding resource in the REST Admin API.
     */
    legacyResourceId: UnsignedInt64;
    
    /**
     * The name of a saved search.
     */
    name: string;
    
    /**
     * The query string of a saved search. This includes search terms and filters.
     */
    query: string;
    
    /**
     * The type of resource this saved search is searching in.
     */
    resourceType: SearchResultType;
    
    /**
     * The search terms of a saved search.
     */
    searchTerms: string;
  }
  
  /**
   * A filter in a search query represented by a key value pair.
   */
  export interface SearchFilter {
    
    /**
     * The key of the search filter.
     */
    key: string;
    
    /**
     * The value of the search filter.
     */
    value: string;
  }
  
  /**
   * Specifies the type of resources to be returned from a search.
   */
  export const enum SearchResultType {
    CUSTOMER = 'CUSTOMER',
    DRAFT_ORDER = 'DRAFT_ORDER',
    PRODUCT = 'PRODUCT',
    COLLECTION = 'COLLECTION',
    
    /**
     * A file.
     */
    FILE = 'FILE',
    ONLINE_STORE_PAGE = 'ONLINE_STORE_PAGE',
    ONLINE_STORE_BLOG = 'ONLINE_STORE_BLOG',
    ONLINE_STORE_ARTICLE = 'ONLINE_STORE_ARTICLE',
    
    /**
     * A URL redirect.
     */
    URL_REDIRECT = 'URL_REDIRECT',
    PRICE_RULE = 'PRICE_RULE',
    
    /**
     * A code discount redeem code.
     */
    DISCOUNT_REDEEM_CODE = 'DISCOUNT_REDEEM_CODE',
    ORDER = 'ORDER',
    
    /**
     * A balance transaction.
     */
    BALANCE_TRANSACTION = 'BALANCE_TRANSACTION'
  }
  
  /**
   * The list of all the countries from the combined shipping zones for the shop.
   */
  export interface CountriesInShippingZones {
    
    /**
     * The list of all the countries from all the combined shipping zones.
     */
    countryCodes: Array<CountryCode>;
    
    /**
     * Whether 'Rest of World' has been defined in any of the shipping zones.
     */
    includeRestOfWorld: boolean;
  }
  
  /**
   * Currency formats configured for the merchant. These formats are available to use within Liquid.
   */
  export interface CurrencyFormats {
    
    /**
     * Money without currency in HTML.
     */
    moneyFormat: FormattedString;
    
    /**
     * Money without currency in emails.
     */
    moneyInEmailsFormat: string;
    
    /**
     * Money with currency in HTML.
     */
    moneyWithCurrencyFormat: FormattedString;
    
    /**
     * Money with currency in emails.
     */
    moneyWithCurrencyInEmailsFormat: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple CurrencySettings.
   * 
   */
  export interface CurrencySettingConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CurrencySettingEdge>;
    
    /**
     * A list of the nodes contained in CurrencySettingEdge.
     */
    nodes: Array<CurrencySetting>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one CurrencySetting and a cursor during pagination.
   * 
   */
  export interface CurrencySettingEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CurrencySettingEdge.
     */
    node: CurrencySetting;
  }
  
  /**
   * Represents the shop's customer account requirement preference.
   * 
   */
  export const enum ShopCustomerAccountsSetting {
    REQUIRED = 'REQUIRED',
    OPTIONAL = 'OPTIONAL',
    DISABLED = 'DISABLED'
  }
  
  /**
   * Information about the shop's customer accounts.
   */
  export interface CustomerAccountsV2 {
    
    /**
     * Indicates which version of customer accounts the merchant is using in online store and checkout.
     */
    customerAccountsVersion: CustomerAccountsVersion;
    
    /**
     * Login links are shown in online store and checkout.
     */
    loginLinksVisibleOnStorefrontAndCheckout: boolean;
    
    /**
     * Customers are required to log in to their account before checkout.
     */
    loginRequiredAtCheckout: boolean;
    
    /**
     * The root url for the customer accounts pages.
     */
    url?: URL;
  }
  
  /**
   * The login redirection target for customer accounts.
   */
  export const enum CustomerAccountsVersion {
    
    /**
     * The customer is redirected to the classic customer accounts login page.
     */
    CLASSIC = 'CLASSIC',
    
    /**
     * The customer is redirected to the new customer accounts login page.
     */
    NEW_CUSTOMER_ACCOUNTS = 'NEW_CUSTOMER_ACCOUNTS'
  }
  
  /**
   * The set of valid sort keys for the CustomerSavedSearch query.
   */
  export const enum CustomerSavedSearchSortKeys {
    
    /**
     * Sort by the `name` value.
     */
    NAME = 'NAME',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through a list of Strings.
   * 
   */
  export interface StringConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<StringEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one String and a cursor during pagination.
   * 
   */
  export interface StringEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of StringEdge.
     */
    node: string;
  }
  
  /**
   * The set of valid sort keys for the Customer query.
   */
  export const enum CustomerSortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `name` value.
     */
    NAME = 'NAME',
    
    /**
     * Sort by the `location` value.
     */
    LOCATION = 'LOCATION',
    
    /**
     * Sort by the `orders_count` value.
     */
    ORDERS_COUNT = 'ORDERS_COUNT',
    
    /**
     * Sort by the `last_order_date` value.
     */
    LAST_ORDER_DATE = 'LAST_ORDER_DATE',
    
    /**
     * Sort by the `total_spent` value.
     */
    TOTAL_SPENT = 'TOTAL_SPENT',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple Customers.
   * 
   */
  export interface CustomerConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CustomerEdge>;
    
    /**
     * A list of the nodes contained in CustomerEdge.
     */
    nodes: Array<Customer>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Customer and a cursor during pagination.
   * 
   */
  export interface CustomerEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CustomerEdge.
     */
    node: Customer;
  }
  
  /**
   * Represents the feature set available to the shop.
   * Most fields specify whether a feature is enabled for a shop, and some fields return information
   * related to specific features.
   * 
   */
  export interface ShopFeatures {
    
    /**
     * Whether a shop has access to Avalara AvaTax.
     */
    avalaraAvatax: boolean;
    
    /**
     * The branding of the shop, which influences its look and feel in the Shopify admin.
     */
    branding: ShopBranding;
    
    /**
     * Represents the Bundles feature configuration for the shop.
     */
    bundles: BundlesFeature;
    
    /**
     * Whether a shop's online store can have CAPTCHA protection.
     */
    captcha: boolean;
    
    /**
     * Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify.
     */
    captchaExternalDomains: boolean;
    
    /**
     * Represents the cart transform feature configuration for the shop.
     */
    cartTransform: CartTransformFeature;
    
    /**
     * Whether the delivery profiles functionality is enabled for this shop.
     * @deprecated Delivery profiles are now 100% enabled across Shopify.
     */
    deliveryProfiles: boolean;
    
    /**
     * Whether a shop has access to the Google Analytics dynamic remarketing feature.
     */
    dynamicRemarketing: boolean;
    
    /**
     * Whether a shop can be migrated to use Shopify subscriptions.
     */
    eligibleForSubscriptionMigration: boolean;
    
    /**
     * Whether a shop is configured properly to sell subscriptions.
     */
    eligibleForSubscriptions: boolean;
    
    /**
     * Whether a shop can create gift cards.
     */
    giftCards: boolean;
    
    /**
     * Whether a shop displays Harmonized System codes on products. This is used for customs when shipping
     * internationally.
     * 
     */
    harmonizedSystemCode: boolean;
    
    /**
     * Whether a shop can enable international domains.
     * @deprecated All shops have international domains through Shopify Markets.
     */
    internationalDomains: boolean;
    
    /**
     * Whether a shop can enable international price overrides.
     */
    internationalPriceOverrides: boolean;
    
    /**
     * Whether a shop can enable international price rules.
     */
    internationalPriceRules: boolean;
    
    /**
     * Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.
     */
    legacySubscriptionGatewayEnabled: boolean;
    
    /**
     * Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial
     * or don't have a storefront.
     * 
     */
    liveView: boolean;
    
    /**
     * Whether a shop has multi-location functionality.
     * @deprecated All shops support multi-location inventory. Use `QueryRoot.locations` to determine whether shop has more than one location.
     * 
     */
    multiLocation: boolean;
    
    /**
     * Whether a shop has access to the onboarding visual.
     */
    onboardingVisual: boolean;
    
    /**
     * Whether a shop is configured to sell subscriptions with PayPal Express.
     */
    paypalExpressSubscriptionGatewayStatus: PaypalExpressSubscriptionsGatewayStatus;
    
    /**
     * Whether a shop has access to all reporting features.
     */
    reports: boolean;
    
    /**
     * Whether a shop has ever had subscription products.
     */
    sellsSubscriptions: boolean;
    
    /**
     * Whether the shop has a Shopify Plus subscription.
     * @deprecated Use Shop.plan.shopifyPlus instead.
     */
    shopifyPlus: boolean;
    
    /**
     * Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful.
     * 
     */
    showMetrics: boolean;
    
    /**
     * Whether a shop has an online store.
     */
    storefront: boolean;
    
    /**
     * Whether a shop is using Shopify Balance.
     */
    usingShopifyBalance: boolean;
  }
  
  /**
   * Possible branding of a shop.
   * Branding can be used to define the look of a shop including its styling and logo in the Shopify Admin.
   * 
   */
  export const enum ShopBranding {
    
    /**
     * Shop has Shopify Gold branding.
     */
    SHOPIFY_GOLD = 'SHOPIFY_GOLD',
    
    /**
     * Shop has Shopify Plus branding.
     */
    SHOPIFY_PLUS = 'SHOPIFY_PLUS',
    
    /**
     * Shop has Rogers branding.
     */
    ROGERS = 'ROGERS',
    
    /**
     * Shop has Shopify branding.
     */
    SHOPIFY = 'SHOPIFY'
  }
  
  /**
   * Represents the Bundles feature configuration for the shop.
   * 
   */
  export interface BundlesFeature {
    
    /**
     * Whether a shop is configured properly to sell bundles.
     */
    eligibleForBundles: boolean;
    
    /**
     * The reason why a shop is not eligible for bundles.
     */
    ineligibilityReason?: string;
    
    /**
     * Whether a shop has any fixed bundle products or has a cartTransform function installed.
     */
    sellsBundles: boolean;
  }
  
  /**
   * Represents the cart transform feature configuration for the shop.
   * 
   */
  export interface CartTransformFeature {
    
    /**
     * The cart transform operations eligible for the shop.
     */
    eligibleOperations: CartTransformEligibleOperations;
  }
  
  /**
   * Represents the cart transform feature configuration for the shop.
   * 
   */
  export interface CartTransformEligibleOperations {
    
    /**
     * The shop is eligible for expand operations.
     */
    expandOperation: boolean;
    
    /**
     * The shop is eligible for merge operations.
     */
    mergeOperation: boolean;
    
    /**
     * The shop is eligible for update operations.
     */
    updateOperation: boolean;
  }
  
  /**
   * Represents a valid PayPal Express subscriptions gateway status.
   */
  export const enum PaypalExpressSubscriptionsGatewayStatus {
    
    /**
     * The status is enabled.
     */
    ENABLED = 'ENABLED',
    
    /**
     * The status is disabled.
     */
    DISABLED = 'DISABLED',
    
    /**
     * The status is pending.
     */
    PENDING = 'PENDING'
  }
  
  /**
   * An auto-generated type for paginating through multiple InventoryItems.
   * 
   */
  export interface InventoryItemConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<InventoryItemEdge>;
    
    /**
     * A list of the nodes contained in InventoryItemEdge.
     */
    nodes: Array<InventoryItem>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one InventoryItem and a cursor during pagination.
   * 
   */
  export interface InventoryItemEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of InventoryItemEdge.
     */
    node: InventoryItem;
  }
  
  /**
   * The total number of pending orders on a shop if less then a maximum, or that maximum.
   * The atMax field indicates when this maximum has been reached.
   * 
   */
  export interface LimitedPendingOrderCount {
    
    /**
     * This is set when the number of pending orders has reached the maximum.
     */
    atMax: boolean;
    
    /**
     * The number of pendings orders on the shop.
     * Limited to a maximum of 10000.
     * 
     */
    count: number;
  }
  
  /**
   * The set of valid sort keys for the MarketingEvent query.
   */
  export const enum MarketingEventSortKeys {
    
    /**
     * Sort by the `started_at` value.
     */
    STARTED_AT = 'STARTED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple MarketingEvents.
   * 
   */
  export interface MarketingEventConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<MarketingEventEdge>;
    
    /**
     * A list of the nodes contained in MarketingEventEdge.
     */
    nodes: Array<MarketingEvent>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one MarketingEvent and a cursor during pagination.
   * 
   */
  export interface MarketingEventEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of MarketingEventEdge.
     */
    node: MarketingEvent;
  }
  
  /**
   * Merchant approval for accelerated onboarding to channel integration apps.
   */
  export interface MerchantApprovalSignals {
    
    /**
     * Whether the shop's Shopify Payments account identity is verified. Returns `false` if the identity is unverified or if the shop doesn't have a Shopify Payments account.
     */
    identityVerified: boolean;
    
    /**
     * Whether Shopify has pre-verified the merchant's business for onboarding to channel integration apps. Returns `false` if the shop isn't marked for verification.
     */
    verifiedByShopify: boolean;
    
    /**
     * Which tier of the Shopify verification was determined for the merchant's business for onboarding to channel integration apps.
     */
    verifiedByShopifyTier: string;
  }
  
  /**
   * Possible sort of tags.
   */
  export const enum ShopTagSort {
    
    /**
     * Alphabetical sort.
     */
    ALPHABETICAL = 'ALPHABETICAL',
    
    /**
     * Popularity sort.
     */
    POPULAR = 'POPULAR'
  }
  
  /**
   * Settings related to payments.
   */
  export interface PaymentSettings {
    
    /**
     * List of the digital wallets which the shop supports.
     */
    supportedDigitalWallets: Array<DigitalWallet>;
  }
  
  /**
   * The billing plan of the shop.
   * 
   */
  export interface ShopPlan {
    
    /**
     * The name of the shop's billing plan.
     */
    displayName: string;
    
    /**
     * Whether the shop is a partner development shop for testing purposes.
     */
    partnerDevelopment: boolean;
    
    /**
     * Whether the shop has a Shopify Plus subscription.
     */
    shopifyPlus: boolean;
  }
  
  /**
   * The set of valid sort keys for the PriceRule query.
   */
  export const enum PriceRuleSortKeys {
    
    /**
     * Sort by the `starts_at` value.
     */
    STARTS_AT = 'STARTS_AT',
    
    /**
     * Sort by the `ends_at` value.
     */
    ENDS_AT = 'ENDS_AT',
    
    /**
     * Sort by the `title` value.
     */
    TITLE = 'TITLE',
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple PriceRules.
   * 
   */
  export interface PriceRuleConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<PriceRuleEdge>;
    
    /**
     * A list of the nodes contained in PriceRuleEdge.
     */
    nodes: Array<PriceRule>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one PriceRule and a cursor during pagination.
   * 
   */
  export interface PriceRuleEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of PriceRuleEdge.
     */
    node: PriceRule;
  }
  
  /**
   * Price rules are a set of conditions, including entitlements and prerequisites, that must be met in order for a discount code to apply.
   * 
   * We recommend using the types and queries detailed at [Getting started with discounts](https://shopify.dev/docs/apps/selling-strategies/discounts/getting-started) instead. These will replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and `DiscountCode` resources.
   * 
   */
  export interface PriceRule extends CommentEventSubject, HasEvents, LegacyInteroperability, Node {
    
    /**
     * The maximum number of times that the price rule can be allocated onto an order.
     */
    allocationLimit?: number;
    
    /**
     * The method by which the price rule's value is allocated to its entitled items.
     */
    allocationMethod: PriceRuleAllocationMethod;
    
    /**
     * The application that created the price rule.
     */
    app?: App;
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith: DiscountCombinesWith;
    
    /**
     * The date and time when the price rule was created.
     */
    createdAt: DateTime;
    
    /**
     * The customers that can use this price rule.
     */
    customerSelection: PriceRuleCustomerSelection;
    
    /**
     * The class of the discount for combining purposes.
     */
    discountClass: DiscountClass;
    
    /**
     * List of the price rule's discount codes.
     */
    discountCodes: PriceRuleDiscountCodeConnection;
    
    /**
     * How many discount codes associated with the price rule.
     */
    discountCodesCount: number;
    
    /**
     * The date and time when the price rule ends. For open-ended price rules, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
     * @deprecated Use `prerequisiteToEntitlementQuantityRatio` instead.
     */
    entitlementToPrerequisiteQuantityRatio?: PriceRuleEntitlementToPrerequisiteQuantityRatio;
    
    /**
     * The paginated list of events associated with the price rule.
     */
    events: EventConnection;
    
    /**
     * A list of the price rule's features.
     */
    features: Array<PriceRuleFeature>;
    
    /**
     * Indicates whether there are any timeline comments on the price rule.
     */
    hasTimelineComment: boolean;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The items to which the price rule applies.
     */
    itemEntitlements: PriceRuleItemEntitlements;
    
    /**
     * The items required for the price rule to be applicable.
     */
    itemPrerequisites: PriceRuleLineItemPrerequisites;
    
    /**
     * The ID of the corresponding resource in the REST Admin API.
     */
    legacyResourceId: UnsignedInt64;
    
    /**
     * Whether the price rule can be applied only once per customer.
     */
    oncePerCustomer: boolean;
    
    /**
     * The number of the entitled items must fall within this range for the price rule to be applicable.
     */
    prerequisiteQuantityRange?: PriceRuleQuantityRange;
    
    /**
     * The shipping cost must fall within this range for the price rule to be applicable.
     */
    prerequisiteShippingPriceRange?: PriceRuleMoneyRange;
    
    /**
     * The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
     */
    prerequisiteSubtotalRange?: PriceRuleMoneyRange;
    
    /**
     * Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
     */
    prerequisiteToEntitlementQuantityRatio?: PriceRulePrerequisiteToEntitlementQuantityRatio;
    
    /**
     * URLs that can be used to share the discount.
     */
    shareableUrls: Array<PriceRuleShareableUrl>;
    
    /**
     * The shipping lines to which the price rule applies.
     */
    shippingEntitlements: PriceRuleShippingLineEntitlements;
    
    /**
     * The date and time when the price rule starts.
     */
    startsAt: DateTime;
    
    /**
     * The status of the price rule.
     */
    status: PriceRuleStatus;
    
    /**
     * A detailed summary of the price rule.
     */
    summary?: string;
    
    /**
     * The type of lines (line_item or shipping_line) to which the price rule applies.
     */
    target: PriceRuleTarget;
    
    /**
     * The title of the price rule.
     */
    title: string;
    
    /**
     * The total sales from orders where the price rule was used.
     */
    totalSales?: MoneyV2;
    
    /**
     * A list of the price rule's features.
     * @deprecated Use `features` instead.
     */
    traits: Array<PriceRuleTrait>;
    
    /**
     * The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
     */
    usageCount: number;
    
    /**
     * The maximum number of times that the price rule can be used in total.
     */
    usageLimit?: number;
    
    /**
     * A time period during which a price rule is applicable.
     */
    validityPeriod: PriceRuleValidityPeriod;
    
    /**
     * The value of the price rule.
     * @deprecated Use `valueV2` instead.
     */
    value: PriceRuleValue;
    
    /**
     * The value of the price rule.
     */
    valueV2: PricingValue;
  }
  
  /**
   * The method by which the price rule's value is allocated to its entitled items.
   */
  export const enum PriceRuleAllocationMethod {
    
    /**
     * The value will be applied to each of the entitled items.
     */
    EACH = 'EACH',
    
    /**
     * The value will be applied once across the entitled items.
     */
    ACROSS = 'ACROSS'
  }
  
  /**
   * A selection of customers for whom the price rule applies.
   */
  export interface PriceRuleCustomerSelection {
    
    /**
     * List of customers to whom the price rule applies.
     */
    customers: CustomerConnection;
    
    /**
     * Whether the price rule applies to all customers.
     */
    forAllCustomers: boolean;
    
    /**
     * A list of customer segments that contain the customers who can use the price rule.
     */
    segments: Array<Segment>;
  }
  
  /**
   * An auto-generated type for paginating through multiple PriceRuleDiscountCodes.
   * 
   */
  export interface PriceRuleDiscountCodeConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<PriceRuleDiscountCodeEdge>;
    
    /**
     * A list of the nodes contained in PriceRuleDiscountCodeEdge.
     */
    nodes: Array<PriceRuleDiscountCode>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.
   * 
   */
  export interface PriceRuleDiscountCodeEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of PriceRuleDiscountCodeEdge.
     */
    node: PriceRuleDiscountCode;
  }
  
  /**
   * A discount code of a price rule.
   */
  export interface PriceRuleDiscountCode extends Node {
    
    /**
     * The application that created the discount code.
     */
    app?: App;
    
    /**
     * The code to apply the discount.
     */
    code: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The number of times that the price rule has been used. This value is updated asynchronously and can be different than the actual usage count.
     */
    usageCount: number;
  }
  
  /**
   * Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
   */
  export interface PriceRuleEntitlementToPrerequisiteQuantityRatio {
    
    /**
     * The quantity of entitled items in the ratio.
     */
    entitlementQuantity: number;
    
    /**
     * The quantity of prerequisite items in the ratio.
     */
    prerequisiteQuantity: number;
  }
  
  /**
   * The list of features that can be supported by a price rule.
   */
  export const enum PriceRuleFeature {
    
    /**
     * The price rule supports Buy X, Get Y (BXGY) discounts.
     */
    BUY_ONE_GET_ONE = 'BUY_ONE_GET_ONE',
    
    /**
     * The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
     */
    BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT = 'BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT',
    
    /**
     * The price rule supports bulk discounts.
     */
    BULK = 'BULK',
    
    /**
     * The price rule targets specific customers.
     */
    SPECIFIC_CUSTOMERS = 'SPECIFIC_CUSTOMERS',
    
    /**
     * The price rule supports discounts that require a quantity.
     */
    QUANTITY_DISCOUNTS = 'QUANTITY_DISCOUNTS'
  }
  
  /**
   * The items to which this price rule applies. This may be multiple products, product variants, collections or combinations of the aforementioned.
   */
  export interface PriceRuleItemEntitlements {
    
    /**
     * The collections to which the price rule applies.
     */
    collections: CollectionConnection;
    
    /**
     * The product variants to which the price rule applies.
     */
    productVariants: ProductVariantConnection;
    
    /**
     * The products to which the price rule applies.
     */
    products: ProductConnection;
    
    /**
     * Whether the price rule applies to all line items.
     */
    targetAllLineItems: boolean;
  }
  
  /**
   * Single or multiple line item products, product variants or collections required for the price rule to be applicable, can also be provided in combination.
   */
  export interface PriceRuleLineItemPrerequisites {
    
    /**
     * The collections required for the price rule to be applicable.
     */
    collections: CollectionConnection;
    
    /**
     * The product variants required for the price rule to be applicable.
     */
    productVariants: ProductVariantConnection;
    
    /**
     * The products required for the price rule to be applicable.
     */
    products: ProductConnection;
  }
  
  /**
   * A quantity range within which the price rule is applicable.
   */
  export interface PriceRuleQuantityRange {
    
    /**
     * The lower bound of the quantity range.
     */
    greaterThan?: number;
    
    /**
     * The lower bound or equal of the quantity range.
     */
    greaterThanOrEqualTo?: number;
    
    /**
     * The upper bound of the quantity range.
     */
    lessThan?: number;
    
    /**
     * The upper bound or equal of the quantity range.
     */
    lessThanOrEqualTo?: number;
  }
  
  /**
   * A money range within which the price rule is applicable.
   */
  export interface PriceRuleMoneyRange {
    
    /**
     * The lower bound of the money range.
     */
    greaterThan?: Money;
    
    /**
     * The lower bound or equal of the money range.
     */
    greaterThanOrEqualTo?: Money;
    
    /**
     * The upper bound of the money range.
     */
    lessThan?: Money;
    
    /**
     * The upper bound or equal of the money range.
     */
    lessThanOrEqualTo?: Money;
  }
  
  /**
   * Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
   */
  export interface PriceRulePrerequisiteToEntitlementQuantityRatio {
    
    /**
     * The quantity of entitled items in the ratio.
     */
    entitlementQuantity: number;
    
    /**
     * The quantity of prerequisite items in the ratio.
     */
    prerequisiteQuantity: number;
  }
  
  /**
   * Shareable URL for the discount code associated with the price rule.
   */
  export interface PriceRuleShareableUrl {
    
    /**
     * The image URL of the item (product or collection) to which the discount applies.
     */
    targetItemImage?: Image;
    
    /**
     * The type of page that's associated with the URL.
     */
    targetType: PriceRuleShareableUrlTargetType;
    
    /**
     * The title of the page that's associated with the URL.
     */
    title: string;
    
    /**
     * The URL for the discount code.
     */
    url: URL;
  }
  
  /**
   * The type of page where a shareable price rule URL lands.
   */
  export const enum PriceRuleShareableUrlTargetType {
    
    /**
     * The URL lands on a home page.
     */
    HOME = 'HOME',
    
    /**
     * The URL lands on a product page.
     */
    PRODUCT = 'PRODUCT',
    
    /**
     * The URL lands on a collection page.
     */
    COLLECTION = 'COLLECTION'
  }
  
  /**
   * The shipping lines to which the price rule applies to.
   */
  export interface PriceRuleShippingLineEntitlements {
    
    /**
     * The codes for the countries to which the price rule applies to.
     */
    countryCodes: Array<CountryCode>;
    
    /**
     * Whether the price rule is applicable to countries that haven't been defined in the shop's shipping zones.
     */
    includeRestOfWorld: boolean;
    
    /**
     * Whether the price rule applies to all shipping lines.
     */
    targetAllShippingLines: boolean;
  }
  
  /**
   * The status of the price rule.
   */
  export const enum PriceRuleStatus {
    
    /**
     * The price rule is active.
     */
    ACTIVE = 'ACTIVE',
    
    /**
     * The price rule is expired.
     */
    EXPIRED = 'EXPIRED',
    
    /**
     * The price rule is scheduled.
     */
    SCHEDULED = 'SCHEDULED'
  }
  
  /**
   * The type of lines (line_item or shipping_line) to which the price rule applies.
   */
  export const enum PriceRuleTarget {
    
    /**
     * The price rule applies to line items.
     */
    LINE_ITEM = 'LINE_ITEM',
    
    /**
     * The price rule applies to shipping lines.
     */
    SHIPPING_LINE = 'SHIPPING_LINE'
  }
  
  /**
   * The list of features that can be supported by a price rule.
   */
  export const enum PriceRuleTrait {
    
    /**
     * The price rule supports Buy X, Get Y (BXGY) discounts.
     */
    BUY_ONE_GET_ONE = 'BUY_ONE_GET_ONE',
    
    /**
     * The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
     */
    BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT = 'BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT',
    
    /**
     * The price rule supports bulk discounts.
     */
    BULK = 'BULK',
    
    /**
     * The price rule targets specific customers.
     */
    SPECIFIC_CUSTOMERS = 'SPECIFIC_CUSTOMERS',
    
    /**
     * The price rule supports discounts that require a quantity.
     */
    QUANTITY_DISCOUNTS = 'QUANTITY_DISCOUNTS'
  }
  
  /**
   * A time period during which a price rule is applicable.
   */
  export interface PriceRuleValidityPeriod {
    
    /**
     * The time after which the price rule becomes invalid.
     */
    end?: DateTime;
    
    /**
     * The time after which the price rule is valid.
     */
    start: DateTime;
  }
  
  /**
   * The type of the price rule value. The price rule value might be a percentage value, or a fixed amount.
   */
  export type PriceRuleValue = PriceRuleFixedAmountValue | PriceRulePercentValue;
  
  /** Use this to resolve union type PriceRuleValue */
  export type PossiblePriceRuleValueTypeNames =
  'PriceRuleFixedAmountValue' |
  'PriceRulePercentValue';
  
  export interface PriceRuleValueNameMap {
    PriceRuleValue: PriceRuleValue;
    PriceRuleFixedAmountValue: PriceRuleFixedAmountValue;
    PriceRulePercentValue: PriceRulePercentValue;
  }
  
  /**
   * The value of a fixed amount price rule.
   */
  export interface PriceRuleFixedAmountValue {
    
    /**
     * The monetary value of the price rule.
     */
    amount: Money;
  }
  
  /**
   * The value of a percent price rule.
   */
  export interface PriceRulePercentValue {
    
    /**
     * The percent value of the price rule.
     */
    percentage: number;
  }
  
  /**
   * The set of valid sort keys for the Product query.
   */
  export const enum ProductSortKeys {
    
    /**
     * Sort by the `title` value.
     */
    TITLE = 'TITLE',
    
    /**
     * Sort by the `product_type` value.
     */
    PRODUCT_TYPE = 'PRODUCT_TYPE',
    
    /**
     * Sort by the `vendor` value.
     */
    VENDOR = 'VENDOR',
    
    /**
     * Sort by the `inventory_total` value.
     */
    INVENTORY_TOTAL = 'INVENTORY_TOTAL',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `published_at` value.
     */
    PUBLISHED_AT = 'PUBLISHED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * Pagination isn't supported when using this sort key.
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * Resource limits of a shop.
   */
  export interface ShopResourceLimits {
    
    /**
     * Maximum number of locations allowed.
     */
    locationLimit: number;
    
    /**
     * Maximum number of product options allowed.
     */
    maxProductOptions: number;
    
    /**
     * The maximum number of variants allowed per product.
     */
    maxProductVariants: number;
    
    /**
     * Whether the shop has reached the limit of the number of URL redirects it can make for resources.
     */
    redirectLimitReached: boolean;
  }
  
  /**
   * The connection type for SearchResult.
   */
  export interface SearchResultConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<SearchResultEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
    
    /**
     * Information to aid in pagination.
     * @deprecated The provided information is not accurate.
     */
    resultsAfterCount: number;
  }
  
  /**
   * An auto-generated type which holds one SearchResult and a cursor during pagination.
   * 
   */
  export interface SearchResultEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of SearchResultEdge.
     */
    node: SearchResult;
  }
  
  /**
   * Represents an individual result returned from a search.
   */
  export interface SearchResult {
    
    /**
     * Returns the search result description text.
     */
    description?: string;
    
    /**
     * Returns the Image resource presented to accompany a search result.
     */
    image?: Image;
    
    /**
     * Returns the ID of the resource returned in the search result.
     */
    reference: Node;
    
    /**
     * Returns the resource title.
     */
    title: string;
    
    /**
     * Returns the absolute URL to the resource in the search result.
     */
    url: URL;
  }
  
  /**
   * A list of search filters along with their specific options in value and label pair for filtering.
   */
  export interface SearchFilterOptions {
    
    /**
     * A list of options that can be use to filter product availability.
     */
    productAvailability: Array<FilterOption>;
  }
  
  /**
   * A filter option is one possible value in a search filter.
   */
  export interface FilterOption {
    
    /**
     * The filter option's label for display purposes.
     */
    label: string;
    
    /**
     * The filter option's value.
     */
    value: string;
  }
  
  /**
   * Policy that a merchant has configured for their store, such as their refund or privacy policy.
   */
  export interface ShopPolicy extends HasPublishedTranslations, Node {
    
    /**
     * The text of the policy. The maximum size is 512kb.
     */
    body: HTML;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The translations associated with the resource.
     */
    translations: Array<Translation>;
    
    /**
     * The shop policy type.
     */
    type: ShopPolicyType;
    
    /**
     * The public URL of the policy.
     */
    url: URL;
  }
  
  /**
   * Available shop policy types.
   */
  export const enum ShopPolicyType {
    
    /**
     * The refund policy.
     */
    REFUND_POLICY = 'REFUND_POLICY',
    
    /**
     * The shipping policy.
     */
    SHIPPING_POLICY = 'SHIPPING_POLICY',
    
    /**
     * The privacy policy.
     */
    PRIVACY_POLICY = 'PRIVACY_POLICY',
    
    /**
     * The terms of service.
     */
    TERMS_OF_SERVICE = 'TERMS_OF_SERVICE',
    
    /**
     * The terms of sale.
     */
    TERMS_OF_SALE = 'TERMS_OF_SALE',
    
    /**
     * The legal notice.
     */
    LEGAL_NOTICE = 'LEGAL_NOTICE',
    
    /**
     * The purchase options cancellation policy.
     */
    SUBSCRIPTION_POLICY = 'SUBSCRIPTION_POLICY',
    
    /**
     * The contact information.
     */
    CONTACT_INFORMATION = 'CONTACT_INFORMATION'
  }
  
  /**
   * An auto-generated type for paginating through multiple StaffMembers.
   * 
   */
  export interface StaffMemberConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<StaffMemberEdge>;
    
    /**
     * A list of the nodes contained in StaffMemberEdge.
     */
    nodes: Array<StaffMember>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one StaffMember and a cursor during pagination.
   * 
   */
  export interface StaffMemberEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of StaffMemberEdge.
     */
    node: StaffMember;
  }
  
  /**
   * An auto-generated type for paginating through multiple StorefrontAccessTokens.
   * 
   */
  export interface StorefrontAccessTokenConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<StorefrontAccessTokenEdge>;
    
    /**
     * A list of the nodes contained in StorefrontAccessTokenEdge.
     */
    nodes: Array<StorefrontAccessToken>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.
   * 
   */
  export interface StorefrontAccessTokenEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of StorefrontAccessTokenEdge.
     */
    node: StorefrontAccessToken;
  }
  
  /**
   * A token that's used to delegate unauthenticated access scopes to clients that need to access
   * the unauthenticated Storefront API. An app can have a maximum of 100 active storefront access
   * tokens for each shop.
   * 
   */
  export interface StorefrontAccessToken extends Node {
    
    /**
     * List of permissions associated with the token.
     */
    accessScopes: Array<AccessScope>;
    
    /**
     * The issued public access token.
     */
    accessToken: string;
    
    /**
     * The date and time when the public access token was created.
     */
    createdAt: DateTime;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * An arbitrary title for each token determined by the developer, used for reference         purposes.
     */
    title: string;
    
    /**
     * The date and time when the storefront access token was updated.
     */
    updatedAt: DateTime;
  }
  
  /**
   * Systems of weights and measures.
   */
  export const enum UnitSystem {
    
    /**
     * Imperial system of weights and measures.
     */
    IMPERIAL_SYSTEM = 'IMPERIAL_SYSTEM',
    
    /**
     * Metric system of weights and measures.
     */
    METRIC_SYSTEM = 'METRIC_SYSTEM'
  }
  
  /**
   * Represents a Shopify hosted video.
   * 
   */
  export interface Video extends File, Media, Node {
    
    /**
     * A word or phrase to share the nature or contents of a media.
     */
    alt?: string;
    
    /**
     * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
     * 
     */
    createdAt: DateTime;
    
    /**
     * The video's duration in milliseconds. This value is `null` unless the video's status field is
     * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
     * 
     */
    duration?: number;
    
    /**
     * Any errors that have occurred on the file.
     */
    fileErrors: Array<FileError>;
    
    /**
     * The status of the file.
     */
    fileStatus: FileStatus;
    
    /**
     * The video's filename.
     */
    filename: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The media content type.
     */
    mediaContentType: MediaContentType;
    
    /**
     * Any errors which have occurred on the media.
     */
    mediaErrors: Array<MediaError>;
    
    /**
     * The warnings attached to the media.
     */
    mediaWarnings: Array<MediaWarning>;
    
    /**
     * The video's original source. This value is `null` unless the video's status field is
     * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
     * 
     */
    originalSource?: VideoSource;
    
    /**
     * The preview image for the media.
     */
    preview?: MediaPreviewImage;
    
    /**
     * The video's sources. This value is empty unless the video's status field is
     * [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
     * 
     */
    sources: Array<VideoSource>;
    
    /**
     * Current status of the media.
     */
    status: MediaStatus;
    
    /**
     * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was last updated.
     */
    updatedAt: DateTime;
  }
  
  /**
   * Represents a source for a Shopify hosted video.
   * 
   * Types of sources include the original video, lower resolution versions of the original video,
   * and an m3u8 playlist file.
   * 
   * Only [videos](https://shopify.dev/api/admin-graphql/latest/objects/video) with a status field
   * of [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready) have sources.
   * 
   */
  export interface VideoSource {
    
    /**
     * The video source's file size in bytes.
     */
    fileSize?: number;
    
    /**
     * The video source's file format extension.
     */
    format: string;
    
    /**
     * The video source's height.
     */
    height: number;
    
    /**
     * The video source's MIME type.
     */
    mimeType: string;
    
    /**
     * The video source's URL.
     */
    url: string;
    
    /**
     * The video source's width.
     */
    width: number;
  }
  
  /**
   * The part of the image that should remain after cropping.
   */
  export const enum CropRegion {
    
    /**
     * Keep the center of the image.
     */
    CENTER = 'CENTER',
    
    /**
     * Keep the top of the image.
     */
    TOP = 'TOP',
    
    /**
     * Keep the bottom of the image.
     */
    BOTTOM = 'BOTTOM',
    
    /**
     * Keep the left of the image.
     */
    LEFT = 'LEFT',
    
    /**
     * Keep the right of the image.
     */
    RIGHT = 'RIGHT'
  }
  
  /**
   * List of supported image content types.
   */
  export const enum ImageContentType {
    
    /**
     * A PNG image.
     */
    PNG = 'PNG',
    
    /**
     * A JPG image.
     */
    JPG = 'JPG',
    
    /**
     * A WEBP image.
     */
    WEBP = 'WEBP'
  }
  
  /**
   * The available options for transforming an image.
   * 
   * All transformation options are considered best effort. Any transformation that the original image type doesn't support will be ignored.
   * 
   */
  export interface ImageTransformInput {
    
    /**
     * The region of the image to remain after cropping.
     * Must be used in conjunction with the `maxWidth` and/or `maxHeight` fields, where the `maxWidth` and `maxHeight` aren't equal.
     * The `crop` argument should coincide with the smaller value. A smaller `maxWidth` indicates a `LEFT` or `RIGHT` crop, while
     * a smaller `maxHeight` indicates a `TOP` or `BOTTOM` crop. For example, `{ maxWidth: 5, maxHeight: 10, crop: LEFT }` will result
     * in an image with a width of 5 and height of 10, where the right side of the image is removed.
     * 
     */
    crop?: CropRegion;
    
    /**
     * Image width in pixels between 1 and 5760.
     * 
     */
    maxWidth?: number;
    
    /**
     * Image height in pixels between 1 and 5760.
     * 
     */
    maxHeight?: number;
    
    /**
     * Image size multiplier for high-resolution retina displays. Must be within 1..3.
     * 
     */
    scale?: number;
    
    /**
     * Convert the source image into the preferred content type.
     * Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
     * 
     */
    preferredContentType?: ImageContentType;
  }
  
  /**
   * Specifies the abandonment type.
   */
  export const enum AbandonmentAbandonmentType {
    
    /**
     * The abandonment event is an abandoned browse.
     */
    BROWSE = 'BROWSE',
    
    /**
     * The abandonment event is an abandoned cart.
     */
    CART = 'CART',
    
    /**
     * The abandonment event is an abandoned checkout.
     */
    CHECKOUT = 'CHECKOUT'
  }
  
  /**
   * Specifies the email state.
   */
  export const enum AbandonmentEmailState {
    
    /**
     * The email has not yet been sent.
     */
    NOT_SENT = 'NOT_SENT',
    
    /**
     * The email has been sent.
     */
    SENT = 'SENT',
    
    /**
     * The email has been scheduled for later delivery.
     */
    SCHEDULED = 'SCHEDULED'
  }
  
  /**
   * An auto-generated type for paginating through multiple CustomerVisitProductInfos.
   * 
   */
  export interface CustomerVisitProductInfoConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CustomerVisitProductInfoEdge>;
    
    /**
     * A list of the nodes contained in CustomerVisitProductInfoEdge.
     */
    nodes: Array<CustomerVisitProductInfo>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one CustomerVisitProductInfo and a cursor during pagination.
   * 
   */
  export interface CustomerVisitProductInfoEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CustomerVisitProductInfoEdge.
     */
    node: CustomerVisitProductInfo;
  }
  
  /**
   * This type returns the information about the product and product variant from a customer visit.
   * 
   */
  export interface CustomerVisitProductInfo {
    
    /**
     * The product information. If `null`, then the product was deleted from the store.
     */
    product?: Product;
    
    /**
     * The quantity of the product that the customer requested.
     */
    quantity: number;
    
    /**
     * The product variant information, if the product variant exists.
     */
    variant?: ProductVariant;
  }
  
  /**
   * The set of valid sort keys for the AppInstallation query.
   */
  export const enum AppInstallationSortKeys {
    
    /**
     * Sort by the `installed_at` value.
     */
    INSTALLED_AT = 'INSTALLED_AT',
    
    /**
     * Sort by the `app_title` value.
     */
    APP_TITLE = 'APP_TITLE',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * The possible categories of an app installation, based on their purpose
   * or the environment they can run in.
   * 
   */
  export const enum AppInstallationCategory {
    
    /**
     * Apps that serve as channels through which sales are made, such as the online store.
     */
    CHANNEL = 'CHANNEL',
    
    /**
     * Apps that can be used in the POS mobile client.
     */
    POS_EMBEDDED = 'POS_EMBEDDED'
  }
  
  /**
   * The levels of privacy of an app installation.
   */
  export const enum AppInstallationPrivacy {
    PUBLIC = 'PUBLIC',
    PRIVATE = 'PRIVATE'
  }
  
  /**
   * An auto-generated type for paginating through multiple AppInstallations.
   * 
   */
  export interface AppInstallationConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<AppInstallationEdge>;
    
    /**
     * A list of the nodes contained in AppInstallationEdge.
     */
    nodes: Array<AppInstallation>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one AppInstallation and a cursor during pagination.
   * 
   */
  export interface AppInstallationEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of AppInstallationEdge.
     */
    node: AppInstallation;
  }
  
  /**
   * The set of valid sort keys for the AutomaticDiscount query.
   */
  export const enum AutomaticDiscountSortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple DiscountAutomaticNodes.
   * 
   */
  export interface DiscountAutomaticNodeConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<DiscountAutomaticNodeEdge>;
    
    /**
     * A list of the nodes contained in DiscountAutomaticNodeEdge.
     */
    nodes: Array<DiscountAutomaticNode>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination.
   * 
   */
  export interface DiscountAutomaticNodeEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of DiscountAutomaticNodeEdge.
     */
    node: DiscountAutomaticNode;
  }
  
  /**
   * An auto-generated type for paginating through multiple DiscountAutomatics.
   * 
   */
  export interface DiscountAutomaticConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<DiscountAutomaticEdge>;
    
    /**
     * A list of the nodes contained in DiscountAutomaticEdge.
     */
    nodes: Array<DiscountAutomatic>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one DiscountAutomatic and a cursor during pagination.
   * 
   */
  export interface DiscountAutomaticEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of DiscountAutomaticEdge.
     */
    node: DiscountAutomatic;
  }
  
  /**
   * A carrier service and the associated list of shop locations.
   */
  export interface DeliveryCarrierServiceAndLocations {
    
    /**
     * The carrier service.
     */
    carrierService: DeliveryCarrierService;
    
    /**
     * The list of locations that support this carrier service.
     */
    locations: Array<Location>;
  }
  
  /**
   * A locale.
   */
  export interface Locale {
    
    /**
     * Locale ISO code.
     */
    isoCode: string;
    
    /**
     * Human-readable locale name.
     */
    name: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple CartTransforms.
   * 
   */
  export interface CartTransformConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CartTransformEdge>;
    
    /**
     * A list of the nodes contained in CartTransformEdge.
     */
    nodes: Array<CartTransform>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one CartTransform and a cursor during pagination.
   * 
   */
  export interface CartTransformEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CartTransformEdge.
     */
    node: CartTransform;
  }
  
  /**
   * A Cart Transform Function to create [Customized Bundles.](https://shopify.dev/docs/apps/selling-strategies/bundles/add-a-customized-bundle).
   * 
   */
  export interface CartTransform extends HasMetafields, Node {
    
    /**
     * Whether a run failure will block cart and checkout operations.
     */
    blockOnFailure: boolean;
    
    /**
     * The ID for the Cart Transform function.
     */
    functionId: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Returns a metafield by namespace and key that belongs to the resource.
     */
    metafield?: Metafield;
    
    /**
     * List of metafields that belong to the resource.
     */
    metafields: MetafieldConnection;
    
    /**
     * Returns a private metafield by namespace and key that belongs to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * List of private metafields that belong to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafields: PrivateMetafieldConnection;
  }
  
  /**
   * The set of valid sort keys for the Catalog query.
   */
  export const enum CatalogSortKeys {
    
    /**
     * Sort by the `title` value.
     */
    TITLE = 'TITLE',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * The settings of checkout visual customizations.
   * 
   * To learn more about updating checkout branding settings, refer to the
   * [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert) mutation.
   * 
   */
  export interface CheckoutBranding {
    
    /**
     * The customizations that apply to specific components or areas of the user interface.
     */
    customizations?: CheckoutBrandingCustomizations;
    
    /**
     * The design system allows you to set values that represent specific attributes
     * of your brand like color and font. These attributes are used throughout the user
     * interface. This brings consistency and allows you to easily make broad design changes.
     * 
     */
    designSystem?: CheckoutBrandingDesignSystem;
  }
  
  /**
   * The customizations that apply to specific components or areas of the user interface.
   */
  export interface CheckoutBrandingCustomizations {
    
    /**
     * The checkboxes customizations.
     */
    checkbox?: CheckoutBrandingCheckbox;
    
    /**
     * The choice list customizations.
     */
    choiceList?: CheckoutBrandingChoiceList;
    
    /**
     * The form controls customizations.
     */
    control?: CheckoutBrandingControl;
    
    /**
     * The favicon image.
     */
    favicon?: CheckoutBrandingImage;
    
    /**
     * The global customizations.
     */
    global?: CheckoutBrandingGlobal;
    
    /**
     * The header customizations.
     */
    header?: CheckoutBrandingHeader;
    
    /**
     * The Heading Level 1 customizations.
     */
    headingLevel1?: CheckoutBrandingHeadingLevel;
    
    /**
     * The Heading Level 2 customizations.
     */
    headingLevel2?: CheckoutBrandingHeadingLevel;
    
    /**
     * The Heading Level 3 customizations.
     */
    headingLevel3?: CheckoutBrandingHeadingLevel;
    
    /**
     * The main area customizations.
     */
    main?: CheckoutBrandingMain;
    
    /**
     * The merchandise thumbnails customizations.
     */
    merchandiseThumbnail?: CheckoutBrandingMerchandiseThumbnail;
    
    /**
     * The order summary customizations.
     */
    orderSummary?: CheckoutBrandingOrderSummary;
    
    /**
     * The primary buttons customizations.
     */
    primaryButton?: CheckoutBrandingButton;
    
    /**
     * The secondary buttons customizations.
     */
    secondaryButton?: CheckoutBrandingButton;
    
    /**
     * The selects customizations.
     */
    select?: CheckoutBrandingSelect;
    
    /**
     * The text fields customizations.
     */
    textField?: CheckoutBrandingTextField;
  }
  
  /**
   * The checkboxes customizations.
   */
  export interface CheckoutBrandingCheckbox {
    
    /**
     * The corner radius used for checkboxes.
     */
    cornerRadius?: CheckoutBrandingCornerRadius;
  }
  
  /**
   * The options for customizing the corner radius of checkout-related objects. Examples include the primary
   * button, the name text fields and the sections within the main area (if they have borders).
   * Refer to this complete [list](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius#fieldswith)
   * for objects with customizable corner radii.
   * 
   * The design system defines the corner radius pixel size for each option. Modify the defaults by setting the
   * [designSystem.cornerRadius](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/CheckoutBrandingDesignSystemInput#field-checkoutbrandingdesignsysteminput-cornerradius)
   * input fields.
   * 
   */
  export const enum CheckoutBrandingCornerRadius {
    
    /**
     * The 0px corner radius (square corners).
     */
    NONE = 'NONE',
    
    /**
     * The corner radius with a pixel value defined by designSystem.cornerRadius.small.
     * 
     */
    SMALL = 'SMALL',
    
    /**
     * The corner radius with a pixel value defined by designSystem.cornerRadius.base.
     * 
     */
    BASE = 'BASE',
    
    /**
     * The corner radius with a pixel value defined by designSystem.cornerRadius.large.
     * 
     */
    LARGE = 'LARGE'
  }
  
  /**
   * The choice list customizations.
   */
  export interface CheckoutBrandingChoiceList {
    
    /**
     * The settings that apply to the 'group' variant of ChoiceList.
     */
    group?: CheckoutBrandingChoiceListGroup;
  }
  
  /**
   * The settings that apply to the 'group' variant of ChoiceList.
   */
  export interface CheckoutBrandingChoiceListGroup {
    
    /**
     * The spacing between UI elements in the list.
     */
    spacing?: CheckoutBrandingSpacingKeyword;
  }
  
  /**
   * The spacing between UI elements.
   */
  export const enum CheckoutBrandingSpacingKeyword {
    
    /**
     * The None spacing.
     */
    NONE = 'NONE',
    
    /**
     * The Base spacing.
     */
    BASE = 'BASE',
    
    /**
     * The Small spacing.
     */
    SMALL = 'SMALL',
    
    /**
     * The Small 100 spacing.
     */
    SMALL_100 = 'SMALL_100',
    
    /**
     * The Small 200 spacing.
     */
    SMALL_200 = 'SMALL_200',
    
    /**
     * The Small 300 spacing.
     */
    SMALL_300 = 'SMALL_300',
    
    /**
     * The Small 400 spacing.
     */
    SMALL_400 = 'SMALL_400',
    
    /**
     * The Small 500 spacing.
     */
    SMALL_500 = 'SMALL_500',
    
    /**
     * The Large spacing.
     */
    LARGE = 'LARGE',
    
    /**
     * The Large 100 spacing.
     */
    LARGE_100 = 'LARGE_100',
    
    /**
     * The Large 200 spacing.
     */
    LARGE_200 = 'LARGE_200',
    
    /**
     * The Large 300 spacing.
     */
    LARGE_300 = 'LARGE_300',
    
    /**
     * The Large 400 spacing.
     */
    LARGE_400 = 'LARGE_400',
    
    /**
     * The Large 500 spacing.
     */
    LARGE_500 = 'LARGE_500'
  }
  
  /**
   * The form controls customizations.
   */
  export interface CheckoutBrandingControl {
    
    /**
     * The border used for form controls.
     */
    border?: CheckoutBrandingSimpleBorder;
    
    /**
     * Set to TRANSPARENT to define transparent form controls. If null, form controls inherit colors from their scheme settings (for example, the main section inherits from `design_system.colors.schemes.scheme1.control` by default). Note that usage of the `customizations.control.color` setting to customize the form control color is deprecated.
     * 
     */
    color?: CheckoutBrandingColorSelection;
    
    /**
     * The corner radius used for form controls.
     */
    cornerRadius?: CheckoutBrandingCornerRadius;
    
    /**
     * The label position used for form controls.
     */
    labelPosition?: CheckoutBrandingLabelPosition;
  }
  
  /**
   * Possible values for the simple border.
   */
  export const enum CheckoutBrandingSimpleBorder {
    
    /**
     * The None simple border.
     */
    NONE = 'NONE',
    
    /**
     * The Full simple border.
     */
    FULL = 'FULL'
  }
  
  /**
   * The possible colors.
   */
  export const enum CheckoutBrandingColorSelection {
    
    /**
     * Transparent color selection.
     */
    TRANSPARENT = 'TRANSPARENT'
  }
  
  /**
   * Possible values for the label position.
   */
  export const enum CheckoutBrandingLabelPosition {
    
    /**
     * The Inside label position.
     */
    INSIDE = 'INSIDE',
    
    /**
     * The Outside label position.
     */
    OUTSIDE = 'OUTSIDE'
  }
  
  /**
   * A checkout branding image.
   */
  export interface CheckoutBrandingImage {
    
    /**
     * The image details.
     */
    image?: Image;
  }
  
  /**
   * The global customizations.
   */
  export interface CheckoutBrandingGlobal {
    
    /**
     * The global corner radius setting that overrides all other [corner radius](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius)
     * customizations.
     * 
     */
    cornerRadius?: CheckoutBrandingGlobalCornerRadius;
    
    /**
     * The global typography customizations.
     */
    typography?: CheckoutBrandingTypographyStyleGlobal;
  }
  
  /**
   * Possible choices to override corner radius customizations on all applicable objects. Note that this selection 
   * can only be used to set the override to `NONE` (0px).
   * 
   * For more customizations options, set the [corner radius](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius)
   * selection on specific objects while leaving the global corner radius unset.
   * 
   */
  export const enum CheckoutBrandingGlobalCornerRadius {
    
    /**
     * Set the global corner radius override to 0px (square corners).
     */
    NONE = 'NONE'
  }
  
  /**
   * The global typography customizations.
   */
  export interface CheckoutBrandingTypographyStyleGlobal {
    
    /**
     * The kerning.
     */
    kerning?: CheckoutBrandingTypographyKerning;
    
    /**
     * The letter case.
     */
    letterCase?: CheckoutBrandingTypographyLetterCase;
  }
  
  /**
   * Possible values for the typography kerning.
   */
  export const enum CheckoutBrandingTypographyKerning {
    
    /**
     * Base or default kerning.
     */
    BASE = 'BASE',
    
    /**
     * Loose kerning, leaving more space than the default in between characters.
     */
    LOOSE = 'LOOSE',
    
    /**
     * Extra loose kerning, leaving even more space in between characters.
     */
    EXTRA_LOOSE = 'EXTRA_LOOSE'
  }
  
  /**
   * Possible values for the typography letter case.
   */
  export const enum CheckoutBrandingTypographyLetterCase {
    
    /**
     * All letters are is lower case.
     */
    LOWER = 'LOWER',
    
    /**
     * No letter casing applied.
     */
    NONE = 'NONE',
    
    /**
     * Capitalize the first letter of each word.
     */
    TITLE = 'TITLE',
    
    /**
     * All letters are uppercase.
     */
    UPPER = 'UPPER'
  }
  
  /**
   * The header customizations.
   */
  export interface CheckoutBrandingHeader {
    
    /**
     * The header alignment.
     */
    alignment?: CheckoutBrandingHeaderAlignment;
    
    /**
     * The background image of the header.
     */
    banner?: CheckoutBrandingImage;
    
    /**
     * The store logo.
     */
    logo?: CheckoutBrandingLogo;
    
    /**
     * The header position.
     */
    position?: CheckoutBrandingHeaderPosition;
  }
  
  /**
   * The possible header alignments.
   */
  export const enum CheckoutBrandingHeaderAlignment {
    
    /**
     * Start alignment.
     */
    START = 'START',
    
    /**
     * Center alignment.
     */
    CENTER = 'CENTER',
    
    /**
     * End alignment.
     */
    END = 'END'
  }
  
  /**
   * The store logo customizations.
   */
  export interface CheckoutBrandingLogo {
    
    /**
     * The logo image.
     */
    image?: Image;
    
    /**
     * The maximum width of the logo.
     */
    maxWidth?: number;
  }
  
  /**
   * The possible header positions.
   */
  export const enum CheckoutBrandingHeaderPosition {
    
    /**
     * Inline position.
     */
    INLINE = 'INLINE',
    
    /**
     * Secondary inline position.
     */
    INLINE_SECONDARY = 'INLINE_SECONDARY',
    
    /**
     * Start position.
     */
    START = 'START'
  }
  
  /**
   * The heading level customizations.
   */
  export interface CheckoutBrandingHeadingLevel {
    
    /**
     * The typography customizations used for headings.
     */
    typography?: CheckoutBrandingTypographyStyle;
  }
  
  /**
   * The typography customizations.
   */
  export interface CheckoutBrandingTypographyStyle {
    
    /**
     * The font.
     */
    font?: CheckoutBrandingTypographyFont;
    
    /**
     * The kerning.
     */
    kerning?: CheckoutBrandingTypographyKerning;
    
    /**
     * The letter case.
     */
    letterCase?: CheckoutBrandingTypographyLetterCase;
    
    /**
     * The font size.
     */
    size?: CheckoutBrandingTypographySize;
    
    /**
     * The font weight.
     */
    weight?: CheckoutBrandingTypographyWeight;
  }
  
  /**
   * The font selection.
   */
  export const enum CheckoutBrandingTypographyFont {
    
    /**
     * The primary font.
     */
    PRIMARY = 'PRIMARY',
    
    /**
     * The secondary font.
     */
    SECONDARY = 'SECONDARY'
  }
  
  /**
   * Possible choices for the font size.
   * 
   * Note that the value in pixels of these settings can be customized with the
   * [typography size](https://shopify.dev/docs/api/admin-graphql/latest/input-objects/CheckoutBrandingFontSizeInput)
   * object. Refer to the [typography tutorial](https://shopify.dev/docs/apps/checkout/styling/customize-typography)
   * for more information.
   * 
   */
  export const enum CheckoutBrandingTypographySize {
    
    /**
     * The extra small font size. Example: 10px.
     */
    EXTRA_SMALL = 'EXTRA_SMALL',
    
    /**
     * The small font size. Example: 12px.
     */
    SMALL = 'SMALL',
    
    /**
     * The base font size. Example: 14px.
     */
    BASE = 'BASE',
    
    /**
     * The medium font size. Example: 15px.
     */
    MEDIUM = 'MEDIUM',
    
    /**
     * The large font size. Example: 17px.
     */
    LARGE = 'LARGE',
    
    /**
     * The extra large font size. Example: 21px.
     */
    EXTRA_LARGE = 'EXTRA_LARGE',
    
    /**
     * The extra extra large font size. Example: 24px.
     */
    EXTRA_EXTRA_LARGE = 'EXTRA_EXTRA_LARGE'
  }
  
  /**
   * Possible values for the font weight.
   */
  export const enum CheckoutBrandingTypographyWeight {
    
    /**
     * The base weight.
     */
    BASE = 'BASE',
    
    /**
     * The bold weight.
     */
    BOLD = 'BOLD'
  }
  
  /**
   * The main container customizations.
   */
  export interface CheckoutBrandingMain {
    
    /**
     * The background image of the main container.
     */
    backgroundImage?: CheckoutBrandingImage;
    
    /**
     * The selected color scheme of the main container.
     */
    colorScheme?: CheckoutBrandingColorSchemeSelection;
  }
  
  /**
   * The possible color schemes.
   */
  export const enum CheckoutBrandingColorSchemeSelection {
    
    /**
     * The TRANSPARENT color scheme selection.
     */
    TRANSPARENT = 'TRANSPARENT',
    
    /**
     * The COLOR_SCHEME1 color scheme selection.
     */
    COLOR_SCHEME1 = 'COLOR_SCHEME1',
    
    /**
     * The COLOR_SCHEME2 color scheme selection.
     */
    COLOR_SCHEME2 = 'COLOR_SCHEME2'
  }
  
  /**
   * The merchandise thumbnails customizations.
   */
  export interface CheckoutBrandingMerchandiseThumbnail {
    
    /**
     * The border used for merchandise thumbnails.
     */
    border?: CheckoutBrandingSimpleBorder;
    
    /**
     * The corner radius used for merchandise thumbnails.
     */
    cornerRadius?: CheckoutBrandingCornerRadius;
  }
  
  /**
   * The order summary customizations.
   */
  export interface CheckoutBrandingOrderSummary {
    
    /**
     * The background image of the order summary container.
     */
    backgroundImage?: CheckoutBrandingImage;
    
    /**
     * The selected color scheme of the order summary container.
     */
    colorScheme?: CheckoutBrandingColorSchemeSelection;
  }
  
  /**
   * The buttons customizations.
   */
  export interface CheckoutBrandingButton {
    
    /**
     * The background style used for buttons.
     */
    background?: CheckoutBrandingBackgroundStyle;
    
    /**
     * The block padding used for buttons.
     */
    blockPadding?: CheckoutBrandingSpacing;
    
    /**
     * The border used for buttons.
     */
    border?: CheckoutBrandingSimpleBorder;
    
    /**
     * The corner radius used for buttons.
     */
    cornerRadius?: CheckoutBrandingCornerRadius;
    
    /**
     * The inline padding used for buttons.
     */
    inlinePadding?: CheckoutBrandingSpacing;
    
    /**
     * The typography used for buttons.
     */
    typography?: CheckoutBrandingTypographyStyle;
  }
  
  /**
   * Possible values for the background style.
   */
  export const enum CheckoutBrandingBackgroundStyle {
    
    /**
     * The Solid background style.
     */
    SOLID = 'SOLID',
    
    /**
     * The None background style.
     */
    NONE = 'NONE'
  }
  
  /**
   * Possible values for the spacing.
   */
  export const enum CheckoutBrandingSpacing {
    
    /**
     * The None spacing.
     */
    NONE = 'NONE',
    
    /**
     * The Extra Tight spacing.
     */
    EXTRA_TIGHT = 'EXTRA_TIGHT',
    
    /**
     * The Tight spacing.
     */
    TIGHT = 'TIGHT',
    
    /**
     * The Base spacing.
     */
    BASE = 'BASE',
    
    /**
     * The Loose spacing.
     */
    LOOSE = 'LOOSE',
    
    /**
     * The Extra Loose spacing.
     */
    EXTRA_LOOSE = 'EXTRA_LOOSE'
  }
  
  /**
   * The selects customizations.
   */
  export interface CheckoutBrandingSelect {
    
    /**
     * The border used for selects.
     */
    border?: CheckoutBrandingBorder;
    
    /**
     * The typography customizations used for selects.
     */
    typography?: CheckoutBrandingTypographyStyle;
  }
  
  /**
   * Possible values for the border.
   */
  export const enum CheckoutBrandingBorder {
    
    /**
     * The None border.
     */
    NONE = 'NONE',
    
    /**
     * The Block End border.
     */
    BLOCK_END = 'BLOCK_END',
    
    /**
     * The Full border.
     */
    FULL = 'FULL'
  }
  
  /**
   * The text fields customizations.
   */
  export interface CheckoutBrandingTextField {
    
    /**
     * The border used for text fields.
     */
    border?: CheckoutBrandingBorder;
    
    /**
     * The typography customizations used for text fields.
     */
    typography?: CheckoutBrandingTypographyStyle;
  }
  
  /**
   * The design system allows you to set values that represent specific attributes
   * of your brand like color and font. These attributes are used throughout the user
   * interface. This brings consistency and allows you to easily make broad design changes.
   * 
   */
  export interface CheckoutBrandingDesignSystem {
    
    /**
     * The color settings for global colors and color schemes.
     */
    colors?: CheckoutBrandingColors;
    
    /**
     * The corner radius variables.
     */
    cornerRadius?: CheckoutBrandingCornerRadiusVariables;
    
    /**
     * The typography.
     */
    typography?: CheckoutBrandingTypography;
  }
  
  /**
   * The color settings for global colors and color schemes.
   */
  export interface CheckoutBrandingColors {
    
    /**
     * A group of global colors for customizing the overall look and feel of the user interface.
     */
    global?: CheckoutBrandingColorGlobal;
    
    /**
     * A set of color schemes which apply to different areas of the user interface.
     */
    schemes?: CheckoutBrandingColorSchemes;
  }
  
  /**
   * A set of colors for customizing the overall look and feel of the checkout.
   */
  export interface CheckoutBrandingColorGlobal {
    
    /**
     * A color used for interaction, like links and focus states.
     */
    accent?: string;
    
    /**
     * A color strongly associated with the merchant, currently used for elements
     * like primary and secondary buttons.
     * 
     */
    brand?: string;
    
    /**
     * A semantic color used for components that communicate critical content.
     */
    critical?: string;
    
    /**
     * A color used to highlight certain areas of the user interface.
     */
    decorative?: string;
    
    /**
     * A semantic color used for components that communicate informative content.
     */
    info?: string;
    
    /**
     * A semantic color used for components that communicate successful actions.
     */
    success?: string;
    
    /**
     * A semantic color used for components that display content that requires attention.
     */
    warning?: string;
  }
  
  /**
   * The color schemes.
   */
  export interface CheckoutBrandingColorSchemes {
    
    /**
     * The primary scheme. By default, it’s used for the main area of the interface.
     */
    scheme1?: CheckoutBrandingColorScheme;
    
    /**
     * The secondary scheme. By default, it’s used for secondary areas, like Checkout’s Order Summary.
     */
    scheme2?: CheckoutBrandingColorScheme;
  }
  
  /**
   * A base set of color customizations that is applied to an area of Checkout, from which every component
   * pulls its colors from.
   * 
   */
  export interface CheckoutBrandingColorScheme {
    
    /**
     * The main colors of a scheme.
     */
    base?: CheckoutBrandingColorRoles;
    
    /**
     * The colors of form controls.
     */
    control?: CheckoutBrandingControlColorRoles;
    
    /**
     * The colors of the primary button.
     */
    primaryButton?: CheckoutBrandingButtonColorRoles;
    
    /**
     * The colors of the secondary button.
     */
    secondaryButton?: CheckoutBrandingButtonColorRoles;
  }
  
  /**
   * A group of colors used together on a surface.
   */
  export interface CheckoutBrandingColorRoles {
    
    /**
     * The color of accented objects (links and focused state).
     */
    accent?: string;
    
    /**
     * The color of the background.
     */
    background?: string;
    
    /**
     * The color of borders.
     */
    border?: string;
    
    /**
     * The decorative color for highlighting specific parts of the user interface.
     */
    decorative?: string;
    
    /**
     * The color of icons.
     */
    icon?: string;
    
    /**
     * The color of text.
     */
    text?: string;
  }
  
  /**
   * Colors for form controls.
   */
  export interface CheckoutBrandingControlColorRoles {
    
    /**
     * The color of accented objects (links and focused state).
     */
    accent?: string;
    
    /**
     * The color of the background.
     */
    background?: string;
    
    /**
     * The color of borders.
     */
    border?: string;
    
    /**
     * The decorative color for highlighting specific parts of the user interface.
     */
    decorative?: string;
    
    /**
     * The color of icons.
     */
    icon?: string;
    
    /**
     * The colors of selected controls.
     */
    selected?: CheckoutBrandingColorRoles;
    
    /**
     * The color of text.
     */
    text?: string;
  }
  
  /**
   * Colors for buttons.
   */
  export interface CheckoutBrandingButtonColorRoles {
    
    /**
     * The color of accented objects (links and focused state).
     */
    accent?: string;
    
    /**
     * The color of the background.
     */
    background?: string;
    
    /**
     * The color of borders.
     */
    border?: string;
    
    /**
     * The decorative color for highlighting specific parts of the user interface.
     */
    decorative?: string;
    
    /**
     * The colors of the button on hover.
     */
    hover?: CheckoutBrandingColorRoles;
    
    /**
     * The color of icons.
     */
    icon?: string;
    
    /**
     * The color of text.
     */
    text?: string;
  }
  
  /**
   * Define the pixel size of corner radius options.
   * 
   */
  export interface CheckoutBrandingCornerRadiusVariables {
    
    /**
     * The value in pixels for base corner radii. Example: 5.
     */
    base?: number;
    
    /**
     * The value in pixels for large corner radii. Example: 10.
     */
    large?: number;
    
    /**
     * The value in pixels for small corner radii. Example: 3.
     */
    small?: number;
  }
  
  /**
   * The typography settings used for checkout-related text. Use these settings to customize the
   * font family and size for primary and secondary text elements.
   * 
   * Refer to the [typography tutorial](https://shopify.dev/docs/apps/checkout/styling/customize-typography)
   * for further information on typography customization.
   * 
   */
  export interface CheckoutBrandingTypography {
    
    /**
     * A font group used for most components such as text, buttons and form controls.
     */
    primary?: CheckoutBrandingFontGroup;
    
    /**
     * A font group used for heading components by default.
     */
    secondary?: CheckoutBrandingFontGroup;
    
    /**
     * The font size design system (base size in pixels and scaling between different sizes).
     */
    size?: CheckoutBrandingFontSize;
  }
  
  /**
   * A font group. To learn more about updating fonts, refer to the
   * [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert)
   * mutation and the checkout branding [tutorial](https://shopify.dev/docs/apps/checkout/styling).
   * 
   */
  export interface CheckoutBrandingFontGroup {
    
    /**
     * The base font.
     */
    base?: CheckoutBrandingFont;
    
    /**
     * The bold font.
     */
    bold?: CheckoutBrandingFont;
    
    /**
     * The font loading strategy.
     */
    loadingStrategy?: CheckoutBrandingFontLoadingStrategy;
    
    /**
     * The font group name.
     */
    name?: string;
  }
  
  /**
   * A font.
   */
  export interface CheckoutBrandingFont {
    
    /**
     * The font sources.
     */
    sources?: string;
    
    /**
     * The font weight.
     */
    weight?: number;
  }
  
  /** Use this to resolve interface type CheckoutBrandingFont */
  export type PossibleCheckoutBrandingFontTypeNames =
  'CheckoutBrandingCustomFont' |
  'CheckoutBrandingShopifyFont';
  
  export interface CheckoutBrandingFontNameMap {
    CheckoutBrandingFont: CheckoutBrandingFont;
    CheckoutBrandingCustomFont: CheckoutBrandingCustomFont;
    CheckoutBrandingShopifyFont: CheckoutBrandingShopifyFont;
  }
  
  /**
   * The font loading strategy determines how a font face is displayed after it is loaded or failed to load.
   * For more information: https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display.
   * 
   */
  export const enum CheckoutBrandingFontLoadingStrategy {
    
    /**
     * The font display strategy is defined by the browser user agent.
     */
    AUTO = 'AUTO',
    
    /**
     * Gives the font face a short block period and an infinite swap period.
     */
    BLOCK = 'BLOCK',
    
    /**
     * Gives the font face an extremely small block period and an infinite swap period.
     */
    SWAP = 'SWAP',
    
    /**
     * Gives the font face an extremely small block period and a short swap period.
     */
    FALLBACK = 'FALLBACK',
    
    /**
     * Gives the font face an extremely small block period and no swap period.
     */
    OPTIONAL = 'OPTIONAL'
  }
  
  /**
   * The font size.
   */
  export interface CheckoutBrandingFontSize {
    
    /**
     * The base font size.
     */
    base?: number;
    
    /**
     * The scale ratio used to derive all font sizes such as small and large.
     */
    ratio?: number;
  }
  
  /**
   * A checkout profile defines the branding settings and the UI extensions for a store's checkout. A checkout profile could be published or draft. A store might have at most one published checkout profile, which is used to render their live checkout. The store could also have multiple draft profiles that were created, previewed, and published using the admin checkout editor.
   */
  export interface CheckoutProfile extends Node {
    
    /**
     * The date and time when the checkout profile was created.
     */
    createdAt: DateTime;
    
    /**
     * The date and time when the checkout profile was last edited.
     */
    editedAt: DateTime;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Whether the checkout profile is published or not.
     */
    isPublished: boolean;
    
    /**
     * The profile name.
     */
    name: string;
    
    /**
     * The date and time when the checkout profile was last updated.
     */
    updatedAt: DateTime;
  }
  
  /**
   * The set of valid sort keys for the CheckoutProfile query.
   */
  export const enum CheckoutProfileSortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `edited_at` value.
     */
    EDITED_AT = 'EDITED_AT',
    
    /**
     * Sort by the `is_published` value.
     */
    IS_PUBLISHED = 'IS_PUBLISHED',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple CheckoutProfiles.
   * 
   */
  export interface CheckoutProfileConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CheckoutProfileEdge>;
    
    /**
     * A list of the nodes contained in CheckoutProfileEdge.
     */
    nodes: Array<CheckoutProfile>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one CheckoutProfile and a cursor during pagination.
   * 
   */
  export interface CheckoutProfileEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CheckoutProfileEdge.
     */
    node: CheckoutProfile;
  }
  
  /**
   * The set of valid sort keys for the CodeDiscount query.
   */
  export const enum CodeDiscountSortKeys {
    
    /**
     * Sort by the `starts_at` value.
     */
    STARTS_AT = 'STARTS_AT',
    
    /**
     * Sort by the `ends_at` value.
     */
    ENDS_AT = 'ENDS_AT',
    
    /**
     * Sort by the `title` value.
     */
    TITLE = 'TITLE',
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple DiscountCodeNodes.
   * 
   */
  export interface DiscountCodeNodeConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<DiscountCodeNodeEdge>;
    
    /**
     * A list of the nodes contained in DiscountCodeNodeEdge.
     */
    nodes: Array<DiscountCodeNode>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one DiscountCodeNode and a cursor during pagination.
   * 
   */
  export interface DiscountCodeNodeEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of DiscountCodeNodeEdge.
     */
    node: DiscountCodeNode;
  }
  
  /**
   * This object defines all columns and allowed relations that can be used in rules for smart collections to automatically include the matching products.
   */
  export interface CollectionRuleConditions {
    
    /**
     * Allowed relations of the rule.
     */
    allowedRelations: Array<CollectionRuleRelation>;
    
    /**
     * Most commonly used relation for this rule.
     */
    defaultRelation: CollectionRuleRelation;
    
    /**
     * Additional attributes defining the rule.
     */
    ruleObject?: CollectionRuleConditionsRuleObject;
    
    /**
     * Type of the rule.
     */
    ruleType: CollectionRuleColumn;
  }
  
  /**
   * Specifies object with additional rule attributes.
   */
  export type CollectionRuleConditionsRuleObject =
  CollectionRuleMetafieldCondition;
  
  /** Use this to resolve union type CollectionRuleConditionsRuleObject */
  export type PossibleCollectionRuleConditionsRuleObjectTypeNames =
  'CollectionRuleMetafieldCondition';
  
  export interface CollectionRuleConditionsRuleObjectNameMap {
    CollectionRuleConditionsRuleObject: CollectionRuleConditionsRuleObject;
    CollectionRuleMetafieldCondition: CollectionRuleMetafieldCondition;
  }
  
  /**
   * The set of valid sort keys for the Company query.
   */
  export const enum CompanySortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `since_date` value.
     */
    SINCE_DATE = 'SINCE_DATE',
    
    /**
     * Sort by the `name` value.
     */
    NAME = 'NAME',
    
    /**
     * Sort by the `order_count` value.
     */
    ORDER_COUNT = 'ORDER_COUNT',
    
    /**
     * Sort by the `total_spent` value.
     */
    TOTAL_SPENT = 'TOTAL_SPENT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple Companies.
   * 
   */
  export interface CompanyConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CompanyEdge>;
    
    /**
     * A list of the nodes contained in CompanyEdge.
     */
    nodes: Array<Company>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Company and a cursor during pagination.
   * 
   */
  export interface CompanyEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CompanyEdge.
     */
    node: Company;
  }
  
  /**
   * The valid values for the bulk operation's type.
   */
  export const enum BulkOperationType {
    
    /**
     * The bulk operation is a query.
     */
    QUERY = 'QUERY',
    
    /**
     * The bulk operation is a mutation.
     */
    MUTATION = 'MUTATION'
  }
  
  /**
   * An asynchronous long-running operation to fetch data in bulk or to bulk import data.
   * 
   * Bulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After
   * they are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
   * a link to the data in [JSONL](http://jsonlines.org/) format.
   * 
   * Refer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
   * 
   */
  export interface BulkOperation extends Node {
    
    /**
     * When the bulk operation was successfully completed.
     */
    completedAt?: DateTime;
    
    /**
     * When the bulk operation was created.
     */
    createdAt: DateTime;
    
    /**
     * Error code for failed operations.
     */
    errorCode?: BulkOperationErrorCode;
    
    /**
     * File size in bytes of the file in the `url` field.
     */
    fileSize?: UnsignedInt64;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * A running count of all the objects processed.
     * For example, when fetching all the products and their variants, this field counts both products and variants.
     * This field can be used to track operation progress.
     * 
     */
    objectCount: UnsignedInt64;
    
    /**
     * The URL that points to the partial or incomplete response data (in [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.
     * The URL expires 7 days after the operation fails. Returns `null` when there's no data available.
     * 
     */
    partialDataUrl?: URL;
    
    /**
     * GraphQL query document specified in `bulkOperationRunQuery`.
     */
    query: string;
    
    /**
     * A running count of all the objects that are processed at the root of the query.
     * For example, when fetching all the products and their variants, this field only counts products.
     * This field can be used to track operation progress.
     * 
     */
    rootObjectCount: UnsignedInt64;
    
    /**
     * Status of the bulk operation.
     */
    status: BulkOperationStatus;
    
    /**
     * The bulk operation's type.
     */
    type: BulkOperationType;
    
    /**
     * The URL that points to the response data in [JSONL](http://jsonlines.org/) format.
     * The URL expires 7 days after the operation completes.
     * 
     */
    url?: URL;
  }
  
  /**
   * Error codes for failed bulk operations.
   */
  export const enum BulkOperationErrorCode {
    
    /**
     * The provided operation `query` returned access denied due to missing
     * [access scopes](https://shopify.dev/api/usage/access-scopes).
     * Review the requested object permissions and execute the query as a normal non-bulk GraphQL request to see more details.
     * 
     */
    ACCESS_DENIED = 'ACCESS_DENIED',
    
    /**
     * The operation resulted in partial or incomplete data due to internal server errors during execution.
     * These errors might be intermittent, so you can try performing the same query again.
     * 
     */
    INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR',
    
    /**
     * The operation resulted in partial or incomplete data due to query timeouts during execution.
     * In some cases, timeouts can be avoided by modifying your `query` to select fewer fields.
     * 
     */
    TIMEOUT = 'TIMEOUT'
  }
  
  /**
   * The valid values for the status of a bulk operation.
   */
  export const enum BulkOperationStatus {
    
    /**
     * The bulk operation has been canceled.
     */
    CANCELED = 'CANCELED',
    
    /**
     * Cancelation has been initiated on the bulk operation. There may be a short delay from when a cancelation
     * starts until the operation is actually canceled.
     * 
     */
    CANCELING = 'CANCELING',
    
    /**
     * The bulk operation has successfully completed.
     */
    COMPLETED = 'COMPLETED',
    
    /**
     * The bulk operation has been created.
     */
    CREATED = 'CREATED',
    
    /**
     * The bulk operation URL has expired.
     */
    EXPIRED = 'EXPIRED',
    
    /**
     * The bulk operation has failed. For information on why the operation failed, use
     * [BulkOperation.errorCode](https://shopify.dev/api/admin-graphql/latest/enums/bulkoperationerrorcode).
     * 
     */
    FAILED = 'FAILED',
    
    /**
     * The bulk operation is runnning.
     */
    RUNNING = 'RUNNING'
  }
  
  /**
   * The input fields to override default customer merge rules.
   * 
   */
  export interface CustomerMergeOverrideFields {
    
    /**
     * The ID of the customer whose first name will be kept.
     * 
     */
    customerIdOfFirstNameToKeep?: string;
    
    /**
     * The ID of the customer whose last name will be kept.
     * 
     */
    customerIdOfLastNameToKeep?: string;
    
    /**
     * The ID of the customer whose email will be kept.
     * 
     */
    customerIdOfEmailToKeep?: string;
    
    /**
     * The ID of the customer whose phone number will be kept.
     * 
     */
    customerIdOfPhoneNumberToKeep?: string;
    
    /**
     * The ID of the customer whose default address will be kept.
     * 
     */
    customerIdOfDefaultAddressToKeep?: string;
    
    /**
     * The note to keep.
     */
    note?: string;
    
    /**
     * The tags to keep.
     */
    tags?: Array<string>;
  }
  
  /**
   * A preview of the results of a customer merge request.
   */
  export interface CustomerMergePreview {
    
    /**
     * The fields that can be used to override the default fields.
     */
    alternateFields?: CustomerMergePreviewAlternateFields;
    
    /**
     * The fields that will block the merge if the two customers are merged.
     */
    blockingFields?: CustomerMergePreviewBlockingFields;
    
    /**
     * The errors blocking the customer merge.
     */
    customerMergeErrors?: Array<CustomerMergeError>;
    
    /**
     * The fields that will be kept if the two customers are merged.
     */
    defaultFields?: CustomerMergePreviewDefaultFields;
    
    /**
     * The resulting customer ID if the two customers are merged.
     */
    resultingCustomerId?: string;
  }
  
  /**
   * The fields that can be used to override the default fields.
   */
  export interface CustomerMergePreviewAlternateFields {
    
    /**
     * The default address of a customer.
     */
    defaultAddress?: MailingAddress;
    
    /**
     * The email state of a customer.
     */
    email?: CustomerEmailAddress;
    
    /**
     * The first name of a customer.
     */
    firstName?: string;
    
    /**
     * The last name of a customer.
     */
    lastName?: string;
    
    /**
     * The phone number state of a customer.
     */
    phoneNumber?: CustomerPhoneNumber;
  }
  
  /**
   * Represents an email address.
   * 
   */
  export interface CustomerEmailAddress {
    
    /**
     * The customer's default email address.
     */
    emailAddress: string;
    
    /**
     * Whether the customer has subscribed to email marketing.
     */
    marketingState: CustomerEmailAddressMarketingState;
    
    /**
     * The URL to unsubscribe a member from all mailing lists.
     */
    marketingUnsubscribeUrl: URL;
    
    /**
     * Whether the customer has opted in to having their opened emails tracked.
     * 
     */
    openTrackingLevel: CustomerEmailAddressOpenTrackingLevel;
    
    /**
     * The URL that can be used to opt a customer in or out of email open tracking.
     * 
     */
    openTrackingUrl: URL;
  }
  
  /**
   * Possible marketing states for the customer’s email address.
   * 
   */
  export const enum CustomerEmailAddressMarketingState {
    
    /**
     * The customer’s email address marketing state is invalid.
     * 
     */
    INVALID = 'INVALID',
    
    /**
     * The customer is not subscribed to email marketing.
     * 
     */
    NOT_SUBSCRIBED = 'NOT_SUBSCRIBED',
    
    /**
     * The customer is in the process of subscribing to email marketing.
     * 
     */
    PENDING = 'PENDING',
    
    /**
     * The customer is subscribed to email marketing.
     * 
     */
    SUBSCRIBED = 'SUBSCRIBED',
    
    /**
     * The customer is not subscribed to email marketing but was previously subscribed.
     * 
     */
    UNSUBSCRIBED = 'UNSUBSCRIBED'
  }
  
  /**
   * The different levels related to whether a customer has opted in to having their opened emails tracked.
   * 
   */
  export const enum CustomerEmailAddressOpenTrackingLevel {
    
    /**
     * The customer has not specified whether they want to opt in or out of having their open emails tracked.
     * 
     */
    UNKNOWN = 'UNKNOWN',
    
    /**
     * The customer has opted in to having their open emails tracked.
     * 
     */
    OPTED_IN = 'OPTED_IN',
    
    /**
     * The customer has opted out of having their open emails tracked.
     * 
     */
    OPTED_OUT = 'OPTED_OUT'
  }
  
  /**
   * A phone number.
   * 
   */
  export interface CustomerPhoneNumber {
    
    /**
     * Whether the customer has subscribed to SMS marketing material.
     */
    marketingState: CustomerSmsMarketingState;
    
    /**
     * A customer's phone number.
     */
    phoneNumber: string;
  }
  
  /**
   * The blocking fields of a customer merge preview. These fields will block customer merge unless edited.
   * 
   */
  export interface CustomerMergePreviewBlockingFields {
    
    /**
     * The merged note resulting from a customer merge. The merged note is over the 5000 character limit and will block customer merge.
     * 
     */
    note?: string;
    
    /**
     * The merged tags resulting from a customer merge. The merged tags are over the 250 limit and will block customer merge.
     * 
     */
    tags: Array<string>;
  }
  
  /**
   * The fields that will be kept as part of a customer merge preview.
   */
  export interface CustomerMergePreviewDefaultFields {
    
    /**
     * The merged addresses resulting from a customer merge.
     */
    addresses: MailingAddressConnection;
    
    /**
     * The default address resulting from a customer merge.
     */
    defaultAddress?: MailingAddress;
    
    /**
     * The total number of customer-specific discounts resulting from a customer merge.
     */
    discountNodeCount: UnsignedInt64;
    
    /**
     * The merged customer-specific discounts resulting from a customer merge.
     */
    discountNodes: DiscountNodeConnection;
    
    /**
     * The full name of the customer, based on the values for `first_name` and `last_name`. If `first_name` and `last_name` aren't available, then this field falls back to the customer's email address. If the customer's email isn't available, then this field falls back to the customer's phone number.
     */
    displayName: string;
    
    /**
     * The total number of merged draft orders.
     */
    draftOrderCount: UnsignedInt64;
    
    /**
     * The merged draft orders resulting from a customer merge.
     */
    draftOrders: DraftOrderConnection;
    
    /**
     * The email state of a customer.
     */
    email?: CustomerEmailAddress;
    
    /**
     * The first name resulting from a customer merge.
     */
    firstName?: string;
    
    /**
     * The total number of merged gift cards.
     */
    giftCardCount: UnsignedInt64;
    
    /**
     * The merged gift cards resulting from a customer merge.
     */
    giftCards: GiftCardConnection;
    
    /**
     * The last name resulting from a customer merge.
     */
    lastName?: string;
    
    /**
     * The total number of merged metafields.
     */
    metafieldCount: UnsignedInt64;
    
    /**
     * The merged note resulting from a customer merge.
     */
    note?: string;
    
    /**
     * The total number of merged orders.
     */
    orderCount: UnsignedInt64;
    
    /**
     * The merged orders resulting from a customer merge.
     */
    orders: OrderConnection;
    
    /**
     * The phone number state of a customer.
     */
    phoneNumber?: CustomerPhoneNumber;
    
    /**
     * The merged tags resulting from a customer merge.
     */
    tags: Array<string>;
  }
  
  /**
   * An auto-generated type for paginating through multiple MailingAddresses.
   * 
   */
  export interface MailingAddressConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<MailingAddressEdge>;
    
    /**
     * A list of the nodes contained in MailingAddressEdge.
     */
    nodes: Array<MailingAddress>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one MailingAddress and a cursor during pagination.
   * 
   */
  export interface MailingAddressEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of MailingAddressEdge.
     */
    node: MailingAddress;
  }
  
  /**
   * The set of valid sort keys for the Discount query.
   */
  export const enum DiscountSortKeys {
    
    /**
     * Sort by the `starts_at` value.
     */
    STARTS_AT = 'STARTS_AT',
    
    /**
     * Sort by the `ends_at` value.
     */
    ENDS_AT = 'ENDS_AT',
    
    /**
     * Sort by the `title` value.
     */
    TITLE = 'TITLE',
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple DiscountNodes.
   * 
   */
  export interface DiscountNodeConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<DiscountNodeEdge>;
    
    /**
     * A list of the nodes contained in DiscountNodeEdge.
     */
    nodes: Array<DiscountNode>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one DiscountNode and a cursor during pagination.
   * 
   */
  export interface DiscountNodeEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of DiscountNodeEdge.
     */
    node: DiscountNode;
  }
  
  /**
   * The set of valid sort keys for the GiftCard query.
   */
  export const enum GiftCardSortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `customer_name` value.
     */
    CUSTOMER_NAME = 'CUSTOMER_NAME',
    
    /**
     * Sort by the `code` value.
     */
    CODE = 'CODE',
    
    /**
     * Sort by the `balance` value.
     */
    BALANCE = 'BALANCE',
    
    /**
     * Sort by the `amount_spent` value.
     */
    AMOUNT_SPENT = 'AMOUNT_SPENT',
    
    /**
     * Sort by the `initial_value` value.
     */
    INITIAL_VALUE = 'INITIAL_VALUE',
    
    /**
     * Sort by the `disabled_at` value.
     */
    DISABLED_AT = 'DISABLED_AT',
    
    /**
     * Sort by the `expires_on` value.
     */
    EXPIRES_ON = 'EXPIRES_ON',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple GiftCards.
   * 
   */
  export interface GiftCardConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<GiftCardEdge>;
    
    /**
     * A list of the nodes contained in GiftCardEdge.
     */
    nodes: Array<GiftCard>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one GiftCard and a cursor during pagination.
   * 
   */
  export interface GiftCardEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of GiftCardEdge.
     */
    node: GiftCard;
  }
  
  /**
   * The connection type for the `CustomerSegmentMembers` object.
   */
  export interface CustomerSegmentMemberConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CustomerSegmentMemberEdge>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
    
    /**
     * The statistics for a given segment.
     */
    statistics: SegmentStatistics;
    
    /**
     * The total number of members in a given segment.
     */
    totalCount: number;
  }
  
  /**
   * An auto-generated type which holds one CustomerSegmentMember and a cursor during pagination.
   * 
   */
  export interface CustomerSegmentMemberEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CustomerSegmentMemberEdge.
     */
    node: CustomerSegmentMember;
  }
  
  /**
   * The member of a segment.
   * 
   */
  export interface CustomerSegmentMember extends HasMetafields {
    
    /**
     * The total amount of money that the member has spent on orders.
     */
    amountSpent?: MoneyV2;
    
    /**
     * The member's default address.
     */
    defaultAddress?: MailingAddress;
    
    /**
     * The member's default email address.
     */
    defaultEmailAddress?: CustomerEmailAddress;
    
    /**
     * The member's default phone number.
     */
    defaultPhoneNumber?: CustomerPhoneNumber;
    
    /**
     * The full name of the member, which is based on the values of the `first_name` and `last_name` fields. If the member's first name and last name aren't available, then the customer's email address is used. If the customer's email address isn't available, then the customer's phone number is used.
     */
    displayName: string;
    
    /**
     * The member's first name.
     */
    firstName?: string;
    
    /**
     * The member’s ID.
     */
    id: string;
    
    /**
     * The member's last name.
     */
    lastName?: string;
    
    /**
     * The ID of the member's most recent order.
     */
    lastOrderId?: string;
    
    /**
     * Whether the customer can be merged with another customer.
     */
    mergeable: CustomerMergeable;
    
    /**
     * Returns a metafield by namespace and key that belongs to the resource.
     */
    metafield?: Metafield;
    
    /**
     * List of metafields that belong to the resource.
     */
    metafields: MetafieldConnection;
    
    /**
     * A note about the member.
     */
    note?: string;
    
    /**
     * The total number of orders that the member has made.
     */
    numberOfOrders?: UnsignedInt64;
    
    /**
     * Returns a private metafield by namespace and key that belongs to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * List of private metafields that belong to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafields: PrivateMetafieldConnection;
  }
  
  /**
   * The statistics of a given segment.
   */
  export interface SegmentStatistics {
    
    /**
     * The statistics of a given attribute.
     */
    attributeStatistics: SegmentAttributeStatistics;
  }
  
  /**
   * The statistics of a given attribute.
   */
  export interface SegmentAttributeStatistics {
    
    /**
     * The average of a given attribute.
     */
    average: number;
    
    /**
     * The sum of a given attribute.
     */
    sum: number;
  }
  
  /**
   * A job to determine a list of members, such as customers, that are associated with an individual segment.
   */
  export interface CustomerSegmentMembersQuery extends JobResult, Node {
    
    /**
     * The current total number of members in a given segment.
     */
    currentCount: number;
    
    /**
     * This indicates if the job is still queued or has been run.
     */
    done: boolean;
    
    /**
     * A globally-unique ID that's returned when running an asynchronous mutation.
     */
    id: string;
  }
  
  /**
   * A job corresponds to some long running task that the client should poll for status.
   */
  export interface JobResult {
    
    /**
     * This indicates if the job is still queued or has been run.
     */
    done: boolean;
    
    /**
     * A globally-unique ID that's returned when running an asynchronous mutation.
     */
    id: string;
  }
  
  /** Use this to resolve interface type JobResult */
  export type PossibleJobResultTypeNames = 'CustomerSegmentMembersQuery';
  
  export interface JobResultNameMap {
    JobResult: JobResult;
    CustomerSegmentMembersQuery: CustomerSegmentMembersQuery;
  }
  
  /**
   * A list of maps that contain `segmentId` IDs and `isMember` Booleans. The maps represent segment memberships.
   * 
   */
  export interface SegmentMembershipResponse {
    
    /**
     * The membership status for the given list of segments.
     */
    memberships: Array<SegmentMembership>;
  }
  
  /**
   * The response type for the `segmentMembership` object.
   * 
   */
  export interface SegmentMembership {
    
    /**
     * A Boolean that indicates whether or not the customer in the query is a member of the segment, which is identified using the `segmentId`.
     */
    isMember: boolean;
    
    /**
     * A `segmentId` that's used for testing membership.
     */
    segmentId: string;
  }
  
  /**
   * The supported subject types of deletion events.
   */
  export const enum DeletionEventSubjectType {
    COLLECTION = 'COLLECTION',
    PRODUCT = 'PRODUCT'
  }
  
  /**
   * The set of valid sort keys for the DeletionEvent query.
   */
  export const enum DeletionEventSortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple DeletionEvents.
   * 
   */
  export interface DeletionEventConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<DeletionEventEdge>;
    
    /**
     * A list of the nodes contained in DeletionEventEdge.
     */
    nodes: Array<DeletionEvent>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one DeletionEvent and a cursor during pagination.
   * 
   */
  export interface DeletionEventEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of DeletionEventEdge.
     */
    node: DeletionEvent;
  }
  
  /**
   * Deletion events chronicle the destruction of resources (e.g. products and collections).
   * Once deleted, the deletion event is the only trace of the original's existence,
   * as the resource itself has been removed and can no longer be accessed.
   * 
   */
  export interface DeletionEvent {
    
    /**
     * The date and time when the deletion event for the related resource was generated.
     */
    occurredAt: DateTime;
    
    /**
     * The ID of the resource that was deleted.
     */
    subjectId: string;
    
    /**
     * The type of resource that was deleted.
     */
    subjectType: DeletionEventSubjectType;
  }
  
  /**
   * An auto-generated type for paginating through multiple DeliveryCustomizations.
   * 
   */
  export interface DeliveryCustomizationConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<DeliveryCustomizationEdge>;
    
    /**
     * A list of the nodes contained in DeliveryCustomizationEdge.
     */
    nodes: Array<DeliveryCustomization>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one DeliveryCustomization and a cursor during pagination.
   * 
   */
  export interface DeliveryCustomizationEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of DeliveryCustomizationEdge.
     */
    node: DeliveryCustomization;
  }
  
  /**
   * An auto-generated type for paginating through multiple DeliveryProfiles.
   * 
   */
  export interface DeliveryProfileConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<DeliveryProfileEdge>;
    
    /**
     * A list of the nodes contained in DeliveryProfileEdge.
     */
    nodes: Array<DeliveryProfile>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one DeliveryProfile and a cursor during pagination.
   * 
   */
  export interface DeliveryProfileEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of DeliveryProfileEdge.
     */
    node: DeliveryProfile;
  }
  
  /**
   * The `DeliverySetting` object enables you to manage shop-wide shipping settings.
   * You can enable legacy compatibility mode for the multi-location delivery profiles feature
   * if the legacy mode isn't blocked.
   * 
   */
  export interface DeliverySetting {
    
    /**
     * Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
     */
    legacyModeBlocked: DeliveryLegacyModeBlocked;
    
    /**
     * Enables legacy compatability mode for the multi-location delivery profiles feature.
     */
    legacyModeProfiles: boolean;
  }
  
  /**
   * Whether the shop is blocked from converting to full multi-location delivery profiles mode. If the shop is blocked, then the blocking reasons are also returned.
   */
  export interface DeliveryLegacyModeBlocked {
    
    /**
     * Whether the shop can convert to full multi-location delivery profiles mode.
     */
    blocked: boolean;
    
    /**
     * The reasons why the shop is blocked from converting to full multi-location delivery profiles mode.
     */
    reasons?: Array<DeliveryLegacyModeBlockedReason>;
  }
  
  /**
   * Reasons the shop is blocked from converting to full multi-location delivery profiles mode.
   */
  export const enum DeliveryLegacyModeBlockedReason {
    
    /**
     * Multi-Location mode is disabled. The shop can't convert to full multi-location delivery profiles mode.
     * @deprecated All shops are now using multi-location mode.
     */
    MULTI_LOCATION_DISABLED = 'MULTI_LOCATION_DISABLED',
    
    /**
     * There are no locations for this store that can fulfill online orders.
     */
    NO_LOCATIONS_FULFILLING_ONLINE_ORDERS = 'NO_LOCATIONS_FULFILLING_ONLINE_ORDERS'
  }
  
  /**
   * The properties and status of a bulk discount redeem code creation operation.
   */
  export interface DiscountRedeemCodeBulkCreation extends Node {
    
    /**
     * The result of each code creation operation associated with the bulk creation operation including any errors that might have occurred during the operation.
     */
    codes: DiscountRedeemCodeBulkCreationCodeConnection;
    
    /**
     * The number of codes to create.
     */
    codesCount: number;
    
    /**
     * The date and time when the bulk creation was created.
     */
    createdAt: DateTime;
    
    /**
     * The code discount associated with the created codes.
     */
    discountCode?: DiscountCodeNode;
    
    /**
     * Whether the bulk creation is still queued (`false`) or has been run (`true`).
     */
    done: boolean;
    
    /**
     * The number of codes that weren't created successfully.
     */
    failedCount: number;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The number of codes created successfully.
     */
    importedCount: number;
  }
  
  /**
   * An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes.
   * 
   */
  export interface DiscountRedeemCodeBulkCreationCodeConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<DiscountRedeemCodeBulkCreationCodeEdge>;
    
    /**
     * A list of the nodes contained in DiscountRedeemCodeBulkCreationCodeEdge.
     */
    nodes: Array<DiscountRedeemCodeBulkCreationCode>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.
   * 
   */
  export interface DiscountRedeemCodeBulkCreationCodeEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of DiscountRedeemCodeBulkCreationCodeEdge.
     */
    node: DiscountRedeemCodeBulkCreationCode;
  }
  
  /**
   * A result of a discount redeem code creation operation created by a bulk creation.
   */
  export interface DiscountRedeemCodeBulkCreationCode {
    
    /**
     * The code to use in the discount redeem code creation operation.
     */
    code: string;
    
    /**
     * The successfully created discount redeem code.
     * 
     * If the discount redeem code couldn't be created, then this field is `null``.
     * 
     */
    discountRedeemCode?: DiscountRedeemCode;
    
    /**
     * A list of errors that occurred during the creation operation of the discount redeem code.
     */
    errors: Array<DiscountUserError>;
  }
  
  /**
   * An error that occurs during the execution of a discount mutation.
   */
  export interface DiscountUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: DiscountErrorCode;
    
    /**
     * Extra information about this error.
     */
    extraInfo?: string;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `DiscountUserError`.
   */
  export const enum DiscountErrorCode {
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value should be equal to the value allowed.
     */
    EQUAL_TO = 'EQUAL_TO',
    
    /**
     * The input value should be greater than the minimum allowed value.
     */
    GREATER_THAN = 'GREATER_THAN',
    
    /**
     * The input value should be greater than or equal to the minimum value allowed.
     */
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value should be less than or equal to the maximum value allowed.
     */
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO',
    
    /**
     * The input value should be less than the maximum value allowed.
     */
    LESS_THAN = 'LESS_THAN',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * Unexpected internal error happened.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * Too many arguments provided.
     */
    TOO_MANY_ARGUMENTS = 'TOO_MANY_ARGUMENTS',
    
    /**
     * Missing a required argument.
     */
    MISSING_ARGUMENT = 'MISSING_ARGUMENT',
    
    /**
     * The active period overlaps with other automatic discounts. At any given time, only one automatic discount can be active.
     */
    ACTIVE_PERIOD_OVERLAP = 'ACTIVE_PERIOD_OVERLAP',
    
    /**
     * The value exceeded the maximum allowed value.
     */
    EXCEEDED_MAX = 'EXCEEDED_MAX',
    
    /**
     * Specify a minimum subtotal or a quantity, but not both.
     */
    MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT = 'MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT',
    
    /**
     * The value is outside of the allowed range.
     */
    VALUE_OUTSIDE_RANGE = 'VALUE_OUTSIDE_RANGE',
    
    /**
     * The attribute selection contains conflicting settings.
     */
    CONFLICT = 'CONFLICT',
    
    /**
     * The value is already present through another selection.
     */
    IMPLICIT_DUPLICATE = 'IMPLICIT_DUPLICATE',
    
    /**
     * The input value is already present.
     */
    DUPLICATE = 'DUPLICATE',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * The `combinesWith` settings are invalid for the discount class.
     */
    INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS = 'INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS',
    
    /**
     * The discountClass is invalid for the price rule.
     */
    INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE = 'INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE',
    
    /**
     * The active period overlaps with too many other app-provided discounts. There's a limit on the number of app discounts that can be active at any given time.
     */
    MAX_APP_DISCOUNTS = 'MAX_APP_DISCOUNTS'
  }
  
  /**
   * A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.
   */
  export interface ShopifyPaymentsDispute extends LegacyInteroperability, Node {
    
    /**
     * The total amount disputed by the cardholder.
     */
    amount: MoneyV2;
    
    /**
     * The deadline for evidence submission.
     */
    evidenceDueBy?: Date;
    
    /**
     * The date when evidence was sent. Returns null if evidence hasn't yet been sent.
     */
    evidenceSentOn?: Date;
    
    /**
     * The date when this dispute was resolved. Returns null if the dispute isn't yet resolved.
     */
    finalizedOn?: Date;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The date when this dispute was initiated.
     */
    initiatedAt: DateTime;
    
    /**
     * The ID of the corresponding resource in the REST Admin API.
     */
    legacyResourceId: UnsignedInt64;
    
    /**
     * The order that contains the charge that's under dispute.
     */
    order?: Order;
    
    /**
     * The reason of the dispute.
     */
    reasonDetails: ShopifyPaymentsDisputeReasonDetails;
    
    /**
     * The current state of the dispute.
     */
    status: DisputeStatus;
    
    /**
     * Indicates if this dispute is still in the inquiry phase or has turned into a chargeback.
     */
    type: DisputeType;
  }
  
  /**
   * Details regarding a dispute reason.
   */
  export interface ShopifyPaymentsDisputeReasonDetails {
    
    /**
     * The raw code provided by the payment network.
     */
    networkReasonCode?: string;
    
    /**
     * The reason for the dispute provided by the cardholder's banks.
     */
    reason: ShopifyPaymentsDisputeReason;
  }
  
  /**
   * The reason for the dispute provided by the cardholder's bank.
   */
  export const enum ShopifyPaymentsDisputeReason {
    
    /**
     * The cardholder claims that they didn’t authorize the payment.
     */
    FRAUDULENT = 'FRAUDULENT',
    
    /**
     * The dispute is uncategorized, so you should contact the customer for additional details to find out why the payment was disputed.
     */
    GENERAL = 'GENERAL',
    
    /**
     * The customer doesn’t recognize the payment appearing on their card statement.
     */
    UNRECOGNIZED = 'UNRECOGNIZED',
    
    /**
     * The customer claims they were charged multiple times for the same product or service.
     */
    DUPLICATE = 'DUPLICATE',
    
    /**
     * The customer claims that you continued to charge them after a subscription was canceled.
     */
    SUBSCRIPTION_CANCELLED = 'SUBSCRIPTION_CANCELLED',
    
    /**
     * The product or service was received but was defective, damaged, or not as described.
     */
    PRODUCT_UNACCEPTABLE = 'PRODUCT_UNACCEPTABLE',
    
    /**
     * The customer claims they did not receive the products or services purchased.
     */
    PRODUCT_NOT_RECEIVED = 'PRODUCT_NOT_RECEIVED',
    
    /**
     * The customer claims that the purchased product was returned or the transaction was otherwise canceled, but you haven't yet provided a refund or credit.
     */
    CREDIT_NOT_PROCESSED = 'CREDIT_NOT_PROCESSED',
    
    /**
     * The customer account associated with the purchase is incorrect.
     */
    INCORRECT_ACCOUNT_DETAILS = 'INCORRECT_ACCOUNT_DETAILS',
    
    /**
     * The customer's bank account has insufficient funds.
     */
    INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS',
    
    /**
     * The customer's bank can't process the charge.
     */
    BANK_CANNOT_PROCESS = 'BANK_CANNOT_PROCESS',
    
    /**
     * The customer's bank can't proceed with the debit since it hasn't been authorized.
     */
    DEBIT_NOT_AUTHORIZED = 'DEBIT_NOT_AUTHORIZED',
    
    /**
     * The customer initiated the dispute. Contact the customer for additional details on why the payment was disputed.
     */
    CUSTOMER_INITIATED = 'CUSTOMER_INITIATED'
  }
  
  /**
   * The evidence associated with the dispute.
   */
  export interface ShopifyPaymentsDisputeEvidence extends Node {
    
    /**
     * The activity logs associated with the dispute evidence.
     */
    accessActivityLog?: string;
    
    /**
     * The billing address that's provided by the customer.
     */
    billingAddress?: MailingAddress;
    
    /**
     * The cancellation policy disclosure associated with the dispute evidence.
     */
    cancellationPolicyDisclosure?: string;
    
    /**
     * The cancellation policy file associated with the dispute evidence.
     */
    cancellationPolicyFile?: ShopifyPaymentsDisputeFileUpload;
    
    /**
     * The cancellation rebuttal associated with the dispute evidence.
     */
    cancellationRebuttal?: string;
    
    /**
     * The customer communication file associated with the dispute evidence.
     */
    customerCommunicationFile?: ShopifyPaymentsDisputeFileUpload;
    
    /**
     * The customer's email address.
     */
    customerEmailAddress?: string;
    
    /**
     * The customer's first name.
     */
    customerFirstName?: string;
    
    /**
     * The customer's last name.
     */
    customerLastName?: string;
    
    /**
     * The customer purchase ip for this dispute evidence.
     */
    customerPurchaseIp?: string;
    
    /**
     * The dispute associated with the evidence.
     */
    dispute: ShopifyPaymentsDispute;
    
    /**
     * The file uploads associated with the dispute evidence.
     */
    disputeFileUploads: Array<ShopifyPaymentsDisputeFileUpload>;
    
    /**
     * The fulfillments associated with the dispute evidence.
     */
    fulfillments: Array<ShopifyPaymentsDisputeFulfillment>;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The product description for this dispute evidence.
     */
    productDescription?: string;
    
    /**
     * The refund policy disclosure associated with the dispute evidence.
     */
    refundPolicyDisclosure?: string;
    
    /**
     * The refund policy file associated with the dispute evidence.
     */
    refundPolicyFile?: ShopifyPaymentsDisputeFileUpload;
    
    /**
     * The refund refusal explanation associated with dispute evidence.
     */
    refundRefusalExplanation?: string;
    
    /**
     * The service documentation file associated with the dispute evidence.
     */
    serviceDocumentationFile?: ShopifyPaymentsDisputeFileUpload;
    
    /**
     * The mailing address for shipping that's provided by the customer.
     */
    shippingAddress?: MailingAddress;
    
    /**
     * The shipping documentation file associated with the dispute evidence.
     */
    shippingDocumentationFile?: ShopifyPaymentsDisputeFileUpload;
    
    /**
     * Whether the dispute evidence is submitted.
     */
    submitted: boolean;
    
    /**
     * The uncategorized file associated with the dispute evidence.
     */
    uncategorizedFile?: ShopifyPaymentsDisputeFileUpload;
    
    /**
     * The uncategorized text for the dispute evidence.
     */
    uncategorizedText?: string;
  }
  
  /**
   * The file upload associated with the dispute evidence.
   */
  export interface ShopifyPaymentsDisputeFileUpload extends Node {
    
    /**
     * The type of the file for the dispute evidence.
     */
    disputeEvidenceType?: ShopifyPaymentsDisputeEvidenceFileType;
    
    /**
     * The file size.
     */
    fileSize: number;
    
    /**
     * The file type.
     */
    fileType: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The original file name.
     */
    originalFileName?: string;
    
    /**
     * The URL for accessing the file.
     */
    url: URL;
  }
  
  /**
   * The possible dispute evidence file types.
   */
  export const enum ShopifyPaymentsDisputeEvidenceFileType {
    
    /**
     * Customer Communication File.
     */
    CUSTOMER_COMMUNICATION_FILE = 'CUSTOMER_COMMUNICATION_FILE',
    
    /**
     * Refund Policy File.
     */
    REFUND_POLICY_FILE = 'REFUND_POLICY_FILE',
    
    /**
     * Cancellation Policy File.
     */
    CANCELLATION_POLICY_FILE = 'CANCELLATION_POLICY_FILE',
    
    /**
     * Uncategorized File.
     */
    UNCATEGORIZED_FILE = 'UNCATEGORIZED_FILE',
    
    /**
     * Shipping Documentation File.
     */
    SHIPPING_DOCUMENTATION_FILE = 'SHIPPING_DOCUMENTATION_FILE',
    
    /**
     * Service Documentation File.
     */
    SERVICE_DOCUMENTATION_FILE = 'SERVICE_DOCUMENTATION_FILE'
  }
  
  /**
   * The fulfillment associated with dispute evidence.
   */
  export interface ShopifyPaymentsDisputeFulfillment extends Node {
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The shipping carrier for this fulfillment.
     */
    shippingCarrier?: string;
    
    /**
     * The shipping date for this fulfillment.
     */
    shippingDate?: Date;
    
    /**
     * The shipping tracking number for this fulfillment.
     */
    shippingTrackingNumber?: string;
  }
  
  /**
   * Represents a draft order tag.
   */
  export interface DraftOrderTag extends Node {
    
    /**
     * Handle of draft order tag.
     */
    handle: string;
    
    /**
     * ID of draft order tag.
     */
    id: string;
    
    /**
     * Title of draft order tag.
     */
    title: string;
  }
  
  /**
   * The set of valid sort keys for the File query.
   */
  export const enum FileSortKeys {
    
    /**
     * Sort by the `filename` value.
     */
    FILENAME = 'FILENAME',
    
    /**
     * Sort by the `original_upload_size` value.
     */
    ORIGINAL_UPLOAD_SIZE = 'ORIGINAL_UPLOAD_SIZE',
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple Files.
   * 
   */
  export interface FileConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<FileEdge>;
    
    /**
     * A list of the nodes contained in FileEdge.
     */
    nodes: Array<File>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one File and a cursor during pagination.
   * 
   */
  export interface FileEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of FileEdge.
     */
    node: File;
  }
  
  /**
   * A fulfillment constraint rule.
   */
  export interface FulfillmentConstraintRule extends HasMetafields, Node {
    
    /**
     * The ID for the fulfillment constraint function.
     */
    function: ShopifyFunction;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Returns a metafield by namespace and key that belongs to the resource.
     */
    metafield?: Metafield;
    
    /**
     * List of metafields that belong to the resource.
     */
    metafields: MetafieldConnection;
    
    /**
     * Returns a private metafield by namespace and key that belongs to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * List of private metafields that belong to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafields: PrivateMetafieldConnection;
  }
  
  /**
   * General inventory properties for the shop.
   */
  export interface InventoryProperties {
    
    /**
     * All the quantity names.
     */
    quantityNames: Array<InventoryQuantityName>;
  }
  
  /**
   * Details about an individual quantity name.
   */
  export interface InventoryQuantityName {
    
    /**
     * List of quantity names that this quantity name belongs to.
     */
    belongsTo: Array<string>;
    
    /**
     * List of quantity names that comprise this quantity name.
     */
    comprises: Array<string>;
    
    /**
     * The display name for quantity names translated into applicable language.
     */
    displayName?: string;
    
    /**
     * Whether the quantity name has been used by the merchant.
     */
    isInUse: boolean;
    
    /**
     * The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states) of
     * the inventory quantity. Used by
     * [inventory queries and mutations](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#graphql-queries-and-mutations).
     * 
     */
    name: string;
  }
  
  /**
   * A job corresponds to some long running task that the client should poll for status.
   */
  export interface Job {
    
    /**
     * This indicates if the job is still queued or has been run.
     */
    done: boolean;
    
    /**
     * A globally-unique ID that's returned when running an asynchronous mutation.
     */
    id: string;
    
    /**
     * This field will only resolve once the job is done. Can be used to ask for object(s) that have been changed by the job.
     */
    query?: QueryRoot;
  }
  
  /**
   * A resource that has market localizable fields.
   */
  export interface MarketLocalizableResource {
    
    /**
     * The market localizable content.
     */
    marketLocalizableContent: Array<MarketLocalizableContent>;
    
    /**
     * Market localizations for the market localizable content.
     */
    marketLocalizations: Array<MarketLocalization>;
    
    /**
     * The GID of the resource.
     */
    resourceId: string;
  }
  
  /**
   * The market localizable content of a resource's field.
   */
  export interface MarketLocalizableContent {
    
    /**
     * The hash digest representation of the content value.
     */
    digest?: string;
    
    /**
     * The resource field that's being localized.
     */
    key: string;
    
    /**
     * The content value.
     */
    value?: string;
  }
  
  /**
   * The market localization of a field within a resource, which is determined by the market ID.
   */
  export interface MarketLocalization {
    
    /**
     * A reference to the value being localized on the resource that this market localization belongs to.
     */
    key: string;
    
    /**
     * The market that the localization is specific to.
     */
    market: Market;
    
    /**
     * Whether the original content has changed since this market localization was updated.
     */
    outdated: boolean;
    
    /**
     * The date and time when the market localization was updated.
     */
    updatedAt?: DateTime;
    
    /**
     * The value of the market localization.
     */
    value?: string;
  }
  
  /**
   * The type of resources that are market localizable.
   */
  export const enum MarketLocalizableResourceType {
    
    /**
     * A metafield. Market localizable fields: `value`.
     */
    METAFIELD = 'METAFIELD',
    
    /**
     * A Metaobject. Market Localizable fields are determined by the Metaobject type.
     */
    METAOBJECT = 'METAOBJECT'
  }
  
  /**
   * An auto-generated type for paginating through multiple MarketLocalizableResources.
   * 
   */
  export interface MarketLocalizableResourceConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<MarketLocalizableResourceEdge>;
    
    /**
     * A list of the nodes contained in MarketLocalizableResourceEdge.
     */
    nodes: Array<MarketLocalizableResource>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one MarketLocalizableResource and a cursor during pagination.
   * 
   */
  export interface MarketLocalizableResourceEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of MarketLocalizableResourceEdge.
     */
    node: MarketLocalizableResource;
  }
  
  /**
   * Specifies the
   * [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
   * that are associated with a related marketing campaign.
   * 
   */
  export interface UTMInput {
    
    /**
     * The name of the UTM campaign.
     */
    campaign: string;
    
    /**
     * The name of the website or application where the referral link exists.
     */
    source: string;
    
    /**
     * The UTM campaign medium.
     */
    medium: string;
  }
  
  /**
   * The set of valid sort keys for the MarketingActivity query.
   */
  export const enum MarketingActivitySortKeys {
    
    /**
     * Sort by the `title` value.
     */
    TITLE = 'TITLE',
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple MarketingActivities.
   * 
   */
  export interface MarketingActivityConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<MarketingActivityEdge>;
    
    /**
     * A list of the nodes contained in MarketingActivityEdge.
     */
    nodes: Array<MarketingActivity>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one MarketingActivity and a cursor during pagination.
   * 
   */
  export interface MarketingActivityEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of MarketingActivityEdge.
     */
    node: MarketingActivity;
  }
  
  /**
   * The marketing activity resource represents marketing that a
   *         merchant created through an app.
   */
  export interface MarketingActivity extends Node {
    
    /**
     * The URL of the marketing activity listing page in the marketing section.
     */
    activityListUrl?: URL;
    
    /**
     * The amount spent on the marketing activity.
     */
    adSpend?: MoneyV2;
    
    /**
     * The app which created this marketing activity.
     */
    app: App;
    
    /**
     * The errors generated when an app publishes the marketing activity.
     */
    appErrors?: MarketingActivityExtensionAppErrors;
    
    /**
     * The allocated budget for the marketing activity.
     */
    budget?: MarketingBudget;
    
    /**
     * The date and time when the marketing activity was created.
     */
    createdAt: DateTime;
    
    /**
     * The completed content in the marketing activity creation form.
     */
    formData?: string;
    
    /**
     * The hierarchy level of the marketing activity.
     */
    hierarchyLevel?: MarketingActivityHierarchyLevel;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Whether the marketing activity is in the main workflow version of the marketing automation.
     */
    inMainWorkflowVersion: boolean;
    
    /**
     * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
     * @deprecated Use `marketingChannelType` instead.
     */
    marketingChannel: MarketingChannel;
    
    /**
     * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
     */
    marketingChannelType: MarketingChannel;
    
    /**
     * Associated marketing event of this marketing activity.
     */
    marketingEvent?: MarketingEvent;
    
    /**
     * ID of the parent activity of this marketing activity.
     */
    parentActivityId?: string;
    
    /**
     * ID of the parent activity of this marketing activity.
     */
    parentRemoteId?: string;
    
    /**
     * A contextual description of the marketing activity based on the platform and tactic used.
     */
    sourceAndMedium: string;
    
    /**
     * The current state of the marketing activity.
     */
    status: MarketingActivityStatus;
    
    /**
     * The severity of the marketing activity's status.
     * @deprecated Use `statusBadgeTypeV2` instead.
     */
    statusBadgeType?: MarketingActivityStatusBadgeType;
    
    /**
     * The severity of the marketing activity's status.
     */
    statusBadgeTypeV2?: BadgeType;
    
    /**
     * The rendered status of the marketing activity.
     */
    statusLabel: string;
    
    /**
     * The [date and time](
     *           https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
     *           ) when the activity's status last changed.
     */
    statusTransitionedAt?: DateTime;
    
    /**
     * The method of marketing used for this marketing activity.
     */
    tactic: MarketingTactic;
    
    /**
     * The status to which the marketing activity is currently transitioning.
     */
    targetStatus?: MarketingActivityStatus;
    
    /**
     * The marketing activity's title, which is rendered on the marketing listing page.
     */
    title: string;
    
    /**
     * The date and time when the marketing activity was updated.
     */
    updatedAt: DateTime;
    
    /**
     * A URL parameter value associated with this marketing activity.
     */
    urlParameterValue?: string;
    
    /**
     * The set of [Urchin Tracking Module](
     *           https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
     *           ) used in the URL for tracking this marketing activity.
     */
    utmParameters?: UTMParameters;
  }
  
  /**
   * Represents errors returned from apps when using the marketing activity extension.
   */
  export interface MarketingActivityExtensionAppErrors {
    
    /**
     * The app error type.
     */
    code: MarketingActivityExtensionAppErrorCode;
    
    /**
     * The list of errors returned by the app.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The error code resulted from the marketing activity extension integration.
   */
  export const enum MarketingActivityExtensionAppErrorCode {
    
    /**
     * The shop/user must be onboarded to use the app.
     */
    NOT_ONBOARDED_ERROR = 'NOT_ONBOARDED_ERROR',
    
    /**
     * The app has returned validation errors.
     */
    VALIDATION_ERROR = 'VALIDATION_ERROR',
    
    /**
     * The app is either not responding or returning unexpected data.
     */
    API_ERROR = 'API_ERROR',
    
    /**
     * The app has returned an error when invoking the platform.
     */
    PLATFORM_ERROR = 'PLATFORM_ERROR',
    
    /**
     * The app needs to be installed.
     */
    INSTALL_REQUIRED_ERROR = 'INSTALL_REQUIRED_ERROR'
  }
  
  /**
   * This type combines budget amount and its marketing budget type.
   * 
   */
  export interface MarketingBudget {
    
    /**
     * The budget type for a marketing activity.
     */
    budgetType: MarketingBudgetBudgetType;
    
    /**
     * The amount of budget for marketing activity.
     */
    total: MoneyV2;
  }
  
  /**
   * The budget type for a marketing activity.
   */
  export const enum MarketingBudgetBudgetType {
    
    /**
     * A daily budget.
     */
    DAILY = 'DAILY',
    
    /**
     * A budget for the lifetime of a marketing activity.
     */
    LIFETIME = 'LIFETIME'
  }
  
  /**
   * Hierarchy levels for external marketing activities.
   */
  export const enum MarketingActivityHierarchyLevel {
    
    /**
     * An advertisement activity. Must be parented by an ad group or a campaign activity, and must be assigned tracking parameters (URL or UTM).
     */
    AD = 'AD',
    
    /**
     * A group of advertisement activities. Must be parented by a campaign activity.
     */
    AD_GROUP = 'AD_GROUP',
    
    /**
     * A campaign activity. May contain either ad groups or ads as child activities. If childless, then the campaign activity should have tracking parameters assigned (URL or UTM) otherwise it won't appear in marketing reports.
     */
    CAMPAIGN = 'CAMPAIGN'
  }
  
  /**
   * Status helps to identify if this marketing activity has been completed, queued, failed etc.
   */
  export const enum MarketingActivityStatus {
    
    /**
     * This marketing activity is currently running.
     */
    ACTIVE = 'ACTIVE',
    
    /**
     * This marketing activity is permanently unavailable.
     */
    DELETED = 'DELETED',
    
    /**
     * This marketing activity was deleted and it was triggered from outside of Shopify.
     */
    DELETED_EXTERNALLY = 'DELETED_EXTERNALLY',
    
    /**
     * This marketing activity is disconnected and no longer editable.
     */
    DISCONNECTED = 'DISCONNECTED',
    
    /**
     * This marketing activity has been edited, but it is not yet created.
     */
    DRAFT = 'DRAFT',
    
    /**
     * This marketing activity is unable to run.
     */
    FAILED = 'FAILED',
    
    /**
     * This marketing activity has completed running.
     */
    INACTIVE = 'INACTIVE',
    
    /**
     * This marketing activity is currently not running.
     */
    PAUSED = 'PAUSED',
    
    /**
     * This marketing activity is pending creation on the app's marketing platform.
     */
    PENDING = 'PENDING',
    
    /**
     * This marketing activity is scheduled to run.
     */
    SCHEDULED = 'SCHEDULED',
    
    /**
     * The marketing activity's status is unknown.
     */
    UNDEFINED = 'UNDEFINED'
  }
  
  /**
   * StatusBadgeType helps to identify the color of the status badge.
   */
  export const enum MarketingActivityStatusBadgeType {
    
    /**
     * This status badge has type default.
     */
    DEFAULT = 'DEFAULT',
    
    /**
     * This status badge has type success.
     */
    SUCCESS = 'SUCCESS',
    
    /**
     * This status badge has type attention.
     */
    ATTENTION = 'ATTENTION',
    
    /**
     * This status badge has type warning.
     */
    WARNING = 'WARNING',
    
    /**
     * This status badge has type info.
     */
    INFO = 'INFO'
  }
  
  /**
   * The possible types for a badge.
   */
  export const enum BadgeType {
    
    /**
     * This badge has type `default`.
     */
    DEFAULT = 'DEFAULT',
    
    /**
     * This badge has type `success`.
     */
    SUCCESS = 'SUCCESS',
    
    /**
     * This badge has type `attention`.
     */
    ATTENTION = 'ATTENTION',
    
    /**
     * This badge has type `warning`.
     */
    WARNING = 'WARNING',
    
    /**
     * This badge has type `info`.
     */
    INFO = 'INFO'
  }
  
  /**
   * An auto-generated type for paginating through multiple MetafieldStorefrontVisibilities.
   * 
   */
  export interface MetafieldStorefrontVisibilityConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<MetafieldStorefrontVisibilityEdge>;
    
    /**
     * A list of the nodes contained in MetafieldStorefrontVisibilityEdge.
     */
    nodes: Array<MetafieldStorefrontVisibility>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one MetafieldStorefrontVisibility and a cursor during pagination.
   * 
   */
  export interface MetafieldStorefrontVisibilityEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of MetafieldStorefrontVisibilityEdge.
     */
    node: MetafieldStorefrontVisibility;
  }
  
  /**
   * By default, the Storefront API can't read metafields. To make specific metafields visible in the Storefront API,
   * you need to create a `MetafieldStorefrontVisibility` record. A `MetafieldStorefrontVisibility` record is a list
   * of the metafields, defined by the `owner_type`, `namespace`, and `key`, to make visible in the Storefront API.
   * 
   * Learn about [exposing metafields in the Storefront API]
   * (https://shopify.dev/custom-storefronts/products-collections/metafields)
   * for more details.
   * 
   */
  export interface MetafieldStorefrontVisibility extends LegacyInteroperability, Node {
    
    /**
     * The date and time when the metafield was set to visible in the Storefront API.
     */
    createdAt: DateTime;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The key of a metafield to make visible in the Storefront API.
     */
    key: string;
    
    /**
     * The ID of the corresponding resource in the REST Admin API.
     */
    legacyResourceId: UnsignedInt64;
    
    /**
     * The namespace of a metafield to make visible in the Storefront API.
     */
    namespace: string;
    
    /**
     * The owner type of a metafield to make visible in the Storefront API.
     */
    ownerType: MetafieldOwnerType;
    
    /**
     * The date and time when the `MetafieldStorefrontVisilibty` record was updated.
     * 
     */
    updatedAt: DateTime;
  }
  
  /**
   * The input fields for retrieving a metaobject by handle.
   */
  export interface MetaobjectHandleInput {
    
    /**
     * The type of the metaobject. Must match an existing metaobject definition type.
     */
    type: string;
    
    /**
     * The handle of the metaobject to create or update.
     */
    handle: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple MetaobjectDefinitions.
   * 
   */
  export interface MetaobjectDefinitionConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<MetaobjectDefinitionEdge>;
    
    /**
     * A list of the nodes contained in MetaobjectDefinitionEdge.
     */
    nodes: Array<MetaobjectDefinition>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one MetaobjectDefinition and a cursor during pagination.
   * 
   */
  export interface MetaobjectDefinitionEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of MetaobjectDefinitionEdge.
     */
    node: MetaobjectDefinition;
  }
  
  /**
   * The status of a customer's payment for an order.
   */
  export interface OrderPaymentStatus {
    
    /**
     * A message describing an error during the asynchronous processing of a payment.
     */
    errorMessage?: string;
    
    /**
     * The ID of the payment, initially returned by an `orderCreateMandatePayment` or `orderCreatePayment` mutation.
     */
    paymentReferenceId: string;
    
    /**
     * The status of the payment.
     */
    status: OrderPaymentStatusResult;
    
    /**
     * A translated message describing an error during the asynchronous processing of a payment.
     */
    translatedErrorMessage?: string;
  }
  
  /**
   * The type of a payment status.
   */
  export const enum OrderPaymentStatusResult {
    
    /**
     * The payment succeeded.
     */
    SUCCESS = 'SUCCESS',
    
    /**
     * The payment is authorized.
     */
    AUTHORIZED = 'AUTHORIZED',
    
    /**
     * The payment is voided.
     */
    VOIDED = 'VOIDED',
    
    /**
     * The payment is refunded.
     */
    REFUNDED = 'REFUNDED',
    
    /**
     * The payment is captured.
     */
    CAPTURED = 'CAPTURED',
    
    /**
     * The payment is in purchased status.
     */
    PURCHASED = 'PURCHASED',
    
    /**
     * There was an error initiating the payment.
     */
    ERROR = 'ERROR',
    
    /**
     * The payment is still being processed.
     */
    PROCESSING = 'PROCESSING',
    
    /**
     * Redirect required.
     */
    REDIRECT_REQUIRED = 'REDIRECT_REQUIRED',
    
    /**
     * Payment can be retried.
     */
    RETRYABLE = 'RETRYABLE',
    
    /**
     * Status is unknown.
     */
    UNKNOWN = 'UNKNOWN',
    
    /**
     * The payment is awaiting processing.
     */
    INITIATED = 'INITIATED',
    
    /**
     * The payment is pending with the provider, and may take a while.
     */
    PENDING = 'PENDING'
  }
  
  /**
   * An auto-generated type for paginating through multiple PaymentCustomizations.
   * 
   */
  export interface PaymentCustomizationConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<PaymentCustomizationEdge>;
    
    /**
     * A list of the nodes contained in PaymentCustomizationEdge.
     */
    nodes: Array<PaymentCustomization>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one PaymentCustomization and a cursor during pagination.
   * 
   */
  export interface PaymentCustomizationEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of PaymentCustomizationEdge.
     */
    node: PaymentCustomization;
  }
  
  /**
   * The set of valid sort keys for the PriceList query.
   */
  export const enum PriceListSortKeys {
    
    /**
     * Sort by the `name` value.
     */
    NAME = 'NAME',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple PriceLists.
   * 
   */
  export interface PriceListConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<PriceListEdge>;
    
    /**
     * A list of the nodes contained in PriceListEdge.
     */
    nodes: Array<PriceList>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one PriceList and a cursor during pagination.
   * 
   */
  export interface PriceListEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of PriceListEdge.
     */
    node: PriceList;
  }
  
  /**
   * Represents a product duplication job.
   */
  export interface ProductDuplicateJob {
    
    /**
     * This indicates if the job is still queued or has been run.
     */
    done: boolean;
    
    /**
     * A globally-unique ID that's returned when running an asynchronous mutation.
     */
    id: string;
  }
  
  /**
   * A product feed.
   */
  export interface ProductFeed extends Node {
    
    /**
     * The country of the product feed.
     */
    country?: CountryCode;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The language of the product feed.
     */
    language?: LanguageCode;
    
    /**
     * The status of the product feed.
     */
    status: ProductFeedStatus;
  }
  
  /**
   * ISO 639-1 language codes supported by Shopify.
   */
  export const enum LanguageCode {
    
    /**
     * Afrikaans.
     */
    AF = 'AF',
    
    /**
     * Akan.
     */
    AK = 'AK',
    
    /**
     * Amharic.
     */
    AM = 'AM',
    
    /**
     * Arabic.
     */
    AR = 'AR',
    
    /**
     * Assamese.
     */
    AS = 'AS',
    
    /**
     * Azerbaijani.
     */
    AZ = 'AZ',
    
    /**
     * Belarusian.
     */
    BE = 'BE',
    
    /**
     * Bulgarian.
     */
    BG = 'BG',
    
    /**
     * Bambara.
     */
    BM = 'BM',
    
    /**
     * Bangla.
     */
    BN = 'BN',
    
    /**
     * Tibetan.
     */
    BO = 'BO',
    
    /**
     * Breton.
     */
    BR = 'BR',
    
    /**
     * Bosnian.
     */
    BS = 'BS',
    
    /**
     * Catalan.
     */
    CA = 'CA',
    
    /**
     * Chechen.
     */
    CE = 'CE',
    
    /**
     * Czech.
     */
    CS = 'CS',
    
    /**
     * Welsh.
     */
    CY = 'CY',
    
    /**
     * Danish.
     */
    DA = 'DA',
    
    /**
     * German.
     */
    DE = 'DE',
    
    /**
     * Dzongkha.
     */
    DZ = 'DZ',
    
    /**
     * Ewe.
     */
    EE = 'EE',
    
    /**
     * Greek.
     */
    EL = 'EL',
    
    /**
     * English.
     */
    EN = 'EN',
    
    /**
     * Esperanto.
     */
    EO = 'EO',
    
    /**
     * Spanish.
     */
    ES = 'ES',
    
    /**
     * Estonian.
     */
    ET = 'ET',
    
    /**
     * Basque.
     */
    EU = 'EU',
    
    /**
     * Persian.
     */
    FA = 'FA',
    
    /**
     * Fulah.
     */
    FF = 'FF',
    
    /**
     * Finnish.
     */
    FI = 'FI',
    
    /**
     * Faroese.
     */
    FO = 'FO',
    
    /**
     * French.
     */
    FR = 'FR',
    
    /**
     * Western Frisian.
     */
    FY = 'FY',
    
    /**
     * Irish.
     */
    GA = 'GA',
    
    /**
     * Scottish Gaelic.
     */
    GD = 'GD',
    
    /**
     * Galician.
     */
    GL = 'GL',
    
    /**
     * Gujarati.
     */
    GU = 'GU',
    
    /**
     * Manx.
     */
    GV = 'GV',
    
    /**
     * Hausa.
     */
    HA = 'HA',
    
    /**
     * Hebrew.
     */
    HE = 'HE',
    
    /**
     * Hindi.
     */
    HI = 'HI',
    
    /**
     * Croatian.
     */
    HR = 'HR',
    
    /**
     * Hungarian.
     */
    HU = 'HU',
    
    /**
     * Armenian.
     */
    HY = 'HY',
    
    /**
     * Interlingua.
     */
    IA = 'IA',
    
    /**
     * Indonesian.
     */
    ID = 'ID',
    
    /**
     * Igbo.
     */
    IG = 'IG',
    
    /**
     * Sichuan Yi.
     */
    II = 'II',
    
    /**
     * Icelandic.
     */
    IS = 'IS',
    
    /**
     * Italian.
     */
    IT = 'IT',
    
    /**
     * Japanese.
     */
    JA = 'JA',
    
    /**
     * Javanese.
     */
    JV = 'JV',
    
    /**
     * Georgian.
     */
    KA = 'KA',
    
    /**
     * Kikuyu.
     */
    KI = 'KI',
    
    /**
     * Kazakh.
     */
    KK = 'KK',
    
    /**
     * Kalaallisut.
     */
    KL = 'KL',
    
    /**
     * Khmer.
     */
    KM = 'KM',
    
    /**
     * Kannada.
     */
    KN = 'KN',
    
    /**
     * Korean.
     */
    KO = 'KO',
    
    /**
     * Kashmiri.
     */
    KS = 'KS',
    
    /**
     * Kurdish.
     */
    KU = 'KU',
    
    /**
     * Cornish.
     */
    KW = 'KW',
    
    /**
     * Kyrgyz.
     */
    KY = 'KY',
    
    /**
     * Luxembourgish.
     */
    LB = 'LB',
    
    /**
     * Ganda.
     */
    LG = 'LG',
    
    /**
     * Lingala.
     */
    LN = 'LN',
    
    /**
     * Lao.
     */
    LO = 'LO',
    
    /**
     * Lithuanian.
     */
    LT = 'LT',
    
    /**
     * Luba-Katanga.
     */
    LU = 'LU',
    
    /**
     * Latvian.
     */
    LV = 'LV',
    
    /**
     * Malagasy.
     */
    MG = 'MG',
    
    /**
     * Māori.
     */
    MI = 'MI',
    
    /**
     * Macedonian.
     */
    MK = 'MK',
    
    /**
     * Malayalam.
     */
    ML = 'ML',
    
    /**
     * Mongolian.
     */
    MN = 'MN',
    
    /**
     * Marathi.
     */
    MR = 'MR',
    
    /**
     * Malay.
     */
    MS = 'MS',
    
    /**
     * Maltese.
     */
    MT = 'MT',
    
    /**
     * Burmese.
     */
    MY = 'MY',
    
    /**
     * Norwegian (Bokmål).
     */
    NB = 'NB',
    
    /**
     * North Ndebele.
     */
    ND = 'ND',
    
    /**
     * Nepali.
     */
    NE = 'NE',
    
    /**
     * Dutch.
     */
    NL = 'NL',
    
    /**
     * Norwegian Nynorsk.
     */
    NN = 'NN',
    
    /**
     * Norwegian.
     */
    NO = 'NO',
    
    /**
     * Oromo.
     */
    OM = 'OM',
    
    /**
     * Odia.
     */
    OR = 'OR',
    
    /**
     * Ossetic.
     */
    OS = 'OS',
    
    /**
     * Punjabi.
     */
    PA = 'PA',
    
    /**
     * Polish.
     */
    PL = 'PL',
    
    /**
     * Pashto.
     */
    PS = 'PS',
    
    /**
     * Portuguese (Brazil).
     */
    PT_BR = 'PT_BR',
    
    /**
     * Portuguese (Portugal).
     */
    PT_PT = 'PT_PT',
    
    /**
     * Quechua.
     */
    QU = 'QU',
    
    /**
     * Romansh.
     */
    RM = 'RM',
    
    /**
     * Rundi.
     */
    RN = 'RN',
    
    /**
     * Romanian.
     */
    RO = 'RO',
    
    /**
     * Russian.
     */
    RU = 'RU',
    
    /**
     * Kinyarwanda.
     */
    RW = 'RW',
    
    /**
     * Sindhi.
     */
    SD = 'SD',
    
    /**
     * Northern Sami.
     */
    SE = 'SE',
    
    /**
     * Sango.
     */
    SG = 'SG',
    
    /**
     * Sinhala.
     */
    SI = 'SI',
    
    /**
     * Slovak.
     */
    SK = 'SK',
    
    /**
     * Slovenian.
     */
    SL = 'SL',
    
    /**
     * Shona.
     */
    SN = 'SN',
    
    /**
     * Somali.
     */
    SO = 'SO',
    
    /**
     * Albanian.
     */
    SQ = 'SQ',
    
    /**
     * Serbian.
     */
    SR = 'SR',
    
    /**
     * Sundanese.
     */
    SU = 'SU',
    
    /**
     * Swedish.
     */
    SV = 'SV',
    
    /**
     * Swahili.
     */
    SW = 'SW',
    
    /**
     * Tamil.
     */
    TA = 'TA',
    
    /**
     * Telugu.
     */
    TE = 'TE',
    
    /**
     * Tajik.
     */
    TG = 'TG',
    
    /**
     * Thai.
     */
    TH = 'TH',
    
    /**
     * Tigrinya.
     */
    TI = 'TI',
    
    /**
     * Turkmen.
     */
    TK = 'TK',
    
    /**
     * Tongan.
     */
    TO = 'TO',
    
    /**
     * Turkish.
     */
    TR = 'TR',
    
    /**
     * Tatar.
     */
    TT = 'TT',
    
    /**
     * Uyghur.
     */
    UG = 'UG',
    
    /**
     * Ukrainian.
     */
    UK = 'UK',
    
    /**
     * Urdu.
     */
    UR = 'UR',
    
    /**
     * Uzbek.
     */
    UZ = 'UZ',
    
    /**
     * Vietnamese.
     */
    VI = 'VI',
    
    /**
     * Wolof.
     */
    WO = 'WO',
    
    /**
     * Xhosa.
     */
    XH = 'XH',
    
    /**
     * Yiddish.
     */
    YI = 'YI',
    
    /**
     * Yoruba.
     */
    YO = 'YO',
    
    /**
     * Chinese (Simplified).
     */
    ZH_CN = 'ZH_CN',
    
    /**
     * Chinese (Traditional).
     */
    ZH_TW = 'ZH_TW',
    
    /**
     * Zulu.
     */
    ZU = 'ZU',
    
    /**
     * Chinese.
     */
    ZH = 'ZH',
    
    /**
     * Portuguese.
     */
    PT = 'PT',
    
    /**
     * Church Slavic.
     */
    CU = 'CU',
    
    /**
     * Volapük.
     */
    VO = 'VO'
  }
  
  /**
   * The valid values for the status of product feed.
   */
  export const enum ProductFeedStatus {
    
    /**
     * The product feed is active.
     */
    ACTIVE = 'ACTIVE',
    
    /**
     * The product feed is inactive.
     */
    INACTIVE = 'INACTIVE'
  }
  
  /**
   * An auto-generated type for paginating through multiple ProductFeeds.
   * 
   */
  export interface ProductFeedConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ProductFeedEdge>;
    
    /**
     * A list of the nodes contained in ProductFeedEdge.
     */
    nodes: Array<ProductFeed>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ProductFeed and a cursor during pagination.
   * 
   */
  export interface ProductFeedEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ProductFeedEdge.
     */
    node: ProductFeed;
  }
  
  /**
   * Reports the status of product for a Sales Channel or Storefront API.
   * This might include why a product is not available in a Sales Channel
   * and how a merchant might fix this.
   * 
   */
  export interface ProductResourceFeedback {
    
    /**
     * The time when the feedback was generated. Used to help determine whether
     * incoming feedback is outdated compared to existing feedback.
     * 
     */
    feedbackGeneratedAt: DateTime;
    
    /**
     * The feedback messages presented to the merchant.
     */
    messages: Array<string>;
    
    /**
     * The ID of the product associated with the feedback.
     */
    productId: string;
    
    /**
     * The timestamp of the product associated with the feedback.
     */
    productUpdatedAt: DateTime;
    
    /**
     * Conveys the state of the feedback and whether it requires merchant action or not.
     */
    state: ResourceFeedbackState;
  }
  
  /**
   * The state of the resource feedback.
   */
  export const enum ResourceFeedbackState {
    
    /**
     * No action required from merchant.
     */
    ACCEPTED = 'ACCEPTED',
    
    /**
     * The merchant needs to resolve an issue with the resource.
     */
    REQUIRES_ACTION = 'REQUIRES_ACTION'
  }
  
  /**
   * A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).
   * Versions are commonly referred to by their handle (for example, `2021-10`).
   * 
   */
  export interface ApiVersion {
    
    /**
     * The human-readable name of the version.
     */
    displayName: string;
    
    /**
     * The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
     */
    handle: string;
    
    /**
     * Whether the version is actively supported by Shopify. Supported API versions are guaranteed to be stable. Unsupported API versions include unstable, release candidate, and end-of-life versions that are marked as unsupported. For more information, refer to [Versioning](https://shopify.dev/api/usage/versioning).
     */
    supported: boolean;
  }
  
  /**
   * A returnable fulfillment, which is an order that has been delivered
   * and is eligible to be returned to the merchant.
   * 
   */
  export interface ReturnableFulfillment extends Node {
    
    /**
     * The fulfillment that the returnable fulfillment refers to.
     */
    fulfillment: Fulfillment;
    
    /**
     * The unique ID of the Returnable Fulfillment.
     */
    id: string;
    
    /**
     * The list of returnable fulfillment line items.
     */
    returnableFulfillmentLineItems: ReturnableFulfillmentLineItemConnection;
  }
  
  /**
   * An auto-generated type for paginating through multiple ReturnableFulfillmentLineItems.
   * 
   */
  export interface ReturnableFulfillmentLineItemConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ReturnableFulfillmentLineItemEdge>;
    
    /**
     * A list of the nodes contained in ReturnableFulfillmentLineItemEdge.
     */
    nodes: Array<ReturnableFulfillmentLineItem>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ReturnableFulfillmentLineItem and a cursor during pagination.
   * 
   */
  export interface ReturnableFulfillmentLineItemEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ReturnableFulfillmentLineItemEdge.
     */
    node: ReturnableFulfillmentLineItem;
  }
  
  /**
   * A returnable fulfillment line item.
   */
  export interface ReturnableFulfillmentLineItem {
    
    /**
     * The fulfillment line item that can be returned.
     */
    fulfillmentLineItem: FulfillmentLineItem;
    
    /**
     * The quantity available to be returned.
     */
    quantity: number;
  }
  
  /**
   * An auto-generated type for paginating through multiple ReturnableFulfillments.
   * 
   */
  export interface ReturnableFulfillmentConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ReturnableFulfillmentEdge>;
    
    /**
     * A list of the nodes contained in ReturnableFulfillmentEdge.
     */
    nodes: Array<ReturnableFulfillment>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ReturnableFulfillment and a cursor during pagination.
   * 
   */
  export interface ReturnableFulfillmentEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ReturnableFulfillmentEdge.
     */
    node: ReturnableFulfillment;
  }
  
  /**
   * <div class="note"><h4>Theme app extensions</h4>
   *   <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
   * 
   * <div class="note"><h4>Script tag deprecation</h4>
   *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
   * 
   * 
   * A script tag represents remote JavaScript code that is loaded into the pages of a shop's storefront or the **Order status** page of checkout.
   * 
   */
  export interface ScriptTag extends LegacyInteroperability, Node {
    
    /**
     * Whether the Shopify CDN can cache and serve the script tag.
     * If `true`, then the script will be cached and served by the CDN.
     * The cache expires 15 minutes after the script tag is successfully returned.
     * If `false`, then the script will be served as is.
     * 
     */
    cache: boolean;
    
    /**
     * The date and time when the script tag was created.
     */
    createdAt: DateTime;
    
    /**
     * The page or pages on the online store that the script should be included.
     */
    displayScope: ScriptTagDisplayScope;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The ID of the corresponding resource in the REST Admin API.
     */
    legacyResourceId: UnsignedInt64;
    
    /**
     * The URL to the remote script.
     */
    src: URL;
    
    /**
     * The date and time when the script tag was last updated.
     */
    updatedAt: DateTime;
  }
  
  /**
   * The page or pages on the online store where the script should be included.
   * 
   */
  export const enum ScriptTagDisplayScope {
    
    /**
     * Include the script on both the web storefront and the <b>Order status</b> page.
     * 
     */
    ALL = 'ALL',
    
    /**
     * Include the script only on the <b>Order status</b> page.
     * 
     */
    ORDER_STATUS = 'ORDER_STATUS',
    
    /**
     * Include the script only on the web storefront.
     */
    ONLINE_STORE = 'ONLINE_STORE'
  }
  
  /**
   * An auto-generated type for paginating through multiple ScriptTags.
   * 
   */
  export interface ScriptTagConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ScriptTagEdge>;
    
    /**
     * A list of the nodes contained in ScriptTagEdge.
     */
    nodes: Array<ScriptTag>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ScriptTag and a cursor during pagination.
   * 
   */
  export interface ScriptTagEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ScriptTagEdge.
     */
    node: ScriptTag;
  }
  
  /**
   * An auto-generated type for paginating through multiple SegmentFilters.
   * 
   */
  export interface SegmentFilterConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<SegmentFilterEdge>;
    
    /**
     * A list of the nodes contained in SegmentFilterEdge.
     */
    nodes: Array<SegmentFilter>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one SegmentFilter and a cursor during pagination.
   * 
   */
  export interface SegmentFilterEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of SegmentFilterEdge.
     */
    node: SegmentFilter;
  }
  
  /**
   * The filters used in segment queries associated with a shop.
   */
  export interface SegmentFilter {
    
    /**
     * The localized name of the filter.
     */
    localizedName: string;
    
    /**
     * Whether a file can have multiple values for a single customer.
     */
    multiValue: boolean;
    
    /**
     * The query name of the filter.
     */
    queryName: string;
  }
  
  /** Use this to resolve interface type SegmentFilter */
  export type PossibleSegmentFilterTypeNames =
  'SegmentAssociationFilter' |
  'SegmentBooleanFilter' |
  'SegmentDateFilter' |
  'SegmentEnumFilter' |
  'SegmentEventFilter' |
  'SegmentFloatFilter' |
  'SegmentIntegerFilter' |
  'SegmentStringFilter';
  
  export interface SegmentFilterNameMap {
    SegmentFilter: SegmentFilter;
    SegmentAssociationFilter: SegmentAssociationFilter;
    SegmentBooleanFilter: SegmentBooleanFilter;
    SegmentDateFilter: SegmentDateFilter;
    SegmentEnumFilter: SegmentEnumFilter;
    SegmentEventFilter: SegmentEventFilter;
    SegmentFloatFilter: SegmentFloatFilter;
    SegmentIntegerFilter: SegmentIntegerFilter;
    SegmentStringFilter: SegmentStringFilter;
  }
  
  /**
   * An auto-generated type for paginating through multiple SegmentMigrations.
   * 
   */
  export interface SegmentMigrationConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<SegmentMigrationEdge>;
    
    /**
     * A list of the nodes contained in SegmentMigrationEdge.
     */
    nodes: Array<SegmentMigration>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one SegmentMigration and a cursor during pagination.
   * 
   */
  export interface SegmentMigrationEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of SegmentMigrationEdge.
     */
    node: SegmentMigration;
  }
  
  /**
   * A segment and its corresponding saved search. 
   * For example, you can use `SegmentMigration` to retrieve the segment ID that corresponds to a saved search ID.
   * 
   */
  export interface SegmentMigration {
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The ID of the saved search.
     */
    savedSearchId: string;
    
    /**
     * The ID of the segment.
     */
    segmentId?: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple SegmentValues.
   * 
   */
  export interface SegmentValueConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<SegmentValueEdge>;
    
    /**
     * A list of the nodes contained in SegmentValueEdge.
     */
    nodes: Array<SegmentValue>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one SegmentValue and a cursor during pagination.
   * 
   */
  export interface SegmentValueEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of SegmentValueEdge.
     */
    node: SegmentValue;
  }
  
  /**
   * A list of suggested values associated with an individual segment. A
   * segment is a group of members, such as customers, that meet specific
   * criteria.
   * 
   */
  export interface SegmentValue {
    
    /**
     * The localized version of the value's name. This name is displayed to the merchant.
     */
    localizedValue: string;
    
    /**
     * The name of the query associated with the suggestion.
     */
    queryName: string;
  }
  
  /**
   * The set of valid sort keys for the Segment query.
   */
  export const enum SegmentSortKeys {
    
    /**
     * Sort by the `creation_date` value.
     */
    CREATION_DATE = 'CREATION_DATE',
    
    /**
     * Sort by the `last_edit_date` value.
     */
    LAST_EDIT_DATE = 'LAST_EDIT_DATE',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple Segments.
   * 
   */
  export interface SegmentConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<SegmentEdge>;
    
    /**
     * A list of the nodes contained in SegmentEdge.
     */
    nodes: Array<Segment>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Segment and a cursor during pagination.
   * 
   */
  export interface SegmentEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of SegmentEdge.
     */
    node: Segment;
  }
  
  /**
   * The set of valid sort keys for the SellingPlanGroup query.
   */
  export const enum SellingPlanGroupSortKeys {
    
    /**
     * Sort by the `name` value.
     */
    NAME = 'NAME',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * A server pixel stores configuration for streaming customer interactions to an EventBridge or PubSub endpoint.
   */
  export interface ServerPixel extends Node {
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The current state of this server pixel.
     */
    status?: ServerPixelStatus;
    
    /**
     * Address of the EventBridge or PubSub endpoint.
     */
    webhookEndpointAddress?: string;
  }
  
  /**
   * The current state of a server pixel.
   */
  export const enum ServerPixelStatus {
    
    /**
     * This server pixel is connected: it will stream customer events to the endpoint if it is configured properly.
     */
    CONNECTED = 'CONNECTED',
    
    /**
     * This server pixel is disconnected and unconfigured: it does not stream events to the endpoint and no endpoint address had been added to the server pixel.
     */
    DISCONNECTED_UNCONFIGURED = 'DISCONNECTED_UNCONFIGURED',
    
    /**
     * This server pixel is disconnected: it does not stream events to the endpoint and an endpoint address has been added to the server pixel.
     */
    DISCONNECTED_CONFIGURED = 'DISCONNECTED_CONFIGURED'
  }
  
  /**
   * Billing preferences for the shop.
   */
  export interface ShopBillingPreferences {
    
    /**
     * The currency the shop uses to pay for apps and services.
     */
    currency: CurrencyCode;
  }
  
  /**
   * A locale that's been enabled on a shop.
   */
  export interface ShopLocale {
    
    /**
     * The locale ISO code.
     */
    locale: string;
    
    /**
     * The market web presences that use the locale.
     */
    marketWebPresences: Array<MarketWebPresence>;
    
    /**
     * The human-readable locale name.
     */
    name: string;
    
    /**
     * Whether the locale is the default locale for the shop.
     */
    primary: boolean;
    
    /**
     * Whether the locale is visible to buyers.
     */
    published: boolean;
  }
  
  /**
   * An auto-generated type for paginating through multiple ShopifyFunctions.
   * 
   */
  export interface ShopifyFunctionConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ShopifyFunctionEdge>;
    
    /**
     * A list of the nodes contained in ShopifyFunctionEdge.
     */
    nodes: Array<ShopifyFunction>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ShopifyFunction and a cursor during pagination.
   * 
   */
  export interface ShopifyFunctionEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ShopifyFunctionEdge.
     */
    node: ShopifyFunction;
  }
  
  /**
   * Balance and payout information for a
   * [Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
   * account. Balance includes all balances for the currencies supported by the shop.
   * You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
   * 
   */
  export interface ShopifyPaymentsAccount extends Node {
    
    /**
     * Whether the Shopify Payments setup is completed.
     */
    activated: boolean;
    
    /**
     * Current balances in all currencies for the account.
     */
    balance: Array<MoneyV2>;
    
    /**
     * A list of balance transactions associated with the shop.
     */
    balanceTransactions: ShopifyPaymentsBalanceTransactionConnection;
    
    /**
     * All bank accounts configured for the Shopify Payments account.
     */
    bankAccounts: ShopifyPaymentsBankAccountConnection;
    
    /**
     * The statement descriptor used for charges.
     * 
     * The statement descriptor appears on a customer's credit card or bank statement when they make a purchase.
     * 
     * @deprecated Use `chargeStatementDescriptors` instead.
     */
    chargeStatementDescriptor?: string;
    
    /**
     * The statement descriptors used for charges.
     * 
     * These descriptors appear on a customer's credit card or bank statement when they make a purchase.
     * 
     */
    chargeStatementDescriptors?: ShopifyPaymentsChargeStatementDescriptor;
    
    /**
     * The Shopify Payments account country.
     */
    country: string;
    
    /**
     * The default payout currency for the Shopify Payments account.
     */
    defaultCurrency: CurrencyCode;
    
    /**
     * All disputes related to the Shopify Payments account.
     */
    disputes: ShopifyPaymentsDisputeConnection;
    
    /**
     * The fraud settings of the Shopify Payments account.
     */
    fraudSettings: ShopifyPaymentsFraudSettings;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The notifications settings for the account.
     */
    notificationSettings: ShopifyPaymentsNotificationSettings;
    
    /**
     * Whether the Shopify Payments account can be onboarded.
     */
    onboardable: boolean;
    
    /**
     * The payout schedule for the account.
     */
    payoutSchedule: ShopifyPaymentsPayoutSchedule;
    
    /**
     * The descriptor used for payouts.
     * 
     * The descriptor appears on a merchant's bank statement when they receive a payout.
     * 
     */
    payoutStatementDescriptor?: string;
    
    /**
     * All current and previous payouts made between the account and the bank account.
     */
    payouts: ShopifyPaymentsPayoutConnection;
    
    /**
     * The permitted documents for identity verification.
     */
    permittedVerificationDocuments: Array<ShopifyPaymentsVerificationDocument>;
    
    /**
     * The verifications necessary for this account.
     */
    verifications: Array<ShopifyPaymentsVerification>;
  }
  
  /**
   * The set of valid sort keys for the BalanceTransaction query.
   */
  export const enum BalanceTransactionSortKeys {
    
    /**
     * Sort by the `payout_date` value.
     */
    PAYOUT_DATE = 'PAYOUT_DATE',
    
    /**
     * Sort by the `payout_status` value.
     */
    PAYOUT_STATUS = 'PAYOUT_STATUS',
    
    /**
     * Sort by the `processed_at` value.
     */
    PROCESSED_AT = 'PROCESSED_AT',
    
    /**
     * Sort by the `amount` value.
     */
    AMOUNT = 'AMOUNT',
    
    /**
     * Sort by the `fee` value.
     */
    FEE = 'FEE',
    
    /**
     * Sort by the `net` value.
     */
    NET = 'NET',
    
    /**
     * Sort by the `transaction_type` value.
     */
    TRANSACTION_TYPE = 'TRANSACTION_TYPE',
    
    /**
     * Sort by the `order_name` value.
     */
    ORDER_NAME = 'ORDER_NAME',
    
    /**
     * Sort by the `payment_method_name` value.
     */
    PAYMENT_METHOD_NAME = 'PAYMENT_METHOD_NAME',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple ShopifyPaymentsBalanceTransactions.
   * 
   */
  export interface ShopifyPaymentsBalanceTransactionConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ShopifyPaymentsBalanceTransactionEdge>;
    
    /**
     * A list of the nodes contained in ShopifyPaymentsBalanceTransactionEdge.
     */
    nodes: Array<ShopifyPaymentsBalanceTransaction>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ShopifyPaymentsBalanceTransaction and a cursor during pagination.
   * 
   */
  export interface ShopifyPaymentsBalanceTransactionEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ShopifyPaymentsBalanceTransactionEdge.
     */
    node: ShopifyPaymentsBalanceTransaction;
  }
  
  /**
   * A transaction that contributes to a Shopify Payments account balance.
   * 
   */
  export interface ShopifyPaymentsBalanceTransaction extends Node {
    
    /**
     * The adjustment orders associated to the transaction.
     */
    adjustmentsOrders: Array<ShopifyPaymentsAdjustmentOrder>;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The net amount contributing to the merchant's balance.
     */
    net: MoneyV2;
    
    /**
     * The date and time when the balance transaction was processed.
     * 
     */
    transactionDate: DateTime;
  }
  
  /**
   * The adjustment order object.
   * 
   */
  export interface ShopifyPaymentsAdjustmentOrder {
    
    /**
     * The amount of the adjustment order.
     */
    amount: MoneyV2;
    
    /**
     * The link to the adjustment order.
     */
    link: URL;
    
    /**
     * The name of the adjustment order.
     */
    name: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts.
   * 
   */
  export interface ShopifyPaymentsBankAccountConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ShopifyPaymentsBankAccountEdge>;
    
    /**
     * A list of the nodes contained in ShopifyPaymentsBankAccountEdge.
     */
    nodes: Array<ShopifyPaymentsBankAccount>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.
   * 
   */
  export interface ShopifyPaymentsBankAccountEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ShopifyPaymentsBankAccountEdge.
     */
    node: ShopifyPaymentsBankAccount;
  }
  
  /**
   * A bank account that can receive payouts.
   * 
   */
  export interface ShopifyPaymentsBankAccount extends Node {
    
    /**
     * The account number of the bank account.
     */
    accountNumber: string;
    
    /**
     * The last digits of the account number (the rest is redacted).
     */
    accountNumberLastDigits: string;
    
    /**
     * The name of the bank.
     * 
     */
    bankName?: string;
    
    /**
     * The country of the bank.
     * 
     */
    country: CountryCode;
    
    /**
     * The date that the bank account was created.
     */
    createdAt: DateTime;
    
    /**
     * The currency of the bank account.
     * 
     */
    currency: CurrencyCode;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * All current and previous payouts made between the account and the bank account.
     */
    payouts: ShopifyPaymentsPayoutConnection;
    
    /**
     * The routing number of the bank account.
     */
    routingNumber: string;
    
    /**
     * The status of the bank account.
     * 
     */
    status: ShopifyPaymentsBankAccountStatus;
  }
  
  /**
   * The possible transaction types for a payout.
   */
  export const enum ShopifyPaymentsPayoutTransactionType {
    
    /**
     * The payout is a deposit.
     */
    DEPOSIT = 'DEPOSIT',
    
    /**
     * The payout is a withdrawal.
     */
    WITHDRAWAL = 'WITHDRAWAL'
  }
  
  /**
   * An auto-generated type for paginating through multiple ShopifyPaymentsPayouts.
   * 
   */
  export interface ShopifyPaymentsPayoutConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ShopifyPaymentsPayoutEdge>;
    
    /**
     * A list of the nodes contained in ShopifyPaymentsPayoutEdge.
     */
    nodes: Array<ShopifyPaymentsPayout>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.
   * 
   */
  export interface ShopifyPaymentsPayoutEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ShopifyPaymentsPayoutEdge.
     */
    node: ShopifyPaymentsPayout;
  }
  
  /**
   * Payouts represent the movement of money between a merchant's Shopify
   * Payments balance and their bank account.
   * 
   */
  export interface ShopifyPaymentsPayout extends LegacyInteroperability, Node {
    
    /**
     * The bank account for the payout.
     */
    bankAccount?: ShopifyPaymentsBankAccount;
    
    /**
     * The total amount and currency of the payout.
     * @deprecated Use `net` instead.
     */
    gross: MoneyV2;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The exact time when the payout was issued. The payout only contains
     * balance transactions that were available at this time.
     * 
     */
    issuedAt: DateTime;
    
    /**
     * The ID of the corresponding resource in the REST Admin API.
     */
    legacyResourceId: UnsignedInt64;
    
    /**
     * The total amount and currency of the payout.
     */
    net: MoneyV2;
    
    /**
     * The transfer status of the payout.
     */
    status: ShopifyPaymentsPayoutStatus;
    
    /**
     * The summary of the payout.
     */
    summary: ShopifyPaymentsPayoutSummary;
    
    /**
     * The direction of the payout.
     */
    transactionType: ShopifyPaymentsPayoutTransactionType;
  }
  
  /**
   * The transfer status of the payout.
   */
  export const enum ShopifyPaymentsPayoutStatus {
    
    /**
     * The payout has been created and had transactions assigned to it, but
     * it has not yet been submitted to the bank.
     * 
     */
    SCHEDULED = 'SCHEDULED',
    
    /**
     * The payout has been submitted to the bank.
     */
    IN_TRANSIT = 'IN_TRANSIT',
    
    /**
     * The payout has been successfully deposited into the bank.
     */
    PAID = 'PAID',
    
    /**
     * The payout has been declined by the bank.
     */
    FAILED = 'FAILED',
    
    /**
     * The payout has been canceled by Shopify.
     */
    CANCELED = 'CANCELED'
  }
  
  /**
   * Breakdown of the total fees and gross of each of the different types of transactions associated
   * with the payout.
   * 
   */
  export interface ShopifyPaymentsPayoutSummary {
    
    /**
     * Total fees for all adjustments including disputes.
     */
    adjustmentsFee: MoneyV2;
    
    /**
     * Total gross amount for all adjustments including disputes.
     */
    adjustmentsGross: MoneyV2;
    
    /**
     * Total fees for all charges.
     */
    chargesFee: MoneyV2;
    
    /**
     * Total gross amount for all charges.
     */
    chargesGross: MoneyV2;
    
    /**
     * Total fees for all refunds.
     */
    refundsFee: MoneyV2;
    
    /**
     * Total gross amount for all refunds.
     */
    refundsFeeGross: MoneyV2;
    
    /**
     * Total fees for all reserved funds.
     */
    reservedFundsFee: MoneyV2;
    
    /**
     * Total gross amount for all reserved funds.
     */
    reservedFundsGross: MoneyV2;
    
    /**
     * Total fees for all retried payouts.
     */
    retriedPayoutsFee: MoneyV2;
    
    /**
     * Total gross amount for all retried payouts.
     */
    retriedPayoutsGross: MoneyV2;
  }
  
  /**
   * The bank account status.
   */
  export const enum ShopifyPaymentsBankAccountStatus {
    
    /**
     * A bank account that hasn't had any activity and that's not validated.
     */
    NEW = 'NEW',
    
    /**
     * It was determined that the bank account exists.
     */
    VALIDATED = 'VALIDATED',
    
    /**
     * Bank account validation was successful.
     */
    VERIFIED = 'VERIFIED',
    
    /**
     * A payout to the bank account failed.
     */
    ERRORED = 'ERRORED'
  }
  
  /**
   * The charge descriptors for a payments account.
   */
  export interface ShopifyPaymentsChargeStatementDescriptor {
    
    /**
     * The default charge statement descriptor.
     */
    default?: string;
    
    /**
     * The prefix of the statement descriptor.
     */
    prefix: string;
  }
  
  /** Use this to resolve interface type ShopifyPaymentsChargeStatementDescriptor */
  export type PossibleShopifyPaymentsChargeStatementDescriptorTypeNames =
  'ShopifyPaymentsDefaultChargeStatementDescriptor' |
  'ShopifyPaymentsJpChargeStatementDescriptor';
  
  export interface ShopifyPaymentsChargeStatementDescriptorNameMap {
    ShopifyPaymentsChargeStatementDescriptor: ShopifyPaymentsChargeStatementDescriptor;
    ShopifyPaymentsDefaultChargeStatementDescriptor: ShopifyPaymentsDefaultChargeStatementDescriptor;
    ShopifyPaymentsJpChargeStatementDescriptor: ShopifyPaymentsJpChargeStatementDescriptor;
  }
  
  /**
   * An auto-generated type for paginating through multiple ShopifyPaymentsDisputes.
   * 
   */
  export interface ShopifyPaymentsDisputeConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ShopifyPaymentsDisputeEdge>;
    
    /**
     * A list of the nodes contained in ShopifyPaymentsDisputeEdge.
     */
    nodes: Array<ShopifyPaymentsDispute>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.
   * 
   */
  export interface ShopifyPaymentsDisputeEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ShopifyPaymentsDisputeEdge.
     */
    node: ShopifyPaymentsDispute;
  }
  
  /**
   * The fraud settings of a payments account.
   */
  export interface ShopifyPaymentsFraudSettings {
    
    /**
     * Decline a charge if there's an AVS failure.
     */
    declineChargeOnAvsFailure: boolean;
    
    /**
     * Decline a charge if there's an CVC failure.
     */
    declineChargeOnCvcFailure: boolean;
  }
  
  /**
   * The notification settings for the account.
   */
  export interface ShopifyPaymentsNotificationSettings {
    
    /**
     * Receive email notifications when new payouts are sent or payouts fail.
     */
    payouts: boolean;
  }
  
  /**
   * The payment schedule for a payments account.
   */
  export interface ShopifyPaymentsPayoutSchedule {
    
    /**
     * The interval at which payouts are sent to the connected bank account.
     */
    interval: ShopifyPaymentsPayoutInterval;
    
    /**
     * The day of the month funds will be paid out.
     * 
     * The value can be any day of the month from the 1st to the 31st.
     * If the payment interval is set to monthly, this value will be used.
     * Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
     * 
     */
    monthlyAnchor?: number;
    
    /**
     * The day of the week funds will be paid out.
     * 
     * The value can be any weekday from Monday to Friday.
     * If the payment interval is set to weekly, this value will be used.
     * 
     */
    weeklyAnchor?: DayOfTheWeek;
  }
  
  /**
   * The interval at which payouts are sent to the connected bank account.
   */
  export const enum ShopifyPaymentsPayoutInterval {
    
    /**
     * Each business day.
     */
    DAILY = 'DAILY',
    
    /**
     * Each week, on the day of week specified by weeklyAnchor.
     */
    WEEKLY = 'WEEKLY',
    
    /**
     * Each month, on the day of month specified by monthlyAnchor.
     */
    MONTHLY = 'MONTHLY',
    
    /**
     * Payouts will not be automatically made.
     */
    MANUAL = 'MANUAL'
  }
  
  /**
   * Days of the week from Monday to Sunday.
   */
  export const enum DayOfTheWeek {
    
    /**
     * Monday.
     */
    MONDAY = 'MONDAY',
    
    /**
     * Tuesday.
     */
    TUESDAY = 'TUESDAY',
    
    /**
     * Wednesday.
     */
    WEDNESDAY = 'WEDNESDAY',
    
    /**
     * Thursday.
     */
    THURSDAY = 'THURSDAY',
    
    /**
     * Friday.
     */
    FRIDAY = 'FRIDAY',
    
    /**
     * Saturday.
     */
    SATURDAY = 'SATURDAY',
    
    /**
     * Sunday.
     */
    SUNDAY = 'SUNDAY'
  }
  
  /**
   * A document which can be used to verify an individual.
   */
  export interface ShopifyPaymentsVerificationDocument {
    
    /**
     * True if the back side of the document is required.
     */
    backRequired: boolean;
    
    /**
     * True if the front side of the document is required.
     */
    frontRequired: boolean;
    
    /**
     * The type of the document which can be used for verification.
     */
    type: ShopifyPaymentsVerificationDocumentType;
  }
  
  /**
   * The types of possible verification documents.
   */
  export const enum ShopifyPaymentsVerificationDocumentType {
    
    /**
     * The subject's driver's license.
     */
    DRIVERS_LICENSE = 'DRIVERS_LICENSE',
    
    /**
     * A government's identification document of the subject.
     */
    GOVERNMENT_IDENTIFICATION = 'GOVERNMENT_IDENTIFICATION',
    
    /**
     * The subject's passport.
     */
    PASSPORT = 'PASSPORT'
  }
  
  /**
   * Each subject (individual) of an account has a verification object giving
   *  information about the verification state.
   * 
   */
  export interface ShopifyPaymentsVerification extends Node {
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The status of the verification.
     */
    status: ShopifyPaymentsVerificationStatus;
    
    /**
     * The subject/individual who has to be verified.
     */
    subject: ShopifyPaymentsVerificationSubject;
  }
  
  /**
   * The status of a verification.
   */
  export const enum ShopifyPaymentsVerificationStatus {
    
    /**
     * The verification has been verified.
     */
    VERIFIED = 'VERIFIED',
    
    /**
     * The verification has not yet been verified.
     */
    UNVERIFIED = 'UNVERIFIED',
    
    /**
     * The verification request has been submitted but a response has not yet been given.
     */
    PENDING = 'PENDING'
  }
  
  /**
   * The verification subject represents an individual that has to be verified.
   */
  export interface ShopifyPaymentsVerificationSubject {
    
    /**
     * The family name of the individual to verify.
     */
    familyName: string;
    
    /**
     * The given name of the individual to verify.
     */
    givenName: string;
  }
  
  /**
   * A response to a ShopifyQL query.
   */
  export interface ShopifyqlResponse {
    
    /**
     * A list of parse errors, if parsing fails.
     */
    parseErrors?: Array<ParseError>;
    
    /**
     * The result in a tabular format with schema and row data.
     *           To be used as a raw 2-dimensional response of the query.
     *           It's always present even if query has a `VISUALIZE` keyword.
     */
    tableData?: TableData;
  }
  
  /** Use this to resolve interface type ShopifyqlResponse */
  export type PossibleShopifyqlResponseTypeNames =
  'PolarisVizResponse' |
  'TableResponse';
  
  export interface ShopifyqlResponseNameMap {
    ShopifyqlResponse: ShopifyqlResponse;
    PolarisVizResponse: PolarisVizResponse;
    TableResponse: TableResponse;
  }
  
  /**
   * A ShopifyQL parsing error.
   */
  export interface ParseError {
    
    /**
     * An error code for the error.
     */
    code: ParseErrorCode;
    
    /**
     * The description of the parsing error.
     */
    message: string;
    
    /**
     * The start and end range for the error.
     */
    range?: ParseErrorRange;
  }
  
  /**
   * ShopifyQL parsing errors.
   */
  export const enum ParseErrorCode {
    
    /**
     * Syntax not recognized.
     */
    SYNTAX_NOT_RECOGNIZED = 'SYNTAX_NOT_RECOGNIZED',
    
    /**
     * Semantically invalid.
     */
    SEMANTICALLY_INVALID = 'SEMANTICALLY_INVALID',
    
    /**
     * Table not found.
     */
    TABLE_NOT_FOUND = 'TABLE_NOT_FOUND',
    
    /**
     * Column not found.
     */
    COLUMN_NOT_FOUND = 'COLUMN_NOT_FOUND',
    
    /**
     * Value isn't parsable.
     */
    VALUE_NOT_PARSABLE = 'VALUE_NOT_PARSABLE',
    
    /**
     * Date isn't parsable.
     */
    DATE_NOT_PARSABLE = 'DATE_NOT_PARSABLE',
    
    /**
     * Datetime value isn't parsable.
     */
    DATE_TIME_NOT_PARSABLE = 'DATE_TIME_NOT_PARSABLE',
    
    /**
     * Date interval not found.
     */
    DATE_INTERVAL_NOT_FOUND = 'DATE_INTERVAL_NOT_FOUND',
    
    /**
     * Named date not found.
     */
    NAMED_DATE_NOT_FOUND = 'NAMED_DATE_NOT_FOUND',
    
    /**
     * Sort field not found.
     */
    SORT_FIELD_NOT_FOUND = 'SORT_FIELD_NOT_FOUND',
    
    /**
     * Limit is invalid.
     */
    LIMIT_INVALID = 'LIMIT_INVALID',
    
    /**
     * The type of visualization is invalid. Acceptable types: bar, line.
     */
    VISUALIZE_CHART_TYPE_NOT_FOUND = 'VISUALIZE_CHART_TYPE_NOT_FOUND',
    
    /**
     * Function does not have any valid modifiers.
     */
    FUNCTION_MODIFIER_NOT_FOUND = 'FUNCTION_MODIFIER_NOT_FOUND',
    
    /**
     * Function is missing required argument(s).
     */
    FUNCTION_ARGUMENTS_NOT_FOUND = 'FUNCTION_ARGUMENTS_NOT_FOUND',
    
    /**
     * Function has too many arguments.
     */
    FUNCTION_EXCESS_ARGUMENTS = 'FUNCTION_EXCESS_ARGUMENTS',
    
    /**
     * Keyword `FROM` not found.
     */
    FROM_NOT_FOUND = 'FROM_NOT_FOUND',
    
    /**
     * Query is missing `SHOW` or `VISUALIZE`.
     */
    PRESENTMENT_NOT_FOUND = 'PRESENTMENT_NOT_FOUND',
    
    /**
     * Use the correct syntax for either `SHOW` or `VISUALIZE`.
     */
    EXCESS_PRESENTMENTS = 'EXCESS_PRESENTMENTS',
    
    /**
     * Function has incompatible types.
     */
    FUNCTION_INCOMPATIBLE_TYPES = 'FUNCTION_INCOMPATIBLE_TYPES',
    
    /**
     * Visualize has too many projections.
     */
    VISUALIZE_EXCESS_PROJECTIONS = 'VISUALIZE_EXCESS_PROJECTIONS',
    
    /**
     * Unknown error.
     */
    UNKNOWN = 'UNKNOWN',
    
    /**
     * Invalid arguments for operator.
     */
    OPERATOR_INCOMPATIBLE_TYPES = 'OPERATOR_INCOMPATIBLE_TYPES',
    
    /**
     * Function `VISUALIZE` contains a data type which cannot be plotted.
     */
    VISUALIZE_INCOMPATIBLE_TYPES = 'VISUALIZE_INCOMPATIBLE_TYPES',
    
    /**
     * Function `VISUALIZE` requires `GROUP BY`.
     */
    VISUALIZE_GROUP_BY_NOT_FOUND = 'VISUALIZE_GROUP_BY_NOT_FOUND',
    
    /**
     * Function `VISUALIZE` can only use `GROUP BY` or `GROUP BY` with the `ALL` modifier, not both.
     */
    VISUALIZE_GROUP_BY_MIXED_BACKFILL = 'VISUALIZE_GROUP_BY_MIXED_BACKFILL',
    
    /**
     * Mixing an aggregate expression and a non-aggregate expression is not allowed.
     */
    MIXED_AGGREGATE_AND_NON_AGGREGATE = 'MIXED_AGGREGATE_AND_NON_AGGREGATE',
    
    /**
     * An aggregate function received a nested aggregate argument, which is not allowed.
     */
    FUNCTION_NESTED_AGGREGATE = 'FUNCTION_NESTED_AGGREGATE',
    
    /**
     * Time function is incompatible in a `GROUP BY` clause with the `ALL` modifier.
     */
    TIME_FUNCTION_NOT_FOUND = 'TIME_FUNCTION_NOT_FOUND',
    
    /**
     * Mixing of `IN` list arguments of different data types is not allowed.
     */
    LIST_MIXED_ARGUMENT_TYPES = 'LIST_MIXED_ARGUMENT_TYPES',
    
    /**
     * Mixing of `SINCE` and/or `UNTIL` with `DURING` is not allowed.
     */
    EXCESS_PERIODS = 'EXCESS_PERIODS',
    
    /**
     * Invalid entry.
     */
    SYNTAX_INVALID_TOKEN = 'SYNTAX_INVALID_TOKEN',
    
    /**
     * Identifier after `SHOW` is not valid in its current position.
     */
    SYNTAX_NO_VIABLE_ALTERNATIVE = 'SYNTAX_NO_VIABLE_ALTERNATIVE',
    
    /**
     * Invalid `COMPARE TO` period specified. Make sure it's not the same as the `DURING` clause.
     */
    COMPARE_TO_INVALID_PERIOD = 'COMPARE_TO_INVALID_PERIOD',
    
    /**
     * The time period for `COMPARE TO` must be the same length as `DURING`.
     */
    COMPARE_TO_INCOMPATIBLE_PERIOD = 'COMPARE_TO_INCOMPATIBLE_PERIOD',
    
    /**
     * When using `COMPARE TO` with a time-based `GROUP BY`, `ALL` must be used.
     */
    UNBACKFILLED_TIME_GROUP_BY_COMPARISON = 'UNBACKFILLED_TIME_GROUP_BY_COMPARISON',
    
    /**
     * Comparison queries must only contain aggregated fields.
     */
    COMPARISON_WITH_NON_AGGREGATE_FIELDS = 'COMPARISON_WITH_NON_AGGREGATE_FIELDS',
    
    /**
     * Column must include `GROUP BY` arg1.
     */
    REQUIRED_GROUP_BY_NOT_FOUND = 'REQUIRED_GROUP_BY_NOT_FOUND',
    
    /**
     * Identifier or function out of place.
     */
    SYNTAX_INPUT_MISMATCH = 'SYNTAX_INPUT_MISMATCH',
    
    /**
     * Identifier or function out of place.
     */
    SYNTAX_UNWANTED_TOKEN = 'SYNTAX_UNWANTED_TOKEN',
    
    /**
     * Query is incomplete.
     */
    SYNTAX_MISSING_TOKEN = 'SYNTAX_MISSING_TOKEN',
    
    /**
     * Function not found.
     */
    FUNCTION_NOT_FOUND = 'FUNCTION_NOT_FOUND',
    
    /**
     * The `SINCE` date must be before or the same as the `UNTIL` date.
     */
    INVALID_DATE_RANGE = 'INVALID_DATE_RANGE',
    
    /**
     * The `GROUP BY` function is limited to one parameter with the `ALL` modifier.
     */
    EXCESS_BACKFILL_DIMENSIONS = 'EXCESS_BACKFILL_DIMENSIONS',
    
    /**
     * When using `GROUP BY` with the `ALL` modifier, `SINCE` or `DURING` must be defined.
     */
    BACKFILL_DATE_RANGE_NOT_FOUND = 'BACKFILL_DATE_RANGE_NOT_FOUND',
    
    /**
     * Cannot use a `COMPARE TO` clause without `DURING` or `SINCE`.
     */
    COMPARE_TO_MISSING_PERIOD = 'COMPARE_TO_MISSING_PERIOD',
    
    /**
     * The `GROUP BY` function has too many parameters.
     * When using `VISUALIZE` with `COMPARE TO` use only one `GROUP BY` parameter.
     * 
     */
    EXCESS_DIMENSIONS = 'EXCESS_DIMENSIONS',
    
    /**
     * A semantic predicate failed during validation.
     */
    SYNTAX_FAILED_PREDICATE = 'SYNTAX_FAILED_PREDICATE'
  }
  
  /**
   * A range of ShopifyQL parsing errors.
   */
  export interface ParseErrorRange {
    
    /**
     * The ending position of the error.
     */
    end: ErrorPosition;
    
    /**
     * The starting position of the error.
     */
    start: ErrorPosition;
  }
  
  /**
   * Error position information in a ShopifyQL parsing error.
   */
  export interface ErrorPosition {
    
    /**
     * The character position of the error in the line.
     */
    character: number;
    
    /**
     * The line number of the error.
     */
    line: number;
  }
  
  /**
   * The result in a tabular format with schema information and formatted and unformatted row data.
   */
  export interface TableData {
    
    /**
     * The data table columns.
     */
    columns: Array<TableDataColumn>;
    
    /**
     * The formatted data values.
     */
    rowData: Array<Array<string>>;
    
    /**
     * The unformatted data values.
     */
    unformattedData: JSON;
  }
  
  /**
   * A nested array representation of the data. An index in an array represents a row number.
   */
  export interface TableDataColumn {
    
    /**
     * For comparison columns, indicates the column to compare to.
     */
    comparedTo: string;
    
    /**
     * The data type of the column value.
     */
    dataType: string;
    
    /**
     * The display name of the column in the data model.
     */
    displayName: string;
    
    /**
     * The name of the column in the data model.
     */
    name: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple StandardMetafieldDefinitionTemplates.
   * 
   */
  export interface StandardMetafieldDefinitionTemplateConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<StandardMetafieldDefinitionTemplateEdge>;
    
    /**
     * A list of the nodes contained in StandardMetafieldDefinitionTemplateEdge.
     */
    nodes: Array<StandardMetafieldDefinitionTemplate>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one StandardMetafieldDefinitionTemplate and a cursor during pagination.
   * 
   */
  export interface StandardMetafieldDefinitionTemplateEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of StandardMetafieldDefinitionTemplateEdge.
     */
    node: StandardMetafieldDefinitionTemplate;
  }
  
  /**
   * The set of valid sort keys for the SubscriptionBillingAttempts query.
   */
  export const enum SubscriptionBillingAttemptsSortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * The input fields for specifying the subscription contract and selecting the associated billing cycle.
   * 
   */
  export interface SubscriptionBillingCycleInput {
    
    /**
     * The ID of the subscription contract associated with the billing cycle.
     */
    contractId: string;
    
    /**
     * Selects the billing cycle by date or index.
     */
    selector: SubscriptionBillingCycleSelector;
  }
  
  /**
   * The input fields to select SubscriptionBillingCycle by either date or index.
   */
  export interface SubscriptionBillingCycleSelector {
    
    /**
     * Returns a billing cycle by index.
     */
    index?: number;
    
    /**
     * Returns a billing cycle by date.
     */
    date?: DateTime;
  }
  
  /**
   * A subscription billing cycle.
   */
  export interface SubscriptionBillingCycle {
    
    /**
     * The date on which the billing attempt is expected to be made.
     */
    billingAttemptExpectedDate: DateTime;
    
    /**
     * The list of billing attempts associated with the billing cycle.
     */
    billingAttempts: SubscriptionBillingAttemptConnection;
    
    /**
     * The end date of the billing cycle.
     */
    cycleEndAt: DateTime;
    
    /**
     * The index of the billing cycle.
     */
    cycleIndex: number;
    
    /**
     * The start date of the billing cycle.
     */
    cycleStartAt: DateTime;
    
    /**
     * Whether this billing cycle was edited.
     */
    edited: boolean;
    
    /**
     * The active edited contract for the billing cycle.
     */
    editedContract?: SubscriptionBillingCycleEditedContract;
    
    /**
     * Whether this billing cycle was skipped.
     */
    skipped: boolean;
    
    /**
     * The subscription contract that the billing cycle belongs to.
     */
    sourceContract: SubscriptionContract;
    
    /**
     * The status of the billing cycle.
     */
    status: SubscriptionBillingCycleBillingCycleStatus;
  }
  
  /**
   * Represents a subscription contract with billing cycles.
   */
  export interface SubscriptionBillingCycleEditedContract extends SubscriptionContractBase {
    
    /**
     * The subscription app that the subscription contract is registered to.
     */
    app?: App;
    
    /**
     * The URL of the subscription contract page on the subscription app.
     */
    appAdminUrl?: URL;
    
    /**
     * The billing cycles that the edited contract belongs to.
     */
    billingCycles: SubscriptionBillingCycleConnection;
    
    /**
     * The date and time when the subscription contract was created.
     */
    createdAt: DateTime;
    
    /**
     * The currency that's used for the subscription contract.
     */
    currencyCode: CurrencyCode;
    
    /**
     * A list of the custom attributes to be added to the generated orders.
     */
    customAttributes: Array<Attribute>;
    
    /**
     * The customer to whom the subscription contract belongs.
     */
    customer?: Customer;
    
    /**
     * The customer payment method that's used for the subscription contract.
     */
    customerPaymentMethod?: CustomerPaymentMethod;
    
    /**
     * The delivery method for each billing of the subscription contract.
     */
    deliveryMethod?: SubscriptionDeliveryMethod;
    
    /**
     * The delivery price for each billing of the subscription contract.
     */
    deliveryPrice: MoneyV2;
    
    /**
     * The list of subscription discounts associated with the subscription contract.
     */
    discounts: SubscriptionManualDiscountConnection;
    
    /**
     * The number of lines associated with the subscription contract.
     */
    lineCount: number;
    
    /**
     * The list of subscription lines associated with the subscription contract.
     */
    lines: SubscriptionLineConnection;
    
    /**
     * The note field that will be applied to the generated orders.
     */
    note?: string;
    
    /**
     * A list of the subscription contract's orders.
     */
    orders: OrderConnection;
    
    /**
     * The date and time when the subscription contract was updated.
     */
    updatedAt: DateTime;
  }
  
  /**
   * The set of valid sort keys for the SubscriptionBillingCycles query.
   */
  export const enum SubscriptionBillingCyclesSortKeys {
    
    /**
     * Sort by the `cycle_index` value.
     */
    CYCLE_INDEX = 'CYCLE_INDEX',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple SubscriptionBillingCycles.
   * 
   */
  export interface SubscriptionBillingCycleConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<SubscriptionBillingCycleEdge>;
    
    /**
     * A list of the nodes contained in SubscriptionBillingCycleEdge.
     */
    nodes: Array<SubscriptionBillingCycle>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one SubscriptionBillingCycle and a cursor during pagination.
   * 
   */
  export interface SubscriptionBillingCycleEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of SubscriptionBillingCycleEdge.
     */
    node: SubscriptionBillingCycle;
  }
  
  /**
   * The possible status values of a subscription billing cycle.
   */
  export const enum SubscriptionBillingCycleBillingCycleStatus {
    
    /**
     * The billing cycle is billed.
     */
    BILLED = 'BILLED',
    
    /**
     * The billing cycle hasn't been billed.
     */
    UNBILLED = 'UNBILLED'
  }
  
  /**
   * The input fields to select a subset of subscription billing cycles within a date range.
   */
  export interface SubscriptionBillingCyclesDateRangeSelector {
    
    /**
     * The start date and time for the range.
     */
    startDate: DateTime;
    
    /**
     * The end date and time for the range.
     */
    endDate: DateTime;
  }
  
  /**
   * The input fields to select a subset of subscription billing cycles within an index range.
   */
  export interface SubscriptionBillingCyclesIndexRangeSelector {
    
    /**
     * The start index for the range.
     */
    startIndex: number;
    
    /**
     * The end index for the range.
     */
    endIndex: number;
  }
  
  /**
   * Represents a Subscription Draft.
   */
  export interface SubscriptionDraft extends Node {
    
    /**
     * The billing cycle that the subscription contract will be associated with.
     */
    billingCycle?: SubscriptionBillingCycle;
    
    /**
     * The billing policy for the subscription contract.
     */
    billingPolicy: SubscriptionBillingPolicy;
    
    /**
     * The billing cycles of the contracts that will be concatenated to the subscription contract.
     */
    concatenatedBillingCycles: SubscriptionBillingCycleConnection;
    
    /**
     * The currency used for the subscription contract.
     */
    currencyCode: CurrencyCode;
    
    /**
     * A list of the custom attributes to be added to the generated orders.
     */
    customAttributes: Array<Attribute>;
    
    /**
     * The customer to whom the subscription contract belongs.
     */
    customer: Customer;
    
    /**
     * The customer payment method used for the subscription contract.
     */
    customerPaymentMethod?: CustomerPaymentMethod;
    
    /**
     * The delivery method for each billing of the subscription contract.
     */
    deliveryMethod?: SubscriptionDeliveryMethod;
    
    /**
     * The available delivery options for a given delivery address. Returns `null` for pending requests.
     * 
     */
    deliveryOptions?: SubscriptionDeliveryOptionResult;
    
    /**
     * The delivery policy for the subscription contract.
     */
    deliveryPolicy: SubscriptionDeliveryPolicy;
    
    /**
     * The delivery price for each billing the subscription contract.
     */
    deliveryPrice?: MoneyV2;
    
    /**
     * The list of subscription discounts which will be associated with the subscription contract.
     */
    discounts: SubscriptionDiscountConnection;
    
    /**
     * The list of subscription discounts to be added to the subscription contract.
     */
    discountsAdded: SubscriptionDiscountConnection;
    
    /**
     * The list of subscription discounts to be removed from the subscription contract.
     */
    discountsRemoved: SubscriptionDiscountConnection;
    
    /**
     * The list of subscription discounts to be updated on the subscription contract.
     */
    discountsUpdated: SubscriptionDiscountConnection;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The list of subscription lines which will be associated with the subscription contract.
     */
    lines: SubscriptionLineConnection;
    
    /**
     * The list of subscription lines to be added to the subscription contract.
     */
    linesAdded: SubscriptionLineConnection;
    
    /**
     * The list of subscription lines to be removed from the subscription contract.
     */
    linesRemoved: SubscriptionLineConnection;
    
    /**
     * The next billing date for the subscription contract.
     */
    nextBillingDate?: DateTime;
    
    /**
     * The note field that will be applied to the generated orders.
     */
    note?: string;
    
    /**
     * The original subscription contract.
     */
    originalContract?: SubscriptionContract;
    
    /**
     * Available Shipping Options for a given delivery address. Returns NULL for pending requests.
     * 
     * @deprecated Use `deliveryOptions` instead.
     */
    shippingOptions?: SubscriptionShippingOptionResult;
    
    /**
     * The current status of the subscription contract.
     */
    status?: SubscriptionContractSubscriptionStatus;
  }
  
  /**
   * The input fields to create or update a mailing address.
   */
  export interface MailingAddressInput {
    
    /**
     * The first line of the address. Typically the street address or PO Box number.
     * 
     */
    address1?: string;
    
    /**
     * The second line of the address. Typically the number of the apartment, suite, or unit.
     * 
     */
    address2?: string;
    
    /**
     * The name of the city, district, village, or town.
     * 
     */
    city?: string;
    
    /**
     * The name of the customer's company or organization.
     * 
     */
    company?: string;
    
    /**
     * The two-letter code for the country of the address.
     */
    countryCode?: CountryCode;
    
    /**
     * The first name of the customer.
     */
    firstName?: string;
    
    /**
     * The last name of the customer.
     */
    lastName?: string;
    
    /**
     * A unique phone number for the customer.
     * 
     * Formatted using E.164 standard. For example, _+16135551111_.
     * 
     */
    phone?: string;
    
    /**
     * The code for the region of the address, such as the province, state, or district.
     * For example QC for Quebec, Canada.
     * 
     */
    provinceCode?: string;
    
    /**
     * The zip or postal code of the address.
     */
    zip?: string;
  }
  
  /**
   * The result of the query to fetch delivery options for the subscription contract.
   */
  export type SubscriptionDeliveryOptionResult =
  SubscriptionDeliveryOptionResultFailure |
  SubscriptionDeliveryOptionResultSuccess;
  
  /** Use this to resolve union type SubscriptionDeliveryOptionResult */
  export type PossibleSubscriptionDeliveryOptionResultTypeNames =
  'SubscriptionDeliveryOptionResultFailure' |
  'SubscriptionDeliveryOptionResultSuccess';
  
  export interface SubscriptionDeliveryOptionResultNameMap {
    SubscriptionDeliveryOptionResult: SubscriptionDeliveryOptionResult;
    SubscriptionDeliveryOptionResultFailure: SubscriptionDeliveryOptionResultFailure;
    SubscriptionDeliveryOptionResultSuccess: SubscriptionDeliveryOptionResultSuccess;
  }
  
  /**
   * A failure to find the available delivery options for a subscription contract.
   */
  export interface SubscriptionDeliveryOptionResultFailure {
    
    /**
     * The reason for the failure.
     */
    message?: string;
  }
  
  /**
   * The delivery option for a subscription contract.
   */
  export interface SubscriptionDeliveryOptionResultSuccess {
    
    /**
     * The available delivery options.
     */
    deliveryOptions: Array<SubscriptionDeliveryOption>;
  }
  
  /**
   * The delivery option for a subscription contract.
   */
  export type SubscriptionDeliveryOption =
  SubscriptionLocalDeliveryOption |
  SubscriptionPickupOption |
  SubscriptionShippingOption;
  
  /** Use this to resolve union type SubscriptionDeliveryOption */
  export type PossibleSubscriptionDeliveryOptionTypeNames =
  'SubscriptionLocalDeliveryOption' |
  'SubscriptionPickupOption' |
  'SubscriptionShippingOption';
  
  export interface SubscriptionDeliveryOptionNameMap {
    SubscriptionDeliveryOption: SubscriptionDeliveryOption;
    SubscriptionLocalDeliveryOption: SubscriptionLocalDeliveryOption;
    SubscriptionPickupOption: SubscriptionPickupOption;
    SubscriptionShippingOption: SubscriptionShippingOption;
  }
  
  /**
   * A local delivery option for a subscription contract.
   */
  export interface SubscriptionLocalDeliveryOption {
    
    /**
     * The code of the local delivery option.
     */
    code: string;
    
    /**
     * The description of the local delivery option.
     */
    description?: string;
    
    /**
     * Whether a phone number is required for the local delivery option.
     */
    phoneRequired: boolean;
    
    /**
     * The presentment title of the local delivery option.
     */
    presentmentTitle?: string;
    
    /**
     * The price of the local delivery option.
     */
    price?: MoneyV2;
    
    /**
     * The title of the local delivery option.
     */
    title: string;
  }
  
  /**
   * A pickup option to deliver a subscription contract.
   */
  export interface SubscriptionPickupOption {
    
    /**
     * The code of the pickup option.
     */
    code: string;
    
    /**
     * The description of the pickup option.
     */
    description?: string;
    
    /**
     * The pickup location.
     */
    location: Location;
    
    /**
     * Whether a phone number is required for the pickup option.
     */
    phoneRequired: boolean;
    
    /**
     * The estimated amount of time it takes for the pickup to be ready. For example, "Usually ready in 24 hours".).
     */
    pickupTime: string;
    
    /**
     * The presentment title of the pickup option.
     */
    presentmentTitle?: string;
    
    /**
     * The price of the pickup option.
     */
    price?: MoneyV2;
    
    /**
     * The title of the pickup option.
     */
    title: string;
  }
  
  /**
   * A shipping option to deliver a subscription contract.
   */
  export interface SubscriptionShippingOption {
    
    /**
     * The carrier service that's providing this shipping option.
     * This field isn't currently supported and returns null.
     * 
     * @deprecated This field has never been implemented.
     */
    carrierService?: DeliveryCarrierService;
    
    /**
     * The code of the shipping option.
     */
    code: string;
    
    /**
     * The description of the shipping option.
     */
    description?: string;
    
    /**
     * If a phone number is required for the shipping option.
     */
    phoneRequired?: boolean;
    
    /**
     * The presentment title of the shipping option.
     */
    presentmentTitle?: string;
    
    /**
     * The price of the shipping option.
     */
    price?: MoneyV2;
    
    /**
     * The title of the shipping option.
     */
    title: string;
  }
  
  /**
   * An auto-generated type for paginating through multiple SubscriptionDiscounts.
   * 
   */
  export interface SubscriptionDiscountConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<SubscriptionDiscountEdge>;
    
    /**
     * A list of the nodes contained in SubscriptionDiscountEdge.
     */
    nodes: Array<SubscriptionDiscount>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.
   * 
   */
  export interface SubscriptionDiscountEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of SubscriptionDiscountEdge.
     */
    node: SubscriptionDiscount;
  }
  
  /**
   * The result of the query to fetch shipping options for the subscription contract.
   */
  export type SubscriptionShippingOptionResult =
  SubscriptionShippingOptionResultFailure |
  SubscriptionShippingOptionResultSuccess;
  
  /** Use this to resolve union type SubscriptionShippingOptionResult */
  export type PossibleSubscriptionShippingOptionResultTypeNames =
  'SubscriptionShippingOptionResultFailure' |
  'SubscriptionShippingOptionResultSuccess';
  
  export interface SubscriptionShippingOptionResultNameMap {
    SubscriptionShippingOptionResult: SubscriptionShippingOptionResult;
    SubscriptionShippingOptionResultFailure: SubscriptionShippingOptionResultFailure;
    SubscriptionShippingOptionResultSuccess: SubscriptionShippingOptionResultSuccess;
  }
  
  /**
   * Failure determining available shipping options for delivery of a subscription contract.
   */
  export interface SubscriptionShippingOptionResultFailure {
    
    /**
     * Failure reason.
     */
    message?: string;
  }
  
  /**
   * A shipping option for delivery of a subscription contract.
   */
  export interface SubscriptionShippingOptionResultSuccess {
    
    /**
     * Available shipping options.
     */
    shippingOptions: Array<SubscriptionShippingOption>;
  }
  
  /**
   * An auto-generated type for paginating through multiple TenderTransactions.
   * 
   */
  export interface TenderTransactionConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<TenderTransactionEdge>;
    
    /**
     * A list of the nodes contained in TenderTransactionEdge.
     */
    nodes: Array<TenderTransaction>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one TenderTransaction and a cursor during pagination.
   * 
   */
  export interface TenderTransactionEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of TenderTransactionEdge.
     */
    node: TenderTransaction;
  }
  
  /**
   * A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always
   * represents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions
   * for reconciling a shop's cash flow. A TenderTransaction is immutable once created.
   * 
   */
  export interface TenderTransaction extends Node {
    
    /**
     * The amount and currency of the tender transaction.
     */
    amount: MoneyV2;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Information about the payment method used for the transaction.
     */
    paymentMethod?: string;
    
    /**
     * Date and time when the transaction was processed.
     */
    processedAt?: DateTime;
    
    /**
     * The remote gateway reference associated with the tender transaction.
     */
    remoteReference?: string;
    
    /**
     * Whether the transaction is a test transaction.
     */
    test: boolean;
    
    /**
     * Information about the payment instrument used for the transaction.
     */
    transactionDetails?: TenderTransactionDetails;
    
    /**
     * The staff member who performed the transaction.
     */
    user?: StaffMember;
  }
  
  /**
   * Information about the payment instrument used for this transaction.
   */
  export type TenderTransactionDetails = TenderTransactionCreditCardDetails;
  
  /** Use this to resolve union type TenderTransactionDetails */
  export type PossibleTenderTransactionDetailsTypeNames =
  'TenderTransactionCreditCardDetails';
  
  export interface TenderTransactionDetailsNameMap {
    TenderTransactionDetails: TenderTransactionDetails;
    TenderTransactionCreditCardDetails: TenderTransactionCreditCardDetails;
  }
  
  /**
   * Information about the credit card used for this transaction.
   */
  export interface TenderTransactionCreditCardDetails {
    
    /**
     * The name of the company that issued the customer's credit card. Example: `Visa`.
     */
    creditCardCompany?: string;
    
    /**
     * The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234`
     */
    creditCardNumber?: string;
  }
  
  /**
   * A resource that has translatable fields.
   */
  export interface TranslatableResource {
    
    /**
     * GID of the resource.
     */
    resourceId: string;
    
    /**
     * Translatable content.
     */
    translatableContent: Array<TranslatableContent>;
    
    /**
     * Translatable content translations.
     */
    translations: Array<Translation>;
  }
  
  /**
   * Translatable content of a resource's field.
   */
  export interface TranslatableContent {
    
    /**
     * Hash digest representation of the content value.
     */
    digest?: string;
    
    /**
     * The resource field that's being translated.
     */
    key: string;
    
    /**
     * Locale of the content.
     */
    locale: string;
    
    /**
     * Type of the translatable content.
     */
    type: LocalizableContentType;
    
    /**
     * Content value.
     */
    value?: string;
  }
  
  /**
   * Specifies the type of the underlying localizable content. This can be used to conditionally render different UI elements such as input fields.
   */
  export const enum LocalizableContentType {
    
    /**
     * A JSON string.
     */
    JSON_STRING = 'JSON_STRING',
    
    /**
     * A JSON.
     */
    JSON = 'JSON',
    
    /**
     * A list of multi-line texts.
     */
    LIST_MULTI_LINE_TEXT_FIELD = 'LIST_MULTI_LINE_TEXT_FIELD',
    
    /**
     * A list of single-line texts.
     */
    LIST_SINGLE_LINE_TEXT_FIELD = 'LIST_SINGLE_LINE_TEXT_FIELD',
    
    /**
     * A list of URLs.
     */
    LIST_URL = 'LIST_URL',
    
    /**
     * A multi-line text.
     */
    MULTI_LINE_TEXT_FIELD = 'MULTI_LINE_TEXT_FIELD',
    
    /**
     * A rich text.
     */
    RICH_TEXT_FIELD = 'RICH_TEXT_FIELD',
    
    /**
     * A single-line text.
     */
    SINGLE_LINE_TEXT_FIELD = 'SINGLE_LINE_TEXT_FIELD',
    
    /**
     * A string.
     */
    STRING = 'STRING',
    
    /**
     * A URL.
     */
    URL = 'URL',
    
    /**
     * A file reference.
     */
    FILE_REFERENCE = 'FILE_REFERENCE',
    
    /**
     * A list of file references.
     */
    LIST_FILE_REFERENCE = 'LIST_FILE_REFERENCE',
    
    /**
     * An HTML.
     */
    HTML = 'HTML',
    
    /**
     * A URI.
     */
    URI = 'URI',
    
    /**
     * An inline rich text.
     */
    INLINE_RICH_TEXT = 'INLINE_RICH_TEXT'
  }
  
  /**
   * Specifies the type of resources that are translatable.
   */
  export const enum TranslatableResourceType {
    
    /**
     * A product collection. Translatable fields: `title`, `body_html`, `handle`, `meta_title`, `meta_description`.
     */
    COLLECTION = 'COLLECTION',
    
    /**
     * The delivery method definition. For example, "Standard", or "Expedited". Translatable fields: `name`.
     */
    DELIVERY_METHOD_DEFINITION = 'DELIVERY_METHOD_DEFINITION',
    
    /**
     * An email template. Translatable fields: `title`, `body_html`.
     */
    EMAIL_TEMPLATE = 'EMAIL_TEMPLATE',
    
    /**
     * A filter. Translatable fields: `label`.
     */
    FILTER = 'FILTER',
    
    /**
     * A link to direct users. Translatable fields: `title`.
     */
    LINK = 'LINK',
    
    /**
     * A Metafield. Translatable fields: `value`.
     */
    METAFIELD = 'METAFIELD',
    
    /**
     * A Metaobject. Translatable fields are determined by the Metaobject type.
     */
    METAOBJECT = 'METAOBJECT',
    
    /**
     * An online store article. Translatable fields: `title`, `body_html`, `summary_html`, `handle`, `meta_title`, `meta_description`.
     */
    ONLINE_STORE_ARTICLE = 'ONLINE_STORE_ARTICLE',
    
    /**
     * An online store blog. Translatable fields: `title`, `handle`, `meta_title`, `meta_description`.
     */
    ONLINE_STORE_BLOG = 'ONLINE_STORE_BLOG',
    
    /**
     * A category of links. Translatable fields: `title`.
     */
    ONLINE_STORE_MENU = 'ONLINE_STORE_MENU',
    
    /**
     * An online store page. Translatable fields: `title`, `body_html`, `handle`, `meta_title`, `meta_description`.
     */
    ONLINE_STORE_PAGE = 'ONLINE_STORE_PAGE',
    
    /**
     * An online store theme. Translatable fields: `dynamic keys based on theme data`.
     */
    ONLINE_STORE_THEME = 'ONLINE_STORE_THEME',
    
    /**
     * A packing slip template. Translatable fields: `body`.
     */
    PACKING_SLIP_TEMPLATE = 'PACKING_SLIP_TEMPLATE',
    
    /**
     * A payment gateway. Translatable fields: `name`.
     */
    PAYMENT_GATEWAY = 'PAYMENT_GATEWAY',
    
    /**
     * An online store product. Translatable fields: `title`, `body_html`, `handle`, `product_type`, `meta_title`, `meta_description`.
     */
    PRODUCT = 'PRODUCT',
    
    /**
     * An online store custom product property name. For example, "Size", "Color", or "Material".
     *         Translatable fields: `name`.
     */
    PRODUCT_OPTION = 'PRODUCT_OPTION',
    
    /**
     * An online store product variant. Translatable fields: `option1`, `option2`, `option3`.
     * @deprecated `PRODUCT_VARIANT` is deprecated, it is no longer a translatable resource type. Use `PRODUCT_OPTION_VALUE` instead.
     */
    PRODUCT_VARIANT = 'PRODUCT_VARIANT',
    
    /**
     * A selling plan. Translatable fields:`name`, `option1`, `option2`, `option3`, `description`.
     */
    SELLING_PLAN = 'SELLING_PLAN',
    
    /**
     * A selling plan group. Translatable fields: `name`, `option1`, `option2`, `option3`.
     */
    SELLING_PLAN_GROUP = 'SELLING_PLAN_GROUP',
    
    /**
     * A shop. Translatable fields: `meta_title`, `meta_description`.
     */
    SHOP = 'SHOP',
    
    /**
     * A shop policy. Translatable fields: `body`.
     */
    SHOP_POLICY = 'SHOP_POLICY'
  }
  
  /**
   * An auto-generated type for paginating through multiple TranslatableResources.
   * 
   */
  export interface TranslatableResourceConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<TranslatableResourceEdge>;
    
    /**
     * A list of the nodes contained in TranslatableResourceEdge.
     */
    nodes: Array<TranslatableResource>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one TranslatableResource and a cursor during pagination.
   * 
   */
  export interface TranslatableResourceEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of TranslatableResourceEdge.
     */
    node: TranslatableResource;
  }
  
  /**
   * The URL redirect for the online store.
   */
  export interface UrlRedirect extends Node {
    
    /**
     * The ID of the URL redirect.
     */
    id: string;
    
    /**
     * The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
     */
    path: string;
    
    /**
     * The target location where the user will be redirected to.
     */
    target: string;
  }
  
  /**
   * A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object
   * into the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.
   * 
   * For more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.
   * 
   */
  export interface UrlRedirectImport extends Node {
    
    /**
     * The number of rows in the file.
     */
    count?: number;
    
    /**
     * The number of redirects created from the import.
     */
    createdCount?: number;
    
    /**
     * The number of redirects that failed to be imported.
     */
    failedCount?: number;
    
    /**
     * Whether the import is finished.
     */
    finished: boolean;
    
    /**
     * The date and time when the import finished.
     */
    finishedAt?: DateTime;
    
    /**
     * The ID of the `UrlRedirectImport` object.
     */
    id: string;
    
    /**
     * A list of up to three previews of the URL redirects to be imported.
     */
    previewRedirects: Array<UrlRedirectImportPreview>;
    
    /**
     * The number of redirects updated during the import.
     */
    updatedCount?: number;
  }
  
  /**
   * A preview of a URL redirect import row.
   */
  export interface UrlRedirectImportPreview {
    
    /**
     * The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
     */
    path: string;
    
    /**
     * The target location where the user will be redirected to.
     */
    target: string;
  }
  
  /**
   * The set of valid sort keys for the UrlRedirect query.
   */
  export const enum UrlRedirectSortKeys {
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE',
    
    /**
     * Sort by the `path` value.
     */
    PATH = 'PATH',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID'
  }
  
  /**
   * An auto-generated type for paginating through multiple UrlRedirects.
   * 
   */
  export interface UrlRedirectConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<UrlRedirectEdge>;
    
    /**
     * A list of the nodes contained in UrlRedirectEdge.
     */
    nodes: Array<UrlRedirect>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one UrlRedirect and a cursor during pagination.
   * 
   */
  export interface UrlRedirectEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of UrlRedirectEdge.
     */
    node: UrlRedirect;
  }
  
  /**
   * A checkout server side validation installed on the shop.
   */
  export interface Validation extends HasMetafieldDefinitions, HasMetafields, Node {
    
    /**
     * Whether the validation should block on failures other than expected violations.
     */
    blockOnFailure: boolean;
    
    /**
     * Whether the validation is enabled on the merchant checkout.
     */
    enabled: boolean;
    
    /**
     * The error history on the most recent version of the validation function.
     */
    errorHistory?: FunctionsErrorHistory;
    
    /**
     * Global ID for the validation.
     */
    id: string;
    
    /**
     * Returns a metafield by namespace and key that belongs to the resource.
     */
    metafield?: Metafield;
    
    /**
     * List of metafield definitions.
     */
    metafieldDefinitions: MetafieldDefinitionConnection;
    
    /**
     * List of metafields that belong to the resource.
     */
    metafields: MetafieldConnection;
    
    /**
     * Returns a private metafield by namespace and key that belongs to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * List of private metafields that belong to the resource.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafields: PrivateMetafieldConnection;
    
    /**
     * The Shopify Function implementing the validation.
     */
    shopifyFunction: ShopifyFunction;
    
    /**
     * The merchant-facing validation name.
     */
    title: string;
  }
  
  /**
   * The set of valid sort keys for the Validation query.
   */
  export const enum ValidationSortKeys {
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple Validations.
   * 
   */
  export interface ValidationConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<ValidationEdge>;
    
    /**
     * A list of the nodes contained in ValidationEdge.
     */
    nodes: Array<Validation>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one Validation and a cursor during pagination.
   * 
   */
  export interface ValidationEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of ValidationEdge.
     */
    node: Validation;
  }
  
  /**
   * A web pixel settings.
   */
  export interface WebPixel extends Node {
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The settings JSON object for the web pixel.
     */
    settings: JSON;
  }
  
  /**
   * A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.
   * It describes the topic that the app wants to receive, and a destination where Shopify should send webhooks of the specified topic.
   * When an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.
   * Learn more about the [webhooks system](https://shopify.dev/apps/webhooks).
   * 
   */
  export interface WebhookSubscription extends LegacyInteroperability, Node {
    
    /**
     * The Admin API version that Shopify uses to serialize webhook events. This value is inherited from the app that created the webhook subscription.
     */
    apiVersion: ApiVersion;
    
    /**
     * The destination URI to which the webhook subscription will send a message when an event occurs.
     * @deprecated Use `endpoint` instead.
     */
    callbackUrl: URL;
    
    /**
     * The date and time when the webhook subscription was created.
     */
    createdAt: DateTime;
    
    /**
     * The endpoint to which the webhook subscription will send events.
     */
    endpoint: WebhookSubscriptionEndpoint;
    
    /**
     * The format in which the webhook subscription should send the data.
     */
    format: WebhookSubscriptionFormat;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * An optional array of top-level resource fields that should be serialized and sent in the webhook message. If null, then all fields will be sent.
     */
    includeFields: Array<string>;
    
    /**
     * The ID of the corresponding resource in the REST Admin API.
     */
    legacyResourceId: UnsignedInt64;
    
    /**
     * The list of namespaces for any metafields that should be included in the webhook subscription.
     */
    metafieldNamespaces: Array<string>;
    
    /**
     * The list of namespaces for private metafields that should be included in the webhook subscription.
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafieldNamespaces: Array<string>;
    
    /**
     * An additional constraint to refine the type of event that triggers the webhook. Only supported on certain topics. See our guide to [sub-topics](https://shopify.dev/docs/apps/webhooks/sub-topics) for more.
     */
    subTopic?: string;
    
    /**
     * The type of event that triggers the webhook. The topic determines when the webhook subscription sends a webhook, as well as what class of data object that webhook contains.
     */
    topic: WebhookSubscriptionTopic;
    
    /**
     * The date and time when the webhook subscription was updated.
     */
    updatedAt: DateTime;
  }
  
  /**
   * An endpoint to which webhook subscriptions send webhooks events.
   */
  export type WebhookSubscriptionEndpoint =
  WebhookEventBridgeEndpoint |
  WebhookHttpEndpoint |
  WebhookPubSubEndpoint;
  
  /** Use this to resolve union type WebhookSubscriptionEndpoint */
  export type PossibleWebhookSubscriptionEndpointTypeNames =
  'WebhookEventBridgeEndpoint' |
  'WebhookHttpEndpoint' |
  'WebhookPubSubEndpoint';
  
  export interface WebhookSubscriptionEndpointNameMap {
    WebhookSubscriptionEndpoint: WebhookSubscriptionEndpoint;
    WebhookEventBridgeEndpoint: WebhookEventBridgeEndpoint;
    WebhookHttpEndpoint: WebhookHttpEndpoint;
    WebhookPubSubEndpoint: WebhookPubSubEndpoint;
  }
  
  /**
   * An Amazon EventBridge partner event source to which webhook subscriptions publish events.
   */
  export interface WebhookEventBridgeEndpoint {
    
    /**
     * The ARN of this EventBridge partner event source.
     */
    arn: ARN;
  }
  
  /**
   * An Amazon Web Services Amazon Resource Name (ARN), including the Region and account ID.
   * For more information, refer to [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
   */
  export type ARN = any;
  
  /**
   * An HTTPS endpoint to which webhook subscriptions send POST requests.
   */
  export interface WebhookHttpEndpoint {
    
    /**
     * The URL to which the webhooks events are sent.
     */
    callbackUrl: URL;
  }
  
  /**
   * A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.
   */
  export interface WebhookPubSubEndpoint {
    
    /**
     * The Google Cloud Pub/Sub project ID.
     */
    pubSubProject: string;
    
    /**
     * The Google Cloud Pub/Sub topic ID.
     */
    pubSubTopic: string;
  }
  
  /**
   * The supported formats for webhook subscriptions.
   */
  export const enum WebhookSubscriptionFormat {
    JSON = 'JSON',
    XML = 'XML'
  }
  
  /**
   * The supported topics for webhook subscriptions. You can use webhook subscriptions to receive
   * notifications about particular events in a shop.
   * 
   * You create mandatory webhooks either via the
   * [Partner Dashboard](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks#subscribe-to-privacy-webhooks)
   * or by updating the
   * [app configuration TOML](https://shopify.dev/apps/tools/cli/configuration#app-configuration-file-example).
   * 
   */
  export const enum WebhookSubscriptionTopic {
    
    /**
     * The webhook topic for `app/uninstalled` events. Occurs whenever a shop has uninstalled the app.
     */
    APP_UNINSTALLED = 'APP_UNINSTALLED',
    
    /**
     * The webhook topic for `carts/create` events. Occurs when a cart is created in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are created in a custom storefront. Requires the `read_orders` scope.
     */
    CARTS_CREATE = 'CARTS_CREATE',
    
    /**
     * The webhook topic for `carts/update` events. Occurs when a cart is updated in the online store. Other types of carts aren't supported. For example, the webhook doesn't support carts that are updated in a custom storefront. Requires the `read_orders` scope.
     */
    CARTS_UPDATE = 'CARTS_UPDATE',
    
    /**
     * The webhook topic for `channels/delete` events. Occurs whenever a channel is deleted. Requires the `read_publications` scope.
     */
    CHANNELS_DELETE = 'CHANNELS_DELETE',
    
    /**
     * The webhook topic for `checkouts/create` events. Occurs whenever a checkout is created. Requires the `read_orders` scope.
     */
    CHECKOUTS_CREATE = 'CHECKOUTS_CREATE',
    
    /**
     * The webhook topic for `checkouts/delete` events. Occurs whenever a checkout is deleted. Requires the `read_orders` scope.
     */
    CHECKOUTS_DELETE = 'CHECKOUTS_DELETE',
    
    /**
     * The webhook topic for `checkouts/update` events. Occurs whenever a checkout is updated. Requires the `read_orders` scope.
     */
    CHECKOUTS_UPDATE = 'CHECKOUTS_UPDATE',
    
    /**
     * The webhook topic for `customer_payment_methods/create` events. Occurs whenever a customer payment method is created. Requires the `read_customer_payment_methods` scope.
     */
    CUSTOMER_PAYMENT_METHODS_CREATE = 'CUSTOMER_PAYMENT_METHODS_CREATE',
    
    /**
     * The webhook topic for `customer_payment_methods/update` events. Occurs whenever a customer payment method is updated. Requires the `read_customer_payment_methods` scope.
     */
    CUSTOMER_PAYMENT_METHODS_UPDATE = 'CUSTOMER_PAYMENT_METHODS_UPDATE',
    
    /**
     * The webhook topic for `customer_payment_methods/revoke` events. Occurs whenever a customer payment method is revoked. Requires the `read_customer_payment_methods` scope.
     */
    CUSTOMER_PAYMENT_METHODS_REVOKE = 'CUSTOMER_PAYMENT_METHODS_REVOKE',
    
    /**
     * The webhook topic for `collection_listings/add` events. Occurs whenever a collection listing is added. Requires the `read_product_listings` scope.
     */
    COLLECTION_LISTINGS_ADD = 'COLLECTION_LISTINGS_ADD',
    
    /**
     * The webhook topic for `collection_listings/remove` events. Occurs whenever a collection listing is removed. Requires the `read_product_listings` scope.
     */
    COLLECTION_LISTINGS_REMOVE = 'COLLECTION_LISTINGS_REMOVE',
    
    /**
     * The webhook topic for `collection_listings/update` events. Occurs whenever a collection listing is updated. Requires the `read_product_listings` scope.
     */
    COLLECTION_LISTINGS_UPDATE = 'COLLECTION_LISTINGS_UPDATE',
    
    /**
     * The webhook topic for `collection_publications/create` events. Occurs whenever a collection publication listing is created. Requires the `read_publications` scope.
     */
    COLLECTION_PUBLICATIONS_CREATE = 'COLLECTION_PUBLICATIONS_CREATE',
    
    /**
     * The webhook topic for `collection_publications/delete` events. Occurs whenever a collection publication listing is deleted. Requires the `read_publications` scope.
     */
    COLLECTION_PUBLICATIONS_DELETE = 'COLLECTION_PUBLICATIONS_DELETE',
    
    /**
     * The webhook topic for `collection_publications/update` events. Occurs whenever a collection publication listing is updated. Requires the `read_publications` scope.
     */
    COLLECTION_PUBLICATIONS_UPDATE = 'COLLECTION_PUBLICATIONS_UPDATE',
    
    /**
     * The webhook topic for `collections/create` events. Occurs whenever a collection is created. Requires the `read_products` scope.
     */
    COLLECTIONS_CREATE = 'COLLECTIONS_CREATE',
    
    /**
     * The webhook topic for `collections/delete` events. Occurs whenever a collection is deleted. Requires the `read_products` scope.
     */
    COLLECTIONS_DELETE = 'COLLECTIONS_DELETE',
    
    /**
     * The webhook topic for `collections/update` events. Occurs whenever a collection is updated, including whenever products are added or removed from the collection. Occurs once if multiple products are added or removed from a collection at the same time. Requires the `read_products` scope.
     */
    COLLECTIONS_UPDATE = 'COLLECTIONS_UPDATE',
    
    /**
     * The webhook topic for `customer_groups/create` events. Occurs whenever a customer saved search is created. Requires the `read_customers` scope.
     */
    CUSTOMER_GROUPS_CREATE = 'CUSTOMER_GROUPS_CREATE',
    
    /**
     * The webhook topic for `customer_groups/delete` events. Occurs whenever a customer saved search is deleted. Requires the `read_customers` scope.
     */
    CUSTOMER_GROUPS_DELETE = 'CUSTOMER_GROUPS_DELETE',
    
    /**
     * The webhook topic for `customer_groups/update` events. Occurs whenever a customer saved search is updated. Requires the `read_customers` scope.
     */
    CUSTOMER_GROUPS_UPDATE = 'CUSTOMER_GROUPS_UPDATE',
    
    /**
     * The webhook topic for `customers/create` events. Occurs whenever a customer is created. Requires the `read_customers` scope.
     */
    CUSTOMERS_CREATE = 'CUSTOMERS_CREATE',
    
    /**
     * The webhook topic for `customers/delete` events. Occurs whenever a customer is deleted. Requires the `read_customers` scope.
     */
    CUSTOMERS_DELETE = 'CUSTOMERS_DELETE',
    
    /**
     * The webhook topic for `customers/disable` events. Occurs whenever a customer account is disabled. Requires the `read_customers` scope.
     */
    CUSTOMERS_DISABLE = 'CUSTOMERS_DISABLE',
    
    /**
     * The webhook topic for `customers/enable` events. Occurs whenever a customer account is enabled. Requires the `read_customers` scope.
     */
    CUSTOMERS_ENABLE = 'CUSTOMERS_ENABLE',
    
    /**
     * The webhook topic for `customers/update` events. Occurs whenever a customer is updated. Requires the `read_customers` scope.
     */
    CUSTOMERS_UPDATE = 'CUSTOMERS_UPDATE',
    
    /**
     * The webhook topic for `customers_marketing_consent/update` events. Occurs whenever a customer's SMS marketing consent is updated. Requires the `read_customers` scope.
     */
    CUSTOMERS_MARKETING_CONSENT_UPDATE = 'CUSTOMERS_MARKETING_CONSENT_UPDATE',
    
    /**
     * The webhook topic for `customer.tags_added` events. Triggers when tags are added to a customer. Requires the `read_customers` scope.
     */
    CUSTOMER_TAGS_ADDED = 'CUSTOMER_TAGS_ADDED',
    
    /**
     * The webhook topic for `customer.tags_removed` events. Triggers when tags are removed from a customer. Requires the `read_customers` scope.
     */
    CUSTOMER_TAGS_REMOVED = 'CUSTOMER_TAGS_REMOVED',
    
    /**
     * The webhook topic for `customers_email_marketing_consent/update` events. Occurs whenever a customer's email marketing consent is updated. Requires the `read_customers` scope.
     */
    CUSTOMERS_EMAIL_MARKETING_CONSENT_UPDATE = 'CUSTOMERS_EMAIL_MARKETING_CONSENT_UPDATE',
    
    /**
     * The webhook topic for `disputes/create` events. Occurs whenever a dispute is created. Requires the `read_shopify_payments_disputes` scope.
     */
    DISPUTES_CREATE = 'DISPUTES_CREATE',
    
    /**
     * The webhook topic for `disputes/update` events. Occurs whenever a dispute is updated. Requires the `read_shopify_payments_disputes` scope.
     */
    DISPUTES_UPDATE = 'DISPUTES_UPDATE',
    
    /**
     * The webhook topic for `draft_orders/create` events. Occurs whenever a draft order is created. Requires the `read_draft_orders` scope.
     */
    DRAFT_ORDERS_CREATE = 'DRAFT_ORDERS_CREATE',
    
    /**
     * The webhook topic for `draft_orders/delete` events. Occurs whenever a draft order is deleted. Requires the `read_draft_orders` scope.
     */
    DRAFT_ORDERS_DELETE = 'DRAFT_ORDERS_DELETE',
    
    /**
     * The webhook topic for `draft_orders/update` events. Occurs whenever a draft order is updated. Requires the `read_draft_orders` scope.
     */
    DRAFT_ORDERS_UPDATE = 'DRAFT_ORDERS_UPDATE',
    
    /**
     * The webhook topic for `fulfillment_events/create` events. Occurs whenever a fulfillment event is created. Requires the `read_fulfillments` scope.
     */
    FULFILLMENT_EVENTS_CREATE = 'FULFILLMENT_EVENTS_CREATE',
    
    /**
     * The webhook topic for `fulfillment_events/delete` events. Occurs whenever a fulfillment event is deleted. Requires the `read_fulfillments` scope.
     */
    FULFILLMENT_EVENTS_DELETE = 'FULFILLMENT_EVENTS_DELETE',
    
    /**
     * The webhook topic for `fulfillments/create` events. Occurs whenever a fulfillment is created. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders.
     */
    FULFILLMENTS_CREATE = 'FULFILLMENTS_CREATE',
    
    /**
     * The webhook topic for `fulfillments/update` events. Occurs whenever a fulfillment is updated. Requires at least one of the following scopes: read_fulfillments, read_marketplace_orders.
     */
    FULFILLMENTS_UPDATE = 'FULFILLMENTS_UPDATE',
    
    /**
     * The webhook topic for `attributed_sessions/first` events. Occurs whenever an order with a "first" attributed session is attributed. Requires the `read_marketing_events` scope.
     */
    ATTRIBUTED_SESSIONS_FIRST = 'ATTRIBUTED_SESSIONS_FIRST',
    
    /**
     * The webhook topic for `attributed_sessions/last` events. Occurs whenever an order with a "last" attributed session is attributed. Requires the `read_marketing_events` scope.
     */
    ATTRIBUTED_SESSIONS_LAST = 'ATTRIBUTED_SESSIONS_LAST',
    
    /**
     * The webhook topic for `order_transactions/create` events. Occurs when a order transaction is created or when it's status is updated. Only occurs for transactions with a status of success, failure or error. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
     */
    ORDER_TRANSACTIONS_CREATE = 'ORDER_TRANSACTIONS_CREATE',
    
    /**
     * The webhook topic for `orders/cancelled` events. Occurs whenever an order is cancelled. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
     */
    ORDERS_CANCELLED = 'ORDERS_CANCELLED',
    
    /**
     * The webhook topic for `orders/create` events. Occurs whenever an order is created. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
     */
    ORDERS_CREATE = 'ORDERS_CREATE',
    
    /**
     * The webhook topic for `orders/delete` events. Occurs whenever an order is deleted. Requires the `read_orders` scope.
     */
    ORDERS_DELETE = 'ORDERS_DELETE',
    
    /**
     * The webhook topic for `orders/edited` events. Occurs whenever an order is edited. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
     */
    ORDERS_EDITED = 'ORDERS_EDITED',
    
    /**
     * The webhook topic for `orders/fulfilled` events. Occurs whenever an order is fulfilled. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
     */
    ORDERS_FULFILLED = 'ORDERS_FULFILLED',
    
    /**
     * The webhook topic for `orders/paid` events. Occurs whenever an order is paid. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
     */
    ORDERS_PAID = 'ORDERS_PAID',
    
    /**
     * The webhook topic for `orders/partially_fulfilled` events. Occurs whenever an order is partially fulfilled. Requires at least one of the following scopes: read_orders, read_marketplace_orders.
     */
    ORDERS_PARTIALLY_FULFILLED = 'ORDERS_PARTIALLY_FULFILLED',
    
    /**
     * The webhook topic for `orders/updated` events. Occurs whenever an order is updated. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
     */
    ORDERS_UPDATED = 'ORDERS_UPDATED',
    
    /**
     * The webhook topic for `fulfillment_orders/moved` events. Occurs whenever the location which is assigned to fulfill one or more fulfillment order line items is changed.
     * 
     * * `original_fulfillment_order` - The final state of the original fulfillment order.
     * * `moved_fulfillment_order` - The fulfillment order which now contains the re-assigned line items.
     * * `source_location` - The original location which was assigned to fulfill the line items (available as of the `2023-04` API version).
     * * `destination_location_id` - The ID of the location which is now responsible for fulfilling the line items.
     * 
     * **Note:** The [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)
     * of the `original_fulfillment_order` might be changed by the move operation.
     * If you need to determine the originally assigned location, then you should refer to the `source_location`.
     * 
     * [Learn more about moving line items](https://shopify.dev/docs/api/admin-graphql/latest/mutations/fulfillmentOrderMove).
     *  Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_MOVED = 'FULFILLMENT_ORDERS_MOVED',
    
    /**
     * The webhook topic for `fulfillment_orders/hold_released` events. Occurs whenever a fulfillment order hold is released. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_HOLD_RELEASED = 'FULFILLMENT_ORDERS_HOLD_RELEASED',
    
    /**
     * The webhook topic for `fulfillment_orders/scheduled_fulfillment_order_ready` events. Occurs whenever a fulfillment order which was scheduled becomes due. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_SCHEDULED_FULFILLMENT_ORDER_READY = 'FULFILLMENT_ORDERS_SCHEDULED_FULFILLMENT_ORDER_READY',
    
    /**
     * The webhook topic for `fulfillment_orders/order_routing_complete` events. Occurs when an order has finished being routed and it's fulfillment orders assigned to a fulfillment service's location. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_buyer_membership_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_ORDER_ROUTING_COMPLETE = 'FULFILLMENT_ORDERS_ORDER_ROUTING_COMPLETE',
    
    /**
     * The webhook topic for `fulfillment_orders/cancelled` events. Occurs when a fulfillment order is cancelled. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_CANCELLED = 'FULFILLMENT_ORDERS_CANCELLED',
    
    /**
     * The webhook topic for `fulfillment_orders/fulfillment_service_failed_to_complete` events. Occurs when a fulfillment service intends to close an in_progress fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_FULFILLMENT_SERVICE_FAILED_TO_COMPLETE = 'FULFILLMENT_ORDERS_FULFILLMENT_SERVICE_FAILED_TO_COMPLETE',
    
    /**
     * The webhook topic for `fulfillment_orders/fulfillment_request_rejected` events. Occurs when a 3PL rejects a fulfillment request that was sent by a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_REJECTED = 'FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_REJECTED',
    
    /**
     * The webhook topic for `fulfillment_orders/cancellation_request_submitted` events. Occurs when a merchant requests a fulfillment request to be cancelled after that request was approved by a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_CANCELLATION_REQUEST_SUBMITTED = 'FULFILLMENT_ORDERS_CANCELLATION_REQUEST_SUBMITTED',
    
    /**
     * The webhook topic for `fulfillment_orders/cancellation_request_accepted` events. Occurs when a 3PL accepts a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_CANCELLATION_REQUEST_ACCEPTED = 'FULFILLMENT_ORDERS_CANCELLATION_REQUEST_ACCEPTED',
    
    /**
     * The webhook topic for `fulfillment_orders/cancellation_request_rejected` events. Occurs when a 3PL rejects a fulfillment cancellation request, received from a merchant. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_CANCELLATION_REQUEST_REJECTED = 'FULFILLMENT_ORDERS_CANCELLATION_REQUEST_REJECTED',
    
    /**
     * The webhook topic for `fulfillment_orders/fulfillment_request_submitted` events. Occurs when a merchant submits a fulfillment request to a 3PL. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_buyer_membership_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_SUBMITTED = 'FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_SUBMITTED',
    
    /**
     * The webhook topic for `fulfillment_orders/fulfillment_request_accepted` events. Occurs when a fulfillment service accepts a request to fulfill a fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_ACCEPTED = 'FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_ACCEPTED',
    
    /**
     * The webhook topic for `fulfillment_orders/line_items_prepared_for_local_delivery` events. Occurs whenever a fulfillment order's line items are prepared for local delivery. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_LOCAL_DELIVERY = 'FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_LOCAL_DELIVERY',
    
    /**
     * The webhook topic for `fulfillment_orders/placed_on_hold` events. Occurs when a fulfillment order is placed on hold. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_PLACED_ON_HOLD = 'FULFILLMENT_ORDERS_PLACED_ON_HOLD',
    
    /**
     * The webhook topic for `fulfillment_orders/merged` events. Occurs when multiple fulfillment orders are merged into a single fulfillment order. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_MERGED = 'FULFILLMENT_ORDERS_MERGED',
    
    /**
     * The webhook topic for `fulfillment_orders/split` events. Occurs when a fulfillment order is split into multiple fulfillment orders. Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_SPLIT = 'FULFILLMENT_ORDERS_SPLIT',
    
    /**
     * The webhook topic for `product_listings/add` events. Occurs whenever an active product is listed on a channel. Requires the `read_product_listings` scope.
     */
    PRODUCT_LISTINGS_ADD = 'PRODUCT_LISTINGS_ADD',
    
    /**
     * The webhook topic for `product_listings/remove` events. Occurs whenever a product listing is removed from the channel. Requires the `read_product_listings` scope.
     */
    PRODUCT_LISTINGS_REMOVE = 'PRODUCT_LISTINGS_REMOVE',
    
    /**
     * The webhook topic for `product_listings/update` events. Occurs whenever a product publication is updated. Requires the `read_product_listings` scope.
     */
    PRODUCT_LISTINGS_UPDATE = 'PRODUCT_LISTINGS_UPDATE',
    
    /**
     * The webhook topic for `scheduled_product_listings/add` events. Occurs whenever a product is scheduled to be published. Requires the `read_product_listings` scope.
     */
    SCHEDULED_PRODUCT_LISTINGS_ADD = 'SCHEDULED_PRODUCT_LISTINGS_ADD',
    
    /**
     * The webhook topic for `scheduled_product_listings/update` events. Occurs whenever a product's scheduled availability date changes. Requires the `read_product_listings` scope.
     */
    SCHEDULED_PRODUCT_LISTINGS_UPDATE = 'SCHEDULED_PRODUCT_LISTINGS_UPDATE',
    
    /**
     * The webhook topic for `scheduled_product_listings/remove` events. Occurs whenever a product is no longer scheduled to be published. Requires the `read_product_listings` scope.
     */
    SCHEDULED_PRODUCT_LISTINGS_REMOVE = 'SCHEDULED_PRODUCT_LISTINGS_REMOVE',
    
    /**
     * The webhook topic for `product_publications/create` events. Occurs whenever a product publication for an active product is created, or whenever an existing product publication is published. Requires the `read_publications` scope.
     */
    PRODUCT_PUBLICATIONS_CREATE = 'PRODUCT_PUBLICATIONS_CREATE',
    
    /**
     * The webhook topic for `product_publications/delete` events. Occurs whenever a product publication for an active product is removed, or whenever an existing product publication is unpublished. Requires the `read_publications` scope.
     */
    PRODUCT_PUBLICATIONS_DELETE = 'PRODUCT_PUBLICATIONS_DELETE',
    
    /**
     * The webhook topic for `product_publications/update` events. Occurs whenever a product publication is updated. Requires the `read_publications` scope.
     */
    PRODUCT_PUBLICATIONS_UPDATE = 'PRODUCT_PUBLICATIONS_UPDATE',
    
    /**
     * The webhook topic for `products/create` events. Occurs whenever a product is created. Requires the `read_products` scope.
     */
    PRODUCTS_CREATE = 'PRODUCTS_CREATE',
    
    /**
     * The webhook topic for `products/delete` events. Occurs whenever a product is deleted. Requires the `read_products` scope.
     */
    PRODUCTS_DELETE = 'PRODUCTS_DELETE',
    
    /**
     * The webhook topic for `products/update` events. Occurs whenever a product is updated, or whenever a product is ordered, or whenever a variant is added, removed, or updated. Requires the `read_products` scope.
     */
    PRODUCTS_UPDATE = 'PRODUCTS_UPDATE',
    
    /**
     * The webhook topic for `refunds/create` events. Occurs whenever a new refund is created without errors on an order, independent from the movement of money. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_buyer_membership_orders.
     */
    REFUNDS_CREATE = 'REFUNDS_CREATE',
    
    /**
     * The webhook topic for `segments/create` events. Occurs whenever a segment is created. Requires the `read_customers` scope.
     */
    SEGMENTS_CREATE = 'SEGMENTS_CREATE',
    
    /**
     * The webhook topic for `segments/delete` events. Occurs whenever a segment is deleted. Requires the `read_customers` scope.
     */
    SEGMENTS_DELETE = 'SEGMENTS_DELETE',
    
    /**
     * The webhook topic for `segments/update` events. Occurs whenever a segment is updated. Requires the `read_customers` scope.
     */
    SEGMENTS_UPDATE = 'SEGMENTS_UPDATE',
    
    /**
     * The webhook topic for `shipping_addresses/create` events. Occurs whenever a shipping address is created. Requires the `read_shipping` scope.
     */
    SHIPPING_ADDRESSES_CREATE = 'SHIPPING_ADDRESSES_CREATE',
    
    /**
     * The webhook topic for `shipping_addresses/update` events. Occurs whenever a shipping address is updated. Requires the `read_shipping` scope.
     */
    SHIPPING_ADDRESSES_UPDATE = 'SHIPPING_ADDRESSES_UPDATE',
    
    /**
     * The webhook topic for `shop/update` events. Occurs whenever a shop is updated.
     */
    SHOP_UPDATE = 'SHOP_UPDATE',
    
    /**
     * The webhook topic for `tax_partners/update` events. Occurs whenever a tax partner is created or updated. Requires the `read_taxes` scope.
     */
    TAX_PARTNERS_UPDATE = 'TAX_PARTNERS_UPDATE',
    
    /**
     * The webhook topic for `tax_services/create` events. Occurs whenever a tax service is created. Requires the `read_taxes` scope.
     */
    TAX_SERVICES_CREATE = 'TAX_SERVICES_CREATE',
    
    /**
     * The webhook topic for `tax_services/update` events. Occurs whenver a tax service is updated. Requires the `read_taxes` scope.
     */
    TAX_SERVICES_UPDATE = 'TAX_SERVICES_UPDATE',
    
    /**
     * The webhook topic for `themes/create` events. Occurs whenever a theme is created. Does not occur when theme files are created. Requires the `read_themes` scope.
     */
    THEMES_CREATE = 'THEMES_CREATE',
    
    /**
     * The webhook topic for `themes/delete` events. Occurs whenever a theme is deleted. Does not occur when theme files are deleted. Requires the `read_themes` scope.
     */
    THEMES_DELETE = 'THEMES_DELETE',
    
    /**
     * The webhook topic for `themes/publish` events. Occurs whenever a theme with the main or mobile (deprecated) role is published. Requires the `read_themes` scope.
     */
    THEMES_PUBLISH = 'THEMES_PUBLISH',
    
    /**
     * The webhook topic for `themes/update` events. Occurs whenever a theme is updated. Does not occur when theme files are updated. Requires the `read_themes` scope.
     */
    THEMES_UPDATE = 'THEMES_UPDATE',
    
    /**
     * The webhook topic for `variants/in_stock` events. Occurs whenever a variant becomes in stock. Requires the `read_products` scope.
     */
    VARIANTS_IN_STOCK = 'VARIANTS_IN_STOCK',
    
    /**
     * The webhook topic for `variants/out_of_stock` events. Occurs whenever a variant becomes out of stock. Requires the `read_products` scope.
     */
    VARIANTS_OUT_OF_STOCK = 'VARIANTS_OUT_OF_STOCK',
    
    /**
     * The webhook topic for `inventory_levels/connect` events. Occurs whenever an inventory level is connected. Requires the `read_inventory` scope.
     */
    INVENTORY_LEVELS_CONNECT = 'INVENTORY_LEVELS_CONNECT',
    
    /**
     * The webhook topic for `inventory_levels/update` events. Occurs whenever an inventory level is updated. Requires the `read_inventory` scope.
     */
    INVENTORY_LEVELS_UPDATE = 'INVENTORY_LEVELS_UPDATE',
    
    /**
     * The webhook topic for `inventory_levels/disconnect` events. Occurs whenever an inventory level is disconnected. Requires the `read_inventory` scope.
     */
    INVENTORY_LEVELS_DISCONNECT = 'INVENTORY_LEVELS_DISCONNECT',
    
    /**
     * The webhook topic for `inventory_items/create` events. Occurs whenever an inventory item is created. Requires the `read_inventory` scope.
     */
    INVENTORY_ITEMS_CREATE = 'INVENTORY_ITEMS_CREATE',
    
    /**
     * The webhook topic for `inventory_items/update` events. Occurs whenever an inventory item is updated. Requires the `read_inventory` scope.
     */
    INVENTORY_ITEMS_UPDATE = 'INVENTORY_ITEMS_UPDATE',
    
    /**
     * The webhook topic for `inventory_items/delete` events. Occurs whenever an inventory item is deleted. Requires the `read_inventory` scope.
     */
    INVENTORY_ITEMS_DELETE = 'INVENTORY_ITEMS_DELETE',
    
    /**
     * The webhook topic for `locations/activate` events. Occurs whenever a deactivated location is re-activated. Requires the `read_locations` scope.
     */
    LOCATIONS_ACTIVATE = 'LOCATIONS_ACTIVATE',
    
    /**
     * The webhook topic for `locations/deactivate` events. Occurs whenever a location is deactivated. Requires the `read_locations` scope.
     */
    LOCATIONS_DEACTIVATE = 'LOCATIONS_DEACTIVATE',
    
    /**
     * The webhook topic for `locations/create` events. Occurs whenever a location is created. Requires the `read_locations` scope.
     */
    LOCATIONS_CREATE = 'LOCATIONS_CREATE',
    
    /**
     * The webhook topic for `locations/update` events. Occurs whenever a location is updated. Requires the `read_locations` scope.
     */
    LOCATIONS_UPDATE = 'LOCATIONS_UPDATE',
    
    /**
     * The webhook topic for `locations/delete` events. Occurs whenever a location is deleted. Requires the `read_locations` scope.
     */
    LOCATIONS_DELETE = 'LOCATIONS_DELETE',
    
    /**
     * The webhook topic for `tender_transactions/create` events. Occurs when a tender transaction is created. Requires the `read_orders` scope.
     */
    TENDER_TRANSACTIONS_CREATE = 'TENDER_TRANSACTIONS_CREATE',
    
    /**
     * The webhook topic for `app_purchases_one_time/update` events. Occurs whenever a one-time app charge is updated.
     */
    APP_PURCHASES_ONE_TIME_UPDATE = 'APP_PURCHASES_ONE_TIME_UPDATE',
    
    /**
     * The webhook topic for `app_subscriptions/approaching_capped_amount` events. Occurs when the balance used on an app subscription crosses 90% of the capped amount.
     */
    APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT = 'APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT',
    
    /**
     * The webhook topic for `app_subscriptions/update` events. Occurs whenever an app subscription is updated.
     */
    APP_SUBSCRIPTIONS_UPDATE = 'APP_SUBSCRIPTIONS_UPDATE',
    
    /**
     * The webhook topic for `locales/create` events. Occurs whenever a shop locale is created Requires the `read_locales` scope.
     */
    LOCALES_CREATE = 'LOCALES_CREATE',
    
    /**
     * The webhook topic for `locales/update` events. Occurs whenever a shop locale is updated, such as published or unpublished Requires the `read_locales` scope.
     */
    LOCALES_UPDATE = 'LOCALES_UPDATE',
    
    /**
     * The webhook topic for `domains/create` events. Occurs whenever a domain is created.
     */
    DOMAINS_CREATE = 'DOMAINS_CREATE',
    
    /**
     * The webhook topic for `domains/update` events. Occurs whenever a domain is updated.
     */
    DOMAINS_UPDATE = 'DOMAINS_UPDATE',
    
    /**
     * The webhook topic for `domains/destroy` events. Occurs whenever a domain is destroyed.
     */
    DOMAINS_DESTROY = 'DOMAINS_DESTROY',
    
    /**
     * The webhook topic for `subscription_contracts/create` events. Occurs whenever a subscription contract is created. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_CONTRACTS_CREATE = 'SUBSCRIPTION_CONTRACTS_CREATE',
    
    /**
     * The webhook topic for `subscription_contracts/update` events. Occurs whenever a subscription contract is updated. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_CONTRACTS_UPDATE = 'SUBSCRIPTION_CONTRACTS_UPDATE',
    
    /**
     * The webhook topic for `subscription_billing_cycle_edits/create` events. Occurs whenever a subscription contract billing cycle is edited. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_BILLING_CYCLE_EDITS_CREATE = 'SUBSCRIPTION_BILLING_CYCLE_EDITS_CREATE',
    
    /**
     * The webhook topic for `subscription_billing_cycle_edits/update` events. Occurs whenever a subscription contract billing cycle edit is updated. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_BILLING_CYCLE_EDITS_UPDATE = 'SUBSCRIPTION_BILLING_CYCLE_EDITS_UPDATE',
    
    /**
     * The webhook topic for `subscription_billing_cycle_edits/delete` events. Occurs whenever a subscription contract billing cycle edit is deleted. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_BILLING_CYCLE_EDITS_DELETE = 'SUBSCRIPTION_BILLING_CYCLE_EDITS_DELETE',
    
    /**
     * The webhook topic for `profiles/create` events. Occurs whenever a delivery profile is created Requires at least one of the following scopes: read_shipping, read_assigned_shipping.
     */
    PROFILES_CREATE = 'PROFILES_CREATE',
    
    /**
     * The webhook topic for `profiles/update` events. Occurs whenever a delivery profile is updated Requires at least one of the following scopes: read_shipping, read_assigned_shipping.
     */
    PROFILES_UPDATE = 'PROFILES_UPDATE',
    
    /**
     * The webhook topic for `profiles/delete` events. Occurs whenever a delivery profile is deleted Requires at least one of the following scopes: read_shipping, read_assigned_shipping.
     */
    PROFILES_DELETE = 'PROFILES_DELETE',
    
    /**
     * The webhook topic for `subscription_billing_attempts/success` events. Occurs whenever a subscription billing attempt succeeds. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS = 'SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS',
    
    /**
     * The webhook topic for `subscription_billing_attempts/failure` events. Occurs whenever a subscription billing attempt fails. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE = 'SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE',
    
    /**
     * The webhook topic for `subscription_billing_attempts/challenged` events. Occurs when the financial instutition challenges the subscripttion billing attempt charge as per 3D Secure. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED = 'SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED',
    
    /**
     * The webhook topic for `returns/cancel` events. Occurs whenever a return is canceled. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders.
     */
    RETURNS_CANCEL = 'RETURNS_CANCEL',
    
    /**
     * The webhook topic for `returns/close` events. Occurs whenever a return is closed. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders.
     */
    RETURNS_CLOSE = 'RETURNS_CLOSE',
    
    /**
     * The webhook topic for `returns/reopen` events. Occurs whenever a closed return is reopened. Requires at least one of the following scopes: read_orders, read_marketplace_orders, read_returns, read_marketplace_returns, read_buyer_membership_orders.
     */
    RETURNS_REOPEN = 'RETURNS_REOPEN',
    
    /**
     * The webhook topic for `returns/request` events. Occurs whenever a return is requested. This means `Return.status` is `REQUESTED`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders.
     */
    RETURNS_REQUEST = 'RETURNS_REQUEST',
    
    /**
     * The webhook topic for `returns/approve` events. Occurs whenever a return is approved. This means `Return.status` is `OPEN`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders.
     */
    RETURNS_APPROVE = 'RETURNS_APPROVE',
    
    /**
     * The webhook topic for `returns/decline` events. Occurs whenever a return is declined. This means `Return.status` is `DECLINED`. Requires at least one of the following scopes: read_returns, read_marketplace_returns, read_buyer_membership_orders.
     */
    RETURNS_DECLINE = 'RETURNS_DECLINE',
    
    /**
     * The webhook topic for `reverse_deliveries/attach_deliverable` events. Occurs whenever a deliverable is attached to a reverse delivery.
     * This occurs when a reverse delivery is created or updated with delivery metadata.
     * Metadata includes the delivery method, label, and tracking information associated with a reverse delivery.
     *  Requires at least one of the following scopes: read_returns, read_marketplace_returns.
     */
    REVERSE_DELIVERIES_ATTACH_DELIVERABLE = 'REVERSE_DELIVERIES_ATTACH_DELIVERABLE',
    
    /**
     * The webhook topic for `reverse_fulfillment_orders/dispose` events. Occurs whenever a disposition is made on a reverse fulfillment order.
     * This includes dispositions made on reverse deliveries that are associated with the reverse fulfillment order.
     *  Requires at least one of the following scopes: read_returns, read_marketplace_returns.
     */
    REVERSE_FULFILLMENT_ORDERS_DISPOSE = 'REVERSE_FULFILLMENT_ORDERS_DISPOSE',
    
    /**
     * The webhook topic for `payment_terms/create` events. Occurs whenever payment terms are created. Requires the `read_payment_terms` scope.
     */
    PAYMENT_TERMS_CREATE = 'PAYMENT_TERMS_CREATE',
    
    /**
     * The webhook topic for `payment_terms/delete` events. Occurs whenever payment terms are deleted. Requires the `read_payment_terms` scope.
     */
    PAYMENT_TERMS_DELETE = 'PAYMENT_TERMS_DELETE',
    
    /**
     * The webhook topic for `payment_terms/update` events. Occurs whenever payment terms are updated. Requires the `read_payment_terms` scope.
     */
    PAYMENT_TERMS_UPDATE = 'PAYMENT_TERMS_UPDATE',
    
    /**
     * The webhook topic for `payment_schedules/due` events. Occurs whenever payment schedules are due. Requires the `read_payment_terms` scope.
     */
    PAYMENT_SCHEDULES_DUE = 'PAYMENT_SCHEDULES_DUE',
    
    /**
     * The webhook topic for `selling_plan_groups/create` events. Notifies when a SellingPlanGroup is created. Requires the `read_products` scope.
     */
    SELLING_PLAN_GROUPS_CREATE = 'SELLING_PLAN_GROUPS_CREATE',
    
    /**
     * The webhook topic for `selling_plan_groups/update` events. Notifies when a SellingPlanGroup is updated. Requires the `read_products` scope.
     */
    SELLING_PLAN_GROUPS_UPDATE = 'SELLING_PLAN_GROUPS_UPDATE',
    
    /**
     * The webhook topic for `selling_plan_groups/delete` events. Notifies when a SellingPlanGroup is deleted. Requires the `read_products` scope.
     */
    SELLING_PLAN_GROUPS_DELETE = 'SELLING_PLAN_GROUPS_DELETE',
    
    /**
     * The webhook topic for `bulk_operations/finish` events. Notifies when a Bulk Operation finishes.
     */
    BULK_OPERATIONS_FINISH = 'BULK_OPERATIONS_FINISH',
    
    /**
     * The webhook topic for `product_feeds/create` events. Triggers when product feed is created Requires the `read_product_listings` scope.
     */
    PRODUCT_FEEDS_CREATE = 'PRODUCT_FEEDS_CREATE',
    
    /**
     * The webhook topic for `product_feeds/update` events. Triggers when product feed is updated Requires the `read_product_listings` scope.
     */
    PRODUCT_FEEDS_UPDATE = 'PRODUCT_FEEDS_UPDATE',
    
    /**
     * The webhook topic for `product_feeds/incremental_sync` events. Occurs whenever a product publication is created, updated or removed for a product feed Requires the `read_product_listings` scope.
     */
    PRODUCT_FEEDS_INCREMENTAL_SYNC = 'PRODUCT_FEEDS_INCREMENTAL_SYNC',
    
    /**
     * The webhook topic for `product_feeds/full_sync` events. Triggers when a full sync for a product feed is performed Requires the `read_product_listings` scope.
     */
    PRODUCT_FEEDS_FULL_SYNC = 'PRODUCT_FEEDS_FULL_SYNC',
    
    /**
     * The webhook topic for `markets/create` events. Occurs when a new market is created. Requires the `read_markets` scope.
     */
    MARKETS_CREATE = 'MARKETS_CREATE',
    
    /**
     * The webhook topic for `markets/update` events. Occurs when a market is updated. Requires the `read_markets` scope.
     */
    MARKETS_UPDATE = 'MARKETS_UPDATE',
    
    /**
     * The webhook topic for `markets/delete` events. Occurs when a market is deleted. Requires the `read_markets` scope.
     */
    MARKETS_DELETE = 'MARKETS_DELETE',
    
    /**
     * The webhook topic for `orders/shopify_protect_eligibility_changed` events. Occurs whenever Shopify Protect's eligibility for an order is changed. Requires the `read_orders` scope.
     */
    ORDERS_SHOPIFY_PROTECT_ELIGIBILITY_CHANGED = 'ORDERS_SHOPIFY_PROTECT_ELIGIBILITY_CHANGED',
    
    /**
     * The webhook topic for `fulfillment_orders/rescheduled` events. Triggers when a fulfillment order is rescheduled.
     * 
     * Fulfillment orders may be merged if they have the same `fulfillAt` datetime.
     * If the fulfillment order is merged then the resulting fulfillment order will be indicated in the webhook body.
     * Otherwise it will be the original fulfillment order with an updated `fulfill_at` datetime.
     *  Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_RESCHEDULED = 'FULFILLMENT_ORDERS_RESCHEDULED',
    
    /**
     * The webhook topic for `publications/delete` events. Occurs whenever a publication is deleted. Requires the `read_publications` scope.
     */
    PUBLICATIONS_DELETE = 'PUBLICATIONS_DELETE',
    
    /**
     * The webhook topic for `audit_events/admin_api_activity` events. Triggers for each auditable Admin API request. This topic is limited to one active subscription per Plus store and requires the use of Google Cloud Pub/Sub or AWS EventBridge. Requires the `read_audit_events` scope.
     */
    AUDIT_EVENTS_ADMIN_API_ACTIVITY = 'AUDIT_EVENTS_ADMIN_API_ACTIVITY',
    
    /**
     * The webhook topic for `fulfillment_orders/line_items_prepared_for_pickup` events. Triggers when one or more of the line items for a fulfillment order are prepared for pickup Requires at least one of the following scopes: read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders, read_third_party_fulfillment_orders, read_marketplace_fulfillment_orders.
     */
    FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_PICKUP = 'FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_PICKUP',
    
    /**
     * The webhook topic for `companies/create` events. Occurs whenever a company is created. Requires the `read_customers` scope.
     */
    COMPANIES_CREATE = 'COMPANIES_CREATE',
    
    /**
     * The webhook topic for `companies/update` events. Occurs whenever a company is updated. Requires the `read_customers` scope.
     */
    COMPANIES_UPDATE = 'COMPANIES_UPDATE',
    
    /**
     * The webhook topic for `companies/delete` events. Occurs whenever a company is deleted. Requires the `read_customers` scope.
     */
    COMPANIES_DELETE = 'COMPANIES_DELETE',
    
    /**
     * The webhook topic for `company_locations/create` events. Occurs whenever a company location is created. Requires the `read_customers` scope.
     */
    COMPANY_LOCATIONS_CREATE = 'COMPANY_LOCATIONS_CREATE',
    
    /**
     * The webhook topic for `company_locations/update` events. Occurs whenever a company location is updated. Requires the `read_customers` scope.
     */
    COMPANY_LOCATIONS_UPDATE = 'COMPANY_LOCATIONS_UPDATE',
    
    /**
     * The webhook topic for `company_locations/delete` events. Occurs whenever a company location is deleted. Requires the `read_customers` scope.
     */
    COMPANY_LOCATIONS_DELETE = 'COMPANY_LOCATIONS_DELETE',
    
    /**
     * The webhook topic for `company_contacts/create` events. Occurs whenever a company contact is created. Requires the `read_customers` scope.
     */
    COMPANY_CONTACTS_CREATE = 'COMPANY_CONTACTS_CREATE',
    
    /**
     * The webhook topic for `company_contacts/update` events. Occurs whenever a company contact is updated. Requires the `read_customers` scope.
     */
    COMPANY_CONTACTS_UPDATE = 'COMPANY_CONTACTS_UPDATE',
    
    /**
     * The webhook topic for `company_contacts/delete` events. Occurs whenever a company contact is deleted. Requires the `read_customers` scope.
     */
    COMPANY_CONTACTS_DELETE = 'COMPANY_CONTACTS_DELETE',
    
    /**
     * The webhook topic for `customers/merge` events. Triggers when two customers are merged Requires the `read_customer_merge` scope.
     */
    CUSTOMERS_MERGE = 'CUSTOMERS_MERGE',
    
    /**
     * The webhook topic for `company_contact_roles/assign` events. Occurs whenever a role is assigned to a contact at a location. Requires the `read_customers` scope.
     */
    COMPANY_CONTACT_ROLES_ASSIGN = 'COMPANY_CONTACT_ROLES_ASSIGN',
    
    /**
     * The webhook topic for `company_contact_roles/revoke` events. Occurs whenever a role is revoked from a contact at a location. Requires the `read_customers` scope.
     */
    COMPANY_CONTACT_ROLES_REVOKE = 'COMPANY_CONTACT_ROLES_REVOKE',
    
    /**
     * The webhook topic for `subscription_contracts/activate` events. Occurs when a subscription contract is activated. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_CONTRACTS_ACTIVATE = 'SUBSCRIPTION_CONTRACTS_ACTIVATE',
    
    /**
     * The webhook topic for `subscription_contracts/pause` events. Occurs when a subscription contract is paused. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_CONTRACTS_PAUSE = 'SUBSCRIPTION_CONTRACTS_PAUSE',
    
    /**
     * The webhook topic for `subscription_contracts/cancel` events. Occurs when a subscription contract is canceled. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_CONTRACTS_CANCEL = 'SUBSCRIPTION_CONTRACTS_CANCEL',
    
    /**
     * The webhook topic for `subscription_contracts/fail` events. Occurs when a subscription contract is failed. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_CONTRACTS_FAIL = 'SUBSCRIPTION_CONTRACTS_FAIL',
    
    /**
     * The webhook topic for `subscription_contracts/expire` events. Occurs when a subscription contract expires. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_CONTRACTS_EXPIRE = 'SUBSCRIPTION_CONTRACTS_EXPIRE',
    
    /**
     * The webhook topic for `subscription_billing_cycles/skip` events. Occurs whenever a subscription contract billing cycle is skipped. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_BILLING_CYCLES_SKIP = 'SUBSCRIPTION_BILLING_CYCLES_SKIP',
    
    /**
     * The webhook topic for `subscription_billing_cycles/unskip` events. Occurs whenever a subscription contract billing cycle is unskipped. Requires the `read_own_subscription_contracts` scope.
     */
    SUBSCRIPTION_BILLING_CYCLES_UNSKIP = 'SUBSCRIPTION_BILLING_CYCLES_UNSKIP',
    
    /**
     * The webhook topic for `metaobjects/create` events. Occurs when a metaobject is created. Requires the `read_metaobjects` scope.
     */
    METAOBJECTS_CREATE = 'METAOBJECTS_CREATE',
    
    /**
     * The webhook topic for `metaobjects/update` events. Occurs when a metaobject is updated. Requires the `read_metaobjects` scope.
     */
    METAOBJECTS_UPDATE = 'METAOBJECTS_UPDATE',
    
    /**
     * The webhook topic for `metaobjects/delete` events. Occurs when a metaobject is deleted. Requires the `read_metaobjects` scope.
     */
    METAOBJECTS_DELETE = 'METAOBJECTS_DELETE',
    
    /**
     * The webhook topic for `discounts/create` events. Occurs whenever a discount is created. Requires the `read_discounts` scope.
     */
    DISCOUNTS_CREATE = 'DISCOUNTS_CREATE',
    
    /**
     * The webhook topic for `discounts/update` events. Occurs whenever a discount is updated. Requires the `read_discounts` scope.
     */
    DISCOUNTS_UPDATE = 'DISCOUNTS_UPDATE',
    
    /**
     * The webhook topic for `discounts/delete` events. Occurs whenever a discount is deleted. Requires the `read_discounts` scope.
     */
    DISCOUNTS_DELETE = 'DISCOUNTS_DELETE',
    
    /**
     * The webhook topic for `discounts/redeemcode_added` events. Occurs whenever a redeem code is added to a code discount. Requires the `read_discounts` scope.
     */
    DISCOUNTS_REDEEMCODE_ADDED = 'DISCOUNTS_REDEEMCODE_ADDED',
    
    /**
     * The webhook topic for `discounts/redeemcode_removed` events. Occurs whenever a redeem code on a code discount is deleted. Requires the `read_discounts` scope.
     */
    DISCOUNTS_REDEEMCODE_REMOVED = 'DISCOUNTS_REDEEMCODE_REMOVED'
  }
  
  /**
   * The set of valid sort keys for the WebhookSubscription query.
   */
  export const enum WebhookSubscriptionSortKeys {
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An auto-generated type for paginating through multiple WebhookSubscriptions.
   * 
   */
  export interface WebhookSubscriptionConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<WebhookSubscriptionEdge>;
    
    /**
     * A list of the nodes contained in WebhookSubscriptionEdge.
     */
    nodes: Array<WebhookSubscription>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one WebhookSubscription and a cursor during pagination.
   * 
   */
  export interface WebhookSubscriptionEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of WebhookSubscriptionEdge.
     */
    node: WebhookSubscription;
  }
  
  /**
   * The schema's entry point for all mutation operations.
   */
  export interface Mutation {
    
    /**
     * Updates the email state value for an abandonment.
     * @deprecated Use `abandonmentUpdateActivitiesDeliveryStatuses` instead.
     */
    abandonmentEmailStateUpdate?: AbandonmentEmailStateUpdatePayload;
    
    /**
     * Updates the marketing activities delivery statuses for an abandonment.
     */
    abandonmentUpdateActivitiesDeliveryStatuses?: AbandonmentUpdateActivitiesDeliveryStatusesPayload;
    
    /**
     * Charges a shop for features or services one time.
     * This type of charge is recommended for apps that aren't billed on a recurring basis.
     * Test and demo shops aren't charged.
     * 
     */
    appPurchaseOneTimeCreate?: AppPurchaseOneTimeCreatePayload;
    
    /**
     * Cancels an app subscription on a store.
     */
    appSubscriptionCancel?: AppSubscriptionCancelPayload;
    
    /**
     * Allows an app to charge a store for features or services on a recurring basis.
     */
    appSubscriptionCreate?: AppSubscriptionCreatePayload;
    
    /**
     * Updates the capped amount on the usage pricing plan of an app subscription line item.
     */
    appSubscriptionLineItemUpdate?: AppSubscriptionLineItemUpdatePayload;
    
    /**
     * Extends the trial of an app subscription.
     */
    appSubscriptionTrialExtend?: AppSubscriptionTrialExtendPayload;
    
    /**
     * Enables an app to charge a store for features or services on a per-use basis.
     * The usage charge value is counted towards the `cappedAmount` limit that was specified in the `appUsagePricingDetails` field when the app subscription was created.
     * If you create an app usage charge that causes the total usage charges in a billing interval to exceed the capped amount, then a `Total price exceeds balance remaining` error is returned.
     * 
     */
    appUsageRecordCreate?: AppUsageRecordCreatePayload;
    
    /**
     * Starts the cancelation process of a running bulk operation.
     * 
     * There may be a short delay from when a cancelation starts until the operation is actually canceled.
     * 
     */
    bulkOperationCancel?: BulkOperationCancelPayload;
    
    /**
     * Creates and runs a bulk operation mutation.
     * 
     * To learn how to bulk import large volumes of data asynchronously, refer to the
     * [bulk import data guide](https://shopify.dev/api/usage/bulk-operations/imports).
     * 
     */
    bulkOperationRunMutation?: BulkOperationRunMutationPayload;
    
    /**
     * Creates and runs a bulk operation query.
     * 
     * See the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
     * 
     */
    bulkOperationRunQuery?: BulkOperationRunQueryPayload;
    
    /**
     * Creates product feedback for multiple products.
     */
    bulkProductResourceFeedbackCreate?: BulkProductResourceFeedbackCreatePayload;
    
    /**
     * Create a CartTransform function to the Shop.
     */
    cartTransformCreate?: CartTransformCreatePayload;
    
    /**
     * Destroy a cart transform function from the Shop.
     */
    cartTransformDelete?: CartTransformDeletePayload;
    
    /**
     * Updates the context of a catalog.
     */
    catalogContextUpdate?: CatalogContextUpdatePayload;
    
    /**
     * Creates a new catalog.
     */
    catalogCreate?: CatalogCreatePayload;
    
    /**
     * Delete a catalog.
     */
    catalogDelete?: CatalogDeletePayload;
    
    /**
     * Updates an existing catalog.
     */
    catalogUpdate?: CatalogUpdatePayload;
    
    /**
     * Updates the checkout branding settings for a
     * [checkout profile](https://shopify.dev/api/admin-graphql/unstable/queries/checkoutProfile).
     * 
     * If the settings don't exist, then new settings are created. The checkout branding settings applied to a
     * published checkout profile will be immediately visible within the store's checkout. The checkout branding
     * settings applied to a draft checkout profile could be previewed within the admin checkout editor.
     * 
     * To learn more about updating checkout branding settings, refer to the checkout branding
     * [tutorial](https://shopify.dev/docs/apps/checkout/styling).
     * 
     */
    checkoutBrandingUpsert?: CheckoutBrandingUpsertPayload;
    
    /**
     * Adds products to a collection.
     */
    collectionAddProducts?: CollectionAddProductsPayload;
    
    /**
     * Asynchronously adds a set of products to a given collection. It can take a long time to run. Instead of returning a collection, it returns a job which should be polled.
     */
    collectionAddProductsV2?: CollectionAddProductsV2Payload;
    
    /**
     * Creates a collection.
     * 
     */
    collectionCreate?: CollectionCreatePayload;
    
    /**
     * Deletes a collection.
     */
    collectionDelete?: CollectionDeletePayload;
    
    /**
     * Publishes a collection to a channel.
     * @deprecated Use `publishablePublish` instead.
     */
    collectionPublish?: CollectionPublishPayload;
    
    /**
     * Removes a set of products from a given collection. The mutation can take a long time to run. Instead of returning an updated collection the mutation returns a job, which should be [polled](https://shopify.dev/api/admin-graphql/latest/queries/job). For use with manual collections only.
     */
    collectionRemoveProducts?: CollectionRemoveProductsPayload;
    
    /**
     * Asynchronously reorders a set of products within a specified collection. Instead of returning an updated collection, this mutation returns a job, which should be [polled](https://shopify.dev/api/admin-graphql/latest/queries/job). The [`Collection.sortOrder`](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-collection-sortorder) must be `MANUAL`. Displaced products will have their position altered in a consistent manner, with no gaps.
     */
    collectionReorderProducts?: CollectionReorderProductsPayload;
    
    /**
     * Unpublishes a collection.
     * @deprecated Use `publishableUnpublish` instead.
     */
    collectionUnpublish?: CollectionUnpublishPayload;
    
    /**
     * Updates a collection.
     */
    collectionUpdate?: CollectionUpdatePayload;
    
    /**
     * Deletes a list of companies.
     */
    companiesDelete?: CompaniesDeletePayload;
    
    /**
     * Deletes a company address.
     */
    companyAddressDelete?: CompanyAddressDeletePayload;
    
    /**
     * Assigns the customer as a company contact.
     */
    companyAssignCustomerAsContact?: CompanyAssignCustomerAsContactPayload;
    
    /**
     * Assigns the main contact for the company.
     */
    companyAssignMainContact?: CompanyAssignMainContactPayload;
    
    /**
     * Assigns a role to a contact for a location.
     */
    companyContactAssignRole?: CompanyContactAssignRolePayload;
    
    /**
     * Assigns roles on a company contact.
     */
    companyContactAssignRoles?: CompanyContactAssignRolesPayload;
    
    /**
     * Creates a company contact.
     */
    companyContactCreate?: CompanyContactCreatePayload;
    
    /**
     * Deletes a company contact.
     */
    companyContactDelete?: CompanyContactDeletePayload;
    
    /**
     * Removes a company contact from a Company.
     */
    companyContactRemoveFromCompany?: CompanyContactRemoveFromCompanyPayload;
    
    /**
     * Revokes a role on a company contact.
     */
    companyContactRevokeRole?: CompanyContactRevokeRolePayload;
    
    /**
     * Revokes roles on a company contact.
     */
    companyContactRevokeRoles?: CompanyContactRevokeRolesPayload;
    
    /**
     * Sends the company contact a welcome email.
     */
    companyContactSendWelcomeEmail?: CompanyContactSendWelcomeEmailPayload;
    
    /**
     * Updates a company contact.
     */
    companyContactUpdate?: CompanyContactUpdatePayload;
    
    /**
     * Deletes one or more company contacts.
     */
    companyContactsDelete?: CompanyContactsDeletePayload;
    
    /**
     * Creates a company.
     */
    companyCreate?: CompanyCreatePayload;
    
    /**
     * Deletes a company.
     */
    companyDelete?: CompanyDeletePayload;
    
    /**
     * Updates an address on a company location.
     */
    companyLocationAssignAddress?: CompanyLocationAssignAddressPayload;
    
    /**
     * Assigns roles on a company location.
     */
    companyLocationAssignRoles?: CompanyLocationAssignRolesPayload;
    
    /**
     * Assigns tax exemptions to the company location.
     */
    companyLocationAssignTaxExemptions?: CompanyLocationAssignTaxExemptionsPayload;
    
    /**
     * Creates a company location.
     */
    companyLocationCreate?: CompanyLocationCreatePayload;
    
    /**
     * Creates a tax registration for a company location.
     */
    companyLocationCreateTaxRegistration?: CompanyLocationCreateTaxRegistrationPayload;
    
    /**
     * Deletes a company location.
     */
    companyLocationDelete?: CompanyLocationDeletePayload;
    
    /**
     * Revokes roles on a company location.
     */
    companyLocationRevokeRoles?: CompanyLocationRevokeRolesPayload;
    
    /**
     * Revokes tax exemptions from the company location.
     */
    companyLocationRevokeTaxExemptions?: CompanyLocationRevokeTaxExemptionsPayload;
    
    /**
     * Revokes tax registration on a company location.
     */
    companyLocationRevokeTaxRegistration?: CompanyLocationRevokeTaxRegistrationPayload;
    
    /**
     * Updates a company location.
     */
    companyLocationUpdate?: CompanyLocationUpdatePayload;
    
    /**
     * Deletes a list of company locations.
     */
    companyLocationsDelete?: CompanyLocationsDeletePayload;
    
    /**
     * Revokes the main contact from the company.
     */
    companyRevokeMainContact?: CompanyRevokeMainContactPayload;
    
    /**
     * Updates a company.
     */
    companyUpdate?: CompanyUpdatePayload;
    
    /**
     * Add tax exemptions for the customer.
     */
    customerAddTaxExemptions?: CustomerAddTaxExemptionsPayload;
    
    /**
     * Cancels a pending erasure of a customer's data.
     * 
     * To request an erasure of a customer's data use the [customerRequestDataErasure mutation](https://shopify.dev/api/admin-graphql/unstable/mutations/customerRequestDataErasure).
     * 
     */
    customerCancelDataErasure?: CustomerCancelDataErasurePayload;
    
    /**
     * Create a new customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
     */
    customerCreate?: CustomerCreatePayload;
    
    /**
     * Delete a customer. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
     */
    customerDelete?: CustomerDeletePayload;
    
    /**
     * Update a customer's email marketing information information.
     * 
     */
    customerEmailMarketingConsentUpdate?: CustomerEmailMarketingConsentUpdatePayload;
    
    /**
     * Generate an account activation URL for a customer.
     */
    customerGenerateAccountActivationUrl?: CustomerGenerateAccountActivationUrlPayload;
    
    /**
     * Merges two customers.
     */
    customerMerge?: CustomerMergePayload;
    
    /**
     * Creates a vaulted payment method for a customer from duplication data.
     * 
     * This data must be obtained from another shop within the same organization.
     * 
     * Currently, this only supports Shop Pay payment methods. This is only available for selected partner apps.
     * 
     */
    customerPaymentMethodCreateFromDuplicationData?: CustomerPaymentMethodCreateFromDuplicationDataPayload;
    
    /**
     * Creates a credit card payment method for a customer using a session id.
     * These values are only obtained through card imports happening from a PCI compliant environment.
     * Please use customerPaymentMethodRemoteCreate if you are not managing credit cards directly.
     * 
     */
    customerPaymentMethodCreditCardCreate?: CustomerPaymentMethodCreditCardCreatePayload;
    
    /**
     * Updates the credit card payment method for a customer.
     */
    customerPaymentMethodCreditCardUpdate?: CustomerPaymentMethodCreditCardUpdatePayload;
    
    /**
     * Returns encrypted data that can be used to duplicate the payment method in another shop within the same organization.
     * 
     * Currently, this only supports Shop Pay payment methods. This is only available for selected partner apps.
     * 
     */
    customerPaymentMethodGetDuplicationData?: CustomerPaymentMethodGetDuplicationDataPayload;
    
    /**
     * Returns a URL that allows the customer to update a specific payment method.
     * 
     * Currently, `customerPaymentMethodGetUpdateUrl` only supports Shop Pay.
     * 
     */
    customerPaymentMethodGetUpdateUrl?: CustomerPaymentMethodGetUpdateUrlPayload;
    
    /**
     * Creates a PayPal billing agreement for a customer.
     */
    customerPaymentMethodPaypalBillingAgreementCreate?: CustomerPaymentMethodPaypalBillingAgreementCreatePayload;
    
    /**
     * Updates a PayPal billing agreement for a customer.
     */
    customerPaymentMethodPaypalBillingAgreementUpdate?: CustomerPaymentMethodPaypalBillingAgreementUpdatePayload;
    
    /**
     * Create a payment method from remote gateway identifiers.
     */
    customerPaymentMethodRemoteCreate?: CustomerPaymentMethodRemoteCreatePayload;
    
    /**
     * Create a payment method from a credit card stored by Stripe.
     * @deprecated Use `customerPaymentMethodRemoteCreate` instead.
     */
    customerPaymentMethodRemoteCreditCardCreate?: CustomerPaymentMethodRemoteCreditCardCreatePayload;
    
    /**
     * Revokes a customer's payment method.
     */
    customerPaymentMethodRevoke?: CustomerPaymentMethodRevokePayload;
    
    /**
     * Sends a link to the customer so they can update a specific payment method.
     */
    customerPaymentMethodSendUpdateEmail?: CustomerPaymentMethodSendUpdateEmailPayload;
    
    /**
     * Remove tax exemptions from a customer.
     */
    customerRemoveTaxExemptions?: CustomerRemoveTaxExemptionsPayload;
    
    /**
     * Replace tax exemptions for a customer.
     */
    customerReplaceTaxExemptions?: CustomerReplaceTaxExemptionsPayload;
    
    /**
     * Enqueues a request to erase customer's data. Read more [here](https://help.shopify.com/manual/privacy-and-security/privacy/processing-customer-data-requests#erase-customer-personal-data).
     * 
     * To cancel the data erasure request use the [customerCancelDataErasure mutation](https://shopify.dev/api/admin-graphql/unstable/mutations/customerCancelDataErasure).
     * 
     */
    customerRequestDataErasure?: CustomerRequestDataErasurePayload;
    
    /**
     * Creates a customer segment members query.
     */
    customerSegmentMembersQueryCreate?: CustomerSegmentMembersQueryCreatePayload;
    
    /**
     * Update a customer's SMS marketing consent information.
     * 
     */
    customerSmsMarketingConsentUpdate?: CustomerSmsMarketingConsentUpdatePayload;
    
    /**
     * Update a customer's attributes. As of API version 2022-10, apps using protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
     */
    customerUpdate?: CustomerUpdatePayload;
    
    /**
     * Updates a customer's default address.
     */
    customerUpdateDefaultAddress?: CustomerUpdateDefaultAddressPayload;
    
    /**
     * Creates a delegate access token.
     * 
     * To learn more about creating delegate access tokens, refer to
     * [Delegate OAuth access tokens to subsystems]
     * (https://shopify.dev/apps/auth/oauth/delegate-access-tokens).
     * 
     */
    delegateAccessTokenCreate?: DelegateAccessTokenCreatePayload;
    
    /**
     * Destroys a delegate access token.
     */
    delegateAccessTokenDestroy?: DelegateAccessTokenDestroyPayload;
    
    /**
     * Activates and deactivates delivery customizations.
     */
    deliveryCustomizationActivation?: DeliveryCustomizationActivationPayload;
    
    /**
     * Creates a delivery customization.
     */
    deliveryCustomizationCreate?: DeliveryCustomizationCreatePayload;
    
    /**
     * Creates a delivery customization.
     */
    deliveryCustomizationDelete?: DeliveryCustomizationDeletePayload;
    
    /**
     * Updates a delivery customization.
     */
    deliveryCustomizationUpdate?: DeliveryCustomizationUpdatePayload;
    
    /**
     * Create a delivery profile.
     */
    deliveryProfileCreate?: deliveryProfileCreatePayload;
    
    /**
     * Enqueue the removal of a delivery profile.
     */
    deliveryProfileRemove?: deliveryProfileRemovePayload;
    
    /**
     * Update a delivery profile.
     */
    deliveryProfileUpdate?: deliveryProfileUpdatePayload;
    
    /**
     * Set the delivery settings for a shop.
     */
    deliverySettingUpdate?: DeliverySettingUpdatePayload;
    
    /**
     * Assigns a location as the shipping origin while using legacy compatibility mode for multi-location delivery profiles.
     * 
     */
    deliveryShippingOriginAssign?: DeliveryShippingOriginAssignPayload;
    
    /**
     * Activates an automatic discount.
     */
    discountAutomaticActivate?: DiscountAutomaticActivatePayload;
    
    /**
     * Creates an app discount.
     */
    discountAutomaticAppCreate?: DiscountAutomaticAppCreatePayload;
    
    /**
     * Updates an automatic app discount.
     */
    discountAutomaticAppUpdate?: DiscountAutomaticAppUpdatePayload;
    
    /**
     * Creates a basic automatic discount.
     */
    discountAutomaticBasicCreate?: DiscountAutomaticBasicCreatePayload;
    
    /**
     * Updates a basic automatic discount.
     */
    discountAutomaticBasicUpdate?: DiscountAutomaticBasicUpdatePayload;
    
    /**
     * Asynchronously delete automatic discounts in bulk if a `search` or `saved_search_id` argument is provided or if a
     * maximum discount threshold is reached (1,000). Otherwise, deletions will occur inline.
     * **Warning:** All automatic discounts will be deleted if a blank `search` argument is provided.
     * 
     */
    discountAutomaticBulkDelete?: DiscountAutomaticBulkDeletePayload;
    
    /**
     * Creates a BXGY automatic discount.
     */
    discountAutomaticBxgyCreate?: DiscountAutomaticBxgyCreatePayload;
    
    /**
     * Updates an existing Buy X, Get Y (BXGY) automatic discount.
     */
    discountAutomaticBxgyUpdate?: DiscountAutomaticBxgyUpdatePayload;
    
    /**
     * Deactivates an automatic discount.
     */
    discountAutomaticDeactivate?: DiscountAutomaticDeactivatePayload;
    
    /**
     * Deletes an automatic discount.
     */
    discountAutomaticDelete?: DiscountAutomaticDeletePayload;
    
    /**
     * Creates a free shipping automatic discount.
     */
    discountAutomaticFreeShippingCreate?: DiscountAutomaticFreeShippingCreatePayload;
    
    /**
     * Updates a free shipping automatic discount.
     */
    discountAutomaticFreeShippingUpdate?: DiscountAutomaticFreeShippingUpdatePayload;
    
    /**
     * Activates a code discount.
     */
    discountCodeActivate?: DiscountCodeActivatePayload;
    
    /**
     * Creates a code app discount.
     */
    discountCodeAppCreate?: DiscountCodeAppCreatePayload;
    
    /**
     * Updates a code app discount.
     */
    discountCodeAppUpdate?: DiscountCodeAppUpdatePayload;
    
    /**
     * Creates a basic code discount.
     */
    discountCodeBasicCreate?: DiscountCodeBasicCreatePayload;
    
    /**
     * Updates a basic code discount.
     */
    discountCodeBasicUpdate?: DiscountCodeBasicUpdatePayload;
    
    /**
     * Asynchronously activate code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.
     * 
     */
    discountCodeBulkActivate?: DiscountCodeBulkActivatePayload;
    
    /**
     * Asynchronously deactivate code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.
     * 
     */
    discountCodeBulkDeactivate?: DiscountCodeBulkDeactivatePayload;
    
    /**
     * Asynchronously delete code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.
     * 
     */
    discountCodeBulkDelete?: DiscountCodeBulkDeletePayload;
    
    /**
     * Creates a Buy X get Y (BXGY) code discount.
     */
    discountCodeBxgyCreate?: DiscountCodeBxgyCreatePayload;
    
    /**
     * Updates a Buy X, Get Y (BXGY) code discount.
     */
    discountCodeBxgyUpdate?: DiscountCodeBxgyUpdatePayload;
    
    /**
     * Deactivates a code discount.
     */
    discountCodeDeactivate?: DiscountCodeDeactivatePayload;
    
    /**
     * Deletes a code discount.
     */
    discountCodeDelete?: DiscountCodeDeletePayload;
    
    /**
     * Creates a free shipping code discount.
     */
    discountCodeFreeShippingCreate?: DiscountCodeFreeShippingCreatePayload;
    
    /**
     * Updates a free shipping code discount.
     */
    discountCodeFreeShippingUpdate?: DiscountCodeFreeShippingUpdatePayload;
    
    /**
     * Asynchronously delete discount redeem codes in bulk. Specify the redeem codes to delete by providing a
     * search query, a saved search ID, or a list of redeem code IDs.
     * 
     */
    discountCodeRedeemCodeBulkDelete?: DiscountCodeRedeemCodeBulkDeletePayload;
    
    /**
     * Asynchronously add discount redeem codes in bulk. Specify the codes to add
     * and the discount code ID that the codes will belong to.
     * 
     */
    discountRedeemCodeBulkAdd?: DiscountRedeemCodeBulkAddPayload;
    
    /**
     * Updates a dispute evidence.
     */
    disputeEvidenceUpdate?: DisputeEvidenceUpdatePayload;
    
    /**
     * Adds tags to multiple draft orders.
     */
    draftOrderBulkAddTags?: DraftOrderBulkAddTagsPayload;
    
    /**
     * Deletes multiple draft orders.
     */
    draftOrderBulkDelete?: DraftOrderBulkDeletePayload;
    
    /**
     * Removes tags from multiple draft orders.
     */
    draftOrderBulkRemoveTags?: DraftOrderBulkRemoveTagsPayload;
    
    /**
     * Calculates the properties of a draft order. Useful for determining information
     * such as total taxes or price without actually creating a draft order.
     * 
     */
    draftOrderCalculate?: DraftOrderCalculatePayload;
    
    /**
     * Completes a draft order and creates an order.
     */
    draftOrderComplete?: DraftOrderCompletePayload;
    
    /**
     * Creates a draft order.
     */
    draftOrderCreate?: DraftOrderCreatePayload;
    
    /**
     * Creates a Draft Order from Order.
     */
    draftOrderCreateFromOrder?: DraftOrderCreateFromOrderPayload;
    
    /**
     * Creates a merchant checkout for the given draft order.
     */
    draftOrderCreateMerchantCheckout?: DraftOrderCreateMerchantCheckoutPayload;
    
    /**
     * Deletes a draft order.
     */
    draftOrderDelete?: DraftOrderDeletePayload;
    
    /**
     * Duplicates a draft order.
     */
    draftOrderDuplicate?: DraftOrderDuplicatePayload;
    
    /**
     * Previews a draft order invoice email.
     */
    draftOrderInvoicePreview?: DraftOrderInvoicePreviewPayload;
    
    /**
     * Sends an email invoice for a draft order.
     */
    draftOrderInvoiceSend?: DraftOrderInvoiceSendPayload;
    
    /**
     * Updates a draft order.
     * 
     * If a checkout has been started for a draft order, any update to the draft will unlink the checkout. Checkouts
     * are created but not immediately completed when opening the merchant credit card modal in the admin, and when a
     * buyer opens the invoice URL. This is usually fine, but there is an edge case where a checkout is in progress
     * and the draft is updated before the checkout completes. This will not interfere with the checkout and order
     * creation, but if the link from draft to checkout is broken the draft will remain open even after the order is
     * created.
     * 
     */
    draftOrderUpdate?: DraftOrderUpdatePayload;
    
    /**
     * Updates the server pixel to connect to an EventBridge endpoint.
     * Running this mutation deletes any previous subscriptions for the server pixel.
     * 
     */
    eventBridgeServerPixelUpdate?: EventBridgeServerPixelUpdatePayload;
    
    /**
     * Creates a new Amazon EventBridge webhook subscription.
     * 
     */
    eventBridgeWebhookSubscriptionCreate?: EventBridgeWebhookSubscriptionCreatePayload;
    
    /**
     * Updates an Amazon EventBridge webhook subscription.
     * 
     */
    eventBridgeWebhookSubscriptionUpdate?: EventBridgeWebhookSubscriptionUpdatePayload;
    
    /**
     * Acknowledges file update failure by resetting FAILED status to READY and clearing any media errors.
     */
    fileAcknowledgeUpdateFailed?: FileAcknowledgeUpdateFailedPayload;
    
    /**
     * Creates file assets using an external URL or for files that were previously uploaded using the
     * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
     * These files are added to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin.
     * 
     */
    fileCreate?: FileCreatePayload;
    
    /**
     * Deletes existing file assets that were uploaded to Shopify.
     */
    fileDelete?: FileDeletePayload;
    
    /**
     * Updates an existing file asset that was uploaded to Shopify.
     */
    fileUpdate?: FileUpdatePayload;
    
    /**
     * Generates a signature for a Flow action payload.
     */
    flowGenerateSignature?: FlowGenerateSignaturePayload;
    
    /**
     * Triggers any workflows that begin with the trigger specified in the request body. To learn more, refer to [_Create Shopify Flow triggers_](https://shopify.dev/apps/flow/triggers).
     */
    flowTriggerReceive?: FlowTriggerReceivePayload;
    
    /**
     * Cancels a fulfillment.
     */
    fulfillmentCancel?: FulfillmentCancelPayload;
    
    /**
     * Creates a fulfillment constraint rule and its metafield.
     */
    fulfillmentConstraintRuleCreate?: FulfillmentConstraintRuleCreatePayload;
    
    /**
     * Deletes a fulfillment constraint rule and its metafields.
     */
    fulfillmentConstraintRuleDelete?: FulfillmentConstraintRuleDeletePayload;
    
    /**
     * Creates a fulfillment for one or many fulfillment orders.
     * The fulfillment orders are associated with the same order and are assigned to the same location.
     * 
     */
    fulfillmentCreateV2?: FulfillmentCreateV2Payload;
    
    /**
     * Creates a fulfillment event for a specified fulfillment.
     */
    fulfillmentEventCreate?: FulfillmentEventCreatePayload;
    
    /**
     * Accept a cancellation request sent to a fulfillment service for a fulfillment order.
     */
    fulfillmentOrderAcceptCancellationRequest?: FulfillmentOrderAcceptCancellationRequestPayload;
    
    /**
     * Accepts a fulfillment request sent to a fulfillment service for a fulfillment order.
     */
    fulfillmentOrderAcceptFulfillmentRequest?: FulfillmentOrderAcceptFulfillmentRequestPayload;
    
    /**
     * Marks a fulfillment order as canceled.
     */
    fulfillmentOrderCancel?: FulfillmentOrderCancelPayload;
    
    /**
     * Marks an in-progress fulfillment order as incomplete, indicating the fulfillment service is unable to ship any remaining items and intends to close the fulfillment order.
     */
    fulfillmentOrderClose?: FulfillmentOrderClosePayload;
    
    /**
     * Applies a fulfillment hold on an open fulfillment order.
     */
    fulfillmentOrderHold?: FulfillmentOrderHoldPayload;
    
    /**
     * Mark line items associated with a fulfillment order as being ready for pickup by a customer.
     * 
     * Sends a Ready For Pickup notification to the customer to let them know that their order is ready
     * to be picked up.
     * 
     */
    fulfillmentOrderLineItemsPreparedForPickup?: FulfillmentOrderLineItemsPreparedForPickupPayload;
    
    /**
     * Merges a set or multiple sets of fulfillment orders together into one based on
     * line item inputs and quantities.
     * 
     */
    fulfillmentOrderMerge?: FulfillmentOrderMergePayload;
    
    /**
     * Changes the location which is assigned to fulfill a number of unfulfilled fulfillment order line items.
     * 
     * Moving a fulfillment order will fail in the following circumstances:
     * 
     * * The fulfillment order is closed.
     * * The destination location has never stocked the requested inventory item.
     * * The API client doesn't have the correct permissions.
     * 
     * Line items which have already been fulfilled can't be re-assigned
     * and will always remain assigned to the original location.
     * 
     * You can't change the assigned location while a fulfillment order has a
     * [request status](https://shopify.dev/docs/api/admin-graphql/latest/enums/FulfillmentOrderRequestStatus)
     * of `SUBMITTED`, `ACCEPTED`, `CANCELLATION_REQUESTED`, or `CANCELLATION_REJECTED`.
     * These request statuses mean that a fulfillment order is awaiting action by a fulfillment service
     * and can't be re-assigned without first having the fulfillment service accept a cancellation request.
     * This behavior is intended to prevent items from being fulfilled by multiple locations or fulfillment services.
     * 
     * ### How re-assigning line items affects fulfillment orders
     * 
     * **First scenario:** Re-assign all line items belonging to a fulfillment order to a new location.
     * 
     * In this case, the
     * [assignedLocation](https://shopify.dev/docs/api/admin-graphql/latest/objects/fulfillmentorder#field-fulfillmentorder-assignedlocation)
     * of the original fulfillment order will be updated to the new location.
     * 
     * **Second scenario:** Re-assign a subset of the line items belonging to a fulfillment order to a new location.
     * You can specify a subset of line items using the `fulfillmentOrderLineItems` parameter
     * (available as of the `2023-04` API version),
     * or specify that the original fulfillment order contains line items which have already been fulfilled.
     * 
     * If the new location is already assigned to another active fulfillment order, on the same order, then
     * a new fulfillment order is created. The existing fulfillment order is closed and line items are recreated
     * in a new fulfillment order.
     * 
     */
    fulfillmentOrderMove?: FulfillmentOrderMovePayload;
    
    /**
     * Marks a scheduled fulfillment order as open.
     */
    fulfillmentOrderOpen?: FulfillmentOrderOpenPayload;
    
    /**
     * Rejects a cancellation request sent to a fulfillment service for a fulfillment order.
     */
    fulfillmentOrderRejectCancellationRequest?: FulfillmentOrderRejectCancellationRequestPayload;
    
    /**
     * Rejects a fulfillment request sent to a fulfillment service for a fulfillment order.
     */
    fulfillmentOrderRejectFulfillmentRequest?: FulfillmentOrderRejectFulfillmentRequestPayload;
    
    /**
     * Releases the fulfillment hold on a fulfillment order.
     */
    fulfillmentOrderReleaseHold?: FulfillmentOrderReleaseHoldPayload;
    
    /**
     * Reschedules a scheduled fulfillment order.
     * 
     * Updates the value of the `fulfillAt` field on a scheduled fulfillment order.
     * 
     * The fulfillment order will be marked as ready for fulfillment at this date and time.
     * 
     */
    fulfillmentOrderReschedule?: FulfillmentOrderReschedulePayload;
    
    /**
     * Splits a fulfillment order or orders based on line item inputs and quantities.
     */
    fulfillmentOrderSplit?: FulfillmentOrderSplitPayload;
    
    /**
     * Sends a cancellation request to the fulfillment service of a fulfillment order.
     */
    fulfillmentOrderSubmitCancellationRequest?: FulfillmentOrderSubmitCancellationRequestPayload;
    
    /**
     * Sends a fulfillment request to the fulfillment service of a fulfillment order.
     */
    fulfillmentOrderSubmitFulfillmentRequest?: FulfillmentOrderSubmitFulfillmentRequestPayload;
    
    /**
     * Releases the fulfillment holds on a list of fulfillment orders.
     */
    fulfillmentOrdersReleaseHolds?: FulfillmentOrdersReleaseHoldsPayload;
    
    /**
     * Sets the latest date and time by which the fulfillment orders need to be fulfilled.
     */
    fulfillmentOrdersSetFulfillmentDeadline?: FulfillmentOrdersSetFulfillmentDeadlinePayload;
    
    /**
     * Creates a fulfillment service.
     * 
     * ## Fulfillment service location
     * 
     * When creating a fulfillment service, a new location will be automatically created on the shop
     * and will be associated with this fulfillment service.
     * This location will be named after the fulfillment service and inherit the shop's address.
     * 
     * If you are using API version `2023-10` or later, and you need to specify custom attributes for the fulfillment service location
     * (for example, to change its address to a country different from the shop's country),
     * use the
     * [LocationEdit](https://shopify.dev/api/admin-graphql/latest/mutations/locationEdit)
     * mutation after creating the fulfillment service.
     * 
     */
    fulfillmentServiceCreate?: FulfillmentServiceCreatePayload;
    
    /**
     * Deletes a fulfillment service.
     */
    fulfillmentServiceDelete?: FulfillmentServiceDeletePayload;
    
    /**
     * Updates a fulfillment service.
     * 
     * If you are using API version `2023-10` or later,
     * and you need to update the location managed by the fulfillment service
     * (for example, to change the address of a fulfillment service),
     * use the
     * [LocationEdit](https://shopify.dev/api/admin-graphql/latest/mutations/locationEdit)
     * mutation.
     * 
     */
    fulfillmentServiceUpdate?: FulfillmentServiceUpdatePayload;
    
    /**
     * Updates tracking information for a fulfillment.
     */
    fulfillmentTrackingInfoUpdateV2?: FulfillmentTrackingInfoUpdateV2Payload;
    
    /**
     * Create a gift card.
     */
    giftCardCreate?: GiftCardCreatePayload;
    
    /**
     * Disable a gift card. A disabled gift card cannot be used by a customer. A disabled gift card cannot be re-enabled.
     * 
     */
    giftCardDisable?: GiftCardDisablePayload;
    
    /**
     * Update a gift card.
     */
    giftCardUpdate?: GiftCardUpdatePayload;
    
    /**
     * Activate an inventory item at a location.
     */
    inventoryActivate?: InventoryActivatePayload;
    
    /**
     * Apply changes to inventory quantities.
     */
    inventoryAdjustQuantities?: InventoryAdjustQuantitiesPayload;
    
    /**
     * Adjusts the inventory by a certain quantity.
     * @deprecated Use `inventoryAdjustQuantities` instead.
     */
    inventoryAdjustQuantity?: InventoryAdjustQuantityPayload;
    
    /**
     * Adjusts the inventory at a location for multiple inventory items.
     * @deprecated Use `inventoryAdjustQuantities` instead.
     */
    inventoryBulkAdjustQuantityAtLocation?: InventoryBulkAdjustQuantityAtLocationPayload;
    
    /**
     * Modify the activation status of an inventory item at locations. Activating an inventory item at a particular location allows that location to stock that inventory item. Deactivating an inventory item at a location removes the inventory item's quantities and turns off the inventory item from that location.
     */
    inventoryBulkToggleActivation?: InventoryBulkToggleActivationPayload;
    
    /**
     * Removes an inventory item's quantities from a location, and turns off inventory at the location.
     */
    inventoryDeactivate?: InventoryDeactivatePayload;
    
    /**
     * Updates an inventory item.
     */
    inventoryItemUpdate?: InventoryItemUpdatePayload;
    
    /**
     * Moves inventory between inventory quantity names at a single location.
     */
    inventoryMoveQuantities?: InventoryMoveQuantitiesPayload;
    
    /**
     * Set inventory on-hand quantities using absolute values.
     */
    inventorySetOnHandQuantities?: InventorySetOnHandQuantitiesPayload;
    
    /**
     * Set up scheduled changes of inventory items.
     * 
     */
    inventorySetScheduledChanges?: InventorySetScheduledChangesPayload;
    
    /**
     * Activates a location.
     */
    locationActivate?: LocationActivatePayload;
    
    /**
     * Adds a new location.
     */
    locationAdd?: LocationAddPayload;
    
    /**
     * Deactivates a location and moves inventory, pending orders, and moving transfers to a destination location.
     */
    locationDeactivate?: LocationDeactivatePayload;
    
    /**
     * Deletes a location.
     */
    locationDelete?: LocationDeletePayload;
    
    /**
     * Edits an existing location.
     * 
     * [As of the 2023-10 API version](https://shopify.dev/changelog/apps-can-now-change-the-name-and-address-of-their-fulfillment-service-locations), apps can change the name and address of their fulfillment service locations.
     * 
     */
    locationEdit?: LocationEditPayload;
    
    /**
     * Disables local pickup for a location.
     */
    locationLocalPickupDisable?: LocationLocalPickupDisablePayload;
    
    /**
     * Enables local pickup for a location.
     */
    locationLocalPickupEnable?: LocationLocalPickupEnablePayload;
    
    /**
     * Creates a new market.
     */
    marketCreate?: MarketCreatePayload;
    
    /**
     * Updates currency settings of a market.
     */
    marketCurrencySettingsUpdate?: MarketCurrencySettingsUpdatePayload;
    
    /**
     * Deletes a market definition.
     */
    marketDelete?: MarketDeletePayload;
    
    /**
     * Creates or updates market localizations.
     */
    marketLocalizationsRegister?: MarketLocalizationsRegisterPayload;
    
    /**
     * Deletes market localizations.
     */
    marketLocalizationsRemove?: MarketLocalizationsRemovePayload;
    
    /**
     * Deletes a market region.
     */
    marketRegionDelete?: MarketRegionDeletePayload;
    
    /**
     * Creates regions that belong to an existing market.
     */
    marketRegionsCreate?: MarketRegionsCreatePayload;
    
    /**
     * Deletes a list of market regions.
     */
    marketRegionsDelete?: MarketRegionsDeletePayload;
    
    /**
     * Updates the properties of a market.
     */
    marketUpdate?: MarketUpdatePayload;
    
    /**
     * Creates a web presence for a market.
     */
    marketWebPresenceCreate?: MarketWebPresenceCreatePayload;
    
    /**
     * Deletes a market web presence.
     */
    marketWebPresenceDelete?: MarketWebPresenceDeletePayload;
    
    /**
     * Updates a market web presence.
     */
    marketWebPresenceUpdate?: MarketWebPresenceUpdatePayload;
    
    /**
     * Deletes all external marketing activities. Deletion is performed by a background job, as it may take a bit of time to complete if a large number of activities are to be deleted. Attempting to create or modify external activities before the job has completed will result in the create/update/upsert mutation returning an error.
     */
    marketingActivitiesDeleteAllExternal?: MarketingActivitiesDeleteAllExternalPayload;
    
    /**
     * Create new marketing activity.
     */
    marketingActivityCreate?: MarketingActivityCreatePayload;
    
    /**
     * Creates a new external marketing activity.
     */
    marketingActivityCreateExternal?: MarketingActivityCreateExternalPayload;
    
    /**
     * Deletes an external marketing activity.
     */
    marketingActivityDeleteExternal?: MarketingActivityDeleteExternalPayload;
    
    /**
     * Updates a marketing activity with the latest information.
     */
    marketingActivityUpdate?: MarketingActivityUpdatePayload;
    
    /**
     * Update an external marketing activity.
     */
    marketingActivityUpdateExternal?: MarketingActivityUpdateExternalPayload;
    
    /**
     * Creates a new external marketing activity or updates an existing one. When optional fields are absent or null, associated information will be removed from an existing marketing activity.
     */
    marketingActivityUpsertExternal?: MarketingActivityUpsertExternalPayload;
    
    /**
     * Creates a new marketing engagement for a marketing activity or a marketing channel.
     */
    marketingEngagementCreate?: MarketingEngagementCreatePayload;
    
    /**
     * Marks channel-level engagement data such that it no longer appears in reports.
     *           Activity-level data cannot be deleted directly, instead the MarketingActivity itself should be deleted to
     *           hide it from reports.
     */
    marketingEngagementsDelete?: MarketingEngagementsDeletePayload;
    
    /**
     * Creates a metafield definition. Any metafields existing under the same owner type, namespace, and key will be
     * checked against this definition and will have their type updated accordingly. For metafields that are not
     * valid, they will remain unchanged but any attempts to update them must align with this definition.
     * 
     */
    metafieldDefinitionCreate?: MetafieldDefinitionCreatePayload;
    
    /**
     * Delete a metafield definition.
     * Optionally deletes all associated metafields asynchronously when specified.
     * 
     */
    metafieldDefinitionDelete?: MetafieldDefinitionDeletePayload;
    
    /**
     * You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.
     * The order of your pinned metafield definitions determines the order in which your metafields are displayed
     * on the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.
     * 
     */
    metafieldDefinitionPin?: MetafieldDefinitionPinPayload;
    
    /**
     * You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.
     * The order of your pinned metafield definitions determines the order in which your metafields are displayed
     * on the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.
     * 
     */
    metafieldDefinitionUnpin?: MetafieldDefinitionUnpinPayload;
    
    /**
     * Updates a metafield definition.
     * 
     */
    metafieldDefinitionUpdate?: MetafieldDefinitionUpdatePayload;
    
    /**
     * Deletes a metafield.
     */
    metafieldDelete?: MetafieldDeletePayload;
    
    /**
     * Creates a `MetafieldStorefrontVisibility` record to make all metafields that belong to the specified resource
     * and have the established `namespace` and `key` combination visible in the Storefront API.
     * 
     * @deprecated This mutation will be removed in a future version. Use the `metafieldDefinitionCreate` or `metafieldDefinitionUpdate` mutations with `access.storefront` set instead.
     * 
     */
    metafieldStorefrontVisibilityCreate?: MetafieldStorefrontVisibilityCreatePayload;
    
    /**
     * Deletes a `MetafieldStorefrontVisibility` record. All metafields that belongs to the specified record will no
     * longer be visible in the Storefront API.
     * 
     * @deprecated This mutation will be removed in a future version. Use the `metafieldDefinitionUpdate` mutation with `access.storefront` set instead.
     * 
     */
    metafieldStorefrontVisibilityDelete?: MetafieldStorefrontVisibilityDeletePayload;
    
    /**
     * Sets metafield values. Metafield values will be set regardless if they were previously created or not.
     * 
     * Allows a maximum of 25 metafields to be set at a time.
     * 
     * Note that this operation is atomic as of `2023-01`, meaning no changes are persisted if any error is
     * encountered.
     * 
     */
    metafieldsSet?: MetafieldsSetPayload;
    
    /**
     * Asynchronously delete metaobjects and their associated metafields in bulk.
     */
    metaobjectBulkDelete?: MetaobjectBulkDeletePayload;
    
    /**
     * Creates a new metaobject.
     */
    metaobjectCreate?: MetaobjectCreatePayload;
    
    /**
     * Creates a new metaobject definition.
     */
    metaobjectDefinitionCreate?: MetaobjectDefinitionCreatePayload;
    
    /**
     * Deletes the specified metaobject definition.
     * Also deletes all related metafield definitions, metaobjects, and metafields asynchronously.
     * 
     */
    metaobjectDefinitionDelete?: MetaobjectDefinitionDeletePayload;
    
    /**
     * Updates a metaobject definition with new settings and metafield definitions.
     */
    metaobjectDefinitionUpdate?: MetaobjectDefinitionUpdatePayload;
    
    /**
     * Deletes the specified metaobject and its associated metafields.
     */
    metaobjectDelete?: MetaobjectDeletePayload;
    
    /**
     * Updates an existing metaobject.
     */
    metaobjectUpdate?: MetaobjectUpdatePayload;
    
    /**
     * Retrieves a metaobject by handle, then updates it with the provided input values.
     * If no matching metaobject is found, a new metaobject is created with the provided input values.
     * 
     */
    metaobjectUpsert?: MetaobjectUpsertPayload;
    
    /**
     * Cancels an order.
     */
    orderCancel?: OrderCancelPayload;
    
    /**
     * Captures payment for an authorized transaction on an order. An order can only be captured if it has a successful authorization transaction. Capturing an order will claim the money reserved by the authorization. orderCapture can be used to capture multiple times as long as the OrderTransaction is multicapturable. To capture a partial payment, the included `amount` value should be less than the total order amount. Multicapture is available only to stores on a Shopify Plus plan.
     */
    orderCapture?: OrderCapturePayload;
    
    /**
     * Closes an open order.
     * 
     */
    orderClose?: OrderClosePayload;
    
    /**
     * Creates a payment for an order by mandate.
     */
    orderCreateMandatePayment?: OrderCreateMandatePaymentPayload;
    
    /**
     * Adds a custom line item to an existing order. For example, you could add a gift wrapping service as a [custom line item](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing#add-a-custom-line-item). To learn how to edit existing orders, refer to [Edit an existing order with Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
     */
    orderEditAddCustomItem?: OrderEditAddCustomItemPayload;
    
    /**
     * Adds a discount to a line item on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
     */
    orderEditAddLineItemDiscount?: OrderEditAddLineItemDiscountPayload;
    
    /**
     * Adds a line item from an existing product variant.
     */
    orderEditAddVariant?: OrderEditAddVariantPayload;
    
    /**
     * Starts editing an order. Mutations are operating on `OrderEdit`.
     * All order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.
     * 
     */
    orderEditBegin?: OrderEditBeginPayload;
    
    /**
     * Applies and saves staged changes to an order. Mutations are operating on `OrderEdit`.
     * All order edits start with `orderEditBegin`, have any number of `orderEdit`* mutations made, and end with `orderEditCommit`.
     * 
     */
    orderEditCommit?: OrderEditCommitPayload;
    
    /**
     * Removes a discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
     */
    orderEditRemoveDiscount?: OrderEditRemoveDiscountPayload;
    
    /**
     * Removes a line item discount that was applied as part of an order edit.
     * @deprecated Use generic OrderEditRemoveDiscount mutation instead.
     */
    orderEditRemoveLineItemDiscount?: OrderEditRemoveLineItemDiscountPayload;
    
    /**
     * Sets the quantity of a line item on an order that is being edited. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
     */
    orderEditSetQuantity?: OrderEditSetQuantityPayload;
    
    /**
     * Updates a manual line level discount on the current order edit. For more information on how to use the GraphQL Admin API to edit an existing order, refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
     */
    orderEditUpdateDiscount?: OrderEditUpdateDiscountPayload;
    
    /**
     * Sends an email invoice for an order.
     */
    orderInvoiceSend?: OrderInvoiceSendPayload;
    
    /**
     * Marks an order as paid. You can only mark an order as paid if it isn't already fully paid.
     * 
     */
    orderMarkAsPaid?: OrderMarkAsPaidPayload;
    
    /**
     * Opens a closed order.
     * 
     */
    orderOpen?: OrderOpenPayload;
    
    /**
     * Updates the fields of an order.
     */
    orderUpdate?: OrderUpdatePayload;
    
    /**
     * Activates and deactivates payment customizations.
     */
    paymentCustomizationActivation?: PaymentCustomizationActivationPayload;
    
    /**
     * Creates a payment customization.
     */
    paymentCustomizationCreate?: PaymentCustomizationCreatePayload;
    
    /**
     * Deletes a payment customization.
     */
    paymentCustomizationDelete?: PaymentCustomizationDeletePayload;
    
    /**
     * Updates a payment customization.
     */
    paymentCustomizationUpdate?: PaymentCustomizationUpdatePayload;
    
    /**
     * Sends an email payment reminder for a payment schedule.
     */
    paymentReminderSend?: PaymentReminderSendPayload;
    
    /**
     * Create payment terms on an order. To create payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.
     */
    paymentTermsCreate?: PaymentTermsCreatePayload;
    
    /**
     * Delete payment terms for an order. To delete payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.
     */
    paymentTermsDelete?: PaymentTermsDeletePayload;
    
    /**
     * Update payment terms on an order. To update payment terms on a draft order, use a draft order mutation and include the request with the `DraftOrderInput`.
     */
    paymentTermsUpdate?: PaymentTermsUpdatePayload;
    
    /**
     * Creates a price list. You can use the `priceListCreate` mutation to create a new price list for a country. This enables you to sell your products with international pricing.
     */
    priceListCreate?: PriceListCreatePayload;
    
    /**
     * Deletes a price list. For example, you can delete a price list so that it no longer applies for products in the associated market.
     */
    priceListDelete?: PriceListDeletePayload;
    
    /**
     * Creates or updates fixed prices on a price list. You can use the `priceListFixedPricesAdd` mutation to set a fixed price for specific product variants. This lets you change product variant pricing on a per country basis. Any existing fixed price list prices for these variants will be overwritten.
     */
    priceListFixedPricesAdd?: PriceListFixedPricesAddPayload;
    
    /**
     * Updates the fixed prices for all variants for a product on a price list. You can use the `priceListFixedPricesByProductUpdate` mutation to set or remove a fixed price for all variants of a product associated with the price list.
     */
    priceListFixedPricesByProductUpdate?: PriceListFixedPricesByProductUpdatePayload;
    
    /**
     * Deletes specific fixed prices from a price list using a product variant ID. You can use the `priceListFixedPricesDelete` mutation to delete a set of fixed prices from a price list. After deleting the set of fixed prices from the price list, the price of each product variant reverts to the original price that was determined by the price list adjustment.
     */
    priceListFixedPricesDelete?: PriceListFixedPricesDeletePayload;
    
    /**
     * Updates fixed prices on a price list. You can use the `priceListFixedPricesUpdate` mutation to set a fixed price for specific product variants or to delete prices for variants associated with the price list.
     */
    priceListFixedPricesUpdate?: PriceListFixedPricesUpdatePayload;
    
    /**
     * Updates a price list.
     * If you modify the currency, then any fixed prices set on the price list will be deleted.
     * 
     */
    priceListUpdate?: PriceListUpdatePayload;
    
    /**
     * Activate a price rule.
     * @deprecated Use `discountCodeActivate` instead.
     */
    priceRuleActivate?: PriceRuleActivatePayload;
    
    /**
     * Create a price rule using the input.
     * @deprecated Use `discountCodeBasicCreate` instead.
     */
    priceRuleCreate?: PriceRuleCreatePayload;
    
    /**
     * Deactivate a price rule.
     * @deprecated Use `discountCodeDeactivate` instead.
     */
    priceRuleDeactivate?: PriceRuleDeactivatePayload;
    
    /**
     * Delete a price rule.
     * @deprecated Use `discountCodeDelete` instead.
     */
    priceRuleDelete?: PriceRuleDeletePayload;
    
    /**
     * Create a discount code for a price rule.
     * @deprecated Use `discountRedeemCodeBulkAdd` instead.
     */
    priceRuleDiscountCodeCreate?: PriceRuleDiscountCodeCreatePayload;
    
    /**
     * Update a discount code for a price rule.
     * @deprecated Use `discountCodeBasicUpdate` instead.
     */
    priceRuleDiscountCodeUpdate?: PriceRuleDiscountCodeUpdatePayload;
    
    /**
     * Updates a price rule using its ID and an input.
     * @deprecated Use `discountCodeBasicUpdate` instead.
     */
    priceRuleUpdate?: PriceRuleUpdatePayload;
    
    /**
     * Deletes a private metafield.
     * Private metafields are automatically deleted when the app that created them is uninstalled.
     * 
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafieldDelete?: PrivateMetafieldDeletePayload;
    
    /**
     * Creates or updates a private metafield. Use private metafields when you don't want the metafield data to be accessible by merchants or other apps.
     * Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.
     * 
     * An application can create a maximum of 10 private metafields per shop resource.
     * 
     * @deprecated Metafields created using a reserved namespace are private by default. See our guide for
     * [migrating private metafields](https://shopify.dev/docs/apps/custom-data/metafields/migrate-private-metafields).
     * 
     */
    privateMetafieldUpsert?: PrivateMetafieldUpsertPayload;
    
    /**
     * Appends images to a product.
     * @deprecated Use `productCreateMedia` instead.
     */
    productAppendImages?: ProductAppendImagesPayload;
    
    /**
     * Changes the status of a product. This allows you to set the availability of the product across all channels.
     */
    productChangeStatus?: ProductChangeStatusPayload;
    
    /**
     * Creates a product.
     * 
     * If you need to create a product with many
     * [variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
     * that are active at several
     * [locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
     * especially with a lot of
     * [collections](https://shopify.dev/api/admin-graphql/latest/mutations/productCreate#field-productinput-collectionstojoin)
     * and
     * [tags](https://shopify.dev/api/admin-graphql/latest/mutations/productCreate#field-productinput-tags),
     * then you should first create the product with just the variants.
     * 
     * After the product is created, you can activate the variants at locations
     * and add the other related objects to the product. This reduces the size of each mutation and increases the likelihood that it will
     * complete before the operation times out.
     * 
     * The following example shows how you might break up product creation and object association into multiple steps:
     * 
     * 1. Create the product with variants. Don't specify any tags or collections on the product, and don't specify
     * [inventory quantities](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput#field-productvariantinput-inventoryquantities)
     * for each variant.
     * 
     * 2. After the product is created, add tags to the product using the
     * [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsAdd) mutation, and add collections using the
     * [collectionsAddProducts](https://shopify.dev/api/admin-graphql/latest/mutations/collectionAddProducts) mutation.
     * 
     * 3. Use the [inventoryBulkToggleActivation](https://shopify.dev/api/admin-graphql/latest/mutations/inventoryBulkToggleActivation) mutation
     * on each [inventory item](https://shopify.dev/api/admin-graphql/latest/objects/InventoryItem) to activate it at the appropriate locations.
     * 
     * 4. After activating the variants at the locations, adjust inventory quantities at each location using the
     * [inventoryBulkAdjustQuantityAtLocation](https://shopify.dev/api/admin-graphql/latest/mutations/inventoryBulkAdjustQuantityAtLocation) mutation.
     * 
     */
    productCreate?: ProductCreatePayload;
    
    /**
     * Creates media for a product.
     */
    productCreateMedia?: ProductCreateMediaPayload;
    
    /**
     * Deletes a product, including all associated variants and media.
     * 
     * As of API version `2023-01`, if you need to delete a large product, such as one that has many
     * [variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
     * that are active at several
     * [locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
     * you may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous
     * [ProductDeleteAsync](https://shopify.dev/api/admin-graphql/latest/mutations/productDeleteAsync)
     * mutation.
     * 
     */
    productDelete?: ProductDeletePayload;
    
    /**
     * Deletes a product asynchronously, including all associated variants and media.
     * 
     */
    productDeleteAsync?: ProductDeleteAsyncPayload;
    
    /**
     * Removes product images from the product.
     * @deprecated Use `productDeleteMedia` instead.
     */
    productDeleteImages?: ProductDeleteImagesPayload;
    
    /**
     * Deletes media for a product.
     */
    productDeleteMedia?: ProductDeleteMediaPayload;
    
    /**
     * Duplicates a product.
     * 
     * As of API version `2023-01`, if you need to duplicate a large product, such as one that has many
     * [variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
     * that are active at several
     * [locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
     * you may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous
     * [ProductDuplicateAsyncV2](https://shopify.dev/api/admin-graphql/latest/mutations/productDuplicateAsyncV2)
     * mutation.
     * 
     */
    productDuplicate?: ProductDuplicatePayload;
    
    /**
     * Asynchronously duplicate a single product.
     * 
     * @deprecated Use `productDuplicateAsyncV2` instead.
     */
    productDuplicateAsync?: ProductDuplicateAsyncPayload;
    
    /**
     * Asynchronously duplicate a single product.
     * 
     */
    productDuplicateAsyncV2?: ProductDuplicateAsyncV2Payload;
    
    /**
     * Creates a product feed for a specific publication.
     */
    productFeedCreate?: ProductFeedCreatePayload;
    
    /**
     * Deletes a product feed for a specific publication.
     */
    productFeedDelete?: ProductFeedDeletePayload;
    
    /**
     * Runs the full product sync for a given shop.
     */
    productFullSync?: ProductFullSyncPayload;
    
    /**
     * Updates an image of a product.
     * @deprecated Use `productUpdateMedia` instead.
     */
    productImageUpdate?: ProductImageUpdatePayload;
    
    /**
     * Adds multiple selling plan groups to a product.
     * 
     */
    productJoinSellingPlanGroups?: ProductJoinSellingPlanGroupsPayload;
    
    /**
     * Removes multiple groups from a product.
     * 
     */
    productLeaveSellingPlanGroups?: ProductLeaveSellingPlanGroupsPayload;
    
    /**
     * Publishes a product. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can only be published on online stores.
     * @deprecated Use `publishablePublish` instead.
     */
    productPublish?: ProductPublishPayload;
    
    /**
     * Asynchronously reorders a set of images for a given product.
     * @deprecated Use `productReorderMedia` instead.
     */
    productReorderImages?: ProductReorderImagesPayload;
    
    /**
     * Asynchronously reorders the media attached to a product.
     */
    productReorderMedia?: ProductReorderMediaPayload;
    
    /**
     * Unpublishes a product.
     * @deprecated Use `publishableUnpublish` instead.
     */
    productUnpublish?: ProductUnpublishPayload;
    
    /**
     * Updates a product. If you update a product and only include some variants in the update,
     * then any variants not included will be deleted. To safely manage variants without the risk of
     * deleting excluded variants, use
     * [productVariantsBulkUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantsbulkupdate).
     * If you want to update a single variant, then use
     * [productVariantUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantupdate).
     * 
     */
    productUpdate?: ProductUpdatePayload;
    
    /**
     * Updates media for a product.
     */
    productUpdateMedia?: ProductUpdateMediaPayload;
    
    /**
     * Appends media from a product to variants of the product.
     */
    productVariantAppendMedia?: ProductVariantAppendMediaPayload;
    
    /**
     * Creates a product variant.
     */
    productVariantCreate?: ProductVariantCreatePayload;
    
    /**
     * Deletes a product variant.
     */
    productVariantDelete?: ProductVariantDeletePayload;
    
    /**
     * Detaches media from product variants.
     */
    productVariantDetachMedia?: ProductVariantDetachMediaPayload;
    
    /**
     * Adds multiple selling plan groups to a product variant.
     * 
     */
    productVariantJoinSellingPlanGroups?: ProductVariantJoinSellingPlanGroupsPayload;
    
    /**
     * Remove multiple groups from a product variant.
     * 
     */
    productVariantLeaveSellingPlanGroups?: ProductVariantLeaveSellingPlanGroupsPayload;
    
    /**
     * Creates new bundles, updates existing bundles, and removes bundle components for one or multiple bundles.
     */
    productVariantRelationshipBulkUpdate?: ProductVariantRelationshipBulkUpdatePayload;
    
    /**
     * Updates a product variant.
     */
    productVariantUpdate?: ProductVariantUpdatePayload;
    
    /**
     * Creates product variants in bulk. If you want to create a single variant, then use
     * [productVariantCreate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantcreate).
     * 
     */
    productVariantsBulkCreate?: ProductVariantsBulkCreatePayload;
    
    /**
     * Deletes product variants in bulk. If you want to delete a single variant, then use
     * [productVariantDelete](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantdelete).
     * 
     */
    productVariantsBulkDelete?: ProductVariantsBulkDeletePayload;
    
    /**
     * Reorder product variants in bulk.
     */
    productVariantsBulkReorder?: ProductVariantsBulkReorderPayload;
    
    /**
     * Updates product variants in bulk. If you want to update a single variant, then use
     * [productVariantUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantupdate).
     * 
     */
    productVariantsBulkUpdate?: ProductVariantsBulkUpdatePayload;
    
    /**
     * Updates the server pixel to connect to a Google PubSub endpoint.
     * Running this mutation deletes any previous subscriptions for the server pixel.
     * 
     */
    pubSubServerPixelUpdate?: PubSubServerPixelUpdatePayload;
    
    /**
     * Creates a new Google Cloud Pub/Sub webhook subscription.
     */
    pubSubWebhookSubscriptionCreate?: PubSubWebhookSubscriptionCreatePayload;
    
    /**
     * Updates a Google Cloud Pub/Sub webhook subscription.
     */
    pubSubWebhookSubscriptionUpdate?: PubSubWebhookSubscriptionUpdatePayload;
    
    /**
     * Creates a publication.
     * 
     */
    publicationCreate?: PublicationCreatePayload;
    
    /**
     * Deletes a publication.
     * 
     */
    publicationDelete?: PublicationDeletePayload;
    
    /**
     * Updates a publication.
     * 
     */
    publicationUpdate?: PublicationUpdatePayload;
    
    /**
     * Publishes a resource to a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores.
     */
    publishablePublish?: PublishablePublishPayload;
    
    /**
     * Publishes a resource to current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`. Products that are sold exclusively on subscription (`requiresSellingPlan: true`) can be published only on online stores.
     */
    publishablePublishToCurrentChannel?: PublishablePublishToCurrentChannelPayload;
    
    /**
     * Unpublishes a resource from a channel. If the resource is a product, then it's visible in the channel only if the product status is `active`.
     */
    publishableUnpublish?: PublishableUnpublishPayload;
    
    /**
     * Unpublishes a resource from the current channel. If the resource is a product, then it's visible in the channel only if the product status is `active`.
     */
    publishableUnpublishToCurrentChannel?: PublishableUnpublishToCurrentChannelPayload;
    
    /**
     * Updates quantity pricing on a price list. You can use the `quantityPricingByVariantUpdate` mutation to set fixed prices, quantity rules, and quantity price breaks. This mutation does not allow partial successes. If any of the requested resources fail to update, none of the requested resources will be updated. Delete operations are executed before create operations.
     */
    quantityPricingByVariantUpdate?: QuantityPricingByVariantUpdatePayload;
    
    /**
     * Creates or updates existing quantity rules on a price list.
     * You can use the `quantityRulesAdd` mutation to set order level minimums, maximumums and increments for specific product variants.
     * 
     */
    quantityRulesAdd?: QuantityRulesAddPayload;
    
    /**
     * Deletes specific quantity rules from a price list using a product variant ID.
     * You can use the `quantityRulesDelete` mutation to delete a set of quantity rules from a price list.
     * 
     */
    quantityRulesDelete?: QuantityRulesDeletePayload;
    
    /**
     * Creates a refund.
     */
    refundCreate?: RefundCreatePayload;
    
    /**
     * Approves a customer's return request.
     * If this mutation is successful, then the `Return.status` field of the
     * approved return is set to `OPEN`.
     * 
     */
    returnApproveRequest?: ReturnApproveRequestPayload;
    
    /**
     * Cancels a return and restores the items back to being fulfilled.
     * Canceling a return is only available before any work has been done
     * on the return (such as an inspection or refund).
     * 
     */
    returnCancel?: ReturnCancelPayload;
    
    /**
     * Indicates a return is complete, either when a refund has been made and items restocked,
     * or simply when it has been marked as returned in the system.
     * 
     */
    returnClose?: ReturnClosePayload;
    
    /**
     * Creates a return.
     */
    returnCreate?: ReturnCreatePayload;
    
    /**
     * Declines a return on an order.
     * When a return is declined, each `ReturnLineItem.fulfillmentLineItem` can be associated to a new return.
     * Use the `ReturnCreate` or `ReturnRequest` mutation to initiate a new return.
     * 
     */
    returnDeclineRequest?: ReturnDeclineRequestPayload;
    
    /**
     * Refunds a return when its status is `OPEN` or `CLOSED` and associates it with the related return request.
     */
    returnRefund?: ReturnRefundPayload;
    
    /**
     * Reopens a closed return.
     */
    returnReopen?: ReturnReopenPayload;
    
    /**
     * A customer's return request that hasn't been approved or declined.
     * This mutation sets the value of the `Return.status` field to `REQUESTED`.
     * To create a return that has the `Return.status` field set to `OPEN`, use the `returnCreate` mutation.
     * 
     */
    returnRequest?: ReturnRequestPayload;
    
    /**
     * Creates a new reverse delivery with associated external shipping information.
     */
    reverseDeliveryCreateWithShipping?: ReverseDeliveryCreateWithShippingPayload;
    
    /**
     * Disposes reverse delivery line items for a reverse delivery on the same shop.
     * 
     * @deprecated `reverseDeliveryDispose` will be removed in API version 2025-01. Use `reverseFulfillmentOrderDispose` instead.
     */
    reverseDeliveryDispose?: ReverseDeliveryDisposePayload;
    
    /**
     * Updates a reverse delivery with associated external shipping information.
     */
    reverseDeliveryShippingUpdate?: ReverseDeliveryShippingUpdatePayload;
    
    /**
     * Disposes reverse fulfillment order line items.
     * 
     */
    reverseFulfillmentOrderDispose?: ReverseFulfillmentOrderDisposePayload;
    
    /**
     * Creates a saved search.
     */
    savedSearchCreate?: SavedSearchCreatePayload;
    
    /**
     * Delete a saved search.
     */
    savedSearchDelete?: SavedSearchDeletePayload;
    
    /**
     * Updates a saved search.
     */
    savedSearchUpdate?: SavedSearchUpdatePayload;
    
    /**
     * <div class="note"><h4>Theme app extensions</h4>
     *   <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
     * 
     * <div class="note"><h4>Script tag deprecation</h4>
     *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
     * 
     * 
     * Creates a new script tag.
     * 
     */
    scriptTagCreate?: ScriptTagCreatePayload;
    
    /**
     * <div class="note"><h4>Theme app extensions</h4>
     *   <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
     * 
     * <div class="note"><h4>Script tag deprecation</h4>
     *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
     * 
     * 
     * Deletes a script tag.
     * 
     */
    scriptTagDelete?: ScriptTagDeletePayload;
    
    /**
     * <div class="note"><h4>Theme app extensions</h4>
     *   <p>Your app might not pass App Store review if it uses script tags instead of theme app extensions. All new apps, and apps that integrate with Online Store 2.0 themes, should use theme app extensions, such as app blocks or app embed blocks. Script tags are an alternative you can use with only vintage themes. <a href="/apps/online-store#what-integration-method-should-i-use" target="_blank">Learn more</a>.</p></div>
     * 
     * <div class="note"><h4>Script tag deprecation</h4>
     *   <p>Script tags will be sunset for the <b>Order status</b> page on August 28, 2025. <a href="https://www.shopify.com/plus/upgrading-to-checkout-extensibility">Upgrade to Checkout Extensibility</a> before this date. <a href="/docs/api/liquid/objects#script">Shopify Scripts</a> will continue to work alongside Checkout Extensibility until August 28, 2025.</p></div>
     * 
     * 
     * Updates a script tag.
     * 
     */
    scriptTagUpdate?: ScriptTagUpdatePayload;
    
    /**
     * Creates a segment.
     */
    segmentCreate?: SegmentCreatePayload;
    
    /**
     * Deletes a segment.
     */
    segmentDelete?: SegmentDeletePayload;
    
    /**
     * Updates a segment.
     */
    segmentUpdate?: SegmentUpdatePayload;
    
    /**
     * Adds multiple product variants to a selling plan group.
     * 
     */
    sellingPlanGroupAddProductVariants?: SellingPlanGroupAddProductVariantsPayload;
    
    /**
     * Adds multiple products to a selling plan group.
     * 
     */
    sellingPlanGroupAddProducts?: SellingPlanGroupAddProductsPayload;
    
    /**
     * Creates a Selling Plan Group.
     */
    sellingPlanGroupCreate?: SellingPlanGroupCreatePayload;
    
    /**
     * Delete a Selling Plan Group.
     */
    sellingPlanGroupDelete?: SellingPlanGroupDeletePayload;
    
    /**
     * Removes multiple product variants from a selling plan group.
     * 
     */
    sellingPlanGroupRemoveProductVariants?: SellingPlanGroupRemoveProductVariantsPayload;
    
    /**
     * Removes multiple products from a selling plan group.
     * 
     */
    sellingPlanGroupRemoveProducts?: SellingPlanGroupRemoveProductsPayload;
    
    /**
     * Update a Selling Plan Group.
     */
    sellingPlanGroupUpdate?: SellingPlanGroupUpdatePayload;
    
    /**
     * Creates a new unconfigured server pixel. A single server pixel can exist for an app and shop combination. If you call this mutation when a server pixel already exists, then an error will return.
     */
    serverPixelCreate?: ServerPixelCreatePayload;
    
    /**
     * Deletes the Server Pixel associated with the current app & shop.
     */
    serverPixelDelete?: ServerPixelDeletePayload;
    
    /**
     * Deletes a shipping package.
     */
    shippingPackageDelete?: ShippingPackageDeletePayload;
    
    /**
     * Set a shipping package as the default.
     * The default shipping package is the one used to calculate shipping costs on checkout.
     * 
     */
    shippingPackageMakeDefault?: ShippingPackageMakeDefaultPayload;
    
    /**
     * Updates a shipping package.
     */
    shippingPackageUpdate?: ShippingPackageUpdatePayload;
    
    /**
     * Deletes a locale for a shop. This also deletes all translations of this locale.
     */
    shopLocaleDisable?: ShopLocaleDisablePayload;
    
    /**
     * Adds a locale for a shop. The newly added locale is in the unpublished state.
     */
    shopLocaleEnable?: ShopLocaleEnablePayload;
    
    /**
     * Updates a locale for a shop.
     */
    shopLocaleUpdate?: ShopLocaleUpdatePayload;
    
    /**
     * Updates a shop policy.
     */
    shopPolicyUpdate?: ShopPolicyUpdatePayload;
    
    /**
     * The `ResourceFeedback` object lets your app report the status of shops and their resources. For example, if
     * your app is a marketplace channel, then you can use resource feedback to alert merchants that they need to connect their marketplace account by signing in.
     * 
     * Resource feedback notifications are displayed to the merchant on the home screen of their Shopify admin, and in the product details view for any products that are published to your app.
     * 
     * This resource should be used only in cases where you're describing steps that a merchant is required to complete. If your app offers optional or promotional set-up steps, or if it makes recommendations, then don't use resource feedback to let merchants know about them.
     * 
     * ## Sending feedback on a shop
     * 
     * You can send resource feedback on a shop to let the merchant know what steps they need to take to make sure that your app is set up correctly. Feedback can have one of two states: `requires_action` or `success`. You need to send a `requires_action` feedback request for each step that the merchant is required to complete.
     * 
     * If there are multiple set-up steps that require merchant action, then send feedback with a state of `requires_action` as merchants complete prior steps. And to remove the feedback message from the Shopify admin, send a `success` feedback request.
     * 
     * #### Important
     * Sending feedback replaces previously sent feedback for the shop. Send a new `shopResourceFeedbackCreate` mutation to push the latest state of a shop or its resources to Shopify.
     * 
     */
    shopResourceFeedbackCreate?: ShopResourceFeedbackCreatePayload;
    
    /**
     * Generates the URL and signed paramaters needed to upload an asset to Shopify.
     * @deprecated Use `stagedUploadsCreate` instead.
     */
    stagedUploadTargetGenerate?: StagedUploadTargetGeneratePayload;
    
    /**
     * Uploads multiple images.
     * @deprecated Use `stagedUploadsCreate` instead.
     */
    stagedUploadTargetsGenerate?: StagedUploadTargetsGeneratePayload;
    
    /**
     * Creates staged upload targets for each input. This is the first step in the upload process.
     * The returned staged upload targets' URL and parameter fields can be used to send a request
     * to upload the file described in the corresponding input.
     * 
     * For more information on the upload process, refer to
     * [Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
     * 
     */
    stagedUploadsCreate?: StagedUploadsCreatePayload;
    
    /**
     * Activates the specified standard metafield definition from its template.
     * 
     * Refer to the [list of standard metafield definition templates](https://shopify.dev/apps/metafields/definitions/standard-definitions).
     * 
     */
    standardMetafieldDefinitionEnable?: StandardMetafieldDefinitionEnablePayload;
    
    /**
     * Enables the specified standard metaobject definition from its template.
     * 
     */
    standardMetaobjectDefinitionEnable?: StandardMetaobjectDefinitionEnablePayload;
    
    /**
     * Creates a storefront access token. An app can have a maximum of 100 active storefront access tokens for each shop.
     */
    storefrontAccessTokenCreate?: StorefrontAccessTokenCreatePayload;
    
    /**
     * Deletes a storefront access token.
     */
    storefrontAccessTokenDelete?: StorefrontAccessTokenDeletePayload;
    
    /**
     * Creates a new subscription billing attempt. For more information, refer to [Create a subscription contract](https://shopify.dev/docs/apps/selling-strategies/subscriptions/contracts/create#step-4-create-a-billing-attempt).
     * 
     */
    subscriptionBillingAttemptCreate?: SubscriptionBillingAttemptCreatePayload;
    
    /**
     * Commits the updates of a Subscription Billing Cycle Contract draft.
     */
    subscriptionBillingCycleContractDraftCommit?: SubscriptionBillingCycleContractDraftCommitPayload;
    
    /**
     * Concatenates a contract to a Subscription Draft.
     */
    subscriptionBillingCycleContractDraftConcatenate?: SubscriptionBillingCycleContractDraftConcatenatePayload;
    
    /**
     * Edit the contents of a subscription contract for the specified billing cycle.
     */
    subscriptionBillingCycleContractEdit?: SubscriptionBillingCycleContractEditPayload;
    
    /**
     * Delete the schedule and contract edits of the selected subscription billing cycle.
     */
    subscriptionBillingCycleEditDelete?: SubscriptionBillingCycleEditDeletePayload;
    
    /**
     * Delete the current and future schedule and contract edits of a list of subscription billing cycles.
     */
    subscriptionBillingCycleEditsDelete?: SubscriptionBillingCycleEditsDeletePayload;
    
    /**
     * Modify the schedule of a specific billing cycle.
     */
    subscriptionBillingCycleScheduleEdit?: SubscriptionBillingCycleScheduleEditPayload;
    
    /**
     * Skips a Subscription Billing Cycle.
     */
    subscriptionBillingCycleSkip?: SubscriptionBillingCycleSkipPayload;
    
    /**
     * Unskips a Subscription Billing Cycle.
     */
    subscriptionBillingCycleUnskip?: SubscriptionBillingCycleUnskipPayload;
    
    /**
     * Activates a Subscription Contract.
     */
    subscriptionContractActivate?: SubscriptionContractActivatePayload;
    
    /**
     * Creates a Subscription Contract.
     */
    subscriptionContractAtomicCreate?: SubscriptionContractAtomicCreatePayload;
    
    /**
     * Cancels a Subscription Contract.
     */
    subscriptionContractCancel?: SubscriptionContractCancelPayload;
    
    /**
     * Creates a Subscription Contract.
     */
    subscriptionContractCreate?: SubscriptionContractCreatePayload;
    
    /**
     * Expires a Subscription Contract.
     */
    subscriptionContractExpire?: SubscriptionContractExpirePayload;
    
    /**
     * Fails a Subscription Contract.
     */
    subscriptionContractFail?: SubscriptionContractFailPayload;
    
    /**
     * Pauses a Subscription Contract.
     */
    subscriptionContractPause?: SubscriptionContractPausePayload;
    
    /**
     * Allows for the easy change of a Product in a Contract or a Product price change.
     */
    subscriptionContractProductChange?: SubscriptionContractProductChangePayload;
    
    /**
     * Sets the next billing date of a Subscription Contract. This field is managed by the apps.
     *         Alternatively you can utilize our
     *         [Billing Cycles APIs](https://shopify.dev/docs/apps/selling-strategies/subscriptions/billing-cycles),
     *         which provide auto-computed billing dates and additional functionalities.
     */
    subscriptionContractSetNextBillingDate?: SubscriptionContractSetNextBillingDatePayload;
    
    /**
     * Updates a Subscription Contract.
     */
    subscriptionContractUpdate?: SubscriptionContractUpdatePayload;
    
    /**
     * Commits the updates of a Subscription Contract draft.
     */
    subscriptionDraftCommit?: SubscriptionDraftCommitPayload;
    
    /**
     * Adds a subscription discount to a subscription draft.
     */
    subscriptionDraftDiscountAdd?: SubscriptionDraftDiscountAddPayload;
    
    /**
     * Applies a code discount on the subscription draft.
     */
    subscriptionDraftDiscountCodeApply?: SubscriptionDraftDiscountCodeApplyPayload;
    
    /**
     * Removes a subscription discount from a subscription draft.
     */
    subscriptionDraftDiscountRemove?: SubscriptionDraftDiscountRemovePayload;
    
    /**
     * Updates a subscription discount on a subscription draft.
     */
    subscriptionDraftDiscountUpdate?: SubscriptionDraftDiscountUpdatePayload;
    
    /**
     * Adds a subscription free shipping discount to a subscription draft.
     */
    subscriptionDraftFreeShippingDiscountAdd?: SubscriptionDraftFreeShippingDiscountAddPayload;
    
    /**
     * Updates a subscription free shipping discount on a subscription draft.
     */
    subscriptionDraftFreeShippingDiscountUpdate?: SubscriptionDraftFreeShippingDiscountUpdatePayload;
    
    /**
     * Adds a subscription line to a subscription draft.
     */
    subscriptionDraftLineAdd?: SubscriptionDraftLineAddPayload;
    
    /**
     * Removes a subscription line from a subscription draft.
     */
    subscriptionDraftLineRemove?: SubscriptionDraftLineRemovePayload;
    
    /**
     * Updates a subscription line on a subscription draft.
     */
    subscriptionDraftLineUpdate?: SubscriptionDraftLineUpdatePayload;
    
    /**
     * Updates a Subscription Draft.
     */
    subscriptionDraftUpdate?: SubscriptionDraftUpdatePayload;
    
    /**
     * Add tags to an order, a draft order, a customer, a product, or an online store article.
     */
    tagsAdd?: TagsAddPayload;
    
    /**
     * Remove tags from an order, a draft order, a customer, a product, or an online store article.
     */
    tagsRemove?: TagsRemovePayload;
    
    /**
     * Allows tax app configurations for tax partners.
     * 
     */
    taxAppConfigure?: TaxAppConfigurePayload;
    
    /**
     * Creates or updates translations.
     */
    translationsRegister?: TranslationsRegisterPayload;
    
    /**
     * Deletes translations.
     */
    translationsRemove?: TranslationsRemovePayload;
    
    /**
     * Asynchronously delete [URL redirects](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) in bulk.
     * 
     */
    urlRedirectBulkDeleteAll?: UrlRedirectBulkDeleteAllPayload;
    
    /**
     * Asynchronously delete [URLRedirect](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) 
     * objects in bulk by IDs.
     * Learn more about [URLRedirect](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect) 
     * objects.
     * 
     */
    urlRedirectBulkDeleteByIds?: UrlRedirectBulkDeleteByIdsPayload;
    
    /**
     * Asynchronously delete redirects in bulk.
     */
    urlRedirectBulkDeleteBySavedSearch?: UrlRedirectBulkDeleteBySavedSearchPayload;
    
    /**
     * Asynchronously delete redirects in bulk.
     */
    urlRedirectBulkDeleteBySearch?: UrlRedirectBulkDeleteBySearchPayload;
    
    /**
     * Creates a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.
     * 
     */
    urlRedirectCreate?: UrlRedirectCreatePayload;
    
    /**
     * Deletes a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.
     * 
     */
    urlRedirectDelete?: UrlRedirectDeletePayload;
    
    /**
     * Creates a [`UrlRedirectImport`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirectImport) object.
     * 
     * After creating the `UrlRedirectImport` object, the `UrlRedirectImport` request can be performed using the [`urlRedirectImportSubmit`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportSubmit) mutation.
     * 
     */
    urlRedirectImportCreate?: UrlRedirectImportCreatePayload;
    
    /**
     * Submits a `UrlRedirectImport` request to be processed.
     * 
     * The `UrlRedirectImport` request is first created with the [`urlRedirectImportCreate`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate) mutation.
     * 
     */
    urlRedirectImportSubmit?: UrlRedirectImportSubmitPayload;
    
    /**
     * Updates a URL redirect.
     * 
     */
    urlRedirectUpdate?: UrlRedirectUpdatePayload;
    
    /**
     * Creates a validation.
     */
    validationCreate?: ValidationCreatePayload;
    
    /**
     * Deletes a validation.
     */
    validationDelete?: ValidationDeletePayload;
    
    /**
     * Update a validation.
     */
    validationUpdate?: ValidationUpdatePayload;
    
    /**
     * Creates a new web pixel settings.
     */
    webPixelCreate?: WebPixelCreatePayload;
    
    /**
     * Deletes the web pixel shop settings.
     */
    webPixelDelete?: WebPixelDeletePayload;
    
    /**
     * Updates the web pixel settings.
     */
    webPixelUpdate?: WebPixelUpdatePayload;
    
    /**
     * Creates a new webhook subscription.
     * 
     */
    webhookSubscriptionCreate?: WebhookSubscriptionCreatePayload;
    
    /**
     * Deletes a webhook subscription.
     * 
     */
    webhookSubscriptionDelete?: WebhookSubscriptionDeletePayload;
    
    /**
     * Updates a webhook subscription.
     * 
     */
    webhookSubscriptionUpdate?: WebhookSubscriptionUpdatePayload;
  }
  
  /**
   * Return type for `abandonmentEmailStateUpdate` mutation.
   */
  export interface AbandonmentEmailStateUpdatePayload {
    
    /**
     * The updated abandonment.
     */
    abandonment?: Abandonment;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<AbandonmentEmailStateUpdateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `AbandonmentEmailStateUpdate`.
   */
  export interface AbandonmentEmailStateUpdateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: AbandonmentEmailStateUpdateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `AbandonmentEmailStateUpdateUserError`.
   */
  export const enum AbandonmentEmailStateUpdateUserErrorCode {
    
    /**
     * Unable to find an Abandonment for the provided ID.
     */
    ABANDONMENT_NOT_FOUND = 'ABANDONMENT_NOT_FOUND'
  }
  
  /**
   * Specifies the delivery state of a marketing activity.
   */
  export const enum AbandonmentDeliveryState {
    
    /**
     * The marketing activity action has not yet been sent.
     */
    NOT_SENT = 'NOT_SENT',
    
    /**
     * The marketing activity action has been sent.
     */
    SENT = 'SENT',
    
    /**
     * The marketing activity action has been scheduled for later delivery.
     */
    SCHEDULED = 'SCHEDULED'
  }
  
  /**
   * Return type for `abandonmentUpdateActivitiesDeliveryStatuses` mutation.
   */
  export interface AbandonmentUpdateActivitiesDeliveryStatusesPayload {
    
    /**
     * The updated abandonment.
     */
    abandonment?: Abandonment;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<AbandonmentUpdateActivitiesDeliveryStatusesUserError>;
  }
  
  /**
   * An error that occurs during the execution of `AbandonmentUpdateActivitiesDeliveryStatuses`.
   */
  export interface AbandonmentUpdateActivitiesDeliveryStatusesUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `AbandonmentUpdateActivitiesDeliveryStatusesUserError`.
   */
  export const enum AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode {
    
    /**
     * Unable to find an Abandonment for the provided ID.
     */
    ABANDONMENT_NOT_FOUND = 'ABANDONMENT_NOT_FOUND',
    
    /**
     * Unable to find a marketing activity for the provided ID.
     */
    MARKETING_ACTIVITY_NOT_FOUND = 'MARKETING_ACTIVITY_NOT_FOUND',
    
    /**
     * Unable to find delivery status info for the provided ID.
     */
    DELIVERY_STATUS_INFO_NOT_FOUND = 'DELIVERY_STATUS_INFO_NOT_FOUND'
  }
  
  /**
   * Return type for `appPurchaseOneTimeCreate` mutation.
   */
  export interface AppPurchaseOneTimeCreatePayload {
    
    /**
     * The newly created app one-time purchase.
     */
    appPurchaseOneTime?: AppPurchaseOneTime;
    
    /**
     * The URL that the merchant can access to approve or decline the newly created app one-time purchase.
     * 
     * If the merchant declines, then the merchant is redirected to the app and receives a notification message stating that the charge was declined.
     * If the merchant approves and they're successfully invoiced, then the state of the charge changes from `pending` to `active`.
     * 
     * You get paid after the charge is activated.
     * 
     */
    confirmationUrl?: URL;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `appSubscriptionCancel` mutation.
   */
  export interface AppSubscriptionCancelPayload {
    
    /**
     * The cancelled app subscription.
     */
    appSubscription?: AppSubscription;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields to add more than one pricing plan to an app subscription.
   */
  export interface AppSubscriptionLineItemInput {
    
    /**
     * The pricing model for the app subscription.
     */
    plan: AppPlanInput;
  }
  
  /**
   * The pricing model for the app subscription.
   * The pricing model input can be either `appRecurringPricingDetails` or `appUsagePricingDetails`.
   * 
   */
  export interface AppPlanInput {
    
    /**
     * The pricing details for usage-based billing.
     */
    appUsagePricingDetails?: AppUsagePricingInput;
    
    /**
     * The pricing details for recurring billing.
     */
    appRecurringPricingDetails?: AppRecurringPricingInput;
  }
  
  /**
   * The input fields to issue arbitrary charges for app usage associated with a subscription.
   */
  export interface AppUsagePricingInput {
    
    /**
     * The maximum amount of usage charges that can be incurred within a subscription billing interval.
     */
    cappedAmount: MoneyInput;
    
    /**
     * The terms and conditions for app usage. These terms stipulate the pricing model for the charges that an app creates.
     */
    terms: string;
  }
  
  /**
   * Instructs the app subscription to generate a fixed charge on a recurring basis. The frequency is specified by the billing interval.
   */
  export interface AppRecurringPricingInput {
    
    /**
     * How often the app subscription generates a charge.
     */
    interval?: AppPricingInterval;
    
    /**
     * The amount to be charged to the store every billing interval.
     */
    price: MoneyInput;
    
    /**
     * The discount applied to the subscription for a given number of billing intervals.
     */
    discount?: AppSubscriptionDiscountInput;
  }
  
  /**
   * The input fields to specify a discount to the recurring pricing portion of a subscription over a number of billing intervals.
   * 
   */
  export interface AppSubscriptionDiscountInput {
    
    /**
     * The value to be discounted every billing interval.
     */
    value?: AppSubscriptionDiscountValueInput;
    
    /**
     * The total number of billing intervals to which the discount will be applied. Must be greater than 0.
     * The discount will be applied to an indefinite number of billing intervals if this value is left blank.
     * 
     */
    durationLimitInIntervals?: number;
  }
  
  /**
   * The input fields to specify the value discounted every billing interval.
   */
  export interface AppSubscriptionDiscountValueInput {
    
    /**
     * The percentage value of a discount.
     */
    percentage?: number;
    
    /**
     * The monetary value of a discount.
     */
    amount?: Decimal;
  }
  
  /**
   * The replacement behavior when creating an app subscription for a merchant with an already existing app subscription.
   */
  export const enum AppSubscriptionReplacementBehavior {
    
    /**
     * Cancels the merchant's current app subscription immediately and replaces it with the newly created app subscription.
     */
    APPLY_IMMEDIATELY = 'APPLY_IMMEDIATELY',
    
    /**
     * Defers canceling the merchant's current app subscription and applying the newly created app subscription until the start of the next billing cycle. This value is ignored if the new app subscription is using a different currency than the current app subscription, in which case the new app subscription is applied immediately.
     */
    APPLY_ON_NEXT_BILLING_CYCLE = 'APPLY_ON_NEXT_BILLING_CYCLE',
    
    /**
     * Cancels the merchant's current app subscription immediately and replaces it with the newly created app subscription, with the exception of
     * the following scenarios where replacing the current app subscription will be deferred until the start of the next billing cycle.
     * 1) The current app subscription is annual and the newly created app subscription is annual, using the same currency, but is of a lesser value.
     * 2) The current app subscription is annual and the newly created app subscription is monthly and using the same currency.
     * 3) The current app subscription and the newly created app subscription are identical except for the `discount` value.
     * 
     */
    STANDARD = 'STANDARD'
  }
  
  /**
   * Return type for `appSubscriptionCreate` mutation.
   */
  export interface AppSubscriptionCreatePayload {
    
    /**
     * The newly-created app subscription.
     */
    appSubscription?: AppSubscription;
    
    /**
     * The URL pointing to the page where the merchant approves or declines the charges for an app subscription.
     */
    confirmationUrl?: URL;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `appSubscriptionLineItemUpdate` mutation.
   */
  export interface AppSubscriptionLineItemUpdatePayload {
    
    /**
     * The updated app subscription.
     */
    appSubscription?: AppSubscription;
    
    /**
     * The URL where the merchant approves or declines the updated app subscription line item.
     */
    confirmationUrl?: URL;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `appSubscriptionTrialExtend` mutation.
   */
  export interface AppSubscriptionTrialExtendPayload {
    
    /**
     * The app subscription that had its trial extended.
     */
    appSubscription?: AppSubscription;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<AppSubscriptionTrialExtendUserError>;
  }
  
  /**
   * An error that occurs during the execution of `AppSubscriptionTrialExtend`.
   */
  export interface AppSubscriptionTrialExtendUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: AppSubscriptionTrialExtendUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `AppSubscriptionTrialExtendUserError`.
   */
  export const enum AppSubscriptionTrialExtendUserErrorCode {
    
    /**
     * The app subscription wasn't found.
     */
    SUBSCRIPTION_NOT_FOUND = 'SUBSCRIPTION_NOT_FOUND',
    
    /**
     * The trial isn't active.
     */
    TRIAL_NOT_ACTIVE = 'TRIAL_NOT_ACTIVE',
    
    /**
     * The app subscription isn't active.
     */
    SUBSCRIPTION_NOT_ACTIVE = 'SUBSCRIPTION_NOT_ACTIVE'
  }
  
  /**
   * Return type for `appUsageRecordCreate` mutation.
   */
  export interface AppUsageRecordCreatePayload {
    
    /**
     * The newly created app usage record.
     */
    appUsageRecord?: AppUsageRecord;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `bulkOperationCancel` mutation.
   */
  export interface BulkOperationCancelPayload {
    
    /**
     * The bulk operation to be canceled.
     */
    bulkOperation?: BulkOperation;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `bulkOperationRunMutation` mutation.
   */
  export interface BulkOperationRunMutationPayload {
    
    /**
     * The newly created bulk operation.
     */
    bulkOperation?: BulkOperation;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BulkMutationUserError>;
  }
  
  /**
   * Represents an error that happens during execution of a bulk mutation.
   */
  export interface BulkMutationUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: BulkMutationErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `BulkMutationUserError`.
   */
  export const enum BulkMutationErrorCode {
    
    /**
     * The operation did not run because another bulk mutation is already running. [Wait for the operation to finish](https://shopify.dev/api/usage/bulk-operations/imports#wait-for-the-operation-to-finish) before retrying this operation.
     */
    OPERATION_IN_PROGRESS = 'OPERATION_IN_PROGRESS',
    
    /**
     * The operation did not run because the mutation is invalid. Check your mutation syntax and try again.
     */
    INVALID_MUTATION = 'INVALID_MUTATION',
    
    /**
     * The JSONL file submitted via the `stagedUploadsCreate` mutation is invalid. Update the file and try again.
     */
    INVALID_STAGED_UPLOAD_FILE = 'INVALID_STAGED_UPLOAD_FILE',
    
    /**
     * The JSONL file could not be found. Try [uploading the file](https://shopify.dev/api/usage/bulk-operations/imports#generate-the-uploaded-url-and-parameters) again, and check that you've entered the URL correctly for the `stagedUploadPath` mutation argument.
     */
    NO_SUCH_FILE = 'NO_SUCH_FILE',
    
    /**
     * There was a problem reading the JSONL file. This error might be intermittent, so you can try performing the same query again.
     */
    INTERNAL_FILE_SERVER_ERROR = 'INTERNAL_FILE_SERVER_ERROR'
  }
  
  /**
   * Return type for `bulkOperationRunQuery` mutation.
   */
  export interface BulkOperationRunQueryPayload {
    
    /**
     * The newly created bulk operation.
     */
    bulkOperation?: BulkOperation;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields used to create a product feedback.
   */
  export interface ProductResourceFeedbackInput {
    
    /**
     * The ID of the product that the feedback was created on.
     */
    productId: string;
    
    /**
     * Whether the merchant needs to take action on the product.
     */
    state: ResourceFeedbackState;
    
    /**
     * The date and time when the payload is constructed.
     * Used to help determine whether incoming feedback is outdated compared to feedback already received, and if it should be ignored upon arrival.
     * 
     */
    feedbackGeneratedAt: DateTime;
    
    /**
     * The timestamp of the product associated with the feedback.
     */
    productUpdatedAt: DateTime;
    
    /**
     * A concise set of copy strings to be displayed to merchants. Used to guide merchants in resolving problems that your app encounters when trying to make use of their products.
     * You can specify up to four messages. Each message is limited to 100 characters.
     * 
     */
    messages?: Array<string>;
  }
  
  /**
   * Return type for `bulkProductResourceFeedbackCreate` mutation.
   */
  export interface BulkProductResourceFeedbackCreatePayload {
    
    /**
     * The feedback that's created.
     */
    feedback?: Array<ProductResourceFeedback>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BulkProductResourceFeedbackCreateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `BulkProductResourceFeedbackCreate`.
   */
  export interface BulkProductResourceFeedbackCreateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: BulkProductResourceFeedbackCreateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `BulkProductResourceFeedbackCreateUserError`.
   */
  export const enum BulkProductResourceFeedbackCreateUserErrorCode {
    
    /**
     * The operation was attempted on too many feedback objects. The maximum number of feedback objects that you can operate on is 50.
     */
    MAXIMUM_FEEDBACK_LIMIT_EXCEEDED = 'MAXIMUM_FEEDBACK_LIMIT_EXCEEDED',
    
    /**
     * The feedback for a later version of this resource was already accepted.
     */
    OUTDATED_FEEDBACK = 'OUTDATED_FEEDBACK',
    
    /**
     * The product wasn't found or isn't available to the channel.
     */
    PRODUCT_NOT_FOUND = 'PRODUCT_NOT_FOUND',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value should be less than or equal to the maximum value allowed.
     */
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO'
  }
  
  /**
   * Return type for `cartTransformCreate` mutation.
   */
  export interface CartTransformCreatePayload {
    
    /**
     * The newly created cart transform function.
     */
    cartTransform?: CartTransform;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CartTransformCreateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `CartTransformCreate`.
   */
  export interface CartTransformCreateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CartTransformCreateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CartTransformCreateUserError`.
   */
  export const enum CartTransformCreateUserErrorCode {
    
    /**
     * Failed to create cart transform due to invalid input.
     */
    INPUT_INVALID = 'INPUT_INVALID',
    
    /**
     * No Shopify Function found for provided function_id.
     */
    FUNCTION_NOT_FOUND = 'FUNCTION_NOT_FOUND',
    
    /**
     * A cart transform function already exists for the provided function_id.
     */
    FUNCTION_ALREADY_REGISTERED = 'FUNCTION_ALREADY_REGISTERED',
    
    /**
     * Function does not implement the required interface for this cart_transform function.
     */
    FUNCTION_DOES_NOT_IMPLEMENT = 'FUNCTION_DOES_NOT_IMPLEMENT'
  }
  
  /**
   * Return type for `cartTransformDelete` mutation.
   */
  export interface CartTransformDeletePayload {
    
    /**
     * The globally-unique ID for the deleted cart transform.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CartTransformDeleteUserError>;
  }
  
  /**
   * An error that occurs during the execution of `CartTransformDelete`.
   */
  export interface CartTransformDeleteUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CartTransformDeleteUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CartTransformDeleteUserError`.
   */
  export const enum CartTransformDeleteUserErrorCode {
    
    /**
     * Could not find cart transform for provided id.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * Unauthorized app scope.
     */
    UNAUTHORIZED_APP_SCOPE = 'UNAUTHORIZED_APP_SCOPE'
  }
  
  /**
   * The input fields for the context in which the catalog's publishing and pricing rules apply.
   */
  export interface CatalogContextInput {
    
    /**
     * The IDs of the company locations to associate to the catalog.
     */
    companyLocationIds?: Array<string>;
  }
  
  /**
   * Return type for `catalogContextUpdate` mutation.
   */
  export interface CatalogContextUpdatePayload {
    
    /**
     * The updated catalog.
     */
    catalog?: Catalog;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CatalogUserError>;
  }
  
  /**
   * Defines errors encountered while managing a catalog.
   * 
   */
  export interface CatalogUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CatalogUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CatalogUserError`.
   */
  export const enum CatalogUserErrorCode {
    
    /**
     * An app catalog cannot be assigned to a price list.
     */
    APP_CATALOG_PRICE_LIST_ASSIGNMENT = 'APP_CATALOG_PRICE_LIST_ASSIGNMENT',
    
    /**
     * Catalog failed to save.
     */
    CATALOG_FAILED_TO_SAVE = 'CATALOG_FAILED_TO_SAVE',
    
    /**
     * The catalog wasn't found.
     */
    CATALOG_NOT_FOUND = 'CATALOG_NOT_FOUND',
    
    /**
     * A price list cannot be assigned to the primary market.
     */
    PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET = 'PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET',
    
    /**
     * Quantity rules can be associated only with company location catalogs.
     */
    CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES = 'CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES',
    
    /**
     * Quantity price breaks can be associated only with company location catalogs.
     */
    CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS = 'CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS',
    
    /**
     * The catalog can't be associated with more than one market.
     */
    CANNOT_ADD_MORE_THAN_ONE_MARKET = 'CANNOT_ADD_MORE_THAN_ONE_MARKET',
    
    /**
     * A company location catalog outside of a supported plan can only have an archived status.
     */
    COMPANY_LOCATION_CATALOG_STATUS_PLAN = 'COMPANY_LOCATION_CATALOG_STATUS_PLAN',
    
    /**
     * Context driver already assigned to this catalog.
     */
    CONTEXT_ALREADY_ASSIGNED_TO_CATALOG = 'CONTEXT_ALREADY_ASSIGNED_TO_CATALOG',
    
    /**
     * Cannot save the catalog because the catalog limit for the context was reached.
     */
    CONTEXT_CATALOG_LIMIT_REACHED = 'CONTEXT_CATALOG_LIMIT_REACHED',
    
    /**
     * The company location could not be found.
     */
    COMPANY_LOCATION_NOT_FOUND = 'COMPANY_LOCATION_NOT_FOUND',
    
    /**
     * The arguments `contextsToAdd` and `contextsToRemove` must match existing catalog context type.
     */
    CONTEXT_DRIVER_MISMATCH = 'CONTEXT_DRIVER_MISMATCH',
    
    /**
     * A country price list cannot be assigned to a catalog.
     */
    COUNTRY_PRICE_LIST_ASSIGNMENT = 'COUNTRY_PRICE_LIST_ASSIGNMENT',
    
    /**
     * The catalog context type is invalid.
     */
    INVALID_CATALOG_CONTEXT_TYPE = 'INVALID_CATALOG_CONTEXT_TYPE',
    
    /**
     * A market catalog must have an active status.
     */
    MARKET_CATALOG_STATUS = 'MARKET_CATALOG_STATUS',
    
    /**
     * Market not found.
     */
    MARKET_NOT_FOUND = 'MARKET_NOT_FOUND',
    
    /**
     * The catalog's market and price list currencies do not match.
     */
    MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH = 'MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH',
    
    /**
     * Market already belongs to another catalog.
     */
    MARKET_TAKEN = 'MARKET_TAKEN',
    
    /**
     * Must provide exactly one context type.
     */
    MUST_PROVIDE_EXACTLY_ONE_CONTEXT_TYPE = 'MUST_PROVIDE_EXACTLY_ONE_CONTEXT_TYPE',
    
    /**
     * Price list failed to save.
     */
    PRICE_LIST_FAILED_TO_SAVE = 'PRICE_LIST_FAILED_TO_SAVE',
    
    /**
     * Price list not found.
     */
    PRICE_LIST_NOT_FOUND = 'PRICE_LIST_NOT_FOUND',
    
    /**
     * The price list is currently being modified. Please try again later.
     */
    PRICE_LIST_LOCKED = 'PRICE_LIST_LOCKED',
    
    /**
     * Publication not found.
     */
    PUBLICATION_NOT_FOUND = 'PUBLICATION_NOT_FOUND',
    
    /**
     * Must have `contexts_to_add` or `contexts_to_remove` argument.
     */
    REQUIRES_CONTEXTS_TO_ADD_OR_REMOVE = 'REQUIRES_CONTEXTS_TO_ADD_OR_REMOVE',
    
    /**
     * Can't perform this action on a catalog of this type.
     */
    UNSUPPORTED_CATALOG_ACTION = 'UNSUPPORTED_CATALOG_ACTION',
    
    /**
     * Cannot create a catalog for an app.
     */
    CANNOT_CREATE_APP_CATALOG = 'CANNOT_CREATE_APP_CATALOG',
    
    /**
     * Cannot modify a catalog for an app.
     */
    CANNOT_MODIFY_APP_CATALOG = 'CANNOT_MODIFY_APP_CATALOG',
    
    /**
     * Cannot delete a catalog for an app.
     */
    CANNOT_DELETE_APP_CATALOG = 'CANNOT_DELETE_APP_CATALOG',
    
    /**
     * Cannot create a catalog for a market.
     */
    CANNOT_CREATE_MARKET_CATALOG = 'CANNOT_CREATE_MARKET_CATALOG',
    
    /**
     * Cannot modify a catalog for a market.
     */
    CANNOT_MODIFY_MARKET_CATALOG = 'CANNOT_MODIFY_MARKET_CATALOG',
    
    /**
     * Cannot delete a catalog for a market.
     */
    CANNOT_DELETE_MARKET_CATALOG = 'CANNOT_DELETE_MARKET_CATALOG',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK'
  }
  
  /**
   * The input fields required to create a catalog.
   */
  export interface CatalogCreateInput {
    
    /**
     * The name of the catalog.
     */
    title: string;
    
    /**
     * The status of the catalog.
     */
    status: CatalogStatus;
    
    /**
     * The context associated with the catalog.
     */
    context: CatalogContextInput;
    
    /**
     * The ID of the price list to associate to the catalog.
     */
    priceListId?: string;
    
    /**
     * The ID of the publication to associate to the catalog.
     */
    publicationId?: string;
  }
  
  /**
   * Return type for `catalogCreate` mutation.
   */
  export interface CatalogCreatePayload {
    
    /**
     * The newly created catalog.
     */
    catalog?: Catalog;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CatalogUserError>;
  }
  
  /**
   * Return type for `catalogDelete` mutation.
   */
  export interface CatalogDeletePayload {
    
    /**
     * The ID of the deleted catalog.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CatalogUserError>;
  }
  
  /**
   * The input fields used to update a catalog.
   */
  export interface CatalogUpdateInput {
    
    /**
     * The name of the catalog.
     */
    title?: string;
    
    /**
     * The status of the catalog.
     */
    status?: CatalogStatus;
    
    /**
     * The context associated with the catalog.
     */
    context?: CatalogContextInput;
    
    /**
     * The ID of the price list to associate to the catalog.
     */
    priceListId?: string;
    
    /**
     * The ID of the publication to associate to the catalog.
     */
    publicationId?: string;
  }
  
  /**
   * Return type for `catalogUpdate` mutation.
   */
  export interface CatalogUpdatePayload {
    
    /**
     * The updated catalog.
     */
    catalog?: Catalog;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CatalogUserError>;
  }
  
  /**
   * The input fields used to upsert the checkout branding settings.
   */
  export interface CheckoutBrandingInput {
    
    /**
     * The design system allows you to set values that represent specific attributes
     * of your brand like color and font. These attributes are used throughout the user
     * interface. This brings consistency and allows you to easily make broad design changes.
     * 
     */
    designSystem?: CheckoutBrandingDesignSystemInput;
    
    /**
     * The customizations that apply to specific components or areas of the user interface.
     */
    customizations?: CheckoutBrandingCustomizationsInput;
  }
  
  /**
   * The input fields used to update the design system.
   */
  export interface CheckoutBrandingDesignSystemInput {
    
    /**
     * The color settings for global colors and color schemes.
     */
    colors?: CheckoutBrandingColorsInput;
    
    /**
     * The typography.
     */
    typography?: CheckoutBrandingTypographyInput;
    
    /**
     * The corner radius variables.
     */
    cornerRadius?: CheckoutBrandingCornerRadiusVariablesInput;
  }
  
  /**
   * The input fields used to update the color settings for global colors and color schemes.
   */
  export interface CheckoutBrandingColorsInput {
    
    /**
     * The input to update global colors for customizing the overall look and feel of the user interface.
     * 
     */
    global?: CheckoutBrandingColorGlobalInput;
    
    /**
     * The input to define color schemes which apply to different areas of the user interface.
     */
    schemes?: CheckoutBrandingColorSchemesInput;
  }
  
  /**
   * The input fields to customize the overall look and feel of the checkout.
   */
  export interface CheckoutBrandingColorGlobalInput {
    
    /**
     * A semantic color used for components that communicate informative content.
     */
    info?: string;
    
    /**
     * A semantic color used for components that communicate successful actions.
     */
    success?: string;
    
    /**
     * A semantic color used for components that display content that requires attention.
     */
    warning?: string;
    
    /**
     * A semantic color used for components that communicate critical content.
     */
    critical?: string;
    
    /**
     * A color strongly associated with the merchant, currently used for elements
     * like primary and secondary buttons.
     * 
     */
    brand?: string;
    
    /**
     * A color used for interaction, like links and focus states.
     */
    accent?: string;
    
    /**
     * A color used to highlight certain areas of the user interface.
     */
    decorative?: string;
  }
  
  /**
   * The input fields for the color schemes.
   */
  export interface CheckoutBrandingColorSchemesInput {
    
    /**
     * The primary scheme. By default, it’s used for the main area of the interface.
     */
    scheme1?: CheckoutBrandingColorSchemeInput;
    
    /**
     * The secondary scheme. By default, it’s used for secondary areas, like Checkout’s Order Summary.
     */
    scheme2?: CheckoutBrandingColorSchemeInput;
  }
  
  /**
   * The input fields for a base set of color customizations that is applied to an area of Checkout, from which
   * every component pulls its colors from.
   * 
   */
  export interface CheckoutBrandingColorSchemeInput {
    
    /**
     * The main colors of a scheme.
     */
    base?: CheckoutBrandingColorRolesInput;
    
    /**
     * The colors of form controls.
     */
    control?: CheckoutBrandingControlColorRolesInput;
    
    /**
     * The colors of the primary button.
     */
    primaryButton?: CheckoutBrandingButtonColorRolesInput;
    
    /**
     * The colors of the secondary button.
     */
    secondaryButton?: CheckoutBrandingButtonColorRolesInput;
  }
  
  /**
   * The input fields for a group of colors used together on a surface.
   */
  export interface CheckoutBrandingColorRolesInput {
    
    /**
     * The color of the background.
     */
    background?: string;
    
    /**
     * The color of text.
     */
    text?: string;
    
    /**
     * The color of borders.
     */
    border?: string;
    
    /**
     * The color of icons.
     */
    icon?: string;
    
    /**
     * The color of accented objects (links and focused state).
     */
    accent?: string;
    
    /**
     * The decorative color for highlighting specific parts of the user interface.
     */
    decorative?: string;
  }
  
  /**
   * The input fields to define colors for form controls.
   */
  export interface CheckoutBrandingControlColorRolesInput {
    
    /**
     * The color of the background.
     */
    background?: string;
    
    /**
     * The color of text.
     */
    text?: string;
    
    /**
     * The color of borders.
     */
    border?: string;
    
    /**
     * The color of icons.
     */
    icon?: string;
    
    /**
     * The color of accented objects (links and focused state).
     */
    accent?: string;
    
    /**
     * The decorative color for highlighting specific parts of the user interface.
     */
    decorative?: string;
    
    /**
     * The colors of selected controls.
     */
    selected?: CheckoutBrandingColorRolesInput;
  }
  
  /**
   * The input fields to set colors for buttons.
   */
  export interface CheckoutBrandingButtonColorRolesInput {
    
    /**
     * The color of the background.
     */
    background?: string;
    
    /**
     * The color of text.
     */
    text?: string;
    
    /**
     * The color of borders.
     */
    border?: string;
    
    /**
     * The color of icons.
     */
    icon?: string;
    
    /**
     * The color of accented objects (links and focused state).
     */
    accent?: string;
    
    /**
     * The decorative color for highlighting specific parts of the user interface.
     */
    decorative?: string;
    
    /**
     * The colors of the button on hover.
     */
    hover?: CheckoutBrandingColorRolesInput;
  }
  
  /**
   * The input fields used to update the typography. Refer to the [typography tutorial](https://shopify.dev/docs/apps/checkout/styling/customize-typography)
   * for more information on how to set these fields.
   * 
   */
  export interface CheckoutBrandingTypographyInput {
    
    /**
     * The font size.
     */
    size?: CheckoutBrandingFontSizeInput;
    
    /**
     * A font group used for most components such as text, buttons and form controls.
     */
    primary?: CheckoutBrandingFontGroupInput;
    
    /**
     * A font group used for heading components by default.
     */
    secondary?: CheckoutBrandingFontGroupInput;
  }
  
  /**
   * The input fields used to update the font size.
   */
  export interface CheckoutBrandingFontSizeInput {
    
    /**
     * The base font size. Its value should be between 12.0 and 18.0.
     */
    base?: number;
    
    /**
     * The scale ratio used to derive all font sizes such as small and large. Its value should be between 1.0 and 1.4.
     */
    ratio?: number;
  }
  
  /**
   * The input fields used to update a font group. To learn more about updating fonts, refer to the
   * [checkoutBrandingUpsert](https://shopify.dev/api/admin-graphql/unstable/mutations/checkoutBrandingUpsert)
   * mutation and the checkout branding [tutorial](https://shopify.dev/docs/apps/checkout/styling).
   * 
   */
  export interface CheckoutBrandingFontGroupInput {
    
    /**
     * A Shopify font group.
     */
    shopifyFontGroup?: CheckoutBrandingShopifyFontGroupInput;
    
    /**
     * A custom font group.
     */
    customFontGroup?: CheckoutBrandingCustomFontGroupInput;
  }
  
  /**
   * The input fields used to update a Shopify font group.
   */
  export interface CheckoutBrandingShopifyFontGroupInput {
    
    /**
     * The Shopify font name from [the list of available fonts](https://shopify.dev/themes/architecture/settings/fonts#available-fonts), such as `Alegreya Sans` or `Anonymous Pro`.
     */
    name: string;
    
    /**
     * The base font weight.
     */
    baseWeight?: number;
    
    /**
     * The bold font weight.
     */
    boldWeight?: number;
    
    /**
     * The font loading strategy.
     */
    loadingStrategy?: CheckoutBrandingFontLoadingStrategy;
  }
  
  /**
   * The input fields required to update a custom font group.
   */
  export interface CheckoutBrandingCustomFontGroupInput {
    
    /**
     * The base font.
     */
    base: CheckoutBrandingCustomFontInput;
    
    /**
     * The bold font.
     */
    bold: CheckoutBrandingCustomFontInput;
    
    /**
     * The font loading strategy.
     */
    loadingStrategy?: CheckoutBrandingFontLoadingStrategy;
  }
  
  /**
   * The input fields required to update a font.
   */
  export interface CheckoutBrandingCustomFontInput {
    
    /**
     * The font weight. Its value should be between 100 and 900.
     */
    weight: number;
    
    /**
     * A globally-unique ID for a font file uploaded via the Files api.
     * Allowed font types are .woff and .woff2.
     * 
     */
    genericFileId: string;
  }
  
  /**
   * The input fields used to update the corner radius variables.
   */
  export interface CheckoutBrandingCornerRadiusVariablesInput {
    
    /**
     * The value in pixels for small corner radii. It should be greater than zero. Example: 3.
     * 
     */
    small?: number;
    
    /**
     * The value in pixels for base corner radii. It should be greater than zero. Example: 5.
     * 
     */
    base?: number;
    
    /**
     * The value in pixels for large corner radii. It should be greater than zero. Example: 10.
     * 
     */
    large?: number;
  }
  
  /**
   * The input fields used to update the components customizations.
   */
  export interface CheckoutBrandingCustomizationsInput {
    
    /**
     * The global customizations.
     */
    global?: CheckoutBrandingGlobalInput;
    
    /**
     * The header customizations.
     */
    header?: CheckoutBrandingHeaderInput;
    
    /**
     * The Heading Level 1 customizations.
     */
    headingLevel1?: CheckoutBrandingHeadingLevelInput;
    
    /**
     * The Heading Level 2 customizations.
     */
    headingLevel2?: CheckoutBrandingHeadingLevelInput;
    
    /**
     * The Heading Level 3 customizations.
     */
    headingLevel3?: CheckoutBrandingHeadingLevelInput;
    
    /**
     * The main area customizations.
     */
    main?: CheckoutBrandingMainInput;
    
    /**
     * The order summary customizations.
     */
    orderSummary?: CheckoutBrandingOrderSummaryInput;
    
    /**
     * The form controls customizations.
     */
    control?: CheckoutBrandingControlInput;
    
    /**
     * The text fields customizations.
     */
    textField?: CheckoutBrandingTextFieldInput;
    
    /**
     * The checkboxes customizations.
     */
    checkbox?: CheckoutBrandingCheckboxInput;
    
    /**
     * The selects customizations.
     */
    select?: CheckoutBrandingSelectInput;
    
    /**
     * The primary buttons customizations.
     */
    primaryButton?: CheckoutBrandingButtonInput;
    
    /**
     * The secondary buttons customizations.
     */
    secondaryButton?: CheckoutBrandingButtonInput;
    
    /**
     * The favicon image (must be of PNG format).
     */
    favicon?: CheckoutBrandingImageInput;
    
    /**
     * The choice list customizations.
     */
    choiceList?: CheckoutBrandingChoiceListInput;
    
    /**
     * The merchandise thumbnails customizations.
     */
    merchandiseThumbnail?: CheckoutBrandingMerchandiseThumbnailInput;
  }
  
  /**
   * The input fields used to update the global customizations.
   */
  export interface CheckoutBrandingGlobalInput {
    
    /**
     * Select a global corner radius setting that overrides all other [corner radii](https://shopify.dev/docs/api/admin-graphql/latest/enums/CheckoutBrandingCornerRadius)
     * customizations.
     * 
     */
    cornerRadius?: CheckoutBrandingGlobalCornerRadius;
    
    /**
     * The global typography customizations.
     */
    typography?: CheckoutBrandingTypographyStyleGlobalInput;
  }
  
  /**
   * The input fields used to update the global typography customizations.
   */
  export interface CheckoutBrandingTypographyStyleGlobalInput {
    
    /**
     * The letter case.
     */
    letterCase?: CheckoutBrandingTypographyLetterCase;
    
    /**
     * The kerning.
     */
    kerning?: CheckoutBrandingTypographyKerning;
  }
  
  /**
   * The input fields used to update the header customizations.
   */
  export interface CheckoutBrandingHeaderInput {
    
    /**
     * The header alignment.
     */
    alignment?: CheckoutBrandingHeaderAlignment;
    
    /**
     * The header position.
     */
    position?: CheckoutBrandingHeaderPosition;
    
    /**
     * The store logo.
     */
    logo?: CheckoutBrandingLogoInput;
    
    /**
     * The background image of the header (must not be of SVG format).
     */
    banner?: CheckoutBrandingImageInput;
  }
  
  /**
   * The input fields used to update the logo customizations.
   */
  export interface CheckoutBrandingLogoInput {
    
    /**
     * The logo image (must not be of SVG format).
     */
    image?: CheckoutBrandingImageInput;
    
    /**
     * The maximum width of the logo.
     */
    maxWidth?: number;
  }
  
  /**
   * The input fields used to update a checkout branding image uploaded via the Files API.
   */
  export interface CheckoutBrandingImageInput {
    
    /**
     * A globally-unique ID.
     */
    mediaImageId?: string;
  }
  
  /**
   * The input fields for heading level customizations.
   */
  export interface CheckoutBrandingHeadingLevelInput {
    
    /**
     * The typography customizations used for headings.
     */
    typography?: CheckoutBrandingTypographyStyleInput;
  }
  
  /**
   * The input fields used to update the typography customizations.
   */
  export interface CheckoutBrandingTypographyStyleInput {
    
    /**
     * The font.
     */
    font?: CheckoutBrandingTypographyFont;
    
    /**
     * The font size.
     */
    size?: CheckoutBrandingTypographySize;
    
    /**
     * The font weight.
     */
    weight?: CheckoutBrandingTypographyWeight;
    
    /**
     * The letter case.
     */
    letterCase?: CheckoutBrandingTypographyLetterCase;
    
    /**
     * The kerning.
     */
    kerning?: CheckoutBrandingTypographyKerning;
  }
  
  /**
   * The input fields used to update the main container customizations.
   */
  export interface CheckoutBrandingMainInput {
    
    /**
     * The selected color scheme for the main container of the checkout.
     */
    colorScheme?: CheckoutBrandingColorSchemeSelection;
    
    /**
     * The background image of the main container (must not be of SVG format).
     */
    backgroundImage?: CheckoutBrandingImageInput;
  }
  
  /**
   * The input fields used to update the order summary container customizations.
   */
  export interface CheckoutBrandingOrderSummaryInput {
    
    /**
     * The selected color scheme for the order summary container of the checkout.
     */
    colorScheme?: CheckoutBrandingColorSchemeSelection;
    
    /**
     * The background image of the order summary container (must not be of SVG format).
     */
    backgroundImage?: CheckoutBrandingImageInput;
  }
  
  /**
   * The input fields used to update the form controls customizations.
   */
  export interface CheckoutBrandingControlInput {
    
    /**
     * Set to TRANSPARENT to define transparent form controls. If null, form controls inherit colors from their scheme settings (for example, the main section inherits from `design_system.colors.schemes.scheme1.control` by default). Note that usage of the `customizations.control.color` setting to customize the form control color is deprecated.
     * 
     */
    color?: CheckoutBrandingColorSelection;
    
    /**
     * The corner radius used for form controls.
     */
    cornerRadius?: CheckoutBrandingCornerRadius;
    
    /**
     * The border used for form controls.
     */
    border?: CheckoutBrandingSimpleBorder;
    
    /**
     * The label position used for form controls.
     */
    labelPosition?: CheckoutBrandingLabelPosition;
  }
  
  /**
   * The input fields used to update the text fields customizations.
   */
  export interface CheckoutBrandingTextFieldInput {
    
    /**
     * The border used for text fields.
     */
    border?: CheckoutBrandingBorder;
    
    /**
     * The typography customizations used for text fields.
     */
    typography?: CheckoutBrandingTypographyStyleInput;
  }
  
  /**
   * The input fields used to update the checkboxes customizations.
   */
  export interface CheckoutBrandingCheckboxInput {
    
    /**
     * The corner radius used for checkboxes.
     */
    cornerRadius?: CheckoutBrandingCornerRadius;
  }
  
  /**
   * The input fields used to update the selects customizations.
   */
  export interface CheckoutBrandingSelectInput {
    
    /**
     * The border used for selects.
     */
    border?: CheckoutBrandingBorder;
    
    /**
     * The typography customizations used for selects.
     */
    typography?: CheckoutBrandingTypographyStyleInput;
  }
  
  /**
   * The input fields used to update the buttons customizations.
   */
  export interface CheckoutBrandingButtonInput {
    
    /**
     * The background style used for buttons.
     */
    background?: CheckoutBrandingBackgroundStyle;
    
    /**
     * The border used for buttons.
     */
    border?: CheckoutBrandingSimpleBorder;
    
    /**
     * The corner radius used for buttons.
     */
    cornerRadius?: CheckoutBrandingCornerRadius;
    
    /**
     * The block padding used for buttons.
     */
    blockPadding?: CheckoutBrandingSpacing;
    
    /**
     * The inline padding used for buttons.
     */
    inlinePadding?: CheckoutBrandingSpacing;
    
    /**
     * The typography style used for buttons.
     */
    typography?: CheckoutBrandingTypographyStyleInput;
  }
  
  /**
   * The input fields to use to update the choice list customizations.
   */
  export interface CheckoutBrandingChoiceListInput {
    
    /**
     * The settings that apply to the 'group' variant of ChoiceList.
     */
    group?: CheckoutBrandingChoiceListGroupInput;
  }
  
  /**
   * The input fields to update the settings that apply to the 'group' variant of ChoiceList.
   */
  export interface CheckoutBrandingChoiceListGroupInput {
    
    /**
     * The spacing between UI elements in the list.
     */
    spacing?: CheckoutBrandingSpacingKeyword;
  }
  
  /**
   * The input fields used to update the merchandise thumbnails customizations.
   */
  export interface CheckoutBrandingMerchandiseThumbnailInput {
    
    /**
     * The border used for merchandise thumbnails.
     */
    border?: CheckoutBrandingSimpleBorder;
    
    /**
     * The corner radius used for merchandise thumbnails.
     */
    cornerRadius?: CheckoutBrandingCornerRadius;
  }
  
  /**
   * Return type for `checkoutBrandingUpsert` mutation.
   */
  export interface CheckoutBrandingUpsertPayload {
    
    /**
     * Returns the new checkout branding settings.
     */
    checkoutBranding?: CheckoutBranding;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CheckoutBrandingUpsertUserError>;
  }
  
  /**
   * An error that occurs during the execution of `CheckoutBrandingUpsert`.
   */
  export interface CheckoutBrandingUpsertUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CheckoutBrandingUpsertUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CheckoutBrandingUpsertUserError`.
   */
  export const enum CheckoutBrandingUpsertUserErrorCode {
    
    /**
     * Unexpected internal error happened.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR'
  }
  
  /**
   * Return type for `collectionAddProducts` mutation.
   */
  export interface CollectionAddProductsPayload {
    
    /**
     * The updated collection. Returns `null` if an error is raised.
     */
    collection?: Collection;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `collectionAddProductsV2` mutation.
   */
  export interface CollectionAddProductsV2Payload {
    
    /**
     * The asynchronous job adding the products.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CollectionAddProductsV2UserError>;
  }
  
  /**
   * An error that occurs during the execution of `CollectionAddProductsV2`.
   */
  export interface CollectionAddProductsV2UserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CollectionAddProductsV2UserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CollectionAddProductsV2UserError`.
   */
  export const enum CollectionAddProductsV2UserErrorCode {
    
    /**
     * Can't manually add products to a smart collection.
     */
    CANT_ADD_TO_SMART_COLLECTION = 'CANT_ADD_TO_SMART_COLLECTION',
    
    /**
     * Collection doesn't exist.
     */
    COLLECTION_DOES_NOT_EXIST = 'COLLECTION_DOES_NOT_EXIST'
  }
  
  /**
   * The input fields required to create a collection.
   */
  export interface CollectionInput {
    
    /**
     * The description of the collection, in HTML format.
     */
    descriptionHtml?: string;
    
    /**
     * A unique human-friendly string for the collection. Automatically generated from the collection's title.
     * 
     */
    handle?: string;
    
    /**
     * Specifies the collection to update or create a new collection if absent. Required for updating a collection.
     * 
     */
    id?: string;
    
    /**
     * The image associated with the collection.
     */
    image?: ImageInput;
    
    /**
     * Initial list of collection products. Only valid with `collectionCreate` and without rules.
     */
    products?: Array<string>;
    
    /**
     * The rules used to assign products to the collection.
     * 
     */
    ruleSet?: CollectionRuleSetInput;
    
    /**
     * The theme template used when viewing the collection in a store.
     */
    templateSuffix?: string;
    
    /**
     * The order in which the collection's products are sorted.
     */
    sortOrder?: CollectionSortOrder;
    
    /**
     * The title of the collection. Required for creating a new collection.
     */
    title?: string;
    
    /**
     * The metafields to associate with the collection.
     */
    metafields?: Array<MetafieldInput>;
    
    /**
     * SEO information for the collection.
     */
    seo?: SEOInput;
    
    /**
     * Indicates whether a redirect is required after a new handle has been provided.
     * If true, then the old handle is redirected to the new one automatically.
     * 
     */
    redirectNewHandle?: boolean;
  }
  
  /**
   * The input fields for an image.
   */
  export interface ImageInput {
    
    /**
     * A globally-unique ID.
     */
    id?: string;
    
    /**
     * A word or phrase to share the nature or contents of an image.
     */
    altText?: string;
    
    /**
     * The URL of the image. May be a staged upload URL.
     */
    src?: string;
  }
  
  /**
   * The input fields for a rule set of the collection.
   */
  export interface CollectionRuleSetInput {
    
    /**
     * Whether products must match any or all of the rules to be included in the collection.
     * If true, then products must match at least one of the rules to be included in the collection.
     * If false, then products must match all of the rules to be included in the collection.
     * 
     */
    appliedDisjunctively: boolean;
    
    /**
     * The rules used to assign products to the collection.
     */
    rules?: Array<CollectionRuleInput>;
  }
  
  /**
   * The input fields for a rule to associate with a collection.
   */
  export interface CollectionRuleInput {
    
    /**
     * The attribute that the rule focuses on. For example, `title` or `product_type`.
     */
    column: CollectionRuleColumn;
    
    /**
     * The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
     * 
     */
    relation: CollectionRuleRelation;
    
    /**
     * The value that the operator is applied to. For example, `Hats`.
     */
    condition: string;
    
    /**
     * The object ID that points to additional attributes for the collection rule.
     * This is only required when using metafield definition rules.
     * 
     */
    conditionObjectId?: string;
  }
  
  /**
   * The input fields to use to create or update a metafield through a mutation on the owning resource.
   * An alternative way to create or update a metafield is by using the
   * [metafieldsSet](https://shopify.dev/api/admin-graphql/latest/mutations/metafieldsSet) mutation.
   * 
   */
  export interface MetafieldInput {
    
    /**
     * The unique ID of the metafield.
     * 
     * Required when updating a metafield, but shouldn't be included when creating as it's created automatically.
     * 
     */
    id?: string;
    
    /**
     * The container for a group of metafields that the metafield is or will be associated with. Used in tandem with
     * `key` to lookup a metafield on a resource, preventing conflicts with other metafields with the same `key`.
     * 
     * Required when creating a metafield, but optional when updating. Used to help identify the metafield when
     * updating, but can't be updated itself.
     * 
     * Must be 3-255 characters long and can contain alphanumeric, hyphen, and underscore characters.
     * 
     */
    namespace?: string;
    
    /**
     * The unique identifier for a metafield within its namespace.
     * 
     * Required when creating a metafield, but optional when updating. Used to help identify the metafield when
     * updating, but can't be updated itself.
     * 
     * Must be 3-64 characters long and can contain alphanumeric, hyphen, and underscore characters.
     * 
     */
    key?: string;
    
    /**
     * The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
     * 
     */
    value?: string;
    
    /**
     * The type of data that is stored in the metafield.
     * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
     * 
     * Required when creating a metafield, but optional when updating.
     * 
     */
    type?: string;
  }
  
  /**
   * The input fields for SEO information.
   */
  export interface SEOInput {
    
    /**
     * SEO title of the product.
     */
    title?: string;
    
    /**
     * SEO description of the product.
     */
    description?: string;
  }
  
  /**
   * Return type for `collectionCreate` mutation.
   */
  export interface CollectionCreatePayload {
    
    /**
     * The collection that has been created.
     */
    collection?: Collection;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for specifying the collection to delete.
   */
  export interface CollectionDeleteInput {
    
    /**
     * The ID of the collection to be deleted.
     */
    id: string;
  }
  
  /**
   * Return type for `collectionDelete` mutation.
   */
  export interface CollectionDeletePayload {
    
    /**
     * The ID of the collection that was deleted. Returns `null` if the collection doesn't exist.
     */
    deletedCollectionId?: string;
    
    /**
     * The shop associated with the collection.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for specifying a collection to publish and the sales channels to publish it to.
   */
  export interface CollectionPublishInput {
    
    /**
     * The collection to create or update publications for.
     */
    id: string;
    
    /**
     * The channels where the collection will be published.
     */
    collectionPublications: Array<CollectionPublicationInput>;
  }
  
  /**
   * The input fields for publications to which a collection will be published.
   */
  export interface CollectionPublicationInput {
    
    /**
     * The ID of the publication.
     */
    publicationId?: string;
  }
  
  /**
   * Return type for `collectionPublish` mutation.
   */
  export interface CollectionPublishPayload {
    
    /**
     * The published collection.
     */
    collection?: Collection;
    
    /**
     * The channels where the collection has been published.
     */
    collectionPublications?: Array<CollectionPublication>;
    
    /**
     * The shop associated with the collection.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `collectionRemoveProducts` mutation.
   */
  export interface CollectionRemoveProductsPayload {
    
    /**
     * The asynchronous job removing the products.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for a single move of an object to a specific position in a set, using a zero-based index.
   * 
   */
  export interface MoveInput {
    
    /**
     * The ID of the object to be moved.
     */
    id: string;
    
    /**
     * The new position of the object in the set.
     */
    newPosition: UnsignedInt64;
  }
  
  /**
   * Return type for `collectionReorderProducts` mutation.
   */
  export interface CollectionReorderProductsPayload {
    
    /**
     * The asynchronous job reordering the products.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for specifying the collection to unpublish and the sales channels to remove it from.
   * 
   */
  export interface CollectionUnpublishInput {
    
    /**
     * The collection to create or update publications for.
     */
    id: string;
    
    /**
     * The channels where the collection is published.
     */
    collectionPublications: Array<CollectionPublicationInput>;
  }
  
  /**
   * Return type for `collectionUnpublish` mutation.
   */
  export interface CollectionUnpublishPayload {
    
    /**
     * The collection that has been unpublished.
     */
    collection?: Collection;
    
    /**
     * The shop associated with the collection.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `collectionUpdate` mutation.
   */
  export interface CollectionUpdatePayload {
    
    /**
     * The updated collection.
     */
    collection?: Collection;
    
    /**
     * The asynchronous job updating the products based on the new rule set.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `companiesDelete` mutation.
   */
  export interface CompaniesDeletePayload {
    
    /**
     * A list of IDs of the deleted companies.
     */
    deletedCompanyIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * An error that happens during the execution of a business customer mutation.
   */
  export interface BusinessCustomerUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: BusinessCustomerErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `BusinessCustomerUserError`.
   */
  export const enum BusinessCustomerErrorCode {
    
    /**
     * An internal error occurred.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * The resource wasn't found.
     */
    RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND',
    
    /**
     * Deleting the resource failed.
     */
    FAILED_TO_DELETE = 'FAILED_TO_DELETE',
    
    /**
     * Missing a required field.
     */
    REQUIRED = 'REQUIRED',
    
    /**
     * The input is empty.
     */
    NO_INPUT = 'NO_INPUT',
    
    /**
     * The input is invalid.
     */
    INVALID_INPUT = 'INVALID_INPUT',
    
    /**
     * Unexpected type.
     */
    UNEXPECTED_TYPE = 'UNEXPECTED_TYPE',
    
    /**
     * The field value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The number of resources exceeded the limit.
     */
    LIMIT_REACHED = 'LIMIT_REACHED',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN'
  }
  
  /**
   * Return type for `companyAddressDelete` mutation.
   */
  export interface CompanyAddressDeletePayload {
    
    /**
     * The ID of the deleted address.
     */
    deletedAddressId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyAssignCustomerAsContact` mutation.
   */
  export interface CompanyAssignCustomerAsContactPayload {
    
    /**
     * The created company contact.
     */
    companyContact?: CompanyContact;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyAssignMainContact` mutation.
   */
  export interface CompanyAssignMainContactPayload {
    
    /**
     * The company for which the main contact is assigned.
     */
    company?: Company;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyContactAssignRole` mutation.
   */
  export interface CompanyContactAssignRolePayload {
    
    /**
     * The company contact role assignment.
     */
    companyContactRoleAssignment?: CompanyContactRoleAssignment;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * The input fields for the role and location to assign to a company contact.
   * 
   */
  export interface CompanyContactRoleAssign {
    
    /**
     * The role ID.
     */
    companyContactRoleId: string;
    
    /**
     * The location.
     */
    companyLocationId: string;
  }
  
  /**
   * Return type for `companyContactAssignRoles` mutation.
   */
  export interface CompanyContactAssignRolesPayload {
    
    /**
     * A list of newly created assignments of company contacts to a company location.
     */
    roleAssignments?: Array<CompanyContactRoleAssignment>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * The input fields for company contact attributes when creating or updating a company contact.
   */
  export interface CompanyContactInput {
    
    /**
     * The company contact's first name.
     */
    firstName?: string;
    
    /**
     * The company contact's last name.
     */
    lastName?: string;
    
    /**
     * The unique email address of the company contact.
     */
    email?: string;
    
    /**
     * The title of the company contact.
     */
    title?: string;
    
    /**
     * The contact's locale.
     */
    locale?: string;
    
    /**
     * The phone number of the company contact.
     */
    phone?: string;
  }
  
  /**
   * Return type for `companyContactCreate` mutation.
   */
  export interface CompanyContactCreatePayload {
    
    /**
     * The created company contact.
     */
    companyContact?: CompanyContact;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyContactDelete` mutation.
   */
  export interface CompanyContactDeletePayload {
    
    /**
     * The ID of the deleted company contact.
     */
    deletedCompanyContactId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyContactRemoveFromCompany` mutation.
   */
  export interface CompanyContactRemoveFromCompanyPayload {
    
    /**
     * The ID of the removed company contact.
     */
    removedCompanyContactId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyContactRevokeRole` mutation.
   */
  export interface CompanyContactRevokeRolePayload {
    
    /**
     * The role assignment that was revoked.
     */
    revokedCompanyContactRoleAssignmentId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyContactRevokeRoles` mutation.
   */
  export interface CompanyContactRevokeRolesPayload {
    
    /**
     * A list of role assignment IDs that were removed from the company contact.
     */
    revokedRoleAssignmentIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * The input fields for an email.
   */
  export interface EmailInput {
    
    /**
     * Specifies the email subject.
     */
    subject?: string;
    
    /**
     * Specifies the email recipient.
     */
    to?: string;
    
    /**
     * Specifies the email sender.
     */
    from?: string;
    
    /**
     * Specifies the email body.
     */
    body?: string;
    
    /**
     * Specifies any bcc recipients for the email.
     */
    bcc?: Array<string>;
    
    /**
     * Specifies a custom message to include in the email.
     */
    customMessage?: string;
  }
  
  /**
   * Return type for `companyContactSendWelcomeEmail` mutation.
   */
  export interface CompanyContactSendWelcomeEmailPayload {
    
    /**
     * The company contact to whom a welcome email was sent.
     */
    companyContact?: CompanyContact;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyContactUpdate` mutation.
   */
  export interface CompanyContactUpdatePayload {
    
    /**
     * The updated company contact.
     */
    companyContact?: CompanyContact;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyContactsDelete` mutation.
   */
  export interface CompanyContactsDeletePayload {
    
    /**
     * The list of IDs of the deleted company contacts.
     */
    deletedCompanyContactIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * The input fields and values for creating a company and its associated resources.
   * 
   */
  export interface CompanyCreateInput {
    
    /**
     * The attributes for the company.
     */
    company: CompanyInput;
    
    /**
     * The attributes for the company contact.
     */
    companyContact?: CompanyContactInput;
    
    /**
     * The attributes for the company location.
     */
    companyLocation?: CompanyLocationInput;
  }
  
  /**
   * The input fields for company attributes when creating or updating a company.
   */
  export interface CompanyInput {
    
    /**
     * The name of the company.
     */
    name?: string;
    
    /**
     * A note about the company.
     */
    note?: string;
    
    /**
     * A unique externally-supplied ID for the company.
     */
    externalId?: string;
    
    /**
     * The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at
     *           which the company became the customer.
     */
    customerSince?: DateTime;
  }
  
  /**
   * The input fields for company location when creating or updating a company location.
   */
  export interface CompanyLocationInput {
    
    /**
     * The name of the company location.
     */
    name?: string;
    
    /**
     * The phone number of the company location.
     */
    phone?: string;
    
    /**
     * The preferred locale of the company location.
     */
    locale?: string;
    
    /**
     * A unique externally-supplied ID for the company location.
     */
    externalId?: string;
    
    /**
     * A note about the company location.
     */
    note?: string;
    
    /**
     * The configuration for the buyer's checkout at the company location.
     */
    buyerExperienceConfiguration?: BuyerExperienceConfigurationInput;
    
    /**
     * The input fields to create or update the billing address for a company location.
     */
    billingAddress?: CompanyAddressInput;
    
    /**
     * The input fields to create or update the shipping address for a company location.
     */
    shippingAddress?: CompanyAddressInput;
    
    /**
     * Whether the billing address is the same as the shipping address. If the value is true, then the input for `billingAddress` is ignored.
     */
    billingSameAsShipping?: boolean;
    
    /**
     * The tax registration ID of the company location.
     */
    taxRegistrationId?: string;
    
    /**
     * The list of tax exemptions to apply to the company location.
     */
    taxExemptions?: Array<TaxExemption>;
  }
  
  /**
   * The input fields specifying the behavior of checkout for a B2B buyer.
   */
  export interface BuyerExperienceConfigurationInput {
    
    /**
     * Whether to checkout to draft order for merchant review.
     */
    checkoutToDraft?: boolean;
    
    /**
     * Represents the merchant configured payment terms.
     */
    paymentTermsTemplateId?: string;
    
    /**
     * Whether to allow customers to edit their shipping address at checkout.
     */
    editableShippingAddress?: boolean;
  }
  
  /**
   * The input fields to create or update the address of a company location.
   */
  export interface CompanyAddressInput {
    
    /**
     * The first line of the address. Typically the street address or PO Box number.
     */
    address1?: string;
    
    /**
     * The second line of the address. Typically the number of the apartment, suite, or unit.
     */
    address2?: string;
    
    /**
     * The name of the city, district, village, or town.
     */
    city?: string;
    
    /**
     * The zip or postal code of the address.
     */
    zip?: string;
    
    /**
     * The identity of the recipient e.g. 'Receiving Department'.
     */
    recipient?: string;
    
    /**
     * The first name of the recipient.
     */
    firstName?: string;
    
    /**
     * The last name of the recipient.
     */
    lastName?: string;
    
    /**
     * A phone number for the recipient. Formatted using E.164 standard. For example, _+16135551111_.
     */
    phone?: string;
    
    /**
     * The two-letter code ([ISO 3166-2 alpha-2]](https://en.wikipedia.org/wiki/ISO_3166-2) format) for the region of the address, such as the province, state, or district. For example, `ON` for Ontario, Canada.
     */
    zoneCode?: string;
    
    /**
     * The two-letter code ([ISO 3166-1 alpha-2]](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format) for the country of the address. For example, `US`` for the United States.
     */
    countryCode?: CountryCode;
  }
  
  /**
   * Return type for `companyCreate` mutation.
   */
  export interface CompanyCreatePayload {
    
    /**
     * The created company.
     */
    company?: Company;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyDelete` mutation.
   */
  export interface CompanyDeletePayload {
    
    /**
     * The ID of the deleted company.
     */
    deletedCompanyId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * The valid values for the address type of a company.
   */
  export const enum CompanyAddressType {
    
    /**
     * The address is a billing address.
     */
    BILLING = 'BILLING',
    
    /**
     * The address is a shipping address.
     */
    SHIPPING = 'SHIPPING'
  }
  
  /**
   * Return type for `companyLocationAssignAddress` mutation.
   */
  export interface CompanyLocationAssignAddressPayload {
    
    /**
     * The list of updated addresses on the company location.
     */
    addresses?: Array<CompanyAddress>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * The input fields for the role and contact to assign on a location.
   * 
   */
  export interface CompanyLocationRoleAssign {
    
    /**
     * The role ID.
     */
    companyContactRoleId: string;
    
    /**
     * The company contact ID..
     */
    companyContactId: string;
  }
  
  /**
   * Return type for `companyLocationAssignRoles` mutation.
   */
  export interface CompanyLocationAssignRolesPayload {
    
    /**
     * A list of newly created assignments of company contacts to a company location.
     */
    roleAssignments?: Array<CompanyContactRoleAssignment>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyLocationAssignTaxExemptions` mutation.
   */
  export interface CompanyLocationAssignTaxExemptionsPayload {
    
    /**
     * The updated company location.
     */
    companyLocation?: CompanyLocation;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyLocationCreate` mutation.
   */
  export interface CompanyLocationCreatePayload {
    
    /**
     * The created company location.
     */
    companyLocation?: CompanyLocation;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyLocationCreateTaxRegistration` mutation.
   */
  export interface CompanyLocationCreateTaxRegistrationPayload {
    
    /**
     * The company location with the created tax registration.
     */
    companyLocation?: CompanyLocation;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyLocationDelete` mutation.
   */
  export interface CompanyLocationDeletePayload {
    
    /**
     * The ID of the deleted company location.
     */
    deletedCompanyLocationId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyLocationRevokeRoles` mutation.
   */
  export interface CompanyLocationRevokeRolesPayload {
    
    /**
     * A list of role assignment IDs that were removed from the company location.
     */
    revokedRoleAssignmentIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyLocationRevokeTaxExemptions` mutation.
   */
  export interface CompanyLocationRevokeTaxExemptionsPayload {
    
    /**
     * The updated company location.
     */
    companyLocation?: CompanyLocation;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyLocationRevokeTaxRegistration` mutation.
   */
  export interface CompanyLocationRevokeTaxRegistrationPayload {
    
    /**
     * The updated company location.
     */
    companyLocation?: CompanyLocation;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * The input fields for company location when creating or updating a company location.
   */
  export interface CompanyLocationUpdateInput {
    
    /**
     * The name of the company location.
     */
    name?: string;
    
    /**
     * The phone number of the company location.
     */
    phone?: string;
    
    /**
     * The preferred locale of the company location.
     */
    locale?: string;
    
    /**
     * A unique externally-supplied ID for the company location.
     */
    externalId?: string;
    
    /**
     * A note about the company location.
     */
    note?: string;
    
    /**
     * The configuration for the buyer's checkout at the company location.
     */
    buyerExperienceConfiguration?: BuyerExperienceConfigurationInput;
  }
  
  /**
   * Return type for `companyLocationUpdate` mutation.
   */
  export interface CompanyLocationUpdatePayload {
    
    /**
     * The updated company location.
     */
    companyLocation?: CompanyLocation;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyLocationsDelete` mutation.
   */
  export interface CompanyLocationsDeletePayload {
    
    /**
     * A list of IDs of the deleted company locations.
     */
    deletedCompanyLocationIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyRevokeMainContact` mutation.
   */
  export interface CompanyRevokeMainContactPayload {
    
    /**
     * The company from which the main contact is revoked.
     */
    company?: Company;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `companyUpdate` mutation.
   */
  export interface CompanyUpdatePayload {
    
    /**
     * The updated company.
     */
    company?: Company;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BusinessCustomerUserError>;
  }
  
  /**
   * Return type for `customerAddTaxExemptions` mutation.
   */
  export interface CustomerAddTaxExemptionsPayload {
    
    /**
     * The updated customer.
     */
    customer?: Customer;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerCancelDataErasure` mutation.
   */
  export interface CustomerCancelDataErasurePayload {
    
    /**
     * The ID of the customer whose pending data erasure has been cancelled.
     */
    customerId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerCancelDataErasureUserError>;
  }
  
  /**
   * An error that occurs when cancelling a customer data erasure request.
   */
  export interface CustomerCancelDataErasureUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CustomerCancelDataErasureErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CustomerCancelDataErasureUserError`.
   */
  export const enum CustomerCancelDataErasureErrorCode {
    
    /**
     * Customer does not exist.
     */
    DOES_NOT_EXIST = 'DOES_NOT_EXIST',
    
    /**
     * Failed to cancel customer data erasure.
     */
    FAILED_TO_CANCEL = 'FAILED_TO_CANCEL',
    
    /**
     * Customer's data is not scheduled for erasure.
     */
    NOT_BEING_ERASED = 'NOT_BEING_ERASED'
  }
  
  /**
   * The input fields and values to use when creating or updating a customer.
   */
  export interface CustomerInput {
    
    /**
     * The addresses for a customer.
     */
    addresses?: Array<MailingAddressInput>;
    
    /**
     * The unique email address of the customer.
     */
    email?: string;
    
    /**
     * The customer's first name.
     */
    firstName?: string;
    
    /**
     * The ID of the customer to update.
     */
    id?: string;
    
    /**
     * The customer's last name.
     */
    lastName?: string;
    
    /**
     * The customer's locale.
     */
    locale?: string;
    
    /**
     * Additional metafields to associate to the customer.
     */
    metafields?: Array<MetafieldInput>;
    
    /**
     * A note about the customer.
     */
    note?: string;
    
    /**
     * The unique phone number for the customer.
     */
    phone?: string;
    
    /**
     * A list of tags to associate with the customer. Can be an array or a comma-separated list. Example values: `["tag1", "tag2", "tag3"]`, `"tag1, tag2, tag3"`
     * 
     * Updating `tags` overwrites any existing tags that were previously added to the customer. To add new tags without overwriting
     * existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
     * mutation.
     * 
     */
    tags?: Array<string>;
    
    /**
     * Information that describes when the customer consented to receiving marketing
     *         material by email. The `email` field is required when creating a customer with email marketing
     *         consent information.
     */
    emailMarketingConsent?: CustomerEmailMarketingConsentInput;
    
    /**
     * The marketing consent information when the customer consented to receiving marketing
     *         material by SMS. The `phone` field is required when creating a customer with SMS
     *         marketing consent information.
     */
    smsMarketingConsent?: CustomerSmsMarketingConsentInput;
    
    /**
     * Whether the customer is exempt from paying taxes on their order.
     */
    taxExempt?: boolean;
    
    /**
     * The list of tax exemptions to apply to the customer.
     */
    taxExemptions?: Array<TaxExemption>;
  }
  
  /**
   * Information that describes when a customer consented to
   *         receiving marketing material by email.
   */
  export interface CustomerEmailMarketingConsentInput {
    
    /**
     * The customer opt-in level at the time of subscribing to marketing material.
     */
    marketingOptInLevel?: CustomerMarketingOptInLevel;
    
    /**
     * The current marketing state associated with the customer's email.
     *           If the customer doesn't have an email, then this field is `null`.
     */
    marketingState: CustomerEmailMarketingState;
    
    /**
     * The latest date and time when the customer consented or objected to
     *           receiving marketing material by email.
     */
    consentUpdatedAt?: DateTime;
  }
  
  /**
   * The marketing consent information when the customer consented to
   *         receiving marketing material by SMS.
   */
  export interface CustomerSmsMarketingConsentInput {
    
    /**
     * The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
     * 
     */
    marketingOptInLevel?: CustomerMarketingOptInLevel;
    
    /**
     * The current SMS marketing state for the customer.
     */
    marketingState: CustomerSmsMarketingState;
    
    /**
     * The date and time when the customer consented to receive marketing material by SMS.
     * If no date is provided, then the date and time when the consent information was sent is used.
     * 
     */
    consentUpdatedAt?: DateTime;
  }
  
  /**
   * Return type for `customerCreate` mutation.
   */
  export interface CustomerCreatePayload {
    
    /**
     * The created customer.
     */
    customer?: Customer;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields to delete a customer.
   */
  export interface CustomerDeleteInput {
    
    /**
     * The ID of the customer to delete.
     */
    id: string;
  }
  
  /**
   * Return type for `customerDelete` mutation.
   */
  export interface CustomerDeletePayload {
    
    /**
     * The ID of the deleted customer.
     */
    deletedCustomerId?: string;
    
    /**
     * The shop of the deleted customer.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for the email consent information to update for a given customer ID.
   * 
   */
  export interface CustomerEmailMarketingConsentUpdateInput {
    
    /**
     * The ID of the customer for which to update the email marketing consent information. The customer must have a unique email address associated to the record. If not, add the email address using the `customerUpdate` mutation first.
     */
    customerId: string;
    
    /**
     * The marketing consent information when the customer consented to receiving marketing material by email.
     */
    emailMarketingConsent: CustomerEmailMarketingConsentInput;
  }
  
  /**
   * Return type for `customerEmailMarketingConsentUpdate` mutation.
   */
  export interface CustomerEmailMarketingConsentUpdatePayload {
    
    /**
     * The updated customer.
     * 
     */
    customer?: Customer;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerEmailMarketingConsentUpdateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `CustomerEmailMarketingConsentUpdate`.
   */
  export interface CustomerEmailMarketingConsentUpdateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CustomerEmailMarketingConsentUpdateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CustomerEmailMarketingConsentUpdateUserError`.
   */
  export const enum CustomerEmailMarketingConsentUpdateUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * Unexpected internal error happened.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * Missing a required argument.
     */
    MISSING_ARGUMENT = 'MISSING_ARGUMENT'
  }
  
  /**
   * Return type for `customerGenerateAccountActivationUrl` mutation.
   */
  export interface CustomerGenerateAccountActivationUrlPayload {
    
    /**
     * The generated account activation URL.
     */
    accountActivationUrl?: URL;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerMerge` mutation.
   */
  export interface CustomerMergePayload {
    
    /**
     * The asynchronous job for merging the customers.
     */
    job?: Job;
    
    /**
     * The ID of the customer resulting from the merge.
     */
    resultingCustomerId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerMergeUserError>;
  }
  
  /**
   * An error that occurs while merging two customers.
   */
  export interface CustomerMergeUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CustomerMergeErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CustomerMergeUserError`.
   */
  export const enum CustomerMergeErrorCode {
    
    /**
     * An internal error occurred.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * The customer cannot be merged.
     */
    INVALID_CUSTOMER = 'INVALID_CUSTOMER',
    
    /**
     * The customer ID is invalid.
     */
    INVALID_CUSTOMER_ID = 'INVALID_CUSTOMER_ID',
    
    /**
     * The customer cannot be merged because it has associated gift cards.
     */
    CUSTOMER_HAS_GIFT_CARDS = 'CUSTOMER_HAS_GIFT_CARDS',
    
    /**
     * The customer is missing the attribute requested for override.
     */
    MISSING_OVERRIDE_ATTRIBUTE = 'MISSING_OVERRIDE_ATTRIBUTE',
    
    /**
     * The override attribute is invalid.
     */
    OVERRIDE_ATTRIBUTE_INVALID = 'OVERRIDE_ATTRIBUTE_INVALID'
  }
  
  /**
   * Return type for `customerPaymentMethodCreateFromDuplicationData` mutation.
   */
  export interface CustomerPaymentMethodCreateFromDuplicationDataPayload {
    
    /**
     * The customer payment method.
     */
    customerPaymentMethod?: CustomerPaymentMethod;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerPaymentMethodCreateFromDuplicationDataUserError>;
  }
  
  /**
   * An error that occurs during the execution of `CustomerPaymentMethodCreateFromDuplicationData`.
   */
  export interface CustomerPaymentMethodCreateFromDuplicationDataUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CustomerPaymentMethodCreateFromDuplicationDataUserError`.
   */
  export const enum CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode {
    
    /**
     * Too many requests.
     */
    TOO_MANY_REQUESTS = 'TOO_MANY_REQUESTS',
    
    /**
     * Customer doesn't exist.
     */
    CUSTOMER_DOES_NOT_EXIST = 'CUSTOMER_DOES_NOT_EXIST',
    
    /**
     * Invalid encrypted duplication data.
     */
    INVALID_ENCRYPTED_DUPLICATION_DATA = 'INVALID_ENCRYPTED_DUPLICATION_DATA'
  }
  
  /**
   * Return type for `customerPaymentMethodCreditCardCreate` mutation.
   */
  export interface CustomerPaymentMethodCreditCardCreatePayload {
    
    /**
     * The customer payment method.
     */
    customerPaymentMethod?: CustomerPaymentMethod;
    
    /**
     * If the card verification result is processing. When this is true, customer_payment_method will be null.
     */
    processing?: boolean;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerPaymentMethodCreditCardUpdate` mutation.
   */
  export interface CustomerPaymentMethodCreditCardUpdatePayload {
    
    /**
     * The customer payment method.
     */
    customerPaymentMethod?: CustomerPaymentMethod;
    
    /**
     * If the card verification result is processing. When this is true, customer_payment_method will be null.
     */
    processing?: boolean;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerPaymentMethodGetDuplicationData` mutation.
   */
  export interface CustomerPaymentMethodGetDuplicationDataPayload {
    
    /**
     * The encrypted data from the payment method to be duplicated.
     */
    encryptedDuplicationData?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerPaymentMethodGetDuplicationDataUserError>;
  }
  
  /**
   * An error that occurs during the execution of `CustomerPaymentMethodGetDuplicationData`.
   */
  export interface CustomerPaymentMethodGetDuplicationDataUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CustomerPaymentMethodGetDuplicationDataUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CustomerPaymentMethodGetDuplicationDataUserError`.
   */
  export const enum CustomerPaymentMethodGetDuplicationDataUserErrorCode {
    
    /**
     * Payment method doesn't exist.
     */
    PAYMENT_METHOD_DOES_NOT_EXIST = 'PAYMENT_METHOD_DOES_NOT_EXIST',
    
    /**
     * Invalid payment instrument.
     */
    INVALID_INSTRUMENT = 'INVALID_INSTRUMENT',
    
    /**
     * Too many requests.
     */
    TOO_MANY_REQUESTS = 'TOO_MANY_REQUESTS',
    
    /**
     * Customer doesn't exist.
     */
    CUSTOMER_DOES_NOT_EXIST = 'CUSTOMER_DOES_NOT_EXIST',
    
    /**
     * Target shop cannot be the same as the source.
     */
    SAME_SHOP = 'SAME_SHOP',
    
    /**
     * Must be targeted to another shop in the same organization.
     */
    INVALID_ORGANIZATION_SHOP = 'INVALID_ORGANIZATION_SHOP'
  }
  
  /**
   * Return type for `customerPaymentMethodGetUpdateUrl` mutation.
   */
  export interface CustomerPaymentMethodGetUpdateUrlPayload {
    
    /**
     * The URL to redirect the customer to update the payment method.
     */
    updatePaymentMethodUrl?: URL;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerPaymentMethodGetUpdateUrlUserError>;
  }
  
  /**
   * An error that occurs during the execution of `CustomerPaymentMethodGetUpdateUrl`.
   */
  export interface CustomerPaymentMethodGetUpdateUrlUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CustomerPaymentMethodGetUpdateUrlUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CustomerPaymentMethodGetUpdateUrlUserError`.
   */
  export const enum CustomerPaymentMethodGetUpdateUrlUserErrorCode {
    
    /**
     * Payment method doesn't exist.
     */
    PAYMENT_METHOD_DOES_NOT_EXIST = 'PAYMENT_METHOD_DOES_NOT_EXIST',
    
    /**
     * Invalid payment instrument.
     */
    INVALID_INSTRUMENT = 'INVALID_INSTRUMENT',
    
    /**
     * Too many requests.
     */
    TOO_MANY_REQUESTS = 'TOO_MANY_REQUESTS',
    
    /**
     * Customer doesn't exist.
     */
    CUSTOMER_DOES_NOT_EXIST = 'CUSTOMER_DOES_NOT_EXIST'
  }
  
  /**
   * Return type for `customerPaymentMethodPaypalBillingAgreementCreate` mutation.
   */
  export interface CustomerPaymentMethodPaypalBillingAgreementCreatePayload {
    
    /**
     * The customer payment method.
     */
    customerPaymentMethod?: CustomerPaymentMethod;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerPaymentMethodUserError>;
  }
  
  /**
   * Represents an error in the input of a mutation.
   */
  export interface CustomerPaymentMethodUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CustomerPaymentMethodUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CustomerPaymentMethodUserError`.
   */
  export const enum CustomerPaymentMethodUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN'
  }
  
  /**
   * Return type for `customerPaymentMethodPaypalBillingAgreementUpdate` mutation.
   */
  export interface CustomerPaymentMethodPaypalBillingAgreementUpdatePayload {
    
    /**
     * The customer payment method.
     */
    customerPaymentMethod?: CustomerPaymentMethod;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerPaymentMethodUserError>;
  }
  
  /**
   * The input fields for a remote gateway payment method, only one remote reference permitted.
   * 
   */
  export interface CustomerPaymentMethodRemoteInput {
    
    /**
     * Input containing the fields for a remote stripe payment method.
     * 
     */
    stripePaymentMethod?: RemoteStripePaymentMethodInput;
    
    /**
     * The input fields for a remote authorize net customer profile.
     * 
     */
    authorizeNetCustomerPaymentProfile?: RemoteAuthorizeNetCustomerPaymentProfileInput;
    
    /**
     * The input fields for a remote Braintree customer profile.
     */
    braintreePaymentMethod?: RemoteBraintreePaymentMethodInput;
  }
  
  /**
   * The input fields for a remote stripe payment method.
   * 
   */
  export interface RemoteStripePaymentMethodInput {
    
    /**
     * The customer_id value from the Stripe API.
     * 
     */
    customerId: string;
    
    /**
     * The payment_method_id value from the Stripe API.
     * 
     */
    paymentMethodId?: string;
  }
  
  /**
   * The input fields for a remote Authorize.net customer payment profile.
   * 
   */
  export interface RemoteAuthorizeNetCustomerPaymentProfileInput {
    
    /**
     * The customerProfileId value from the Authorize.net API.
     * 
     */
    customerProfileId: string;
    
    /**
     * The customerPaymentProfileId value from the Authorize.net API.
     * 
     */
    customerPaymentProfileId?: string;
  }
  
  /**
   * The input fields for a remote Braintree customer payment profile.
   * 
   */
  export interface RemoteBraintreePaymentMethodInput {
    
    /**
     * The `customer_id` value from the Braintree API.
     * 
     */
    customerId: string;
    
    /**
     * The `payment_method_token` value from the Braintree API.
     * 
     */
    paymentMethodToken?: string;
  }
  
  /**
   * Return type for `customerPaymentMethodRemoteCreate` mutation.
   */
  export interface CustomerPaymentMethodRemoteCreatePayload {
    
    /**
     * The customer payment method.
     */
    customerPaymentMethod?: CustomerPaymentMethod;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerPaymentMethodRemoteUserError>;
  }
  
  /**
   * Represents an error in the input of a mutation.
   */
  export interface CustomerPaymentMethodRemoteUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CustomerPaymentMethodRemoteUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CustomerPaymentMethodRemoteUserError`.
   */
  export const enum CustomerPaymentMethodRemoteUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * Exactly one remote reference is required.
     */
    EXACTLY_ONE_REMOTE_REFERENCE_REQUIRED = 'EXACTLY_ONE_REMOTE_REFERENCE_REQUIRED',
    
    /**
     * Authorize.net is not enabled for subscriptions.
     */
    AUTHORIZE_NET_NOT_ENABLED_FOR_SUBSCRIPTIONS = 'AUTHORIZE_NET_NOT_ENABLED_FOR_SUBSCRIPTIONS',
    
    /**
     * Braintree is not enabled for subscriptions.
     */
    BRAINTREE_NOT_ENABLED_FOR_SUBSCRIPTIONS = 'BRAINTREE_NOT_ENABLED_FOR_SUBSCRIPTIONS'
  }
  
  /**
   * Return type for `customerPaymentMethodRemoteCreditCardCreate` mutation.
   */
  export interface CustomerPaymentMethodRemoteCreditCardCreatePayload {
    
    /**
     * The customer payment method.
     */
    customerPaymentMethod?: CustomerPaymentMethod;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerPaymentMethodUserError>;
  }
  
  /**
   * Return type for `customerPaymentMethodRevoke` mutation.
   */
  export interface CustomerPaymentMethodRevokePayload {
    
    /**
     * The ID of the revoked customer payment method.
     */
    revokedCustomerPaymentMethodId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerPaymentMethodSendUpdateEmail` mutation.
   */
  export interface CustomerPaymentMethodSendUpdateEmailPayload {
    
    /**
     * The customer to whom an update payment method email was sent.
     */
    customer?: Customer;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerRemoveTaxExemptions` mutation.
   */
  export interface CustomerRemoveTaxExemptionsPayload {
    
    /**
     * The updated customer.
     */
    customer?: Customer;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerReplaceTaxExemptions` mutation.
   */
  export interface CustomerReplaceTaxExemptionsPayload {
    
    /**
     * The updated customer.
     */
    customer?: Customer;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerRequestDataErasure` mutation.
   */
  export interface CustomerRequestDataErasurePayload {
    
    /**
     * The ID of the customer that will be erased.
     */
    customerId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerRequestDataErasureUserError>;
  }
  
  /**
   * An error that occurs when requesting a customer data erasure.
   */
  export interface CustomerRequestDataErasureUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CustomerRequestDataErasureErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CustomerRequestDataErasureUserError`.
   */
  export const enum CustomerRequestDataErasureErrorCode {
    
    /**
     * Customer does not exist.
     */
    DOES_NOT_EXIST = 'DOES_NOT_EXIST',
    
    /**
     * Failed to request customer data erasure.
     */
    FAILED_TO_REQUEST = 'FAILED_TO_REQUEST'
  }
  
  /**
   * The input fields and values for creating a customer segment members query.
   */
  export interface CustomerSegmentMembersQueryInput {
    
    /**
     * The ID of the segment.
     */
    segmentId?: string;
    
    /**
     * The query that's used to filter the members. The query is composed of a combination of conditions on facts about customers such as `email_subscription_status = 'SUBSCRIBED'` with [this syntax](https://shopify.dev/api/shopifyql/segment-query-language-reference).
     */
    query?: string;
    
    /**
     * Reverse the order of the list. The sorting behaviour defaults to ascending order.
     */
    reverse?: boolean;
    
    /**
     * Sort the list by a given key.
     */
    sortKey?: string;
  }
  
  /**
   * Return type for `customerSegmentMembersQueryCreate` mutation.
   */
  export interface CustomerSegmentMembersQueryCreatePayload {
    
    /**
     * The newly created customer segment members query.
     */
    customerSegmentMembersQuery?: CustomerSegmentMembersQuery;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerSegmentMembersQueryUserError>;
  }
  
  /**
   * Represents a customer segment members query custom error.
   * 
   */
  export interface CustomerSegmentMembersQueryUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CustomerSegmentMembersQueryUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CustomerSegmentMembersQueryUserError`.
   */
  export const enum CustomerSegmentMembersQueryUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID'
  }
  
  /**
   * The input fields for updating SMS marketing consent information for a given customer ID.
   * 
   */
  export interface CustomerSmsMarketingConsentUpdateInput {
    
    /**
     * The ID of the customer to update the SMS marketing consent information for. The customer must have a unique phone number associated to the record. If not, add the phone number using the `customerUpdate` mutation first.
     */
    customerId: string;
    
    /**
     * The marketing consent information when the customer consented to receiving marketing material by SMS.
     */
    smsMarketingConsent: CustomerSmsMarketingConsentInput;
  }
  
  /**
   * Return type for `customerSmsMarketingConsentUpdate` mutation.
   */
  export interface CustomerSmsMarketingConsentUpdatePayload {
    
    /**
     * The updated customer.
     * 
     */
    customer?: Customer;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<CustomerSmsMarketingConsentError>;
  }
  
  /**
   * An error that occurs during execution of an SMS marketing consent mutation.
   */
  export interface CustomerSmsMarketingConsentError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: CustomerSmsMarketingConsentErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `CustomerSmsMarketingConsentError`.
   */
  export const enum CustomerSmsMarketingConsentErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * Unexpected internal error happened.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * Missing a required argument.
     */
    MISSING_ARGUMENT = 'MISSING_ARGUMENT'
  }
  
  /**
   * Return type for `customerUpdate` mutation.
   */
  export interface CustomerUpdatePayload {
    
    /**
     * The updated customer.
     */
    customer?: Customer;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `customerUpdateDefaultAddress` mutation.
   */
  export interface CustomerUpdateDefaultAddressPayload {
    
    /**
     * The customer whose address was updated.
     */
    customer?: Customer;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for a delegate access token.
   */
  export interface DelegateAccessTokenInput {
    
    /**
     * The list of scopes that will be delegated to the new access token.
     */
    delegateAccessScope: Array<string>;
    
    /**
     * The amount of time, in seconds, after which the delegate access token is no longer valid.
     */
    expiresIn?: number;
  }
  
  /**
   * Return type for `delegateAccessTokenCreate` mutation.
   */
  export interface DelegateAccessTokenCreatePayload {
    
    /**
     * The delegate access token.
     */
    delegateAccessToken?: DelegateAccessToken;
    
    /**
     * The user's shop.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DelegateAccessTokenCreateUserError>;
  }
  
  /**
   * A token that delegates a set of scopes from the original permission.
   * 
   * To learn more about creating delegate access tokens, refer to
   * [Delegate OAuth access tokens to subsystems]
   * (https://shopify.dev/apps/auth/oauth/delegate-access-tokens).
   * 
   */
  export interface DelegateAccessToken {
    
    /**
     * The list of permissions associated with the token.
     */
    accessScopes: Array<string>;
    
    /**
     * The issued delegate access token.
     */
    accessToken: string;
    
    /**
     * The date and time when the delegate access token was created.
     */
    createdAt: DateTime;
  }
  
  /**
   * An error that occurs during the execution of `DelegateAccessTokenCreate`.
   */
  export interface DelegateAccessTokenCreateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: DelegateAccessTokenCreateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `DelegateAccessTokenCreateUserError`.
   */
  export const enum DelegateAccessTokenCreateUserErrorCode {
    
    /**
     * The access scope can't be empty.
     */
    EMPTY_ACCESS_SCOPE = 'EMPTY_ACCESS_SCOPE',
    
    /**
     * The parent access token can't be a delegate token.
     */
    DELEGATE_ACCESS_TOKEN = 'DELEGATE_ACCESS_TOKEN',
    
    /**
     * The expires_in value must be greater than 0.
     */
    NEGATIVE_EXPIRES_IN = 'NEGATIVE_EXPIRES_IN',
    
    /**
     * The delegate token can't expire after the parent token.
     */
    EXPIRES_AFTER_PARENT = 'EXPIRES_AFTER_PARENT',
    
    /**
     * The parent access token can't have a refresh token.
     */
    REFRESH_TOKEN = 'REFRESH_TOKEN',
    
    /**
     * Persistence failed.
     */
    PERSISTENCE_FAILED = 'PERSISTENCE_FAILED',
    
    /**
     * Unknown scopes.
     */
    UNKNOWN_SCOPES = 'UNKNOWN_SCOPES'
  }
  
  /**
   * Return type for `delegateAccessTokenDestroy` mutation.
   */
  export interface DelegateAccessTokenDestroyPayload {
    
    /**
     * The user's shop.
     */
    shop: Shop;
    
    /**
     * The status of the delegate access token destroy operation. Returns true if successful.
     */
    status?: boolean;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DelegateAccessTokenDestroyUserError>;
  }
  
  /**
   * An error that occurs during the execution of `DelegateAccessTokenDestroy`.
   */
  export interface DelegateAccessTokenDestroyUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: DelegateAccessTokenDestroyUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `DelegateAccessTokenDestroyUserError`.
   */
  export const enum DelegateAccessTokenDestroyUserErrorCode {
    
    /**
     * Persistence failed.
     */
    PERSISTENCE_FAILED = 'PERSISTENCE_FAILED',
    
    /**
     * Access token not found.
     */
    ACCESS_TOKEN_NOT_FOUND = 'ACCESS_TOKEN_NOT_FOUND',
    
    /**
     * Cannot delete parent access token.
     */
    CAN_ONLY_DELETE_DELEGATE_TOKENS = 'CAN_ONLY_DELETE_DELEGATE_TOKENS',
    
    /**
     * Access denied.
     */
    ACCESS_DENIED = 'ACCESS_DENIED'
  }
  
  /**
   * Return type for `deliveryCustomizationActivation` mutation.
   */
  export interface DeliveryCustomizationActivationPayload {
    
    /**
     * The IDs of the updated delivery customizations.
     */
    ids?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DeliveryCustomizationError>;
  }
  
  /**
   * An error that occurs during the execution of a delivery customization mutation.
   */
  export interface DeliveryCustomizationError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: DeliveryCustomizationErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `DeliveryCustomizationError`.
   */
  export const enum DeliveryCustomizationErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * Function not found.
     */
    FUNCTION_NOT_FOUND = 'FUNCTION_NOT_FOUND',
    
    /**
     * Delivery customization not found.
     */
    DELIVERY_CUSTOMIZATION_NOT_FOUND = 'DELIVERY_CUSTOMIZATION_NOT_FOUND',
    
    /**
     * Shop must be on a Shopify Plus plan to activate delivery customizations from a custom app.
     */
    DELIVERY_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE = 'DELIVERY_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE',
    
    /**
     * Unauthorized app scope.
     */
    UNAUTHORIZED_APP_SCOPE = 'UNAUTHORIZED_APP_SCOPE',
    
    /**
     * Maximum delivery customizations are already enabled.
     */
    MAXIMUM_ACTIVE_DELIVERY_CUSTOMIZATIONS = 'MAXIMUM_ACTIVE_DELIVERY_CUSTOMIZATIONS',
    
    /**
     * Shop must be on a Shopify Plus plan to activate functions from a custom app.
     */
    CUSTOM_APP_FUNCTION_NOT_ELIGIBLE = 'CUSTOM_APP_FUNCTION_NOT_ELIGIBLE',
    
    /**
     * Function does not implement the required interface for this delivery customization.
     */
    FUNCTION_DOES_NOT_IMPLEMENT = 'FUNCTION_DOES_NOT_IMPLEMENT',
    
    /**
     * Function is pending deletion.
     */
    FUNCTION_PENDING_DELETION = 'FUNCTION_PENDING_DELETION',
    
    /**
     * Function ID cannot be changed.
     */
    FUNCTION_ID_CANNOT_BE_CHANGED = 'FUNCTION_ID_CANNOT_BE_CHANGED',
    
    /**
     * Required input field must be present.
     */
    REQUIRED_INPUT_FIELD = 'REQUIRED_INPUT_FIELD',
    
    /**
     * Could not create or update metafields.
     */
    INVALID_METAFIELDS = 'INVALID_METAFIELDS'
  }
  
  /**
   * The input fields to create and update a delivery customization.
   */
  export interface DeliveryCustomizationInput {
    
    /**
     * The ID of the function providing the delivery customization.
     */
    functionId?: string;
    
    /**
     * The title of the delivery customization.
     */
    title?: string;
    
    /**
     * The enabled status of the delivery customization.
     */
    enabled?: boolean;
    
    /**
     * Additional metafields to associate to the delivery customization.
     */
    metafields?: Array<MetafieldInput>;
  }
  
  /**
   * Return type for `deliveryCustomizationCreate` mutation.
   */
  export interface DeliveryCustomizationCreatePayload {
    
    /**
     * Returns the created delivery customization.
     */
    deliveryCustomization?: DeliveryCustomization;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DeliveryCustomizationError>;
  }
  
  /**
   * Return type for `deliveryCustomizationDelete` mutation.
   */
  export interface DeliveryCustomizationDeletePayload {
    
    /**
     * Returns the deleted delivery customization ID.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DeliveryCustomizationError>;
  }
  
  /**
   * Return type for `deliveryCustomizationUpdate` mutation.
   */
  export interface DeliveryCustomizationUpdatePayload {
    
    /**
     * Returns the updated delivery customization.
     */
    deliveryCustomization?: DeliveryCustomization;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DeliveryCustomizationError>;
  }
  
  /**
   * The input fields for a delivery profile.
   */
  export interface DeliveryProfileInput {
    
    /**
     * The name of the delivery profile.
     */
    name?: string;
    
    /**
     * The list of location groups associated with the delivery profile.
     */
    profileLocationGroups?: Array<DeliveryProfileLocationGroupInput>;
    
    /**
     * The list of location groups to be created in the delivery profile.
     * 
     * **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 location groups per each request.
     * 
     */
    locationGroupsToCreate?: Array<DeliveryProfileLocationGroupInput>;
    
    /**
     * The list of location groups to be updated in the delivery profile.
     * 
     * **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 location groups per each request.
     * 
     */
    locationGroupsToUpdate?: Array<DeliveryProfileLocationGroupInput>;
    
    /**
     * The list of location groups to be deleted from the delivery profile.
     */
    locationGroupsToDelete?: Array<string>;
    
    /**
     * The list of product variant IDs to be associated with the delivery profile.
     */
    variantsToAssociate?: Array<string>;
    
    /**
     * The list of product variant IDs to be dissociated from the delivery profile.
     * The dissociated product variants are moved back to the default delivery profile.
     * 
     */
    variantsToDissociate?: Array<string>;
    
    /**
     * The list of zone IDs to delete.
     */
    zonesToDelete?: Array<string>;
    
    /**
     * The list of method definition IDs to delete.
     */
    methodDefinitionsToDelete?: Array<string>;
    
    /**
     * The list of condition IDs to delete.
     */
    conditionsToDelete?: Array<string>;
    
    /**
     * The list of selling plan groups to be associated with the delivery profile.
     */
    sellingPlanGroupsToAssociate?: Array<string>;
    
    /**
     * The list of selling plan groups to be dissociated with the delivery profile.
     */
    sellingPlanGroupsToDissociate?: Array<string>;
  }
  
  /**
   * The input fields for a location group associated to a delivery profile.
   */
  export interface DeliveryProfileLocationGroupInput {
    
    /**
     * The globally-unique ID of the delivery profile location group.
     */
    id?: string;
    
    /**
     * The list of location IDs to be moved to this location group.
     */
    locations?: Array<string>;
    
    /**
     * The list of location IDs to be added to this location group.
     * 
     * **Note:** due to API input array limits, a maximum of 250 items can be sent per each request.
     * 
     */
    locationsToAdd?: Array<string>;
    
    /**
     * The list of location IDs to be removed from this location group.
     * 
     * **Note:** due to API input array limits, a maximum of 250 items can be sent per each request.
     * 
     */
    locationsToRemove?: Array<string>;
    
    /**
     * The list of location group zones to create.
     * 
     * **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 zones per each request.
     * 
     */
    zonesToCreate?: Array<DeliveryLocationGroupZoneInput>;
    
    /**
     * The list of location group zones to update.
     * 
     * **Note:** due to the potential complexity of the nested data, it is recommended to send no more than 5 zones per each request.
     * 
     */
    zonesToUpdate?: Array<DeliveryLocationGroupZoneInput>;
  }
  
  /**
   * The input fields for a delivery zone associated to a location group and profile.
   */
  export interface DeliveryLocationGroupZoneInput {
    
    /**
     * A globally-unique ID of the zone.
     */
    id?: string;
    
    /**
     * The name of the zone.
     */
    name?: string;
    
    /**
     * A list of countries to associate with the zone.
     */
    countries?: Array<DeliveryCountryInput>;
    
    /**
     * A list of method definitions to create.
     */
    methodDefinitionsToCreate?: Array<DeliveryMethodDefinitionInput>;
    
    /**
     * A list of method definitions to update.
     */
    methodDefinitionsToUpdate?: Array<DeliveryMethodDefinitionInput>;
  }
  
  /**
   * The input fields to specify a country.
   */
  export interface DeliveryCountryInput {
    
    /**
     * The country code of the country in the ISO 3166-1 alpha-2 format.
     */
    code?: CountryCode;
    
    /**
     * Whether the country is a part of the 'Rest of World' shipping zone.
     */
    restOfWorld?: boolean;
    
    /**
     * The regions associated with this country.
     */
    provinces?: Array<DeliveryProvinceInput>;
    
    /**
     * Associate all available provinces with this country.
     */
    includeAllProvinces?: boolean;
  }
  
  /**
   * The input fields to specify a region.
   */
  export interface DeliveryProvinceInput {
    
    /**
     * The code of the region.
     */
    code: string;
  }
  
  /**
   * The input fields for a method definition.
   */
  export interface DeliveryMethodDefinitionInput {
    
    /**
     * A globally-unique ID of the method definition. Use only when updating a method definiton.
     */
    id?: string;
    
    /**
     * The name of the method definition.
     */
    name?: string;
    
    /**
     * The description of the method definition.
     */
    description?: string;
    
    /**
     * Whether to use this method definition during rate calculation.
     */
    active?: boolean;
    
    /**
     * A rate definition to apply to the method definition.
     */
    rateDefinition?: DeliveryRateDefinitionInput;
    
    /**
     * A participant to apply to the method definition.
     */
    participant?: DeliveryParticipantInput;
    
    /**
     * A list of weight conditions on the method definition.
     */
    weightConditionsToCreate?: Array<DeliveryWeightConditionInput>;
    
    /**
     * A list of price conditions on the method definition.
     */
    priceConditionsToCreate?: Array<DeliveryPriceConditionInput>;
    
    /**
     * A list of conditions to update on the method definition.
     */
    conditionsToUpdate?: Array<DeliveryUpdateConditionInput>;
  }
  
  /**
   * The input fields for a rate definition.
   */
  export interface DeliveryRateDefinitionInput {
    
    /**
     * A globally-unique ID of the rate definition.
     */
    id?: string;
    
    /**
     * The price of the rate definition.
     */
    price: MoneyInput;
  }
  
  /**
   * The input fields for a participant.
   */
  export interface DeliveryParticipantInput {
    
    /**
     * The ID of the participant.
     */
    id?: string;
    
    /**
     * The ID of the carrier service for this participant.
     */
    carrierServiceId?: string;
    
    /**
     * The fixed feed that's defined by the merchant for this participant.
     */
    fixedFee?: MoneyInput;
    
    /**
     * The merchant-defined percentage-of-rate fee for this participant.
     */
    percentageOfRateFee?: number;
    
    /**
     * The list of shipping services offered by the participant.
     */
    participantServices?: Array<DeliveryParticipantServiceInput>;
    
    /**
     * Whether to automatically display new shipping services to the customer when a service becomes available.
     * 
     */
    adaptToNewServices?: boolean;
  }
  
  /**
   * The input fields for a shipping service provided by a participant.
   */
  export interface DeliveryParticipantServiceInput {
    
    /**
     * The name of the service.
     */
    name: string;
    
    /**
     * Whether the service is active.
     */
    active: boolean;
  }
  
  /**
   * The input fields for a weight-based condition of a delivery method definition.
   */
  export interface DeliveryWeightConditionInput {
    
    /**
     * The weight value to compare the weight of an order to.
     */
    criteria?: WeightInput;
    
    /**
     * The operator to use for comparison.
     */
    operator?: DeliveryConditionOperator;
  }
  
  /**
   * The input fields for the weight unit and value inputs.
   * 
   */
  export interface WeightInput {
    
    /**
     * The weight value using the unit system specified with `weight_unit`.
     */
    value: number;
    
    /**
     * Unit of measurement for `value`.
     */
    unit: WeightUnit;
  }
  
  /**
   * The input fields for a price-based condition of a delivery method definition.
   */
  export interface DeliveryPriceConditionInput {
    
    /**
     * The monetary value to compare the price of an order to.
     */
    criteria?: MoneyInput;
    
    /**
     * The operator to use for comparison.
     */
    operator?: DeliveryConditionOperator;
  }
  
  /**
   * The input fields for updating the condition of a delivery method definition.
   */
  export interface DeliveryUpdateConditionInput {
    
    /**
     * A globally-unique ID of the condition.
     */
    id: string;
    
    /**
     * The value that will be used in comparison.
     */
    criteria?: number;
    
    /**
     * The unit associated with the value that will be used in comparison.
     */
    criteriaUnit?: string;
    
    /**
     * The property of an order that will be used in comparison.
     */
    field?: DeliveryConditionField;
    
    /**
     * The operator to use for comparison.
     */
    operator?: DeliveryConditionOperator;
  }
  
  /**
   * Return type for `deliveryProfileCreate` mutation.
   */
  export interface deliveryProfileCreatePayload {
    
    /**
     * The delivery profile that was created.
     */
    profile?: DeliveryProfile;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `deliveryProfileRemove` mutation.
   */
  export interface deliveryProfileRemovePayload {
    
    /**
     * The delivery profile deletion job triggered by the mutation.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `deliveryProfileUpdate` mutation.
   */
  export interface deliveryProfileUpdatePayload {
    
    /**
     * The delivery profile that was updated.
     */
    profile?: DeliveryProfile;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for shop-level delivery settings.
   */
  export interface DeliverySettingInput {
    
    /**
     * Whether legacy compatability mode is enabled for the multi-location delivery profiles feature.
     */
    legacyModeProfiles?: boolean;
  }
  
  /**
   * Return type for `deliverySettingUpdate` mutation.
   */
  export interface DeliverySettingUpdatePayload {
    
    /**
     * The updated delivery shop level settings.
     */
    setting?: DeliverySetting;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `deliveryShippingOriginAssign` mutation.
   */
  export interface DeliveryShippingOriginAssignPayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `discountAutomaticActivate` mutation.
   */
  export interface DiscountAutomaticActivatePayload {
    
    /**
     * The activated automatic discount.
     */
    automaticDiscountNode?: DiscountAutomaticNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * The input fields to create an app discount.
   */
  export interface DiscountAutomaticAppInput {
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith?: DiscountCombinesWithInput;
    
    /**
     * The ID of the function providing the app discount type.
     */
    functionId?: string;
    
    /**
     * The title of the discount.
     */
    title?: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt?: DateTime;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * Additional metafields to associate to the discount.
     */
    metafields?: Array<MetafieldInput>;
  }
  
  /**
   * The input fields to determine which discount classes the discount can combine with.
   */
  export interface DiscountCombinesWithInput {
    
    /**
     * Combines with product discounts.
     */
    productDiscounts?: boolean;
    
    /**
     * Combines with order discounts.
     */
    orderDiscounts?: boolean;
    
    /**
     * Combines with shipping discounts.
     */
    shippingDiscounts?: boolean;
  }
  
  /**
   * Return type for `discountAutomaticAppCreate` mutation.
   */
  export interface DiscountAutomaticAppCreatePayload {
    
    /**
     * The created app discount.
     */
    automaticAppDiscount?: DiscountAutomaticApp;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountAutomaticAppUpdate` mutation.
   */
  export interface DiscountAutomaticAppUpdatePayload {
    
    /**
     * The updated automatic app discount.
     */
    automaticAppDiscount?: DiscountAutomaticApp;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * The input fields to create or update an automatic basic discount.
   */
  export interface DiscountAutomaticBasicInput {
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith?: DiscountCombinesWithInput;
    
    /**
     * The title of the discount.
     */
    title?: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt?: DateTime;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * The minimum subtotal or quantity that's required for the discount to be applied.
     */
    minimumRequirement?: DiscountMinimumRequirementInput;
    
    /**
     * Information about the qualifying items and their discount.
     */
    customerGets?: DiscountCustomerGetsInput;
    
    /**
     * The number of times a discount applies on recurring purchases (subscriptions).
     */
    recurringCycleLimit?: number;
  }
  
  /**
   * The input fields for the minimum quantity or subtotal required for a discount.
   */
  export interface DiscountMinimumRequirementInput {
    
    /**
     * The minimum required quantity.
     */
    quantity?: DiscountMinimumQuantityInput;
    
    /**
     * The minimum required subtotal.
     */
    subtotal?: DiscountMinimumSubtotalInput;
  }
  
  /**
   * The input fields for the minimum quantity required for the discount.
   */
  export interface DiscountMinimumQuantityInput {
    
    /**
     * The minimum quantity of items that's required for the discount to be applied.
     */
    greaterThanOrEqualToQuantity?: UnsignedInt64;
  }
  
  /**
   * The input fields for the minimum subtotal required for a discount.
   */
  export interface DiscountMinimumSubtotalInput {
    
    /**
     * The minimum subtotal that's required for the discount to be applied.
     */
    greaterThanOrEqualToSubtotal?: Decimal;
  }
  
  /**
   * Specifies the items that will be discounted, the quantity of items that will be discounted, and the value of discount.
   */
  export interface DiscountCustomerGetsInput {
    
    /**
     * The quantity of items discounted and the discount value.
     */
    value?: DiscountCustomerGetsValueInput;
    
    /**
     * The IDs of the items that the customer gets. The items can be either collections or products.
     */
    items?: DiscountItemsInput;
    
    /**
     * Whether the discount applies on regular one-time-purchase items.
     */
    appliesOnOneTimePurchase?: boolean;
    
    /**
     * Whether the discount applies on subscription items.
     */
    appliesOnSubscription?: boolean;
  }
  
  /**
   * The input fields for the quantity of items discounted and the discount value.
   */
  export interface DiscountCustomerGetsValueInput {
    
    /**
     * The quantity of the items that are discounted and the discount value.
     */
    discountOnQuantity?: DiscountOnQuantityInput;
    
    /**
     * The percentage value of the discount. Value must be between 0.00 - 1.00.
     */
    percentage?: number;
    
    /**
     * The value of the discount.
     */
    discountAmount?: DiscountAmountInput;
  }
  
  /**
   * The input fields for the quantity of items discounted and the discount value.
   */
  export interface DiscountOnQuantityInput {
    
    /**
     * The quantity of items that are discounted.
     */
    quantity?: UnsignedInt64;
    
    /**
     * The percentage value of the discount.
     */
    effect?: DiscountEffectInput;
  }
  
  /**
   * The input fields for how the discount will be applied. Currently, only percentage off is supported.
   */
  export interface DiscountEffectInput {
    
    /**
     * The percentage value of the discount. Value must be between 0.00 - 1.00.
     */
    percentage?: number;
  }
  
  /**
   * The input fields for the value of the discount and how it is applied.
   */
  export interface DiscountAmountInput {
    
    /**
     * The value of the discount.
     */
    amount?: Decimal;
    
    /**
     * If true, then the discount is applied to each of the entitled items. If false, then the amount is split across all of the entitled items.
     */
    appliesOnEachItem?: boolean;
  }
  
  /**
   * The input fields for the items attached to a discount. You can specify the discount items by product ID or collection ID.
   * 
   */
  export interface DiscountItemsInput {
    
    /**
     * The products and product variants that are attached to a discount.
     */
    products?: DiscountProductsInput;
    
    /**
     * The collections that are attached to a discount.
     */
    collections?: DiscountCollectionsInput;
    
    /**
     * Whether all items should be selected.
     */
    all?: boolean;
  }
  
  /**
   * The input fields for the products and product variants attached to a discount.
   */
  export interface DiscountProductsInput {
    
    /**
     * Specifies list of product ids to add.
     */
    productsToAdd?: Array<string>;
    
    /**
     * Specifies list of product ids to remove.
     */
    productsToRemove?: Array<string>;
    
    /**
     * Specifies list of product variant ids to add.
     */
    productVariantsToAdd?: Array<string>;
    
    /**
     * Specifies list of product variant ids to remove.
     */
    productVariantsToRemove?: Array<string>;
  }
  
  /**
   * The input fields for collections attached to a discount.
   */
  export interface DiscountCollectionsInput {
    
    /**
     * Specifies list of collection ids to add.
     */
    add?: Array<string>;
    
    /**
     * Specifies list of collection ids to remove.
     */
    remove?: Array<string>;
  }
  
  /**
   * Return type for `discountAutomaticBasicCreate` mutation.
   */
  export interface DiscountAutomaticBasicCreatePayload {
    
    /**
     * The created automatic discount.
     */
    automaticDiscountNode?: DiscountAutomaticNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountAutomaticBasicUpdate` mutation.
   */
  export interface DiscountAutomaticBasicUpdatePayload {
    
    /**
     * The updated automatic discount.
     */
    automaticDiscountNode?: DiscountAutomaticNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountAutomaticBulkDelete` mutation.
   */
  export interface DiscountAutomaticBulkDeletePayload {
    
    /**
     * The asynchronous job removing the automatic discounts.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * The input fields to create or update an automatic Buy X, Get Y (BXGY) discount.
   */
  export interface DiscountAutomaticBxgyInput {
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith?: DiscountCombinesWithInput;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt?: DateTime;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * The title of the discount.
     */
    title?: string;
    
    /**
     * The maximum number of times that the discount can be applied to an order.
     */
    usesPerOrderLimit?: UnsignedInt64;
    
    /**
     * The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
     */
    customerBuys?: DiscountCustomerBuysInput;
    
    /**
     * The qualifying items in an order, the quantity of each one, and the total value of the discount.
     */
    customerGets?: DiscountCustomerGetsInput;
  }
  
  /**
   * The input fields for prerequisite items and quantity for the discount.
   */
  export interface DiscountCustomerBuysInput {
    
    /**
     * The quantity of prerequisite items.
     */
    value?: DiscountCustomerBuysValueInput;
    
    /**
     * The IDs of items that the customer buys. The items can be either collections or products.
     */
    items?: DiscountItemsInput;
  }
  
  /**
   * The input fields for prerequisite quantity or minimum purchase amount required for the discount.
   */
  export interface DiscountCustomerBuysValueInput {
    
    /**
     * The quantity of prerequisite items.
     */
    quantity?: UnsignedInt64;
    
    /**
     * The prerequisite minimum purchase amount required for the discount to be applicable.
     */
    amount?: Decimal;
  }
  
  /**
   * Return type for `discountAutomaticBxgyCreate` mutation.
   */
  export interface DiscountAutomaticBxgyCreatePayload {
    
    /**
     * The created automatic discount.
     */
    automaticDiscountNode?: DiscountAutomaticNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountAutomaticBxgyUpdate` mutation.
   */
  export interface DiscountAutomaticBxgyUpdatePayload {
    
    /**
     * The updated automatic discount.
     */
    automaticDiscountNode?: DiscountAutomaticNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountAutomaticDeactivate` mutation.
   */
  export interface DiscountAutomaticDeactivatePayload {
    
    /**
     * The deactivated automatic discount.
     */
    automaticDiscountNode?: DiscountAutomaticNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountAutomaticDelete` mutation.
   */
  export interface DiscountAutomaticDeletePayload {
    
    /**
     * The deleted automatic discount ID.
     */
    deletedAutomaticDiscountId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * The input fields to create or update free shipping automatic discount.
   */
  export interface DiscountAutomaticFreeShippingInput {
    
    /**
     * Determines which discount classes the shipping discount can combine with.
     */
    combinesWith?: DiscountCombinesWithInput;
    
    /**
     * The title of the discount.
     */
    title?: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt?: DateTime;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * The minimum subtotal or quantity that's required for the discount to be applied.
     */
    minimumRequirement?: DiscountMinimumRequirementInput;
    
    /**
     * A list of destinations where the discount will apply.
     */
    destination?: DiscountShippingDestinationSelectionInput;
    
    /**
     * The maximum shipping price that qualifies for the discount.
     */
    maximumShippingPrice?: Decimal;
    
    /**
     * Whether the discount applies on regular one-time-purchase items.
     */
    appliesOnOneTimePurchase?: boolean;
    
    /**
     * Whether the discount applies on subscription items.
     */
    appliesOnSubscription?: boolean;
    
    /**
     * The number of times a discount applies on recurring purchases (subscriptions).
     */
    recurringCycleLimit?: number;
  }
  
  /**
   * The input fields for the destinations where the free shipping discount will be applied.
   */
  export interface DiscountShippingDestinationSelectionInput {
    
    /**
     * Whether the discount code applies to all countries.
     */
    all?: boolean;
    
    /**
     * A list of countries where the discount code will apply.
     */
    countries?: DiscountCountriesInput;
  }
  
  /**
   * The input fields for a list of countries to add or remove from the free shipping discount.
   */
  export interface DiscountCountriesInput {
    
    /**
     * The country codes to add to the list of countries where the discount applies.
     */
    add?: Array<CountryCode>;
    
    /**
     * The country codes to remove from the list of countries where the discount applies.
     */
    remove?: Array<CountryCode>;
    
    /**
     * Whether the discount code is applicable to countries that haven't been defined in the shop's shipping zones.
     */
    includeRestOfWorld?: boolean;
  }
  
  /**
   * Return type for `discountAutomaticFreeShippingCreate` mutation.
   */
  export interface DiscountAutomaticFreeShippingCreatePayload {
    
    /**
     * The created automatic discount.
     */
    automaticDiscountNode?: DiscountAutomaticNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountAutomaticFreeShippingUpdate` mutation.
   */
  export interface DiscountAutomaticFreeShippingUpdatePayload {
    
    /**
     * The updated automatic discount.
     */
    automaticDiscountNode?: DiscountAutomaticNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountCodeActivate` mutation.
   */
  export interface DiscountCodeActivatePayload {
    
    /**
     * The activated code discount.
     */
    codeDiscountNode?: DiscountCodeNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * The input fields to create a code app discount.
   */
  export interface DiscountCodeAppInput {
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith?: DiscountCombinesWithInput;
    
    /**
     * The ID of the function providing the app discount type.
     */
    functionId?: string;
    
    /**
     * The title of the discount.
     */
    title?: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt?: DateTime;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
     */
    usageLimit?: number;
    
    /**
     * Whether the discount can be applied only once per customer.
     */
    appliesOncePerCustomer?: boolean;
    
    /**
     * The customers that can use the discount.
     */
    customerSelection?: DiscountCustomerSelectionInput;
    
    /**
     * The code to use the discount.
     */
    code?: string;
    
    /**
     * Additional metafields to associate to the discount.
     */
    metafields?: Array<MetafieldInput>;
  }
  
  /**
   * The input fields for the customers who can use this discount.
   */
  export interface DiscountCustomerSelectionInput {
    
    /**
     * Whether all customers can use this discount.
     */
    all?: boolean;
    
    /**
     * The list of customer IDs to add or remove from the list of customers.
     */
    customers?: DiscountCustomersInput;
    
    /**
     * The list of customer segment IDs to add or remove from the list of customer segments.
     */
    customerSegments?: DiscountCustomerSegmentsInput;
  }
  
  /**
   * The input fields for which customers to add to or remove from the discount.
   */
  export interface DiscountCustomersInput {
    
    /**
     * A list of customers to add to the current list of customers who can use the discount.
     */
    add?: Array<string>;
    
    /**
     * A list of customers to remove from the current list of customers who can use the discount.
     */
    remove?: Array<string>;
  }
  
  /**
   * The input fields for which customer segments to add to or remove from the discount.
   */
  export interface DiscountCustomerSegmentsInput {
    
    /**
     * A list of customer segments to add to the current list of customer segments.
     */
    add?: Array<string>;
    
    /**
     * A list of customer segments to remove from the current list of customer segments.
     */
    remove?: Array<string>;
  }
  
  /**
   * Return type for `discountCodeAppCreate` mutation.
   */
  export interface DiscountCodeAppCreatePayload {
    
    /**
     * The created code app discount.
     */
    codeAppDiscount?: DiscountCodeApp;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountCodeAppUpdate` mutation.
   */
  export interface DiscountCodeAppUpdatePayload {
    
    /**
     * The updated code app discount.
     */
    codeAppDiscount?: DiscountCodeApp;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * The input fields to create or update a basic code discount.
   */
  export interface DiscountCodeBasicInput {
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith?: DiscountCombinesWithInput;
    
    /**
     * The title of the discount.
     */
    title?: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt?: DateTime;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
     */
    usageLimit?: number;
    
    /**
     * Whether the discount can be applied only once per customer.
     */
    appliesOncePerCustomer?: boolean;
    
    /**
     * The minimum subtotal or quantity that's required for the discount to be applied.
     */
    minimumRequirement?: DiscountMinimumRequirementInput;
    
    /**
     * The qualifying items in an order, the quantity of each one, and the total value of the discount.
     */
    customerGets?: DiscountCustomerGetsInput;
    
    /**
     * The customers that can use the discount.
     */
    customerSelection?: DiscountCustomerSelectionInput;
    
    /**
     * The code to use the discount.
     */
    code?: string;
    
    /**
     * The number of times a discount applies on recurring purchases (subscriptions).
     */
    recurringCycleLimit?: number;
  }
  
  /**
   * Return type for `discountCodeBasicCreate` mutation.
   */
  export interface DiscountCodeBasicCreatePayload {
    
    /**
     * The created code discount.
     */
    codeDiscountNode?: DiscountCodeNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountCodeBasicUpdate` mutation.
   */
  export interface DiscountCodeBasicUpdatePayload {
    
    /**
     * The updated code discount.
     */
    codeDiscountNode?: DiscountCodeNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountCodeBulkActivate` mutation.
   */
  export interface DiscountCodeBulkActivatePayload {
    
    /**
     * The asynchronous job that activates the code discounts.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountCodeBulkDeactivate` mutation.
   */
  export interface DiscountCodeBulkDeactivatePayload {
    
    /**
     * The asynchronous job that deactivates the code discounts.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountCodeBulkDelete` mutation.
   */
  export interface DiscountCodeBulkDeletePayload {
    
    /**
     * The asynchronous job that deletes the code discounts.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * The input fields to create or update a BXGY code discount.
   */
  export interface DiscountCodeBxgyInput {
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith?: DiscountCombinesWithInput;
    
    /**
     * The title of the discount.
     */
    title?: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt?: DateTime;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
     */
    customerBuys?: DiscountCustomerBuysInput;
    
    /**
     * The qualifying items that will be discounted, the quantity of each one, and the total value of the discount.
     */
    customerGets?: DiscountCustomerGetsInput;
    
    /**
     * The customers that are eligible to use the discount.
     */
    customerSelection?: DiscountCustomerSelectionInput;
    
    /**
     * The code to use the discount.
     */
    code?: string;
    
    /**
     * The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
     */
    usageLimit?: number;
    
    /**
     * The maximum number of times that the discount can be applied to an order.
     */
    usesPerOrderLimit?: number;
    
    /**
     * Whether the discount can be applied only once per customer.
     */
    appliesOncePerCustomer?: boolean;
  }
  
  /**
   * Return type for `discountCodeBxgyCreate` mutation.
   */
  export interface DiscountCodeBxgyCreatePayload {
    
    /**
     * The created code discount.
     */
    codeDiscountNode?: DiscountCodeNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountCodeBxgyUpdate` mutation.
   */
  export interface DiscountCodeBxgyUpdatePayload {
    
    /**
     * The updated code discount.
     */
    codeDiscountNode?: DiscountCodeNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountCodeDeactivate` mutation.
   */
  export interface DiscountCodeDeactivatePayload {
    
    /**
     * The deactivated code discount.
     */
    codeDiscountNode?: DiscountCodeNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountCodeDelete` mutation.
   */
  export interface DiscountCodeDeletePayload {
    
    /**
     * The deleted code discount ID.
     */
    deletedCodeDiscountId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * The input fields to create or update a free shipping code discount.
   */
  export interface DiscountCodeFreeShippingInput {
    
    /**
     * Determines which discount classes the shipping discount can combine with.
     */
    combinesWith?: DiscountCombinesWithInput;
    
    /**
     * The title of the discount.
     */
    title?: string;
    
    /**
     * The date and time when the discount starts.
     */
    startsAt?: DateTime;
    
    /**
     * The date and time when the discount ends. For open-ended discounts, use `null`.
     */
    endsAt?: DateTime;
    
    /**
     * The code to use the discount.
     */
    code?: string;
    
    /**
     * The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
     */
    usageLimit?: number;
    
    /**
     * Whether the discount can be applied only once per customer.
     */
    appliesOncePerCustomer?: boolean;
    
    /**
     * The minimum subtotal or quantity that's required for the discount to be applied.
     */
    minimumRequirement?: DiscountMinimumRequirementInput;
    
    /**
     * The customers that are eligible to use the discount.
     */
    customerSelection?: DiscountCustomerSelectionInput;
    
    /**
     * A list of destinations where the discount will apply.
     */
    destination?: DiscountShippingDestinationSelectionInput;
    
    /**
     * The maximum shipping price that qualifies for the discount.
     */
    maximumShippingPrice?: Decimal;
    
    /**
     * The number of times a discount applies on recurring purchases (subscriptions).
     */
    recurringCycleLimit?: number;
    
    /**
     * Whether the discount applies on regular one-time-purchase items.
     */
    appliesOnOneTimePurchase?: boolean;
    
    /**
     * Whether the discount applies on subscription items.
     */
    appliesOnSubscription?: boolean;
  }
  
  /**
   * Return type for `discountCodeFreeShippingCreate` mutation.
   */
  export interface DiscountCodeFreeShippingCreatePayload {
    
    /**
     * The created code discount.
     */
    codeDiscountNode?: DiscountCodeNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountCodeFreeShippingUpdate` mutation.
   */
  export interface DiscountCodeFreeShippingUpdatePayload {
    
    /**
     * The updated code discount.
     */
    codeDiscountNode?: DiscountCodeNode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * Return type for `discountCodeRedeemCodeBulkDelete` mutation.
   */
  export interface DiscountCodeRedeemCodeBulkDeletePayload {
    
    /**
     * The asynchronous job that deletes the discount redeem codes.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * The input fields for the redeem code to attach to a discount.
   */
  export interface DiscountRedeemCodeInput {
    
    /**
     * The code that a customer can use at checkout to receive the associated discount.
     */
    code: string;
  }
  
  /**
   * Return type for `discountRedeemCodeBulkAdd` mutation.
   */
  export interface DiscountRedeemCodeBulkAddPayload {
    
    /**
     * The ID of the discount redeem code bulk creation operation. The properties and status of the operation can be tracked using the [`DiscountRedeemCodeBulkCreation` query](https://shopify.dev/api/admin-graphql/2022-04/queries/discountRedeemCodeBulkCreation).
     */
    bulkCreation?: DiscountRedeemCodeBulkCreation;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DiscountUserError>;
  }
  
  /**
   * The input fields required to update a dispute evidence object.
   */
  export interface ShopifyPaymentsDisputeEvidenceUpdateInput {
    
    /**
     * Customer email address.
     */
    customerEmailAddress?: string;
    
    /**
     * Customer last name.
     */
    customerLastName?: string;
    
    /**
     * Customer first name.
     */
    customerFirstName?: string;
    
    /**
     * The shipping address associated with the dispute evidence.
     */
    shippingAddress?: MailingAddressInput;
    
    /**
     * Uncategorized text.
     */
    uncategorizedText?: string;
    
    /**
     * Activity logs.
     */
    accessActivityLog?: string;
    
    /**
     * Cancellation policy disclosure.
     */
    cancellationPolicyDisclosure?: string;
    
    /**
     * Cancellation rebuttal.
     */
    cancellationRebuttal?: string;
    
    /**
     * Refund policy disclosure.
     */
    refundPolicyDisclosure?: string;
    
    /**
     * Refund refusal explanation.
     */
    refundRefusalExplanation?: string;
    
    /**
     * Cancellation policy file.
     */
    cancellationPolicyFile?: ShopifyPaymentsDisputeFileUploadUpdateInput;
    
    /**
     * Customer communication file.
     */
    customerCommunicationFile?: ShopifyPaymentsDisputeFileUploadUpdateInput;
    
    /**
     * Refund policy file.
     */
    refundPolicyFile?: ShopifyPaymentsDisputeFileUploadUpdateInput;
    
    /**
     * Shipping documentation file.
     */
    shippingDocumentationFile?: ShopifyPaymentsDisputeFileUploadUpdateInput;
    
    /**
     * Uncategorized file.
     */
    uncategorizedFile?: ShopifyPaymentsDisputeFileUploadUpdateInput;
    
    /**
     * Service documentation file.
     */
    serviceDocumentationFile?: ShopifyPaymentsDisputeFileUploadUpdateInput;
    
    /**
     * Whether to submit the evidence.
     */
    submitEvidence?: boolean;
  }
  
  /**
   * The input fields required to update a dispute file upload object.
   */
  export interface ShopifyPaymentsDisputeFileUploadUpdateInput {
    
    /**
     * The ID of the file upload to be updated.
     */
    id: string;
    
    /**
     * Whether to delete this file upload.
     */
    destroy?: boolean;
  }
  
  /**
   * Return type for `disputeEvidenceUpdate` mutation.
   */
  export interface DisputeEvidenceUpdatePayload {
    
    /**
     * The updated dispute evidence.
     */
    disputeEvidence?: ShopifyPaymentsDisputeEvidence;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DisputeEvidenceUpdateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `DisputeEvidenceUpdate`.
   */
  export interface DisputeEvidenceUpdateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: DisputeEvidenceUpdateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `DisputeEvidenceUpdateUserError`.
   */
  export const enum DisputeEvidenceUpdateUserErrorCode {
    
    /**
     * Dispute evidence could not be found.
     */
    DISPUTE_EVIDENCE_NOT_FOUND = 'DISPUTE_EVIDENCE_NOT_FOUND',
    
    /**
     * Evidence already accepted.
     */
    EVIDENCE_ALREADY_ACCEPTED = 'EVIDENCE_ALREADY_ACCEPTED',
    
    /**
     * Evidence past due date.
     */
    EVIDENCE_PAST_DUE_DATE = 'EVIDENCE_PAST_DUE_DATE',
    
    /**
     * Combined files size is too large.
     */
    FILES_SIZE_EXCEEDED_LIMIT = 'FILES_SIZE_EXCEEDED_LIMIT',
    
    /**
     * Individual file size is too large.
     */
    TOO_LARGE = 'TOO_LARGE',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID'
  }
  
  /**
   * Return type for `draftOrderBulkAddTags` mutation.
   */
  export interface DraftOrderBulkAddTagsPayload {
    
    /**
     * The asynchronous job for adding tags to the draft orders.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `draftOrderBulkDelete` mutation.
   */
  export interface DraftOrderBulkDeletePayload {
    
    /**
     * The asynchronous job for deleting the draft orders.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `draftOrderBulkRemoveTags` mutation.
   */
  export interface DraftOrderBulkRemoveTagsPayload {
    
    /**
     * The asynchronous job for removing tags from the draft orders.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields used to create or update a draft order.
   */
  export interface DraftOrderInput {
    
    /**
     * The discount that will be applied to the draft order.
     * A draft order line item can have one discount. A draft order can also have one order-level discount.
     * 
     */
    appliedDiscount?: DraftOrderAppliedDiscountInput;
    
    /**
     * The mailing address associated with the payment method.
     * 
     */
    billingAddress?: MailingAddressInput;
    
    /**
     * Extra information added to the customer.
     * 
     */
    customAttributes?: Array<AttributeInput>;
    
    /**
     * The customer's email address.
     * 
     */
    email?: string;
    
    /**
     * Product variant line item or custom line item associated to the draft order.
     * Each draft order must include at least one line item.
     * 
     */
    lineItems?: Array<DraftOrderLineItemInput>;
    
    /**
     * Metafields attached to the draft order.
     * 
     */
    metafields?: Array<MetafieldInput>;
    
    /**
     * The localization extensions attached to the draft order. For example, Tax IDs.
     */
    localizationExtensions?: Array<LocalizationExtensionInput>;
    
    /**
     * The text of an optional note that a shop owner can attach to the draft order.
     * 
     */
    note?: string;
    
    /**
     * The mailing address to where the order will be shipped.
     * 
     */
    shippingAddress?: MailingAddressInput;
    
    /**
     * A shipping line object, which details the shipping method used.
     * 
     */
    shippingLine?: ShippingLineInput;
    
    /**
     * A comma separated list of tags that have been added to the draft order.
     * 
     */
    tags?: Array<string>;
    
    /**
     * Whether or not taxes are exempt for the draft order.
     * If false, then Shopify will refer to the taxable field for each line item.
     * If a customer is applied to the draft order, then Shopify will use the customer's tax exempt field instead.
     * 
     */
    taxExempt?: boolean;
    
    /**
     * Sent as part of a draft order object to load customer shipping information.
     * 
     */
    useCustomerDefaultAddress?: boolean;
    
    /**
     * Whether the draft order will be visible to the customer on the self-serve portal.
     */
    visibleToCustomer?: boolean;
    
    /**
     * Time after which inventory will automatically be restocked.
     */
    reserveInventoryUntil?: DateTime;
    
    /**
     * The payment currency of the customer for this draft order.
     */
    presentmentCurrencyCode?: CurrencyCode;
    
    /**
     * The selected country code that determines the pricing of the draft order.
     */
    marketRegionCountryCode?: CountryCode;
    
    /**
     * The customer's phone number.
     */
    phone?: string;
    
    /**
     * The fields used to create payment terms.
     */
    paymentTerms?: PaymentTermsInput;
    
    /**
     * The purchasing entity for this draft order.
     */
    purchasingEntity?: PurchasingEntityInput;
    
    /**
     * The source of the checkout.
     *           To use this field for sales attribution, you must register the channels that your app is managing.
     *           You can register the channels that your app is managing by completing
     *           [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link).
     *           After you've submitted your request, you need to wait for your request to be processed by Shopify.
     *           You can find a list of your channels in the Partner Dashboard, in your app's Marketplace extension.
     *           You need to specify the handle as the `source_name` value in your request.
     *           The handle is the channel that the order was placed from.
     */
    sourceName?: string;
    
    /**
     * The purchase order number.
     */
    poNumber?: string;
  }
  
  /**
   * The input fields for applying an order-level discount to a draft order.
   */
  export interface DraftOrderAppliedDiscountInput {
    
    /**
     * The applied amount of the discount.
     * If the type of the discount is fixed amount, then this is the fixed dollar amount.
     * If the type is percentage, then this is the subtotal multiplied by the percentage.
     * 
     */
    amount?: Money;
    
    /**
     * Reason for the discount.
     * 
     */
    description?: string;
    
    /**
     * Title of the discount.
     * 
     */
    title?: string;
    
    /**
     * The value of the discount.
     * If the type of the discount is fixed amount, then this is a fixed dollar amount.
     * If the type is percentage, then this is the percentage.
     * 
     */
    value: number;
    
    /**
     * The type of discount.
     * 
     */
    valueType: DraftOrderAppliedDiscountType;
  }
  
  /**
   * The input fields for an attribute.
   */
  export interface AttributeInput {
    
    /**
     * Key or name of the attribute.
     */
    key: string;
    
    /**
     * Value of the attribute.
     */
    value: string;
  }
  
  /**
   * The input fields used to create a line item for a draft order.
   */
  export interface DraftOrderLineItemInput {
    
    /**
     * Discount which will be applied to the line item.
     * 
     */
    appliedDiscount?: DraftOrderAppliedDiscountInput;
    
    /**
     * Represents a generic custom attribute using a key value pair.
     * 
     */
    customAttributes?: Array<AttributeInput>;
    
    /**
     * The price without any discounts applied. This value is ignored when `variantId` is provided.
     */
    originalUnitPrice?: Money;
    
    /**
     * The number of products that were purchased.
     * 
     */
    quantity: number;
    
    /**
     * Whether physical shipping is required. This value is ignored when `variantId` is provided.
     * 
     */
    requiresShipping?: boolean;
    
    /**
     * The SKU number of the item. This value is ignored when `variantId` is provided.
     */
    sku?: string;
    
    /**
     * Whether the item is taxable. This value is ignored when `variantId` is provided.
     */
    taxable?: boolean;
    
    /**
     * Title of the item. Ignored when `variantId` is provided.
     */
    title?: string;
    
    /**
     * The ID of the product variant corresponding to the line item.
     * Null if custom line item. Required if product variant line item.
     * 
     */
    variantId?: string;
    
    /**
     * Specifies the weight unit and value inputs.
     * This value is ignored when `variantId` is provided.
     * 
     */
    weight?: WeightInput;
  }
  
  /**
   * The input fields for a LocalizationExtensionInput.
   * 
   */
  export interface LocalizationExtensionInput {
    
    /**
     * The key for the localization extension.
     */
    key: LocalizationExtensionKey;
    
    /**
     * The localization extension value.
     */
    value: string;
  }
  
  /**
   * The input fields for specifying the shipping details for the order.
   */
  export interface ShippingLineInput {
    
    /**
     * Price of the shipping rate.
     */
    price?: Money;
    
    /**
     * A unique identifier for the shipping rate.
     */
    shippingRateHandle?: string;
    
    /**
     * Title of the shipping rate.
     */
    title?: string;
  }
  
  /**
   * The input fields to create payment terms. Payment terms set the date that payment is due.
   */
  export interface PaymentTermsInput {
    
    /**
     * Specifies the ID of the payment terms template.
     *         Payment terms templates provide preset configurations to create common payment terms.
     *         Refer to the
     *         [PaymentTermsTemplate](https://shopify.dev/api/admin-graphql/latest/objects/paymenttermstemplate)
     *         object for more details.
     */
    paymentTermsTemplateId?: string;
    
    /**
     * Specifies the payment schedules for the payment terms.
     */
    paymentSchedules?: Array<PaymentScheduleInput>;
  }
  
  /**
   * The input fields used to create a payment schedule for payment terms.
   */
  export interface PaymentScheduleInput {
    
    /**
     * Specifies the date and time that the payment schedule was issued. This field must be provided for net type payment terms.
     */
    issuedAt?: DateTime;
    
    /**
     * Specifies the date and time when the payment schedule is due. This field must be provided for fixed type payment terms.
     */
    dueAt?: DateTime;
  }
  
  /**
   * The input fields for a purchasing entity. Can either be a customer or a purchasing company.
   */
  export interface PurchasingEntityInput {
    
    /**
     * Represents a customer. Null if there's a purchasing company.
     */
    customerId?: string;
    
    /**
     * Represents a purchasing company. Null if there's a customer.
     */
    purchasingCompany?: PurchasingCompanyInput;
  }
  
  /**
   * The input fields for a purchasing company, which is a combination of company, company contact, and company location.
   * 
   */
  export interface PurchasingCompanyInput {
    
    /**
     * ID of the company.
     */
    companyId: string;
    
    /**
     * ID of the company contact.
     */
    companyContactId: string;
    
    /**
     * ID of the company location.
     */
    companyLocationId: string;
  }
  
  /**
   * Return type for `draftOrderCalculate` mutation.
   */
  export interface DraftOrderCalculatePayload {
    
    /**
     * The calculated properties for a draft order.
     */
    calculatedDraftOrder?: CalculatedDraftOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The computed properties for a draft order.
   */
  export interface CalculatedDraftOrder {
    
    /**
     * Order-level discount applied to the draft order.
     */
    appliedDiscount?: DraftOrderAppliedDiscount;
    
    /**
     * The available shipping rates for the draft order. Requires a customer with a valid shipping address and at least one line item.
     */
    availableShippingRates: Array<ShippingRate>;
    
    /**
     * Whether the billing address matches the shipping address.
     */
    billingAddressMatchesShippingAddress: boolean;
    
    /**
     * The currency of the store for this draft order.
     */
    currencyCode: CurrencyCode;
    
    /**
     * Customer who will be sent an invoice for the draft order, if there's one.
     */
    customer?: Customer;
    
    /**
     * Line items in the draft order with their computed properties.
     */
    lineItems: Array<CalculatedDraftOrderLineItem>;
    
    /**
     * A subtotal of the line items and corresponding discounts. The subtotal doesn't include shipping charges, shipping discounts, taxes, or order discounts.
     */
    lineItemsSubtotalPrice: MoneyBag;
    
    /**
     * The name of the selected market.
     */
    marketName: string;
    
    /**
     * The selected country code that determines the pricing of the draft order.
     */
    marketRegionCountryCode: CountryCode;
    
    /**
     * Phone number assigned to draft order.
     */
    phone?: string;
    
    /**
     * The payment currency of the customer for this draft order.
     */
    presentmentCurrencyCode: CurrencyCode;
    
    /**
     * The purchasing entity for the draft order.
     */
    purchasingEntity?: PurchasingEntity;
    
    /**
     * Line item that contains the shipping costs.
     */
    shippingLine?: ShippingLine;
    
    /**
     * Subtotal of the line items and their discounts (doesn't contain shipping charges or shipping discounts, or taxes).
     * 
     */
    subtotalPrice: Money;
    
    /**
     * Subtotal of the line items and their discounts (doesn't contain shipping charges or shipping discounts, or taxes).
     */
    subtotalPriceSet: MoneyBag;
    
    /**
     * Total amount of taxes charged for each line item and shipping line.
     */
    taxLines: Array<TaxLine>;
    
    /**
     * Total discounts for this draft order.
     */
    totalDiscountsSet: MoneyBag;
    
    /**
     * Total price of line items for this draft order.
     */
    totalLineItemsPriceSet: MoneyBag;
    
    /**
     * Total amount of the draft order (includes taxes, shipping charges, and discounts).
     */
    totalPrice: Money;
    
    /**
     * Total amount of the draft order(includes taxes, shipping charges, and discounts).
     */
    totalPriceSet: MoneyBag;
    
    /**
     * Total shipping charge for the draft order.
     */
    totalShippingPrice: Money;
    
    /**
     * Total shipping charge for the draft order.
     */
    totalShippingPriceSet: MoneyBag;
    
    /**
     * Total amount of taxes for the draft order.
     */
    totalTax: Money;
    
    /**
     * Total amount of taxes for the draft order.
     */
    totalTaxSet: MoneyBag;
  }
  
  /**
   * A shipping rate is an additional cost added to the cost of the products that were ordered.
   */
  export interface ShippingRate {
    
    /**
     * Human-readable unique identifier for this shipping rate.
     */
    handle: string;
    
    /**
     * The cost associated with the shipping rate.
     */
    price: MoneyV2;
    
    /**
     * The name of the shipping rate.
     */
    title: string;
  }
  
  /**
   * The computed line items for a draft order.
   */
  export interface CalculatedDraftOrderLineItem {
    
    /**
     * The discount applied to the line item.
     */
    appliedDiscount?: DraftOrderAppliedDiscount;
    
    /**
     * Whether the line item is a custom line item (`true`) or a product variant line item (`false`).
     */
    custom: boolean;
    
    /**
     * A list of attributes that represent custom features or special requests.
     */
    customAttributes: Array<Attribute>;
    
    /**
     * Additional information (metafields) about the line item with the associated types.
     */
    customAttributesV2: Array<TypedAttribute>;
    
    /**
     * Total price with discounts applied.
     */
    discountedTotal: MoneyV2;
    
    /**
     * The total price with discounts applied.
     */
    discountedTotalSet: MoneyBag;
    
    /**
     * The unit price with discounts applied.
     */
    discountedUnitPrice: MoneyV2;
    
    /**
     * Unit price with discounts applied.
     */
    discountedUnitPriceSet: MoneyBag;
    
    /**
     * Name of the service provider who fulfilled the order.
     * 
     * Valid values are either **manual** or the name of the provider.
     * For example, **amazon**, **shipwire**.
     * 
     * Deleted fulfillment services will return null.
     * 
     */
    fulfillmentService?: FulfillmentService;
    
    /**
     * The image associated with the draft order line item.
     */
    image?: Image;
    
    /**
     * Whether the line item represents the purchase of a gift card.
     */
    isGiftCard: boolean;
    
    /**
     * The name of the product.
     */
    name: string;
    
    /**
     * The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
     * 
     */
    originalTotal: MoneyV2;
    
    /**
     * The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
     */
    originalTotalSet: MoneyBag;
    
    /**
     * The variant price without any discounts applied.
     */
    originalUnitPrice: MoneyV2;
    
    /**
     * The variant price without any discounts applied.
     */
    originalUnitPriceSet: MoneyBag;
    
    /**
     * The product associated with the draft order line item.
     */
    product?: Product;
    
    /**
     * The number of variant items requested in the draft order.
     */
    quantity: number;
    
    /**
     * Whether physical shipping is required for the variant.
     */
    requiresShipping: boolean;
    
    /**
     * The SKU number of the product variant.
     */
    sku?: string;
    
    /**
     * Whether the variant is taxable.
     */
    taxable: boolean;
    
    /**
     * The title of the product or variant. This field only applies to custom line items.
     */
    title: string;
    
    /**
     * The total value of the discount.
     */
    totalDiscount: MoneyV2;
    
    /**
     * The total value of the discount.
     */
    totalDiscountSet: MoneyBag;
    
    /**
     * The variant associated with the draft order line item.
     */
    variant?: ProductVariant;
    
    /**
     * The name of the variant.
     */
    variantTitle?: string;
    
    /**
     * The name of the vendor who created the product variant.
     */
    vendor?: string;
    
    /**
     * The weight unit and value for a draft order line item.
     */
    weight?: Weight;
  }
  
  /**
   * Return type for `draftOrderComplete` mutation.
   */
  export interface DraftOrderCompletePayload {
    
    /**
     * The completed draft order.
     */
    draftOrder?: DraftOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `draftOrderCreate` mutation.
   */
  export interface DraftOrderCreatePayload {
    
    /**
     * The created draft order.
     * 
     */
    draftOrder?: DraftOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `draftOrderCreateFromOrder` mutation.
   */
  export interface DraftOrderCreateFromOrderPayload {
    
    /**
     * The created Draft Order.
     */
    draftOrder?: DraftOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `draftOrderCreateMerchantCheckout` mutation.
   */
  export interface DraftOrderCreateMerchantCheckoutPayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields to specify the draft order to delete by its ID.
   */
  export interface DraftOrderDeleteInput {
    
    /**
     * The ID of the draft order to delete.
     * 
     */
    id: string;
  }
  
  /**
   * Return type for `draftOrderDelete` mutation.
   */
  export interface DraftOrderDeletePayload {
    
    /**
     * The ID of the deleted draft order.
     * 
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `draftOrderDuplicate` mutation.
   */
  export interface DraftOrderDuplicatePayload {
    
    /**
     * The newly duplicated draft order.
     */
    draftOrder?: DraftOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `draftOrderInvoicePreview` mutation.
   */
  export interface DraftOrderInvoicePreviewPayload {
    
    /**
     * The draft order invoice email rendered as HTML to allow previewing.
     */
    previewHtml?: HTML;
    
    /**
     * The subject preview for the draft order invoice email.
     */
    previewSubject?: HTML;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `draftOrderInvoiceSend` mutation.
   */
  export interface DraftOrderInvoiceSendPayload {
    
    /**
     * The draft order an invoice email is sent for.
     */
    draftOrder?: DraftOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `draftOrderUpdate` mutation.
   */
  export interface DraftOrderUpdatePayload {
    
    /**
     * The updated draft order.
     */
    draftOrder?: DraftOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `eventBridgeServerPixelUpdate` mutation.
   */
  export interface EventBridgeServerPixelUpdatePayload {
    
    /**
     * The server pixel as configured by the mutation.
     */
    serverPixel?: ServerPixel;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ErrorsServerPixelUserError>;
  }
  
  /**
   * An error that occurs during the execution of a server pixel mutation.
   */
  export interface ErrorsServerPixelUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ErrorsServerPixelUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ErrorsServerPixelUserError`.
   */
  export const enum ErrorsServerPixelUserErrorCode {
    
    /**
     * A server pixel doesn't exist for this app and shop.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * A server pixel already exists for this app and shop. Only one server pixel can exist for any app and shop combination.
     */
    ALREADY_EXISTS = 'ALREADY_EXISTS',
    
    /**
     * PubSubProject and PubSubTopic values resulted in an address that is not a valid GCP pub/sub format.Address format should be pubsub://project:topic.
     */
    PUB_SUB_ERROR = 'PUB_SUB_ERROR',
    
    /**
     * Server Pixel must be configured with a valid AWS Event Bridge or GCP pub/sub endpoint address to be connected.
     */
    NEEDS_CONFIGURATION_TO_CONNECT = 'NEEDS_CONFIGURATION_TO_CONNECT'
  }
  
  /**
   * The input fields for an EventBridge webhook subscription.
   * 
   */
  export interface EventBridgeWebhookSubscriptionInput {
    
    /**
     * The ARN of the EventBridge partner event source.
     */
    arn?: ARN;
    
    /**
     * The format in which the webhook subscription should send the data.
     */
    format?: WebhookSubscriptionFormat;
    
    /**
     * The list of fields to be included in the webhook subscription.
     */
    includeFields?: Array<string>;
    
    /**
     * The list of namespaces for any metafields that should be included in the webhook subscription.
     */
    metafieldNamespaces?: Array<string>;
  }
  
  /**
   * Return type for `eventBridgeWebhookSubscriptionCreate` mutation.
   */
  export interface EventBridgeWebhookSubscriptionCreatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
    
    /**
     * The webhook subscription that was created.
     */
    webhookSubscription?: WebhookSubscription;
  }
  
  /**
   * Return type for `eventBridgeWebhookSubscriptionUpdate` mutation.
   */
  export interface EventBridgeWebhookSubscriptionUpdatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
    
    /**
     * The webhook subscription that was updated.
     */
    webhookSubscription?: WebhookSubscription;
  }
  
  /**
   * Return type for `fileAcknowledgeUpdateFailed` mutation.
   */
  export interface FileAcknowledgeUpdateFailedPayload {
    
    /**
     * The updated file(s).
     */
    files?: Array<File>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FilesUserError>;
  }
  
  /**
   * An error that happens during the execution of a Files API query or mutation.
   */
  export interface FilesUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: FilesErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `FilesUserError`.
   */
  export const enum FilesErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * File does not exist.
     */
    FILE_DOES_NOT_EXIST = 'FILE_DOES_NOT_EXIST',
    
    /**
     * File has a pending operation.
     */
    FILE_LOCKED = 'FILE_LOCKED',
    
    /**
     * Filename update is only supported on Image and GenericFile.
     */
    UNSUPPORTED_MEDIA_TYPE_FOR_FILENAME_UPDATE = 'UNSUPPORTED_MEDIA_TYPE_FOR_FILENAME_UPDATE',
    
    /**
     * Specify one argument: search, IDs, or deleteAll.
     */
    TOO_MANY_ARGUMENTS = 'TOO_MANY_ARGUMENTS',
    
    /**
     * The search term must not be blank.
     */
    BLANK_SEARCH = 'BLANK_SEARCH',
    
    /**
     * At least one argument is required.
     */
    MISSING_ARGUMENTS = 'MISSING_ARGUMENTS',
    
    /**
     * Search query isn't supported.
     */
    INVALID_QUERY = 'INVALID_QUERY',
    
    /**
     * Invalid filename extension.
     */
    INVALID_FILENAME_EXTENSION = 'INVALID_FILENAME_EXTENSION',
    
    /**
     * The provided filename is invalid.
     */
    INVALID_FILENAME = 'INVALID_FILENAME',
    
    /**
     * The provided filename already exists.
     */
    FILENAME_ALREADY_EXISTS = 'FILENAME_ALREADY_EXISTS',
    
    /**
     * The file is not supported on trial accounts that have not validated their email. Either select a plan or verify the shop owner email to upload this file.
     */
    UNACCEPTABLE_UNVERIFIED_TRIAL_ASSET = 'UNACCEPTABLE_UNVERIFIED_TRIAL_ASSET',
    
    /**
     * The file type is not supported.
     */
    UNACCEPTABLE_ASSET = 'UNACCEPTABLE_ASSET',
    
    /**
     * The file is not supported on trial accounts. Select a plan to upload this file.
     */
    UNACCEPTABLE_TRIAL_ASSET = 'UNACCEPTABLE_TRIAL_ASSET',
    
    /**
     * The alt value exceeds the maximum limit of 512 characters.
     */
    ALT_VALUE_LIMIT_EXCEEDED = 'ALT_VALUE_LIMIT_EXCEEDED',
    
    /**
     * The file is not in the READY state.
     */
    NON_READY_STATE = 'NON_READY_STATE',
    
    /**
     * Exceeded the limit of non-image media per shop.
     */
    NON_IMAGE_MEDIA_PER_SHOP_LIMIT_EXCEEDED = 'NON_IMAGE_MEDIA_PER_SHOP_LIMIT_EXCEEDED',
    
    /**
     * Cannot create file with custom filename which does not match original source extension.
     */
    MISMATCHED_FILENAME_AND_ORIGINAL_SOURCE = 'MISMATCHED_FILENAME_AND_ORIGINAL_SOURCE',
    
    /**
     * Duplicate resolution mode is not supported for this file type.
     */
    INVALID_DUPLICATE_MODE_FOR_TYPE = 'INVALID_DUPLICATE_MODE_FOR_TYPE',
    
    /**
     * Invalid image source url value provided.
     */
    INVALID_IMAGE_SOURCE_URL = 'INVALID_IMAGE_SOURCE_URL',
    
    /**
     * Duplicate resolution mode REPLACE cannot be used without specifying filename.
     */
    MISSING_FILENAME_FOR_DUPLICATE_MODE_REPLACE = 'MISSING_FILENAME_FOR_DUPLICATE_MODE_REPLACE'
  }
  
  /**
   * The input fields that are required to create a file object.
   */
  export interface FileCreateInput {
    
    /**
     * When provided, the file will be created with the given filename,
     * otherwise the filename in the originalSource will be used.
     * 
     */
    filename?: string;
    
    /**
     * An external URL (for images only) or a
     * [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
     * 
     */
    originalSource: string;
    
    /**
     * The file content type. If omitted, then Shopify will attempt to determine the content type during file processing.
     */
    contentType?: FileContentType;
    
    /**
     * The alternative text description of the file.
     */
    alt?: string;
    
    /**
     * How to handle if filename is already in use.
     */
    duplicateResolutionMode?: FileCreateInputDuplicateResolutionMode;
  }
  
  /**
   * The possible content types for a file object.
   */
  export const enum FileContentType {
    
    /**
     * A Shopify-hosted image.
     */
    IMAGE = 'IMAGE',
    
    /**
     * A Shopify-hosted generic file.
     */
    FILE = 'FILE',
    
    /**
     * A Shopify-hosted video file. It's recommended to use this type for all video files.
     */
    VIDEO = 'VIDEO'
  }
  
  /**
   * The input fields for handling if filename is already in use.
   */
  export const enum FileCreateInputDuplicateResolutionMode {
    
    /**
     * Append a UUID if filename is already in use.
     */
    APPEND_UUID = 'APPEND_UUID',
    
    /**
     * Raise an error if filename is already in use.
     */
    RAISE_ERROR = 'RAISE_ERROR',
    
    /**
     * Replace the existing file if filename is already in use.
     */
    REPLACE = 'REPLACE'
  }
  
  /**
   * Return type for `fileCreate` mutation.
   */
  export interface FileCreatePayload {
    
    /**
     * The newly created files.
     */
    files?: Array<File>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FilesUserError>;
  }
  
  /**
   * Return type for `fileDelete` mutation.
   */
  export interface FileDeletePayload {
    
    /**
     * The IDs of the deleted files.
     */
    deletedFileIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FilesUserError>;
  }
  
  /**
   * The input fields that are required to update a file object.
   */
  export interface FileUpdateInput {
    
    /**
     * The ID of the file to be updated.
     */
    id: string;
    
    /**
     * The alternative text description of the file.
     */
    alt?: string;
    
    /**
     * The source from which to update a media image or generic file.
     * An external URL (for images only) or a
     * [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
     * 
     */
    originalSource?: string;
    
    /**
     * The source from which to update the media preview image.
     * May be an external URL or a
     * [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
     * 
     */
    previewImageSource?: string;
    
    /**
     * The name of the file including its extension.
     * 
     */
    filename?: string;
  }
  
  /**
   * Return type for `fileUpdate` mutation.
   */
  export interface FileUpdatePayload {
    
    /**
     * The list of updated files.
     */
    files?: Array<File>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FilesUserError>;
  }
  
  /**
   * Return type for `flowGenerateSignature` mutation.
   */
  export interface FlowGenerateSignaturePayload {
    
    /**
     * The payload used to generate the signature.
     */
    payload?: string;
    
    /**
     * The generated signature.
     */
    signature?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `flowTriggerReceive` mutation.
   */
  export interface FlowTriggerReceivePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentCancel` mutation.
   */
  export interface FulfillmentCancelPayload {
    
    /**
     * The canceled fulfillment.
     */
    fulfillment?: Fulfillment;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentConstraintRuleCreate` mutation.
   */
  export interface FulfillmentConstraintRuleCreatePayload {
    
    /**
     * The newly created fulfillment constraint rule.
     */
    fulfillmentConstraintRule?: FulfillmentConstraintRule;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FulfillmentConstraintRuleCreateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `FulfillmentConstraintRuleCreate`.
   */
  export interface FulfillmentConstraintRuleCreateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: FulfillmentConstraintRuleCreateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `FulfillmentConstraintRuleCreateUserError`.
   */
  export const enum FulfillmentConstraintRuleCreateUserErrorCode {
    
    /**
     * Failed to create fulfillment constraint rule due to invalid input.
     */
    INPUT_INVALID = 'INPUT_INVALID',
    
    /**
     * No Shopify Function found for provided function_id.
     */
    FUNCTION_NOT_FOUND = 'FUNCTION_NOT_FOUND',
    
    /**
     * A fulfillment constraint rule already exists for the provided function_id.
     */
    FUNCTION_ALREADY_REGISTERED = 'FUNCTION_ALREADY_REGISTERED',
    
    /**
     * Function does not implement the required interface for this fulfillment constraint rule.
     */
    FUNCTION_DOES_NOT_IMPLEMENT = 'FUNCTION_DOES_NOT_IMPLEMENT',
    
    /**
     * Shop must be on a Shopify Plus plan to activate functions from a custom app.
     */
    CUSTOM_APP_FUNCTION_NOT_ELIGIBLE = 'CUSTOM_APP_FUNCTION_NOT_ELIGIBLE',
    
    /**
     * Function is pending deletion and cannot have new rules created against it.
     */
    FUNCTION_PENDING_DELETION = 'FUNCTION_PENDING_DELETION'
  }
  
  /**
   * Return type for `fulfillmentConstraintRuleDelete` mutation.
   */
  export interface FulfillmentConstraintRuleDeletePayload {
    
    /**
     * Whether or not the fulfillment constraint rule was successfully deleted.
     */
    success?: boolean;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FulfillmentConstraintRuleDeleteUserError>;
  }
  
  /**
   * An error that occurs during the execution of `FulfillmentConstraintRuleDelete`.
   */
  export interface FulfillmentConstraintRuleDeleteUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: FulfillmentConstraintRuleDeleteUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `FulfillmentConstraintRuleDeleteUserError`.
   */
  export const enum FulfillmentConstraintRuleDeleteUserErrorCode {
    
    /**
     * Could not find fulfillment constraint rule for provided id.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * Unauthorized app scope.
     */
    UNAUTHORIZED_APP_SCOPE = 'UNAUTHORIZED_APP_SCOPE'
  }
  
  /**
   * The input fields used to create a fulfillment from fulfillment orders.
   */
  export interface FulfillmentV2Input {
    
    /**
     * The fulfillment's tracking information, including a tracking URL, a tracking number,
     * and the company associated with the fulfillment.
     * 
     */
    trackingInfo?: FulfillmentTrackingInput;
    
    /**
     * Whether the customer is notified.
     * If `true`, then a notification is sent when the fulfillment is created. The default value is `false`.
     * 
     */
    notifyCustomer?: boolean;
    
    /**
     * Pairs of `fulfillment_order_id` and `fulfillment_order_line_items` that represent the fulfillment
     * order line items that have to be fulfilled for each fulfillment order.  For any given pair, if the
     * fulfillment order line items are left blank then all the fulfillment order line items of the
     * associated fulfillment order ID will be fulfilled.
     * 
     */
    lineItemsByFulfillmentOrder: Array<FulfillmentOrderLineItemsInput>;
    
    /**
     * Address information about the location from which the order was fulfilled.
     * 
     */
    originAddress?: FulfillmentOriginAddressInput;
  }
  
  /**
   * The input fields that specify all possible fields for tracking information.
   * 
   * > Note:
   * > If you provide the `url` field, you should not provide the `urls` field.
   * >
   * > If you provide the `number` field, you should not provide the `numbers` field.
   * >
   * > If you provide the `url` field, you should provide the `number` field.
   * >
   * > If you provide the `urls` field, you should provide the `numbers` field.
   * 
   */
  export interface FulfillmentTrackingInput {
    
    /**
     * The tracking number of the fulfillment.
     * 
     * The tracking number will be clickable in the interface if one of the following applies
     * (the highest in the list has the highest priority):
     * 
     * * Tracking url provided in the `url` field.
     * * [Shopify-known tracking company name](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
     *   specified in the `company` field.
     *   Shopify will build the tracking URL automatically based on the tracking number specified.
     * * The tracking number has a Shopify-known format.
     *   Shopify will guess the tracking provider and build the tracking url based on the tracking number format.
     *   Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
     *   This can result in an invalid tracking URL.
     *   It is highly recommended that you send the tracking company and the tracking URL.
     * 
     */
    number?: string;
    
    /**
     * The URL to track the fulfillment.
     * 
     * The tracking URL is displayed in the merchant's admin on the order page.
     * The tracking URL is displayed in the shipping confirmation email, which can optionally be sent to the customer.
     * When accounts are enabled, it's also displayed in the customer's order history.
     * 
     * The URL must be an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
     * [RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.
     * For example, `"https://www.myshipping.com/track/?tracknumbers=TRACKING_NUMBER"` is a valid URL.
     * It includes a scheme (`https`) and a host (`myshipping.com`).
     * 
     */
    url?: URL;
    
    /**
     * The name of the tracking company.
     * 
     * If you specify a tracking company name from
     * [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies),
     * Shopify will automatically build tracking URLs for all provided tracking numbers,
     * which will make the tracking numbers clickable in the interface.
     * The same tracking company will be applied to all tracking numbers specified.
     * 
     * Additionally, for the tracking companies listed on the
     * [Shipping Carriers help page](https://help.shopify.com/manual/shipping/understanding-shipping/shipping-carriers#integrated-shipping-carriers)
     * Shopify will automatically update the fulfillment's `shipment_status` field during the fulfillment process.
     * 
     * > Note:
     * > Send the tracking company name exactly as written in
     * > [the list](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
     * > (capitalization matters).
     * 
     */
    company?: string;
    
    /**
     * The tracking numbers of the fulfillment, one or many.
     * 
     * With multiple tracking numbers, you can provide tracking information
     * for all shipments associated with the fulfillment, if there are more than one.
     * For example, if you're shipping assembly parts of one furniture item in several boxes.
     * 
     * Tracking numbers will be clickable in the interface if one of the following applies
     * (the highest in the list has the highest priority):
     * 
     * * Tracking URLs provided in the `urls` field.
     *   The tracking URLs will be matched to the tracking numbers based on their positions in the arrays.
     * * [Shopify-known tracking company name](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
     *   specified in the `company` field.
     *   Shopify will build tracking URLs automatically for all tracking numbers specified.
     *   The same tracking company will be applied to all tracking numbers.
     * * Tracking numbers have a Shopify-known format.
     *   Shopify will guess tracking providers and build tracking URLs based on the tracking number formats.
     *   Not all tracking carriers are supported, and multiple tracking carriers may use similarly formatted tracking numbers.
     *   This can result in an invalid tracking URL.
     *   It is highly recommended that you send the tracking company and the tracking URLs.
     * 
     * 
     */
    numbers?: Array<string>;
    
    /**
     * The URLs to track the fulfillment, one or many.
     * 
     * The tracking URLs are displayed in the merchant's admin on the order page.
     * The tracking URLs are displayed in the shipping confirmation email, which can optionally be sent to the customer.
     * When accounts are enabled, the tracking URLs are also displayed in the customer's order history.
     * 
     * If you're not specifying a
     * [Shopify-known](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentTrackingInfo#supported-tracking-companies)
     * tracking company name in the `company` field,
     * then provide tracking URLs for all tracking numbers from the `numbers` field.
     * 
     * Tracking URLs from the `urls` array field are being matched with the tracking numbers from the `numbers` array
     * field correspondingly their positions in the arrays.
     * 
     * Each URL must be an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
     * [RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.
     * For example, `"https://www.myshipping.com/track/?tracknumbers=TRACKING_NUMBER"` is a valid URL.
     * It includes a scheme (`https`) and a host (`myshipping.com`).
     * 
     */
    urls?: Array<URL>;
  }
  
  /**
   * The input fields used to include the line items of a specified fulfillment order that should be fulfilled.
   * 
   */
  export interface FulfillmentOrderLineItemsInput {
    
    /**
     * The ID of the fulfillment order.
     */
    fulfillmentOrderId: string;
    
    /**
     * The fulfillment order line items to be fulfilled.
     * If left blank, all line items of the fulfillment order will be fulfilled.
     * 
     */
    fulfillmentOrderLineItems?: Array<FulfillmentOrderLineItemInput>;
  }
  
  /**
   * The input fields used to include the quantity of the fulfillment order line item that should be fulfilled.
   * 
   */
  export interface FulfillmentOrderLineItemInput {
    
    /**
     * The ID of the fulfillment order line item.
     */
    id: string;
    
    /**
     * The quantity of the fulfillment order line item.
     */
    quantity: number;
  }
  
  /**
   * The input fields used to include the address at which the fulfillment occurred. This input object is intended for tax purposes, as a full address is required for tax providers to accurately calculate taxes. Typically this is the address of the warehouse or fulfillment center. To retrieve a fulfillment location's address, use the `assignedLocation` field on the [`FulfillmentOrder`](/docs/api/admin-graphql/latest/objects/FulfillmentOrder) object instead.
   */
  export interface FulfillmentOriginAddressInput {
    
    /**
     * The street address of the fulfillment location.
     */
    address1?: string;
    
    /**
     * The second line of the address. Typically the number of the apartment, suite, or unit.
     */
    address2?: string;
    
    /**
     * The city in which the fulfillment location is located.
     */
    city?: string;
    
    /**
     * The zip code of the fulfillment location.
     */
    zip?: string;
    
    /**
     * The province of the fulfillment location.
     */
    provinceCode?: string;
    
    /**
     * The country of the fulfillment location.
     */
    countryCode: string;
  }
  
  /**
   * Return type for `fulfillmentCreateV2` mutation.
   */
  export interface FulfillmentCreateV2Payload {
    
    /**
     * The created fulfillment.
     */
    fulfillment?: Fulfillment;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields used to create a fulfillment event.
   */
  export interface FulfillmentEventInput {
    
    /**
     * The street address where this fulfillment event occurred.
     */
    address1?: string;
    
    /**
     * The city where this fulfillment event occurred.
     */
    city?: string;
    
    /**
     * The country where this fulfillment event occurred.
     */
    country?: string;
    
    /**
     * The estimated delivery date and time of the fulfillment.
     */
    estimatedDeliveryAt?: DateTime;
    
    /**
     * The time at which this fulfillment event happened.
     */
    happenedAt?: DateTime;
    
    /**
     * The ID for the fulfillment that's associated with this fulfillment event.
     */
    fulfillmentId: string;
    
    /**
     * The latitude where this fulfillment event occurred.
     */
    latitude?: number;
    
    /**
     * The longitude where this fulfillment event occurred.
     */
    longitude?: number;
    
    /**
     * A message associated with this fulfillment event.
     */
    message?: string;
    
    /**
     * The province where this fulfillment event occurred.
     */
    province?: string;
    
    /**
     * The status of this fulfillment event.
     */
    status: FulfillmentEventStatus;
    
    /**
     * The zip code of the location where this fulfillment event occurred.
     */
    zip?: string;
  }
  
  /**
   * Return type for `fulfillmentEventCreate` mutation.
   */
  export interface FulfillmentEventCreatePayload {
    
    /**
     * The created fulfillment event.
     */
    fulfillmentEvent?: FulfillmentEvent;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentOrderAcceptCancellationRequest` mutation.
   */
  export interface FulfillmentOrderAcceptCancellationRequestPayload {
    
    /**
     * The fulfillment order whose cancellation request was accepted.
     */
    fulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentOrderAcceptFulfillmentRequest` mutation.
   */
  export interface FulfillmentOrderAcceptFulfillmentRequestPayload {
    
    /**
     * The fulfillment order whose fulfillment request was accepted.
     */
    fulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentOrderCancel` mutation.
   */
  export interface FulfillmentOrderCancelPayload {
    
    /**
     * The fulfillment order that was marked as canceled.
     */
    fulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The fulfillment order that was created to replace the canceled fulfillment order.
     */
    replacementFulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentOrderClose` mutation.
   */
  export interface FulfillmentOrderClosePayload {
    
    /**
     * The fulfillment order that was marked as incomplete.
     */
    fulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for the fulfillment hold applied on the fulfillment order.
   */
  export interface FulfillmentOrderHoldInput {
    
    /**
     * The reason for the fulfillment hold.
     */
    reason: FulfillmentHoldReason;
    
    /**
     * Additional information about the fulfillment hold reason.
     */
    reasonNotes?: string;
    
    /**
     * Whether the merchant receives a notification about the fulfillment hold. The default value is `false`.
     */
    notifyMerchant?: boolean;
    
    /**
     * A configurable ID used to track the automation system releasing these holds.
     */
    externalId?: string;
    
    /**
     * The fulfillment order line items to be placed on hold.
     * If left blank, all line items of the fulfillment order are placed on hold.
     * 
     */
    fulfillmentOrderLineItems?: Array<FulfillmentOrderLineItemInput>;
  }
  
  /**
   * Return type for `fulfillmentOrderHold` mutation.
   */
  export interface FulfillmentOrderHoldPayload {
    
    /**
     * The fulfillment order on which a fulfillment hold was applied.
     */
    fulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The remaining fulfillment order containing the line items to which the hold wasn't applied,
     * if specific line items were specified to be placed on hold.
     * 
     */
    remainingFulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FulfillmentOrderHoldUserError>;
  }
  
  /**
   * An error that occurs during the execution of `FulfillmentOrderHold`.
   */
  export interface FulfillmentOrderHoldUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: FulfillmentOrderHoldUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `FulfillmentOrderHoldUserError`.
   */
  export const enum FulfillmentOrderHoldUserErrorCode {
    
    /**
     * The fulfillment order could not be found.
     */
    FULFILLMENT_ORDER_NOT_FOUND = 'FULFILLMENT_ORDER_NOT_FOUND',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The fulfillment order line item quantity must be greater than 0.
     */
    GREATER_THAN_ZERO = 'GREATER_THAN_ZERO',
    
    /**
     * The fulfillment order line item quantity is invalid.
     */
    INVALID_LINE_ITEM_QUANTITY = 'INVALID_LINE_ITEM_QUANTITY'
  }
  
  /**
   * The input fields for marking fulfillment order line items as ready for pickup.
   */
  export interface FulfillmentOrderLineItemsPreparedForPickupInput {
    
    /**
     * The fulfillment orders associated with the line items which are ready to be picked up by a customer.
     * 
     */
    lineItemsByFulfillmentOrder: Array<PreparedFulfillmentOrderLineItemsInput>;
  }
  
  /**
   * The input fields used to include the line items of a specified fulfillment order that should be marked as prepared for pickup by a customer.
   * 
   */
  export interface PreparedFulfillmentOrderLineItemsInput {
    
    /**
     * The ID of the fulfillment order.
     */
    fulfillmentOrderId: string;
  }
  
  /**
   * Return type for `fulfillmentOrderLineItemsPreparedForPickup` mutation.
   */
  export interface FulfillmentOrderLineItemsPreparedForPickupPayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FulfillmentOrderLineItemsPreparedForPickupUserError>;
  }
  
  /**
   * An error that occurs during the execution of `FulfillmentOrderLineItemsPreparedForPickup`.
   */
  export interface FulfillmentOrderLineItemsPreparedForPickupUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: FulfillmentOrderLineItemsPreparedForPickupUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `FulfillmentOrderLineItemsPreparedForPickupUserError`.
   */
  export const enum FulfillmentOrderLineItemsPreparedForPickupUserErrorCode {
    
    /**
     * The fulfillment order does not have any line items that can be prepared.
     */
    NO_LINE_ITEMS_TO_PREPARE_FOR_FULFILLMENT_ORDER = 'NO_LINE_ITEMS_TO_PREPARE_FOR_FULFILLMENT_ORDER',
    
    /**
     * Invalid fulfillment order ID provided.
     */
    FULFILLMENT_ORDER_INVALID = 'FULFILLMENT_ORDER_INVALID',
    
    /**
     * Unable to prepare quantity.
     */
    UNABLE_TO_PREPARE_QUANTITY = 'UNABLE_TO_PREPARE_QUANTITY'
  }
  
  /**
   * The input fields for merging fulfillment orders.
   */
  export interface FulfillmentOrderMergeInput {
    
    /**
     * The details of the fulfillment orders to be merged.
     */
    mergeIntents: Array<FulfillmentOrderMergeInputMergeIntent>;
  }
  
  /**
   * The input fields for merging fulfillment orders into a single merged fulfillment order.
   */
  export interface FulfillmentOrderMergeInputMergeIntent {
    
    /**
     * The fulfillment order line items to be merged.
     * 
     */
    fulfillmentOrderLineItems?: Array<FulfillmentOrderLineItemInput>;
    
    /**
     * The ID of the fulfillment order to be merged.
     */
    fulfillmentOrderId: string;
  }
  
  /**
   * Return type for `fulfillmentOrderMerge` mutation.
   */
  export interface FulfillmentOrderMergePayload {
    
    /**
     * The result of the fulfillment order merges.
     */
    fulfillmentOrderMerges?: Array<FulfillmentOrderMergeResult>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FulfillmentOrderMergeUserError>;
  }
  
  /**
   * The result of merging a set of fulfillment orders.
   */
  export interface FulfillmentOrderMergeResult {
    
    /**
     * The new fulfillment order as a result of the merge.
     */
    fulfillmentOrder: FulfillmentOrder;
  }
  
  /**
   * An error that occurs during the execution of `FulfillmentOrderMerge`.
   */
  export interface FulfillmentOrderMergeUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: FulfillmentOrderMergeUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `FulfillmentOrderMergeUserError`.
   */
  export const enum FulfillmentOrderMergeUserErrorCode {
    
    /**
     * The fulfillment order could not be found.
     */
    FULFILLMENT_ORDER_NOT_FOUND = 'FULFILLMENT_ORDER_NOT_FOUND',
    
    /**
     * The fulfillment order line item quantity must be greater than 0.
     */
    GREATER_THAN = 'GREATER_THAN',
    
    /**
     * The fulfillment order line item quantity is invalid.
     */
    INVALID_LINE_ITEM_QUANTITY = 'INVALID_LINE_ITEM_QUANTITY'
  }
  
  /**
   * Return type for `fulfillmentOrderMove` mutation.
   */
  export interface FulfillmentOrderMovePayload {
    
    /**
     * The fulfillment order which now contains the moved line items and is assigned to the destination location.
     * 
     * **First scenario:** All line items belonging to the original fulfillment order are re-assigned.
     * 
     * In this case, this will be the original fulfillment order.
     * 
     * **Second scenario:** A subset of the line items belonging to the original fulfillment order are re-assigned.
     * 
     * If the new location is already assigned to fulfill line items on the order, then
     * this will be an existing active fulfillment order.
     * Otherwise, this will be a new fulfillment order with the moved line items assigned.
     * 
     */
    movedFulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The final state of the original fulfillment order.
     * 
     * As a result of the move operation, the original fulfillment order might be moved to the new location
     * or remain in the original location. The original fulfillment order might have the same status or be closed.
     * 
     */
    originalFulfillmentOrder?: FulfillmentOrder;
    
    /**
     * This field is deprecated.
     * 
     */
    remainingFulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentOrderOpen` mutation.
   */
  export interface FulfillmentOrderOpenPayload {
    
    /**
     * The fulfillment order that was transitioned to open and is fulfillable.
     */
    fulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentOrderRejectCancellationRequest` mutation.
   */
  export interface FulfillmentOrderRejectCancellationRequestPayload {
    
    /**
     * The fulfillment order whose cancellation request was rejected.
     */
    fulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The reason for a fulfillment order rejection.
   */
  export const enum FulfillmentOrderRejectionReason {
    
    /**
     * The fulfillment order was rejected because of an incorrect address.
     */
    INCORRECT_ADDRESS = 'INCORRECT_ADDRESS',
    
    /**
     * The fulfillment order was rejected because inventory is out of stock.
     */
    INVENTORY_OUT_OF_STOCK = 'INVENTORY_OUT_OF_STOCK',
    
    /**
     * The fulfillment order was rejected because of an ineligible product.
     */
    INELIGIBLE_PRODUCT = 'INELIGIBLE_PRODUCT',
    
    /**
     * The fulfillment order was rejected because of an undeliverable destination.
     */
    UNDELIVERABLE_DESTINATION = 'UNDELIVERABLE_DESTINATION',
    
    /**
     * The fulfillment order was rejected for another reason.
     */
    OTHER = 'OTHER'
  }
  
  /**
   * The input fields for the incoming line item.
   */
  export interface IncomingRequestLineItemInput {
    
    /**
     * The ID of the rejected line item.
     */
    fulfillmentOrderLineItemId: string;
    
    /**
     * The rejection message of the line item.
     */
    message?: string;
  }
  
  /**
   * Return type for `fulfillmentOrderRejectFulfillmentRequest` mutation.
   */
  export interface FulfillmentOrderRejectFulfillmentRequestPayload {
    
    /**
     * The fulfillment order whose fulfillment request was rejected.
     */
    fulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentOrderReleaseHold` mutation.
   */
  export interface FulfillmentOrderReleaseHoldPayload {
    
    /**
     * The fulfillment order on which the hold was released.
     */
    fulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FulfillmentOrderReleaseHoldUserError>;
  }
  
  /**
   * An error that occurs during the execution of `FulfillmentOrderReleaseHold`.
   */
  export interface FulfillmentOrderReleaseHoldUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: FulfillmentOrderReleaseHoldUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `FulfillmentOrderReleaseHoldUserError`.
   */
  export const enum FulfillmentOrderReleaseHoldUserErrorCode {
    
    /**
     * The fulfillment order wasn't found.
     */
    FULFILLMENT_ORDER_NOT_FOUND = 'FULFILLMENT_ORDER_NOT_FOUND',
    
    /**
     * The fulfillment order line item quantity must be greater than 0.
     */
    GREATER_THAN_ZERO = 'GREATER_THAN_ZERO',
    
    /**
     * The fulfillment order line item quantity is invalid.
     */
    INVALID_LINE_ITEM_QUANTITY = 'INVALID_LINE_ITEM_QUANTITY'
  }
  
  /**
   * Return type for `fulfillmentOrderReschedule` mutation.
   */
  export interface FulfillmentOrderReschedulePayload {
    
    /**
     * A fulfillment order with the rescheduled line items.
     * 
     * Fulfillment orders may be merged if they have the same `fulfillAt` datetime.
     * 
     * If the fulfillment order is merged then the resulting fulfillment order will be returned.
     * Otherwise the original fulfillment order will be returned with an updated `fulfillAt` datetime.
     * 
     */
    fulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FulfillmentOrderRescheduleUserError>;
  }
  
  /**
   * An error that occurs during the execution of `FulfillmentOrderReschedule`.
   */
  export interface FulfillmentOrderRescheduleUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: FulfillmentOrderRescheduleUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `FulfillmentOrderRescheduleUserError`.
   */
  export const enum FulfillmentOrderRescheduleUserErrorCode {
    
    /**
     * Fulfillment order could not be found.
     */
    FULFILLMENT_ORDER_NOT_FOUND = 'FULFILLMENT_ORDER_NOT_FOUND'
  }
  
  /**
   * The input fields for the split applied to the fulfillment order.
   */
  export interface FulfillmentOrderSplitInput {
    
    /**
     * The fulfillment order line items to be split out.
     * 
     */
    fulfillmentOrderLineItems: Array<FulfillmentOrderLineItemInput>;
    
    /**
     * The ID of the fulfillment order to be split.
     */
    fulfillmentOrderId: string;
  }
  
  /**
   * Return type for `fulfillmentOrderSplit` mutation.
   */
  export interface FulfillmentOrderSplitPayload {
    
    /**
     * The result of the fulfillment order splits.
     */
    fulfillmentOrderSplits?: Array<FulfillmentOrderSplitResult>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FulfillmentOrderSplitUserError>;
  }
  
  /**
   * The result of splitting a fulfillment order.
   */
  export interface FulfillmentOrderSplitResult {
    
    /**
     * The original fulfillment order as a result of the split.
     */
    fulfillmentOrder: FulfillmentOrder;
    
    /**
     * The remaining fulfillment order as a result of the split.
     */
    remainingFulfillmentOrder: FulfillmentOrder;
    
    /**
     * The replacement fulfillment order if the original fulfillment order wasn't in a state to be split.
     */
    replacementFulfillmentOrder?: FulfillmentOrder;
  }
  
  /**
   * An error that occurs during the execution of `FulfillmentOrderSplit`.
   */
  export interface FulfillmentOrderSplitUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: FulfillmentOrderSplitUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `FulfillmentOrderSplitUserError`.
   */
  export const enum FulfillmentOrderSplitUserErrorCode {
    
    /**
     * The fulfillment order could not be found.
     */
    FULFILLMENT_ORDER_NOT_FOUND = 'FULFILLMENT_ORDER_NOT_FOUND',
    
    /**
     * The fulfillment order line item quantity must be greater than 0.
     */
    GREATER_THAN = 'GREATER_THAN',
    
    /**
     * The fulfillment order line item quantity is invalid.
     */
    INVALID_LINE_ITEM_QUANTITY = 'INVALID_LINE_ITEM_QUANTITY',
    
    /**
     * The fulfillment order must have at least one line item input to split.
     */
    NO_LINE_ITEMS_PROVIDED_TO_SPLIT = 'NO_LINE_ITEMS_PROVIDED_TO_SPLIT'
  }
  
  /**
   * Return type for `fulfillmentOrderSubmitCancellationRequest` mutation.
   */
  export interface FulfillmentOrderSubmitCancellationRequestPayload {
    
    /**
     * The fulfillment order specified in the cancelation request.
     */
    fulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentOrderSubmitFulfillmentRequest` mutation.
   */
  export interface FulfillmentOrderSubmitFulfillmentRequestPayload {
    
    /**
     * The original fulfillment order intended to request fulfillment for.
     * 
     */
    originalFulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The fulfillment order that was submitted to the fulfillment service. This will be the same as
     * the original fulfillment order field. The exception to this is partial fulfillment requests or
     * fulfillment request for cancelled or incomplete fulfillment orders.
     * 
     */
    submittedFulfillmentOrder?: FulfillmentOrder;
    
    /**
     * This field will only be present for partial fulfillment requests. This will represent the new
     * fulfillment order with the remaining line items not submitted to the fulfillment service.
     * 
     */
    unsubmittedFulfillmentOrder?: FulfillmentOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentOrdersReleaseHolds` mutation.
   */
  export interface FulfillmentOrdersReleaseHoldsPayload {
    
    /**
     * The asynchronous job that will release the fulfillment holds.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FulfillmentOrdersReleaseHoldsUserError>;
  }
  
  /**
   * An error that occurs during the execution of `FulfillmentOrdersReleaseHolds`.
   */
  export interface FulfillmentOrdersReleaseHoldsUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: FulfillmentOrdersReleaseHoldsUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `FulfillmentOrdersReleaseHoldsUserError`.
   */
  export const enum FulfillmentOrdersReleaseHoldsUserErrorCode {
    
    /**
     * Failed to create release fulfillment order holds job.
     */
    FAILED_TO_CREATE_JOB = 'FAILED_TO_CREATE_JOB'
  }
  
  /**
   * Return type for `fulfillmentOrdersSetFulfillmentDeadline` mutation.
   */
  export interface FulfillmentOrdersSetFulfillmentDeadlinePayload {
    
    /**
     * Whether the fulfillment deadline was successfully set.
     */
    success?: boolean;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<FulfillmentOrdersSetFulfillmentDeadlineUserError>;
  }
  
  /**
   * An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`.
   */
  export interface FulfillmentOrdersSetFulfillmentDeadlineUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `FulfillmentOrdersSetFulfillmentDeadlineUserError`.
   */
  export const enum FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode {
    
    /**
     * The fulfillment orders could not be found.
     */
    FULFILLMENT_ORDERS_NOT_FOUND = 'FULFILLMENT_ORDERS_NOT_FOUND'
  }
  
  /**
   * Return type for `fulfillmentServiceCreate` mutation.
   */
  export interface FulfillmentServiceCreatePayload {
    
    /**
     * The created fulfillment service.
     */
    fulfillmentService?: FulfillmentService;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentServiceDelete` mutation.
   */
  export interface FulfillmentServiceDeletePayload {
    
    /**
     * The ID of the deleted fulfillment service.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentServiceUpdate` mutation.
   */
  export interface FulfillmentServiceUpdatePayload {
    
    /**
     * The updated fulfillment service.
     */
    fulfillmentService?: FulfillmentService;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `fulfillmentTrackingInfoUpdateV2` mutation.
   */
  export interface FulfillmentTrackingInfoUpdateV2Payload {
    
    /**
     * The updated fulfillment with tracking information.
     */
    fulfillment?: Fulfillment;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields to issue a gift card.
   */
  export interface GiftCardCreateInput {
    
    /**
     * The initial value of the gift card.
     */
    initialValue: Decimal;
    
    /**
     * The gift card's code. It must be 8-20 characters long and contain only letters(a-z) and numbers(0-9).
     * It isn't case sensitive. If not provided, then a random code will be generated.
     * 
     */
    code?: string;
    
    /**
     * The ID of the customer who will receive the gift card. Requires `write_customers` access_scope.
     */
    customerId?: string;
    
    /**
     * The date at which the gift card will expire. If not provided, then the gift card will never expire.
     * 
     */
    expiresOn?: Date;
    
    /**
     * The note associated with the gift card, which isn't visible to the customer.
     */
    note?: string;
    
    /**
     * The suffix of the Liquid template that's used to render the gift card online.
     * For example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.
     * If not provided, then the default `gift_card.liquid` template is used.
     * 
     */
    templateSuffix?: string;
  }
  
  /**
   * Return type for `giftCardCreate` mutation.
   */
  export interface GiftCardCreatePayload {
    
    /**
     * The created gift card.
     */
    giftCard?: GiftCard;
    
    /**
     * The created gift card's code.
     */
    giftCardCode?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<GiftCardUserError>;
  }
  
  /**
   * Represents an error that happens during the execution of a gift card mutation.
   */
  export interface GiftCardUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: GiftCardErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `GiftCardUserError`.
   */
  export const enum GiftCardErrorCode {
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * Unexpected internal error happened.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * Missing a required argument.
     */
    MISSING_ARGUMENT = 'MISSING_ARGUMENT',
    
    /**
     * The input value should be greater than the minimum allowed value.
     */
    GREATER_THAN = 'GREATER_THAN'
  }
  
  /**
   * Return type for `giftCardDisable` mutation.
   */
  export interface GiftCardDisablePayload {
    
    /**
     * The disabled gift card.
     */
    giftCard?: GiftCard;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields to update a gift card.
   */
  export interface GiftCardUpdateInput {
    
    /**
     * The note associated with the gift card, which isn't visible to the customer.
     */
    note?: string;
    
    /**
     * The date at which the gift card will expire. If set to `null`, then the gift card will never expire.
     * 
     */
    expiresOn?: Date;
    
    /**
     * The ID of the customer who will receive the gift card. The ID can't be changed if the gift card already has an assigned customer ID.
     * 
     */
    customerId?: string;
    
    /**
     * The suffix of the Liquid template that's used to render the gift card online.
     * For example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.
     * 
     */
    templateSuffix?: string;
  }
  
  /**
   * Return type for `giftCardUpdate` mutation.
   */
  export interface GiftCardUpdatePayload {
    
    /**
     * The updated gift card.
     */
    giftCard?: GiftCard;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `inventoryActivate` mutation.
   */
  export interface InventoryActivatePayload {
    
    /**
     * The inventory level that was activated.
     */
    inventoryLevel?: InventoryLevel;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields required to adjust inventory quantities.
   */
  export interface InventoryAdjustQuantitiesInput {
    
    /**
     * The reason for the quantity changes. The value must be one of the [possible 
     * reasons](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#set-inventory-quantities-on-hand).
     * 
     */
    reason: string;
    
    /**
     * The quantity [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
     * to be adjusted.
     * 
     */
    name: string;
    
    /**
     * The reference document URI for the changes. Used to denote what's causing the change.
     */
    referenceDocumentUri?: string;
    
    /**
     * The quantity changes of items at locations to be made.
     */
    changes: Array<InventoryChangeInput>;
  }
  
  /**
   * The input fields for the change to be made to an inventory item at a location.
   * 
   */
  export interface InventoryChangeInput {
    
    /**
     * The amount by which the inventory quantity will be changed.
     */
    delta: number;
    
    /**
     * Specifies the inventory item to which the change will be applied.
     */
    inventoryItemId: string;
    
    /**
     * Specifies the location at which the change will be applied.
     */
    locationId: string;
    
    /**
     * The ledger document URI to which the quantity change is being applied. Not allowed for 'available' and required for other quantity names.
     */
    ledgerDocumentUri?: string;
  }
  
  /**
   * Return type for `inventoryAdjustQuantities` mutation.
   */
  export interface InventoryAdjustQuantitiesPayload {
    
    /**
     * The group of changes made by the operation.
     */
    inventoryAdjustmentGroup?: InventoryAdjustmentGroup;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<InventoryAdjustQuantitiesUserError>;
  }
  
  /**
   * Represents a group of adjustments made as part of the same operation.
   * 
   */
  export interface InventoryAdjustmentGroup extends Node {
    
    /**
     * The app that triggered the inventory event, if one exists.
     */
    app?: App;
    
    /**
     * The set of inventory quantity changes that occurred in the inventory event.
     */
    changes: Array<InventoryChange>;
    
    /**
     * The date and time the inventory adjustment group was created.
     */
    createdAt: DateTime;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The reason for the group of adjustments.
     */
    reason: string;
    
    /**
     * The reference document URI for the changes. Denotes what's causing the change.
     */
    referenceDocumentUri?: string;
    
    /**
     * The staff member associated with the inventory event.
     */
    staffMember?: StaffMember;
  }
  
  /**
   * Represents a change in an inventory quantity of an inventory item at a location.
   * 
   */
  export interface InventoryChange {
    
    /**
     * The amount by which the inventory quantity was changed.
     */
    delta: number;
    
    /**
     * The inventory item associated with this inventory change.
     */
    item?: InventoryItem;
    
    /**
     * The ledger document URI for the change. Denotes who the change is applied to.
     */
    ledgerDocumentUri?: string;
    
    /**
     * The location associated with this inventory change.
     */
    location?: Location;
    
    /**
     * The [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states)
     * of the inventory quantity that was changed.
     * 
     */
    name: string;
    
    /**
     * The quantity of named inventory after the change.
     */
    quantityAfterChange?: number;
  }
  
  /**
   * An error that occurs during the execution of `InventoryAdjustQuantities`.
   */
  export interface InventoryAdjustQuantitiesUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: InventoryAdjustQuantitiesUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `InventoryAdjustQuantitiesUserError`.
   */
  export const enum InventoryAdjustQuantitiesUserErrorCode {
    
    /**
     * Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API.
     */
    INTERNAL_LEDGER_DOCUMENT = 'INTERNAL_LEDGER_DOCUMENT',
    
    /**
     * A ledger document URI is not allowed when adjusting available.
     */
    INVALID_AVAILABLE_DOCUMENT = 'INVALID_AVAILABLE_DOCUMENT',
    
    /**
     * The specified inventory item could not be found.
     */
    INVALID_INVENTORY_ITEM = 'INVALID_INVENTORY_ITEM',
    
    /**
     * The specified ledger document is invalid.
     */
    INVALID_LEDGER_DOCUMENT = 'INVALID_LEDGER_DOCUMENT',
    
    /**
     * The specified location could not be found.
     */
    INVALID_LOCATION = 'INVALID_LOCATION',
    
    /**
     * A ledger document URI is required except when adjusting available.
     */
    INVALID_QUANTITY_DOCUMENT = 'INVALID_QUANTITY_DOCUMENT',
    
    /**
     * The specified quantity name is invalid.
     */
    INVALID_QUANTITY_NAME = 'INVALID_QUANTITY_NAME',
    
    /**
     * The quantity can't be lower than -2,000,000,000.
     */
    INVALID_QUANTITY_TOO_LOW = 'INVALID_QUANTITY_TOO_LOW',
    
    /**
     * The quantity can't be higher than 2,000,000,000.
     */
    INVALID_QUANTITY_TOO_HIGH = 'INVALID_QUANTITY_TOO_HIGH',
    
    /**
     * The specified reason is invalid.
     */
    INVALID_REASON = 'INVALID_REASON',
    
    /**
     * The specified reference document is invalid.
     */
    INVALID_REFERENCE_DOCUMENT = 'INVALID_REFERENCE_DOCUMENT',
    
    /**
     * The quantities couldn't be adjusted. Try again.
     */
    ADJUST_QUANTITIES_FAILED = 'ADJUST_QUANTITIES_FAILED',
    
    /**
     * All changes must have the same ledger document URI or, in the case of adjusting available, no ledger document URI.
     */
    MAX_ONE_LEDGER_DOCUMENT = 'MAX_ONE_LEDGER_DOCUMENT',
    
    /**
     * The inventory item is not stocked at the location.
     */
    ITEM_NOT_STOCKED_AT_LOCATION = 'ITEM_NOT_STOCKED_AT_LOCATION',
    
    /**
     * The specified inventory item is not allowed to be adjusted via API.
     */
    NON_MUTABLE_INVENTORY_ITEM = 'NON_MUTABLE_INVENTORY_ITEM'
  }
  
  /**
   * The input fields required to adjust the inventory quantity.
   */
  export interface InventoryAdjustQuantityInput {
    
    /**
     * ID of the inventory level to adjust.
     */
    inventoryLevelId: string;
    
    /**
     * The change applied to the `available` quantity of the item at the location.
     */
    availableDelta: number;
  }
  
  /**
   * Return type for `inventoryAdjustQuantity` mutation.
   */
  export interface InventoryAdjustQuantityPayload {
    
    /**
     * Represents the updated inventory quantity of an inventory item at a specific location.
     */
    inventoryLevel?: InventoryLevel;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for items and their adjustments.
   */
  export interface InventoryAdjustItemInput {
    
    /**
     * ID of the inventory item to adjust.
     */
    inventoryItemId: string;
    
    /**
     * The change applied to the `available` quantity of the item at the location.
     */
    availableDelta: number;
  }
  
  /**
   * Return type for `inventoryBulkAdjustQuantityAtLocation` mutation.
   */
  export interface InventoryBulkAdjustQuantityAtLocationPayload {
    
    /**
     * Represents the updated inventory quantities of an inventory item at the location.
     */
    inventoryLevels?: Array<InventoryLevel>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields to specify whether the inventory item should be activated or not at the specified location.
   * 
   */
  export interface InventoryBulkToggleActivationInput {
    
    /**
     * The ID of the location to modify the inventory item's stocked status.
     */
    locationId: string;
    
    /**
     * Whether the inventory item can be stocked at the specified location. To deactivate, set the value to false which removes an inventory item's quantities from that location, and turns off inventory at that location.
     */
    activate: boolean;
  }
  
  /**
   * Return type for `inventoryBulkToggleActivation` mutation.
   */
  export interface InventoryBulkToggleActivationPayload {
    
    /**
     * The inventory item that was updated.
     */
    inventoryItem?: InventoryItem;
    
    /**
     * The activated inventory levels.
     */
    inventoryLevels?: Array<InventoryLevel>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<InventoryBulkToggleActivationUserError>;
  }
  
  /**
   * An error that occurred while setting the activation status of an inventory item.
   */
  export interface InventoryBulkToggleActivationUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: InventoryBulkToggleActivationUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `InventoryBulkToggleActivationUserError`.
   */
  export const enum InventoryBulkToggleActivationUserErrorCode {
    
    /**
     * An error occurred while setting the activation status.
     */
    GENERIC_ERROR = 'GENERIC_ERROR',
    
    /**
     * Cannot unstock an inventory item from the only location at which it is stocked.
     */
    CANNOT_DEACTIVATE_FROM_ONLY_LOCATION = 'CANNOT_DEACTIVATE_FROM_ONLY_LOCATION',
    
    /**
     * Cannot unstock this inventory item from this location because it has committed and incoming quantities.
     * @deprecated This error code is deprecated. Both INCOMING_INVENTORY_AT_LOCATION and COMMITTED_INVENTORY_AT_LOCATION codes will be returned as individual errors instead.
     */
    COMMITTED_AND_INCOMING_INVENTORY_AT_LOCATION = 'COMMITTED_AND_INCOMING_INVENTORY_AT_LOCATION',
    
    /**
     * Cannot unstock this inventory item from this location because it has incoming quantities.
     */
    INCOMING_INVENTORY_AT_LOCATION = 'INCOMING_INVENTORY_AT_LOCATION',
    
    /**
     * Cannot unstock this inventory item from this location because it has committed quantities.
     */
    COMMITTED_INVENTORY_AT_LOCATION = 'COMMITTED_INVENTORY_AT_LOCATION',
    
    /**
     * Cannot unstock this inventory item from this location because it has unavailable quantities.
     */
    RESERVED_INVENTORY_AT_LOCATION = 'RESERVED_INVENTORY_AT_LOCATION',
    
    /**
     * Failed to unstock this inventory item from this location.
     */
    FAILED_TO_UNSTOCK_FROM_LOCATION = 'FAILED_TO_UNSTOCK_FROM_LOCATION',
    
    /**
     * Cannot stock this inventory item at this location because it is managed by a third-party fulfillment service.
     */
    INVENTORY_MANAGED_BY_3RD_PARTY = 'INVENTORY_MANAGED_BY_3RD_PARTY',
    
    /**
     * Cannot stock this inventory item at this location because it is managed by Shopify.
     */
    INVENTORY_MANAGED_BY_SHOPIFY = 'INVENTORY_MANAGED_BY_SHOPIFY',
    
    /**
     * Failed to stock this inventory item at this location.
     */
    FAILED_TO_STOCK_AT_LOCATION = 'FAILED_TO_STOCK_AT_LOCATION',
    
    /**
     * Cannot stock this inventory item at this location because the variant is missing a SKU.
     */
    MISSING_SKU = 'MISSING_SKU',
    
    /**
     * The location was not found.
     */
    LOCATION_NOT_FOUND = 'LOCATION_NOT_FOUND',
    
    /**
     * The inventory item was not found.
     */
    INVENTORY_ITEM_NOT_FOUND = 'INVENTORY_ITEM_NOT_FOUND'
  }
  
  /**
   * Return type for `inventoryDeactivate` mutation.
   */
  export interface InventoryDeactivatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for an inventory item.
   */
  export interface InventoryItemUpdateInput {
    
    /**
     * Unit cost associated with the inventory item, the currency is the shop's default currency.
     */
    cost?: Decimal;
    
    /**
     * Whether the inventory item is tracked. The value must be true to adjust the item's inventory levels.
     */
    tracked?: boolean;
    
    /**
     * The ISO 3166-1 alpha-2 country code of where the item originated from.
     */
    countryCodeOfOrigin?: CountryCode;
    
    /**
     * The ISO 3166-2 alpha-2 province/state code of where the item originated from.
     */
    provinceCodeOfOrigin?: string;
    
    /**
     * The harmonized system code of the inventory item. This must be a number between 6 and 13 digits.
     */
    harmonizedSystemCode?: string;
    
    /**
     * List of country-specific harmonized system codes.
     */
    countryHarmonizedSystemCodes?: Array<CountryHarmonizedSystemCodeInput>;
  }
  
  /**
   * The input fields required to specify a harmonized system code.
   * 
   */
  export interface CountryHarmonizedSystemCodeInput {
    
    /**
     * Country specific harmonized system code.
     */
    harmonizedSystemCode: string;
    
    /**
     * The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
     */
    countryCode: CountryCode;
  }
  
  /**
   * Return type for `inventoryItemUpdate` mutation.
   */
  export interface InventoryItemUpdatePayload {
    
    /**
     * The inventory item that was updated.
     */
    inventoryItem?: InventoryItem;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields required to move inventory quantities.
   */
  export interface InventoryMoveQuantitiesInput {
    
    /**
     * The reason for the quantity changes. The value must be one of the [possible 
     * reasons](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#set-inventory-quantities-on-hand).
     * 
     */
    reason: string;
    
    /**
     * The reference document URI for the changes. Used to denote what's causing the change.
     */
    referenceDocumentUri: string;
    
    /**
     * The quantity changes of items at locations to be made.
     */
    changes: Array<InventoryMoveQuantityChange>;
  }
  
  /**
   * Represents the change to be made to an inventory item at a location.
   * The change can either involve the same quantity name between different locations,
   * or involve different quantity names between the same location.
   * 
   */
  export interface InventoryMoveQuantityChange {
    
    /**
     * Specifies the inventory item to which the change will be applied.
     */
    inventoryItemId: string;
    
    /**
     * The amount by which the inventory quantity will be changed.
     */
    quantity: number;
    
    /**
     * Details about where the move will be made from.
     */
    from: InventoryMoveQuantityTerminalInput;
    
    /**
     * Details about where the move will be made to.
     */
    to: InventoryMoveQuantityTerminalInput;
  }
  
  /**
   * The input fields representing the change to be made to an inventory item at a location.
   * 
   */
  export interface InventoryMoveQuantityTerminalInput {
    
    /**
     * Specifies the location at which the change will be applied.
     */
    locationId: string;
    
    /**
     * The quantity
     * [name](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps#inventory-states) to be
     * moved.
     * 
     */
    name: string;
    
    /**
     * The ledger document URI for the quantity move. Not allowed for 'available' and required for other quantity names.
     */
    ledgerDocumentUri?: string;
  }
  
  /**
   * Return type for `inventoryMoveQuantities` mutation.
   */
  export interface InventoryMoveQuantitiesPayload {
    
    /**
     * The group of changes made by the operation.
     */
    inventoryAdjustmentGroup?: InventoryAdjustmentGroup;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<InventoryMoveQuantitiesUserError>;
  }
  
  /**
   * An error that occurs during the execution of `InventoryMoveQuantities`.
   */
  export interface InventoryMoveQuantitiesUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: InventoryMoveQuantitiesUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `InventoryMoveQuantitiesUserError`.
   */
  export const enum InventoryMoveQuantitiesUserErrorCode {
    
    /**
     * Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API.
     */
    INTERNAL_LEDGER_DOCUMENT = 'INTERNAL_LEDGER_DOCUMENT',
    
    /**
     * A ledger document URI is not allowed when adjusting available.
     */
    INVALID_AVAILABLE_DOCUMENT = 'INVALID_AVAILABLE_DOCUMENT',
    
    /**
     * The specified inventory item could not be found.
     */
    INVALID_INVENTORY_ITEM = 'INVALID_INVENTORY_ITEM',
    
    /**
     * The specified ledger document is invalid.
     */
    INVALID_LEDGER_DOCUMENT = 'INVALID_LEDGER_DOCUMENT',
    
    /**
     * The specified location could not be found.
     */
    INVALID_LOCATION = 'INVALID_LOCATION',
    
    /**
     * A ledger document URI is required except when adjusting available.
     */
    INVALID_QUANTITY_DOCUMENT = 'INVALID_QUANTITY_DOCUMENT',
    
    /**
     * The specified quantity name is invalid.
     */
    INVALID_QUANTITY_NAME = 'INVALID_QUANTITY_NAME',
    
    /**
     * The quantity can't be negative.
     */
    INVALID_QUANTITY_NEGATIVE = 'INVALID_QUANTITY_NEGATIVE',
    
    /**
     * The quantity can't be higher than 2,000,000,000.
     */
    INVALID_QUANTITY_TOO_HIGH = 'INVALID_QUANTITY_TOO_HIGH',
    
    /**
     * The specified reason is invalid.
     */
    INVALID_REASON = 'INVALID_REASON',
    
    /**
     * The specified reference document is invalid.
     */
    INVALID_REFERENCE_DOCUMENT = 'INVALID_REFERENCE_DOCUMENT',
    
    /**
     * The quantities couldn't be moved. Try again.
     */
    MOVE_QUANTITIES_FAILED = 'MOVE_QUANTITIES_FAILED',
    
    /**
     * The quantities can't be moved between different locations.
     */
    DIFFERENT_LOCATIONS = 'DIFFERENT_LOCATIONS',
    
    /**
     * The quantity names for each change can't be the same.
     */
    SAME_QUANTITY_NAME = 'SAME_QUANTITY_NAME',
    
    /**
     * Only a maximum of 2 ledger document URIs across all changes is allowed.
     */
    MAXIMUM_LEDGER_DOCUMENT_URIS = 'MAXIMUM_LEDGER_DOCUMENT_URIS',
    
    /**
     * The inventory item is not stocked at the location.
     */
    ITEM_NOT_STOCKED_AT_LOCATION = 'ITEM_NOT_STOCKED_AT_LOCATION',
    
    /**
     * The specified inventory item is not allowed to be adjusted via API.
     */
    NON_MUTABLE_INVENTORY_ITEM = 'NON_MUTABLE_INVENTORY_ITEM'
  }
  
  /**
   * The input fields required to set inventory on hand quantities.
   */
  export interface InventorySetOnHandQuantitiesInput {
    
    /**
     * The reason for the quantity changes. The value must be one of the [possible
     * reasons](https://shopify.dev/docs/apps/fulfillment/inventory-management-apps/quantities-states#set-inventory-quantities-on-hand).
     * 
     */
    reason: string;
    
    /**
     * The reference document URI for the changes. Used to denote what's causing the change.
     */
    referenceDocumentUri?: string;
    
    /**
     * The value to which the on hand quantity will be set.
     */
    setQuantities: Array<InventorySetQuantityInput>;
  }
  
  /**
   * The input fields for the quantity to be set for an inventory item at a location.
   * 
   */
  export interface InventorySetQuantityInput {
    
    /**
     * Specifies the inventory item to which the quantity will be set.
     */
    inventoryItemId: string;
    
    /**
     * Specifies the location at which the quantity will be set.
     */
    locationId: string;
    
    /**
     * The quantity to which the inventory quantity will be set.
     */
    quantity: number;
  }
  
  /**
   * Return type for `inventorySetOnHandQuantities` mutation.
   */
  export interface InventorySetOnHandQuantitiesPayload {
    
    /**
     * The group of changes made by the operation.
     */
    inventoryAdjustmentGroup?: InventoryAdjustmentGroup;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<InventorySetOnHandQuantitiesUserError>;
  }
  
  /**
   * An error that occurs during the execution of `InventorySetOnHandQuantities`.
   */
  export interface InventorySetOnHandQuantitiesUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: InventorySetOnHandQuantitiesUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `InventorySetOnHandQuantitiesUserError`.
   */
  export const enum InventorySetOnHandQuantitiesUserErrorCode {
    
    /**
     * The specified inventory item could not be found.
     */
    INVALID_INVENTORY_ITEM = 'INVALID_INVENTORY_ITEM',
    
    /**
     * The specified location could not be found.
     */
    INVALID_LOCATION = 'INVALID_LOCATION',
    
    /**
     * The quantity can't be negative.
     */
    INVALID_QUANTITY_NEGATIVE = 'INVALID_QUANTITY_NEGATIVE',
    
    /**
     * The specified reason is invalid.
     */
    INVALID_REASON = 'INVALID_REASON',
    
    /**
     * The specified reference document is invalid.
     */
    INVALID_REFERENCE_DOCUMENT = 'INVALID_REFERENCE_DOCUMENT',
    
    /**
     * The on-hand quantities couldn't be set. Try again.
     */
    SET_ON_HAND_QUANTITIES_FAILED = 'SET_ON_HAND_QUANTITIES_FAILED',
    
    /**
     * The inventory item is not stocked at the location.
     */
    ITEM_NOT_STOCKED_AT_LOCATION = 'ITEM_NOT_STOCKED_AT_LOCATION',
    
    /**
     * The specified inventory item is not allowed to be adjusted via API.
     */
    NON_MUTABLE_INVENTORY_ITEM = 'NON_MUTABLE_INVENTORY_ITEM',
    
    /**
     * The total quantity can't be higher than 1,000,000,000.
     */
    INVALID_QUANTITY_TOO_HIGH = 'INVALID_QUANTITY_TOO_HIGH'
  }
  
  /**
   * The input fields for setting up scheduled changes of inventory items.
   */
  export interface InventorySetScheduledChangesInput {
    
    /**
     * The reason for setting up the scheduled changes.
     */
    reason: string;
    
    /**
     * The list of all the items on which the scheduled changes need to be applied.
     */
    items: Array<InventoryScheduledChangeItemInput>;
    
    /**
     * The reference document URI to indicate how the scheduled changes are related for auditing purposes.
     */
    referenceDocumentUri: URL;
  }
  
  /**
   * The input fields for the inventory item associated with the scheduled changes that need to be applied.
   */
  export interface InventoryScheduledChangeItemInput {
    
    /**
     * The ID of the inventory item.
     */
    inventoryItemId: string;
    
    /**
     * The ID of the location.
     */
    locationId: string;
    
    /**
     * The ledger document URI which will be used to calculate the quantity transfered.
     */
    ledgerDocumentUri: URL;
    
    /**
     * An array of all the scheduled changes for the item.
     */
    scheduledChanges: Array<InventoryScheduledChangeInput>;
  }
  
  /**
   * The input fields for a scheduled change of an inventory item.
   */
  export interface InventoryScheduledChangeInput {
    
    /**
     * The date and time that the scheduled change is expected to happen.
     */
    expectedAt: DateTime;
    
    /**
     * The state to transition from.
     */
    fromName: string;
    
    /**
     * The state to transition to.
     */
    toName: string;
  }
  
  /**
   * Return type for `inventorySetScheduledChanges` mutation.
   */
  export interface InventorySetScheduledChangesPayload {
    
    /**
     * The scheduled changes that were created.
     */
    scheduledChanges?: Array<InventoryScheduledChange>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<InventorySetScheduledChangesUserError>;
  }
  
  /**
   * An error that occurs during the execution of `InventorySetScheduledChanges`.
   */
  export interface InventorySetScheduledChangesUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: InventorySetScheduledChangesUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `InventorySetScheduledChangesUserError`.
   */
  export const enum InventorySetScheduledChangesUserErrorCode {
    
    /**
     * There was an error updating the scheduled changes.
     */
    ERROR_UPDATING_SCHEDULED = 'ERROR_UPDATING_SCHEDULED',
    
    /**
     * The from_name and to_name can't be the same.
     */
    SAME_FROM_TO_NAMES = 'SAME_FROM_TO_NAMES',
    
    /**
     * The specified fromName is invalid.
     */
    INVALID_FROM_NAME = 'INVALID_FROM_NAME',
    
    /**
     * The specified toName is invalid.
     */
    INVALID_TO_NAME = 'INVALID_TO_NAME',
    
    /**
     * The item can only have one scheduled change for %{to_name} as the to_name.
     */
    DUPLICATE_TO_NAME = 'DUPLICATE_TO_NAME',
    
    /**
     * The specified reason is invalid. Valid values: %{reasons}.
     */
    INVALID_REASON = 'INVALID_REASON',
    
    /**
     * The item can only have one scheduled change for %{from_name} as the fromName.
     */
    DUPLICATE_FROM_NAME = 'DUPLICATE_FROM_NAME',
    
    /**
     * The location couldn't be found.
     */
    LOCATION_NOT_FOUND = 'LOCATION_NOT_FOUND',
    
    /**
     * The inventory item was not found at the location specified.
     */
    INVENTORY_STATE_NOT_FOUND = 'INVENTORY_STATE_NOT_FOUND',
    
    /**
     * At least 1 item must be provided.
     */
    ITEMS_EMPTY = 'ITEMS_EMPTY',
    
    /**
     * The inventory item was not found.
     */
    INVENTORY_ITEM_NOT_FOUND = 'INVENTORY_ITEM_NOT_FOUND',
    
    /**
     * The specified field is invalid.
     */
    INCLUSION = 'INCLUSION'
  }
  
  /**
   * Return type for `locationActivate` mutation.
   */
  export interface LocationActivatePayload {
    
    /**
     * The location that was activated.
     */
    location?: Location;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    locationActivateUserErrors: Array<LocationActivateUserError>;
  }
  
  /**
   * An error that occurs while activating a location.
   */
  export interface LocationActivateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: LocationActivateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `LocationActivateUserError`.
   */
  export const enum LocationActivateUserErrorCode {
    
    /**
     * An error occurred while activating the location.
     */
    GENERIC_ERROR = 'GENERIC_ERROR',
    
    /**
     * Shop has reached its location limit.
     */
    LOCATION_LIMIT = 'LOCATION_LIMIT',
    
    /**
     * This location currently cannot be activated as inventory, pending orders or transfers are being relocated from this location.
     */
    HAS_ONGOING_RELOCATION = 'HAS_ONGOING_RELOCATION',
    
    /**
     * Location not found.
     */
    LOCATION_NOT_FOUND = 'LOCATION_NOT_FOUND',
    
    /**
     * There is already an active location with this name.
     */
    HAS_NON_UNIQUE_NAME = 'HAS_NON_UNIQUE_NAME'
  }
  
  /**
   * The input fields to use to add a location.
   */
  export interface LocationAddInput {
    
    /**
     * The name of the location.
     */
    name: string;
    
    /**
     * The address of the location.
     */
    address: LocationAddAddressInput;
    
    /**
     * Whether inventory at this location is available for sale online.
     */
    fulfillsOnlineOrders?: boolean;
    
    /**
     * Additional customizable information to associate with the location.
     */
    metafields?: Array<MetafieldInput>;
  }
  
  /**
   * The input fields to use to specify the address while adding a location.
   */
  export interface LocationAddAddressInput {
    
    /**
     * The first line of the address.
     */
    address1?: string;
    
    /**
     * The second line of the address.
     */
    address2?: string;
    
    /**
     * The name of the city, district, village, or town.
     */
    city?: string;
    
    /**
     * The phone number of the location.
     */
    phone?: string;
    
    /**
     * The ZIP code or postal code of the address.
     */
    zip?: string;
    
    /**
     * The two-letter code of country for the address.
     */
    countryCode: CountryCode;
    
    /**
     * The code for the region of the address, such as the state, province, or district.
     * For example CA for California, United States.
     * 
     */
    provinceCode?: string;
  }
  
  /**
   * Return type for `locationAdd` mutation.
   */
  export interface LocationAddPayload {
    
    /**
     * The location that was added.
     */
    location?: Location;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<LocationAddUserError>;
  }
  
  /**
   * An error that occurs while adding a location.
   */
  export interface LocationAddUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: LocationAddUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `LocationAddUserError`.
   */
  export const enum LocationAddUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The ZIP code is not a valid US ZIP code.
     */
    INVALID_US_ZIPCODE = 'INVALID_US_ZIPCODE',
    
    /**
     * An error occurred while adding the location.
     */
    GENERIC_ERROR = 'GENERIC_ERROR',
    
    /**
     * The type is invalid.
     */
    INVALID_TYPE = 'INVALID_TYPE',
    
    /**
     * The value is invalid for the metafield type or for the definition options.
     */
    INVALID_VALUE = 'INVALID_VALUE',
    
    /**
     * ApiPermission metafields can only be created or updated by the app owner.
     */
    APP_NOT_AUTHORIZED = 'APP_NOT_AUTHORIZED',
    
    /**
     * Unstructured reserved namespace.
     */
    UNSTRUCTURED_RESERVED_NAMESPACE = 'UNSTRUCTURED_RESERVED_NAMESPACE',
    
    /**
     * Owner type can't be used in this mutation.
     */
    DISALLOWED_OWNER_TYPE = 'DISALLOWED_OWNER_TYPE',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT'
  }
  
  /**
   * Return type for `locationDeactivate` mutation.
   */
  export interface LocationDeactivatePayload {
    
    /**
     * The location that was deactivated.
     */
    location?: Location;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    locationDeactivateUserErrors: Array<LocationDeactivateUserError>;
  }
  
  /**
   * The possible errors that can be returned when executing the `locationDeactivate` mutation.
   */
  export interface LocationDeactivateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: LocationDeactivateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `LocationDeactivateUserError`.
   */
  export const enum LocationDeactivateUserErrorCode {
    
    /**
     * Location not found.
     */
    LOCATION_NOT_FOUND = 'LOCATION_NOT_FOUND',
    
    /**
     * Location either has a fulfillment service or is the only location with a shipping address.
     */
    PERMANENTLY_BLOCKED_FROM_DEACTIVATION_ERROR = 'PERMANENTLY_BLOCKED_FROM_DEACTIVATION_ERROR',
    
    /**
     * Location has incoming inventory. The location can be deactivated after the inventory has been received.
     */
    TEMPORARILY_BLOCKED_FROM_DEACTIVATION_ERROR = 'TEMPORARILY_BLOCKED_FROM_DEACTIVATION_ERROR',
    
    /**
     * Location needs to be removed from Shopify POS for Retail subscription in Point of Sale channel.
     */
    HAS_ACTIVE_RETAIL_SUBSCRIPTIONS = 'HAS_ACTIVE_RETAIL_SUBSCRIPTIONS',
    
    /**
     * Destination location is the same as the location to be deactivated.
     */
    DESTINATION_LOCATION_IS_THE_SAME_LOCATION = 'DESTINATION_LOCATION_IS_THE_SAME_LOCATION',
    
    /**
     * Destination location is not found or inactive.
     */
    DESTINATION_LOCATION_NOT_FOUND_OR_INACTIVE = 'DESTINATION_LOCATION_NOT_FOUND_OR_INACTIVE',
    
    /**
     * Location could not be deactivated without specifying where to relocate inventory at the location.
     */
    HAS_ACTIVE_INVENTORY_ERROR = 'HAS_ACTIVE_INVENTORY_ERROR',
    
    /**
     * Location could not be deactivated because it has pending orders.
     */
    HAS_FULFILLMENT_ORDERS_ERROR = 'HAS_FULFILLMENT_ORDERS_ERROR',
    
    /**
     * Location could not be deactivated because it has open transfers.
     */
    HAS_OPEN_TRANSFERS_ERROR = 'HAS_OPEN_TRANSFERS_ERROR',
    
    /**
     * Location could not be deactivated because it has open Shopify Fulfillment Network transfers.
     */
    HAS_INCOMING_MOVEMENTS_ERROR = 'HAS_INCOMING_MOVEMENTS_ERROR',
    
    /**
     * Location could not be deactivated because it has open purchase orders.
     */
    HAS_OPEN_PURCHASE_ORDERS_ERROR = 'HAS_OPEN_PURCHASE_ORDERS_ERROR',
    
    /**
     * Failed to relocate active inventories to the destination location.
     */
    FAILED_TO_RELOCATE_ACTIVE_INVENTORIES = 'FAILED_TO_RELOCATE_ACTIVE_INVENTORIES',
    
    /**
     * Failed to relocate open transfers to the destination location.
     */
    FAILED_TO_RELOCATE_OPEN_TRANSFERS = 'FAILED_TO_RELOCATE_OPEN_TRANSFERS',
    
    /**
     * Failed to relocate open purchase orders to the destination location.
     */
    FAILED_TO_RELOCATE_OPEN_PURCHASE_ORDERS = 'FAILED_TO_RELOCATE_OPEN_PURCHASE_ORDERS',
    
    /**
     * Failed to relocate incoming movements to the destination location.
     */
    FAILED_TO_RELOCATE_INCOMING_MOVEMENTS = 'FAILED_TO_RELOCATE_INCOMING_MOVEMENTS',
    
    /**
     * At least one location must fulfill online orders.
     */
    CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT = 'CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT'
  }
  
  /**
   * Return type for `locationDelete` mutation.
   */
  export interface LocationDeletePayload {
    
    /**
     * The ID of the location that was deleted.
     */
    deletedLocationId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    locationDeleteUserErrors: Array<LocationDeleteUserError>;
  }
  
  /**
   * An error that occurs while deleting a location.
   */
  export interface LocationDeleteUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: LocationDeleteUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `LocationDeleteUserError`.
   */
  export const enum LocationDeleteUserErrorCode {
    
    /**
     * Location not found.
     */
    LOCATION_NOT_FOUND = 'LOCATION_NOT_FOUND',
    
    /**
     * The location cannot be deleted while it is active.
     */
    LOCATION_IS_ACTIVE = 'LOCATION_IS_ACTIVE',
    
    /**
     * An error occurred while deleting the location.
     */
    GENERIC_ERROR = 'GENERIC_ERROR',
    
    /**
     * The location cannot be deleted while it has inventory.
     */
    LOCATION_HAS_INVENTORY = 'LOCATION_HAS_INVENTORY',
    
    /**
     * The location cannot be deleted while it has pending orders.
     */
    LOCATION_HAS_PENDING_ORDERS = 'LOCATION_HAS_PENDING_ORDERS',
    
    /**
     * The location cannot be deleted while it has any active Retail subscriptions in the Point of Sale channel.
     */
    LOCATION_HAS_ACTIVE_RETAIL_SUBSCRIPTION = 'LOCATION_HAS_ACTIVE_RETAIL_SUBSCRIPTION'
  }
  
  /**
   * The input fields to use to edit a location.
   */
  export interface LocationEditInput {
    
    /**
     * The name of the location.
     */
    name?: string;
    
    /**
     * The address of the location.
     */
    address?: LocationEditAddressInput;
    
    /**
     * Whether inventory at this location is available for sale online.
     * 
     * **Note:** This can't be disabled for fulfillment service locations.
     * 
     */
    fulfillsOnlineOrders?: boolean;
    
    /**
     * Additional customizable information to associate with the location.
     */
    metafields?: Array<MetafieldInput>;
  }
  
  /**
   * The input fields to use to edit the address of a location.
   */
  export interface LocationEditAddressInput {
    
    /**
     * The first line of the address.
     */
    address1?: string;
    
    /**
     * The second line of the address.
     */
    address2?: string;
    
    /**
     * The name of the city, district, village, or town.
     */
    city?: string;
    
    /**
     * The phone number of the location.
     */
    phone?: string;
    
    /**
     * The ZIP code or postal code of the location.
     */
    zip?: string;
    
    /**
     * The two-letter code of country for the address.
     */
    countryCode?: CountryCode;
    
    /**
     * The code for the region of the address, such as the state, province, or district.
     * For example CA for California, United States.
     * 
     */
    provinceCode?: string;
  }
  
  /**
   * Return type for `locationEdit` mutation.
   */
  export interface LocationEditPayload {
    
    /**
     * The location that was edited.
     */
    location?: Location;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<LocationEditUserError>;
  }
  
  /**
   * An error that occurs while editing a location.
   */
  export interface LocationEditUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: LocationEditUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `LocationEditUserError`.
   */
  export const enum LocationEditUserErrorCode {
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The record with the ID used as the input value couldn't be found.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The ZIP code is not a valid US ZIP code.
     */
    INVALID_US_ZIPCODE = 'INVALID_US_ZIPCODE',
    
    /**
     * An error occurred while editing the location.
     */
    GENERIC_ERROR = 'GENERIC_ERROR',
    
    /**
     * At least one location must fulfill online orders.
     */
    CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT = 'CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT',
    
    /**
     * Cannot modify the online order fulfillment preference for fulfillment service locations.
     */
    CANNOT_MODIFY_ONLINE_ORDER_FULFILLMENT_FOR_FS_LOCATION = 'CANNOT_MODIFY_ONLINE_ORDER_FULFILLMENT_FOR_FS_LOCATION',
    
    /**
     * The type is invalid.
     */
    INVALID_TYPE = 'INVALID_TYPE',
    
    /**
     * The value is invalid for the metafield type or for the definition options.
     */
    INVALID_VALUE = 'INVALID_VALUE',
    
    /**
     * ApiPermission metafields can only be created or updated by the app owner.
     */
    APP_NOT_AUTHORIZED = 'APP_NOT_AUTHORIZED',
    
    /**
     * Unstructured reserved namespace.
     */
    UNSTRUCTURED_RESERVED_NAMESPACE = 'UNSTRUCTURED_RESERVED_NAMESPACE',
    
    /**
     * Owner type can't be used in this mutation.
     */
    DISALLOWED_OWNER_TYPE = 'DISALLOWED_OWNER_TYPE',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT'
  }
  
  /**
   * Return type for `locationLocalPickupDisable` mutation.
   */
  export interface LocationLocalPickupDisablePayload {
    
    /**
     * The ID of the location for which local pickup was disabled.
     */
    locationId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DeliveryLocationLocalPickupSettingsError>;
  }
  
  /**
   * Represents an error that happened when changing local pickup settings for a location.
   */
  export interface DeliveryLocationLocalPickupSettingsError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: DeliveryLocationLocalPickupSettingsErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `DeliveryLocationLocalPickupSettingsError`.
   */
  export const enum DeliveryLocationLocalPickupSettingsErrorCode {
    
    /**
     * Provided locationId is not for an active location belonging to this store.
     */
    ACTIVE_LOCATION_NOT_FOUND = 'ACTIVE_LOCATION_NOT_FOUND',
    
    /**
     * An error occurred while changing the local pickup settings.
     */
    GENERIC_ERROR = 'GENERIC_ERROR'
  }
  
  /**
   * The input fields for a local pickup setting associated with a location.
   */
  export interface DeliveryLocationLocalPickupEnableInput {
    
    /**
     * The ID of the location associated with the location setting.
     */
    locationId: string;
    
    /**
     * The time of the local pickup.
     */
    pickupTime: DeliveryLocalPickupTime;
    
    /**
     * The instructions for the local pickup.
     */
    instructions?: string;
  }
  
  /**
   * Return type for `locationLocalPickupEnable` mutation.
   */
  export interface LocationLocalPickupEnablePayload {
    
    /**
     * The local pickup settings that were enabled.
     */
    localPickupSettings?: DeliveryLocalPickupSettings;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<DeliveryLocationLocalPickupSettingsError>;
  }
  
  /**
   * The input fields required to create a market.
   */
  export interface MarketCreateInput {
    
    /**
     * The name of the market. Not shown to customers.
     * 
     */
    name: string;
    
    /**
     * A unique identifier for the market. For example `"ca"`.
     * If the handle isn't provided, then the handle is auto-generated based on the country or name.
     * 
     */
    handle?: string;
    
    /**
     * Whether the market is enabled to receive visitors and sales. If a
     * value isn't provided, then the market is enabled by default if all
     * included regions have shipping rates, and disabled if any regions don't
     * have shipping rates.
     * 
     * **Note**: Regions in inactive markets can't be selected on the
     * storefront or in checkout.
     * 
     */
    enabled?: boolean;
    
    /**
     * The regions to be included in the market. Each region can only be included in one market at
     * a time.
     * 
     */
    regions: Array<MarketRegionCreateInput>;
  }
  
  /**
   * The input fields for creating a market region with exactly one required option.
   */
  export interface MarketRegionCreateInput {
    
    /**
     * A country code for the region.
     */
    countryCode: CountryCode;
  }
  
  /**
   * Return type for `marketCreate` mutation.
   */
  export interface MarketCreatePayload {
    
    /**
     * The market object.
     */
    market?: Market;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketUserError>;
  }
  
  /**
   * Defines errors encountered while managing a Market.
   * 
   */
  export interface MarketUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: MarketUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `MarketUserError`.
   */
  export const enum MarketUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The market wasn't found.
     */
    MARKET_NOT_FOUND = 'MARKET_NOT_FOUND',
    
    /**
     * The market region wasn't found.
     */
    REGION_NOT_FOUND = 'REGION_NOT_FOUND',
    
    /**
     * The market web presence wasn't found.
     */
    WEB_PRESENCE_NOT_FOUND = 'WEB_PRESENCE_NOT_FOUND',
    
    /**
     * Can't add regions to the primary market.
     */
    CANNOT_ADD_REGIONS_TO_PRIMARY_MARKET = 'CANNOT_ADD_REGIONS_TO_PRIMARY_MARKET',
    
    /**
     * Can't delete the only region in a market.
     */
    CANNOT_DELETE_ONLY_REGION = 'CANNOT_DELETE_ONLY_REGION',
    
    /**
     * Exactly one input option is required.
     */
    REQUIRES_EXACTLY_ONE_OPTION = 'REQUIRES_EXACTLY_ONE_OPTION',
    
    /**
     * Can't delete the primary market.
     */
    CANNOT_DELETE_PRIMARY_MARKET = 'CANNOT_DELETE_PRIMARY_MARKET',
    
    /**
     * Domain was not found.
     */
    DOMAIN_NOT_FOUND = 'DOMAIN_NOT_FOUND',
    
    /**
     * The subfolder suffix must contain only letters.
     */
    SUBFOLDER_SUFFIX_MUST_CONTAIN_ONLY_LETTERS = 'SUBFOLDER_SUFFIX_MUST_CONTAIN_ONLY_LETTERS',
    
    /**
     * The subfolder suffix is invalid, please provide a different value.
     */
    SUBFOLDER_SUFFIX_CANNOT_BE_SCRIPT_CODE = 'SUBFOLDER_SUFFIX_CANNOT_BE_SCRIPT_CODE',
    
    /**
     * No languages selected.
     */
    NO_LANGUAGES = 'NO_LANGUAGES',
    
    /**
     * Duplicates found in languages.
     */
    DUPLICATE_LANGUAGES = 'DUPLICATE_LANGUAGES',
    
    /**
     * Cannot add region-specific language.
     */
    REGION_SPECIFIC_LANGUAGE = 'REGION_SPECIFIC_LANGUAGE',
    
    /**
     * Can't pass both `subfolderSuffix` and `domainId`.
     */
    CANNOT_HAVE_SUBFOLDER_AND_DOMAIN = 'CANNOT_HAVE_SUBFOLDER_AND_DOMAIN',
    
    /**
     * Can't add the web presence to the primary market.
     */
    CANNOT_ADD_WEB_PRESENCE_TO_PRIMARY_MARKET = 'CANNOT_ADD_WEB_PRESENCE_TO_PRIMARY_MARKET',
    
    /**
     * Can't add another web presence to the market.
     */
    MARKET_REACHED_WEB_PRESENCE_LIMIT = 'MARKET_REACHED_WEB_PRESENCE_LIMIT',
    
    /**
     * Can't have multiple subfolder web presences per market.
     */
    CANNOT_HAVE_MULTIPLE_SUBFOLDERS_PER_MARKET = 'CANNOT_HAVE_MULTIPLE_SUBFOLDERS_PER_MARKET',
    
    /**
     * Can't have both subfolder and domain web presences.
     */
    CANNOT_HAVE_BOTH_SUBFOLDER_AND_DOMAIN_WEB_PRESENCES = 'CANNOT_HAVE_BOTH_SUBFOLDER_AND_DOMAIN_WEB_PRESENCES',
    
    /**
     * One of `subfolderSuffix` or `domainId` is required.
     */
    REQUIRES_DOMAIN_OR_SUBFOLDER = 'REQUIRES_DOMAIN_OR_SUBFOLDER',
    
    /**
     * The primary market must use the primary domain.
     */
    PRIMARY_MARKET_MUST_USE_PRIMARY_DOMAIN = 'PRIMARY_MARKET_MUST_USE_PRIMARY_DOMAIN',
    
    /**
     * Can't delete the primary market's web presence.
     */
    CANNOT_DELETE_PRIMARY_MARKET_WEB_PRESENCE = 'CANNOT_DELETE_PRIMARY_MARKET_WEB_PRESENCE',
    
    /**
     * Can't have more than 50 markets.
     */
    SHOP_REACHED_MARKETS_LIMIT = 'SHOP_REACHED_MARKETS_LIMIT',
    
    /**
     * Can't disable the primary market.
     */
    CANNOT_DISABLE_PRIMARY_MARKET = 'CANNOT_DISABLE_PRIMARY_MARKET',
    
    /**
     * The language isn't published to the store.
     */
    UNPUBLISHED_LANGUAGE = 'UNPUBLISHED_LANGUAGE',
    
    /**
     * The language isn't enabled on the store.
     */
    DISABLED_LANGUAGE = 'DISABLED_LANGUAGE',
    
    /**
     * Can't set default locale to null.
     */
    CANNOT_SET_DEFAULT_LOCALE_TO_NULL = 'CANNOT_SET_DEFAULT_LOCALE_TO_NULL',
    
    /**
     * Can't add unsupported country or region.
     */
    UNSUPPORTED_COUNTRY_REGION = 'UNSUPPORTED_COUNTRY_REGION',
    
    /**
     * Can't add customer account domain to a market.
     */
    CANNOT_ADD_CUSTOMER_DOMAIN = 'CANNOT_ADD_CUSTOMER_DOMAIN'
  }
  
  /**
   * The input fields used to update the currency settings of a market.
   */
  export interface MarketCurrencySettingsUpdateInput {
    
    /**
     * The currency which this market’s prices are defined in, and the
     * currency which its customers must use if local currencies are disabled.
     * 
     */
    baseCurrency?: CurrencyCode;
    
    /**
     * Whether or not local currencies are enabled. If enabled, then prices will
     * be converted to give each customer the best experience based on their
     * region. If disabled, then all customers in this market will see prices
     * in the market's base currency.
     * 
     */
    localCurrencies?: boolean;
  }
  
  /**
   * Return type for `marketCurrencySettingsUpdate` mutation.
   */
  export interface MarketCurrencySettingsUpdatePayload {
    
    /**
     * The market object.
     */
    market?: Market;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketCurrencySettingsUserError>;
  }
  
  /**
   * Error codes for failed market multi-currency operations.
   */
  export interface MarketCurrencySettingsUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: MarketCurrencySettingsUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `MarketCurrencySettingsUserError`.
   */
  export const enum MarketCurrencySettingsUserErrorCode {
    
    /**
     * The specified market wasn't found.
     */
    MARKET_NOT_FOUND = 'MARKET_NOT_FOUND',
    
    /**
     * The currency settings of the given market cannot be changed because the market manager has exclusive control of pricing.
     */
    MANAGED_MARKET = 'MANAGED_MARKET',
    
    /**
     * The shop's payment gateway does not support enabling more than one currency.
     */
    MULTIPLE_CURRENCIES_NOT_SUPPORTED = 'MULTIPLE_CURRENCIES_NOT_SUPPORTED',
    
    /**
     * Can't enable or disable local currencies on a single country market.
     */
    NO_LOCAL_CURRENCIES_ON_SINGLE_COUNTRY_MARKET = 'NO_LOCAL_CURRENCIES_ON_SINGLE_COUNTRY_MARKET',
    
    /**
     * The specified currency is not supported.
     */
    UNSUPPORTED_CURRENCY = 'UNSUPPORTED_CURRENCY',
    
    /**
     * The primary market must use the shop currency.
     */
    PRIMARY_MARKET_USES_SHOP_CURRENCY = 'PRIMARY_MARKET_USES_SHOP_CURRENCY'
  }
  
  /**
   * Return type for `marketDelete` mutation.
   */
  export interface MarketDeletePayload {
    
    /**
     * The ID of the deleted market.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketUserError>;
  }
  
  /**
   * The input fields and values for creating or updating a market localization.
   */
  export interface MarketLocalizationRegisterInput {
    
    /**
     * The ID of the market that the localization is specific to.
     */
    marketId: string;
    
    /**
     * A reference to the value being localized on the resource that this market localization belongs to.
     */
    key: string;
    
    /**
     * The value of the market localization.
     */
    value: string;
    
    /**
     * A hash digest representation of the content being localized.
     */
    marketLocalizableContentDigest: string;
  }
  
  /**
   * Return type for `marketLocalizationsRegister` mutation.
   */
  export interface MarketLocalizationsRegisterPayload {
    
    /**
     * The market localizations that were created or updated.
     */
    marketLocalizations?: Array<MarketLocalization>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<TranslationUserError>;
  }
  
  /**
   * Represents an error that happens during the execution of a translation mutation.
   */
  export interface TranslationUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: TranslationErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `TranslationUserError`.
   */
  export const enum TranslationErrorCode {
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * Resource does not exist.
     */
    RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND',
    
    /**
     * Resource is not translatable.
     */
    RESOURCE_NOT_TRANSLATABLE = 'RESOURCE_NOT_TRANSLATABLE',
    
    /**
     * Too many translation keys for the resource.
     */
    TOO_MANY_KEYS_FOR_RESOURCE = 'TOO_MANY_KEYS_FOR_RESOURCE',
    
    /**
     * Translation key is invalid.
     */
    INVALID_KEY_FOR_MODEL = 'INVALID_KEY_FOR_MODEL',
    
    /**
     * Translation value is invalid.
     */
    FAILS_RESOURCE_VALIDATION = 'FAILS_RESOURCE_VALIDATION',
    
    /**
     * Translatable content is invalid.
     */
    INVALID_TRANSLATABLE_CONTENT = 'INVALID_TRANSLATABLE_CONTENT',
    
    /**
     * Market localizable content is invalid.
     */
    INVALID_MARKET_LOCALIZABLE_CONTENT = 'INVALID_MARKET_LOCALIZABLE_CONTENT',
    
    /**
     * Locale is invalid for the shop.
     */
    INVALID_LOCALE_FOR_SHOP = 'INVALID_LOCALE_FOR_SHOP',
    
    /**
     * Locale language code is invalid.
     */
    INVALID_CODE = 'INVALID_CODE',
    
    /**
     * Locale code format is invalid.
     */
    INVALID_FORMAT = 'INVALID_FORMAT',
    
    /**
     * The shop isn't allowed to operate on market custom content.
     */
    MARKET_CUSTOM_CONTENT_NOT_ALLOWED = 'MARKET_CUSTOM_CONTENT_NOT_ALLOWED',
    
    /**
     * The market corresponding to the `marketId` argument doesn't exist.
     */
    MARKET_DOES_NOT_EXIST = 'MARKET_DOES_NOT_EXIST',
    
    /**
     * The market override locale creation failed.
     */
    MARKET_LOCALE_CREATION_FAILED = 'MARKET_LOCALE_CREATION_FAILED',
    
    /**
     * The specified resource can't be customized for a market.
     */
    RESOURCE_NOT_MARKET_CUSTOMIZABLE = 'RESOURCE_NOT_MARKET_CUSTOMIZABLE',
    
    /**
     * The locale is missing on the market corresponding to the `marketId` argument.
     */
    INVALID_LOCALE_FOR_MARKET = 'INVALID_LOCALE_FOR_MARKET',
    
    /**
     * The handle is already taken for this resource.
     */
    INVALID_VALUE_FOR_HANDLE_TRANSLATION = 'INVALID_VALUE_FOR_HANDLE_TRANSLATION'
  }
  
  /**
   * Return type for `marketLocalizationsRemove` mutation.
   */
  export interface MarketLocalizationsRemovePayload {
    
    /**
     * The market localizations that were deleted.
     */
    marketLocalizations?: Array<MarketLocalization>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<TranslationUserError>;
  }
  
  /**
   * Return type for `marketRegionDelete` mutation.
   */
  export interface MarketRegionDeletePayload {
    
    /**
     * The ID of the deleted market region.
     */
    deletedId?: string;
    
    /**
     * The parent market object of the deleted region.
     */
    market?: Market;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketUserError>;
  }
  
  /**
   * Return type for `marketRegionsCreate` mutation.
   */
  export interface MarketRegionsCreatePayload {
    
    /**
     * The market object.
     */
    market?: Market;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketUserError>;
  }
  
  /**
   * Return type for `marketRegionsDelete` mutation.
   */
  export interface MarketRegionsDeletePayload {
    
    /**
     * The ID of the deleted market region.
     */
    deletedIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketUserError>;
  }
  
  /**
   * The input fields used to update a market.
   */
  export interface MarketUpdateInput {
    
    /**
     * The name of the market. Not shown to customers.
     * 
     */
    name?: string;
    
    /**
     * A unique identifier for the market. For example `"ca"`.
     * 
     */
    handle?: string;
    
    /**
     * Whether the market is enabled to receive visitors and sales. **Note**: Regions in
     * inactive markets cannot be selected on the storefront or in checkout.
     * 
     */
    enabled?: boolean;
  }
  
  /**
   * Return type for `marketUpdate` mutation.
   */
  export interface MarketUpdatePayload {
    
    /**
     * The market object.
     */
    market?: Market;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketUserError>;
  }
  
  /**
   * The input fields used to create a web presence for a market.
   */
  export interface MarketWebPresenceCreateInput {
    
    /**
     * The web presence's domain ID. This field must be `null` if the `subfolderSuffix` isn't `null`.
     * 
     */
    domainId?: string;
    
    /**
     * The default locale for the market’s web presence.
     * 
     */
    defaultLocale: string;
    
    /**
     * The alternate locales for the market’s web presence.
     * 
     */
    alternateLocales?: Array<string>;
    
    /**
     * The market-specific suffix of the subfolders defined by the web presence.
     * For example: in `/en-us`, the subfolder suffix is `us`.
     * Only ASCII characters are allowed. This field must be `null` if the `domainId` isn't `null`.
     * 
     */
    subfolderSuffix?: string;
  }
  
  /**
   * Return type for `marketWebPresenceCreate` mutation.
   */
  export interface MarketWebPresenceCreatePayload {
    
    /**
     * The market object.
     */
    market?: Market;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketUserError>;
  }
  
  /**
   * Return type for `marketWebPresenceDelete` mutation.
   */
  export interface MarketWebPresenceDeletePayload {
    
    /**
     * The ID of the deleted web presence.
     */
    deletedId?: string;
    
    /**
     * The market for which the web presence was deleted.
     */
    market?: Market;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketUserError>;
  }
  
  /**
   * The input fields used to update a web presence for a market.
   */
  export interface MarketWebPresenceUpdateInput {
    
    /**
     * The web presence's domain ID. This field must be null if `subfolderSuffix` is not null.
     * 
     */
    domainId?: string;
    
    /**
     * The default locale for the market’s web presence.
     * 
     */
    defaultLocale?: string;
    
    /**
     * The alternate locales for the market’s web presence.
     * 
     */
    alternateLocales?: Array<string>;
    
    /**
     * The market-specific suffix of the subfolders defined by the web presence.
     * Example: in `/en-us` the subfolder suffix is `us`.
     * Only ASCII characters are allowed. This field must be null if `domainId` is not null.
     * 
     */
    subfolderSuffix?: string;
  }
  
  /**
   * Return type for `marketWebPresenceUpdate` mutation.
   */
  export interface MarketWebPresenceUpdatePayload {
    
    /**
     * The market object.
     */
    market?: Market;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketUserError>;
  }
  
  /**
   * Return type for `marketingActivitiesDeleteAllExternal` mutation.
   */
  export interface MarketingActivitiesDeleteAllExternalPayload {
    
    /**
     * The asynchronous job that performs the deletion. The status of the job may be used to determine when it's safe again to create new activities.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketingActivityUserError>;
  }
  
  /**
   * An error that occurs during the execution of a Shopify Marketing mutation.
   */
  export interface MarketingActivityUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: MarketingActivityUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `MarketingActivityUserError`.
   */
  export const enum MarketingActivityUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN'
  }
  
  /**
   * The input fields required to create a marketing activity.
   */
  export interface MarketingActivityCreateInput {
    
    /**
     * The title of the marketing activity.
     */
    marketingActivityTitle?: string;
    
    /**
     * The form data in JSON serialized as a string.
     */
    formData?: string;
    
    /**
     * The ID of the marketing activity extension.
     */
    marketingActivityExtensionId: string;
    
    /**
     * Encoded context containing marketing campaign id.
     */
    context?: string;
    
    /**
     * Specifies the
     * [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
     * that are associated with a related marketing campaign. UTMInput is required for all Marketing
     * tactics except Storefront App.
     * 
     */
    utm?: UTMInput;
    
    /**
     * The current state of the marketing activity.
     */
    status: MarketingActivityStatus;
    
    /**
     * The budget for this marketing activity.
     */
    budget?: MarketingActivityBudgetInput;
  }
  
  /**
   * The input fields combining budget amount and its marketing budget type.
   */
  export interface MarketingActivityBudgetInput {
    
    /**
     * Budget type for marketing activity.
     */
    budgetType?: MarketingBudgetBudgetType;
    
    /**
     * Amount of budget for the marketing activity.
     */
    total?: MoneyInput;
  }
  
  /**
   * Return type for `marketingActivityCreate` mutation.
   */
  export interface MarketingActivityCreatePayload {
    
    /**
     * The created marketing activity.
     */
    marketingActivity?: MarketingActivity;
    
    /**
     * The path to return back to shopify admin from embedded editor.
     */
    redirectPath?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for creating an externally-managed marketing activity.
   */
  export interface MarketingActivityCreateExternalInput {
    
    /**
     * The title of the marketing activity.
     */
    title: string;
    
    /**
     * Specifies the [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters) that are associated with a related marketing campaign. Either the URL parameter value or UTM can be set, but not both.
     */
    utm?: UTMInput;
    
    /**
     * Value for a query parameters that gets inserted into storefront URLs for matching storefront traffic to this activity. This feature is currently available on a limited basis to some partners only. UTMs should continue to be used for most partners. Either the URL parameter value or UTM can be set, but not both.
     */
    urlParameterValue?: string;
    
    /**
     * The budget for this marketing activity.
     */
    budget?: MarketingActivityBudgetInput;
    
    /**
     * The amount spent on the marketing activity.
     */
    adSpend?: MoneyInput;
    
    /**
     * The ID of an activity that's hosted outside of Shopify.
     */
    remoteId?: string;
    
    /**
     * The status of the marketing activity. If status isn't set it will default to UNDEFINED.
     */
    status?: MarketingActivityExternalStatus;
    
    /**
     * The URL for viewing and/or managing the activity outside of Shopify.
     */
    remoteUrl: URL;
    
    /**
     * The URL for a preview image that's used for the marketing activity.
     */
    remotePreviewImageUrl?: URL;
    
    /**
     * The method of marketing used for this marketing activity. The marketing tactic determines which default fields are included in the marketing activity.
     */
    tactic: MarketingTactic;
    
    /**
     * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
     */
    marketingChannelType: MarketingChannel;
    
    /**
     * The domain from which ad clicks are forwarded to the shop.
     */
    referringDomain?: string;
    
    /**
     * The unique string identifier of the channel to which this activity belongs. For the correct handle for your channel, contact your partner manager.
     */
    channelHandle?: string;
    
    /**
     * The date and time at which the activity is scheduled to start.
     */
    scheduledStart?: DateTime;
    
    /**
     * The date and time at which the activity is scheduled to end.
     */
    scheduledEnd?: DateTime;
    
    /**
     * The date and time at which the activity started. If omitted or set to `null`, the current time will be used.
     */
    start?: DateTime;
    
    /**
     * The date and time at which the activity ended. If omitted or set to `null`, the current time will be used if the status is set to `INACTIVE` or `DELETED_EXTERNALLY`.
     */
    end?: DateTime;
    
    /**
     * The ID for the parent marketing activity, if creating hierarchical activities.
     */
    parentActivityId?: string;
    
    /**
     * The remote ID for the parent marketing activity, if creating hierarchical activities.
     */
    parentRemoteId?: string;
    
    /**
     * The hierarchy level of the activity within a campaign. The hierarchy level can't be updated.
     */
    hierarchyLevel?: MarketingActivityHierarchyLevel;
  }
  
  /**
   * Set of possible statuses for an external marketing activity.
   */
  export const enum MarketingActivityExternalStatus {
    
    /**
     * This marketing activity is currently running.
     */
    ACTIVE = 'ACTIVE',
    
    /**
     * This marketing activity has completed running.
     */
    INACTIVE = 'INACTIVE',
    
    /**
     * This marketing activity is currently not running.
     */
    PAUSED = 'PAUSED',
    
    /**
     * This marketing activity is scheduled to run.
     */
    SCHEDULED = 'SCHEDULED',
    
    /**
     * This marketing activity was deleted and it was triggered from outside of Shopify.
     */
    DELETED_EXTERNALLY = 'DELETED_EXTERNALLY',
    
    /**
     * The marketing activity's status is unknown.
     */
    UNDEFINED = 'UNDEFINED'
  }
  
  /**
   * Return type for `marketingActivityCreateExternal` mutation.
   */
  export interface MarketingActivityCreateExternalPayload {
    
    /**
     * The external marketing activity that was created.
     */
    marketingActivity?: MarketingActivity;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketingActivityUserError>;
  }
  
  /**
   * Return type for `marketingActivityDeleteExternal` mutation.
   */
  export interface MarketingActivityDeleteExternalPayload {
    
    /**
     * The ID of the marketing activity that was deleted, if one was deleted.
     */
    deletedMarketingActivityId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketingActivityUserError>;
  }
  
  /**
   * The input fields required to update a marketing activity.
   */
  export interface MarketingActivityUpdateInput {
    
    /**
     * The ID of the marketing activity.
     */
    id: string;
    
    /**
     * The ID of the recommendation that the marketing activity was created from, if one exists.
     */
    marketingRecommendationId?: string;
    
    /**
     * The title of the marketing activity.
     */
    title?: string;
    
    /**
     * The budget for the marketing activity.
     */
    budget?: MarketingActivityBudgetInput;
    
    /**
     * The current state of the marketing activity. Learn more about
     * [marketing activities statuses](/api/marketing-activities/statuses).
     * 
     */
    status?: MarketingActivityStatus;
    
    /**
     * The target state that the marketing activity is transitioning to. Learn more about [marketing activities statuses](/api/marketing-activities/statuses).
     */
    targetStatus?: MarketingActivityStatus;
    
    /**
     * The form data of the marketing activity. This is only used if the marketing activity is
     *               integrated with the external editor.
     */
    formData?: string;
    
    /**
     * Specifies the
     * [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
     * that are associated with a related marketing campaign. UTMInput is required for all Marketing
     * tactics except Storefront App. The utm field can only be set once and never modified.
     * 
     */
    utm?: UTMInput;
    
    /**
     * A list of the item IDs that were marketed in this marketing activity. Valid types for these items are:
     * * `Product`
     * * `Shop`
     * 
     */
    marketedResources?: Array<string>;
    
    /**
     * The error messages that were generated when the app was trying to complete the activity.
     * Learn more about the
     * [JSON format expected for error messages](/api/marketing-activities/statuses#failed-status).
     * 
     */
    errors?: JSON;
  }
  
  /**
   * Return type for `marketingActivityUpdate` mutation.
   */
  export interface MarketingActivityUpdatePayload {
    
    /**
     * The updated marketing activity.
     */
    marketingActivity?: MarketingActivity;
    
    /**
     * The redirect path from the embedded editor to the Shopify admin.
     */
    redirectPath?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields required to update an externally managed marketing activity.
   */
  export interface MarketingActivityUpdateExternalInput {
    
    /**
     * The title of the marketing activity.
     */
    title?: string;
    
    /**
     * The budget for this marketing activity.
     */
    budget?: MarketingActivityBudgetInput;
    
    /**
     * The amount spent on the marketing activity.
     */
    adSpend?: MoneyInput;
    
    /**
     * The URL for viewing and/or managing the activity outside of Shopify.
     */
    remoteUrl?: URL;
    
    /**
     * The URL for a preview image that's used for the marketing activity.
     */
    remotePreviewImageUrl?: URL;
    
    /**
     * The method of marketing used for this marketing activity. The marketing tactic determines which default fields are included in the marketing activity.
     */
    tactic?: MarketingTactic;
    
    /**
     * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
     */
    marketingChannelType?: MarketingChannel;
    
    /**
     * The domain from which ad clicks are forwarded to the shop.
     */
    referringDomain?: string;
    
    /**
     * The date and time at which the activity is scheduled to start.
     */
    scheduledStart?: DateTime;
    
    /**
     * The date and time at which the activity is scheduled to end.
     */
    scheduledEnd?: DateTime;
    
    /**
     * The date and time at which the activity started.
     */
    start?: DateTime;
    
    /**
     * The date and time at which the activity ended.
     */
    end?: DateTime;
    
    /**
     * The status of the marketing activity.
     */
    status?: MarketingActivityExternalStatus;
  }
  
  /**
   * Return type for `marketingActivityUpdateExternal` mutation.
   */
  export interface MarketingActivityUpdateExternalPayload {
    
    /**
     * The updated marketing activity.
     */
    marketingActivity?: MarketingActivity;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketingActivityUserError>;
  }
  
  /**
   * The input fields for creating or updating an externally-managed marketing activity.
   */
  export interface MarketingActivityUpsertExternalInput {
    
    /**
     * The title of the marketing activity.
     */
    title: string;
    
    /**
     * Specifies the [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters) that are associated with a related marketing campaign. Either the URL parameter value or UTM can be set, but not both.
     */
    utm?: UTMInput;
    
    /**
     * The budget for this marketing activity.
     */
    budget?: MarketingActivityBudgetInput;
    
    /**
     * The amount spent on the marketing activity.
     */
    adSpend?: MoneyInput;
    
    /**
     * The ID of an activity that's hosted outside of Shopify.
     */
    remoteId: string;
    
    /**
     * The status of the marketing activity.
     */
    status: MarketingActivityExternalStatus;
    
    /**
     * The URL for viewing and/or managing the activity outside of Shopify.
     */
    remoteUrl: URL;
    
    /**
     * The URL for a preview image that's used for the marketing activity.
     */
    remotePreviewImageUrl?: URL;
    
    /**
     * The method of marketing used for this marketing activity. The marketing tactic determines which default fields are included in the marketing activity.
     */
    tactic: MarketingTactic;
    
    /**
     * The medium through which the marketing activity and event reached consumers. This is used for reporting aggregation.
     */
    marketingChannelType: MarketingChannel;
    
    /**
     * The domain from which ad clicks are forwarded to the shop.
     */
    referringDomain?: string;
    
    /**
     * The unique string identifier of the channel to which this activity belongs. For the correct handle for your channel, contact your partner manager.
     */
    channelHandle?: string;
    
    /**
     * The date and time at which the activity is scheduled to start.
     */
    scheduledStart?: DateTime;
    
    /**
     * The date and time at which the activity is scheduled to end.
     */
    scheduledEnd?: DateTime;
    
    /**
     * The date and time at which the activity started. On creation, if this field is omitted or set to `null`, the current time will be used.
     */
    start?: DateTime;
    
    /**
     * The date and time at which the activity started. On creation, if this field is omitted or set to `null`, the current time will be used if the status is set to `INACTIVE` or `DELETED_EXTERNALLY` .
     */
    end?: DateTime;
    
    /**
     * Value for a query parameters that gets inserted into storefront URLs for matching storefront traffic to this activity. This feature is currently available on a limited basis to some partners only. UTMs should continue to be used for most partners. Either the URL parameter value or UTM can be set, but not both.
     */
    urlParameterValue?: string;
    
    /**
     * The remote ID for the parent marketing activity, if creating hierarchical activities.
     */
    parentRemoteId?: string;
    
    /**
     * The hierarchy level of the activity within a campaign. The hierarchy level can't be updated.
     */
    hierarchyLevel?: MarketingActivityHierarchyLevel;
  }
  
  /**
   * Return type for `marketingActivityUpsertExternal` mutation.
   */
  export interface MarketingActivityUpsertExternalPayload {
    
    /**
     * The external marketing activity that was created or updated.
     */
    marketingActivity?: MarketingActivity;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketingActivityUserError>;
  }
  
  /**
   * The input fields for a marketing engagement.
   */
  export interface MarketingEngagementInput {
    
    /**
     * The date that the engagements occurred on.
     */
    occurredOn: Date;
    
    /**
     * The total number of times marketing content was displayed to users, whether or not an interaction occurred. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were delivered.
     */
    impressionsCount?: number;
    
    /**
     * The total number of views on the marketing content. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were opened. For video-based content, this represents the number of times videos were played.
     */
    viewsCount?: number;
    
    /**
     * The total number of interactions, such as a button press or a screen touch, that occurred on the marketing content.
     */
    clicksCount?: number;
    
    /**
     * The total number of times marketing content was distributed or reposted to either one's own network of followers through a social media platform or other digital channels. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were forwarded.
     */
    sharesCount?: number;
    
    /**
     * The total number of favorites, likes, saves, or bookmarks on the marketing content.
     */
    favoritesCount?: number;
    
    /**
     * The total number of comments on the marketing content.
     */
    commentsCount?: number;
    
    /**
     * The total number of unsubscribes on the marketing content. For social media platforms, this represents the number of unfollows.
     */
    unsubscribesCount?: number;
    
    /**
     * The total number of complaints on the marketing content. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were marked as spam. For social media platforms, this represents the number of dislikes or the number of times marketing content was reported.
     */
    complaintsCount?: number;
    
    /**
     * The total number of fails for the marketing content. For message-based platforms such as email or SMS, this represents the number of bounced marketing emails or messages.
     */
    failsCount?: number;
    
    /**
     * The total number of marketing emails or messages that were sent.
     */
    sendsCount?: number;
    
    /**
     * The total number of all users who saw marketing content since it was published. For  message-based platforms such as email or SMS, this represents the number of unique users that opened a  marketing email or message. For video-based content, this represents the number of unique users that  played video content.
     */
    uniqueViewsCount?: number;
    
    /**
     * The total number of unique clicks on the marketing content.
     */
    uniqueClicksCount?: number;
    
    /**
     * The total ad spend for the marketing content. Recurring weekly, monthly, or yearly spend needs to be divided into daily amounts.
     */
    adSpend?: MoneyInput;
    
    /**
     * Whether the engagements are reported as lifetime totals rather than daily increments.
     */
    isCumulative: boolean;
    
    /**
     * The time difference, in hours, between UTC and the time zone used to aggregate these metrics.
     */
    utcOffset: UtcOffset;
    
    /**
     * The amount of sales generated from the marketing content.
     */
    sales?: MoneyInput;
    
    /**
     * The number of online store sessions generated from the marketing content.
     */
    sessionsCount?: number;
    
    /**
     * The number of orders generated from the marketing content.
     */
    orders?: Decimal;
    
    /**
     * The number of customers that have placed their first order. Doesn't include adjustments such as edits, exchanges, or returns.
     */
    firstTimeCustomers?: Decimal;
    
    /**
     * The number of returning customers that have placed an order. Doesn't include adjustments such as edits, exchanges, or returns.
     */
    returningCustomers?: Decimal;
  }
  
  /**
   * Time between UTC time and a location's observed time, in the format `"+HH:MM"` or `"-HH:MM"`.
   * 
   * Example value: `"-07:00"`.
   * 
   */
  export type UtcOffset = any;
  
  /**
   * Return type for `marketingEngagementCreate` mutation.
   */
  export interface MarketingEngagementCreatePayload {
    
    /**
     * The marketing engagement that was created. This represents customer activity taken on a marketing activity or a marketing channel.
     */
    marketingEngagement?: MarketingEngagement;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Marketing engagement represents customer activity taken on a marketing activity or a marketing channel.
   */
  export interface MarketingEngagement {
    
    /**
     * The total ad spend for the marketing content. Recurring weekly, monthly, or yearly spend needs to be divided into daily amounts.
     */
    adSpend?: MoneyV2;
    
    /**
     * The unique string identifier of the channel to which the engagement metrics are being provided. This should be set when and only when providing channel-level engagements. This should be nil when providing activity-level engagements. For the correct handle for your channel, contact your partner manager.
     */
    channelHandle?: string;
    
    /**
     * The total number of interactions, such as a button press or a screen touch, that occurred on the marketing content.
     */
    clicksCount?: number;
    
    /**
     * The total number of comments on the marketing content.
     */
    commentsCount?: number;
    
    /**
     * The total number of complaints on the marketing content. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were marked as spam. For social media platforms, this represents the number of dislikes or the number of times marketing content was reported.
     */
    complaintsCount?: number;
    
    /**
     * The total number of fails for the marketing content. For message-based platforms such as email or SMS, this represents the number of bounced marketing emails or messages.
     */
    failsCount?: number;
    
    /**
     * The total number of favorites, likes, saves, or bookmarks on the marketing content.
     */
    favoritesCount?: number;
    
    /**
     * The number of customers that have placed their first order. Doesn't include adjustments such as edits, exchanges, or returns.
     */
    firstTimeCustomers?: Decimal;
    
    /**
     * The total number of times marketing content was displayed to users, whether or not an interaction occurred. For message-based platforms such as email or SMS, this represents the number of marketing emails or messages that were delivered.
     */
    impressionsCount?: number;
    
    /**
     * Whether the engagements are reported as lifetime totals rather than daily increments.
     */
    isCumulative: boolean;
    
    /**
     * The marketing activity object related to this engagement. This corresponds to the marketingActivityId passed in on creation of the engagement.
     */
    marketingActivity?: MarketingActivity;
    
    /**
     * The date that the engagements occurred on.
     */
    occurredOn: Date;
    
    /**
     * The number of orders generated from the marketing content.
     */
    orders?: Decimal;
    
    /**
     * The number of returning customers that have placed an order. Doesn't include adjustments such as edits, exchanges, or returns.
     */
    returningCustomers?: Decimal;
    
    /**
     * The amount of sales generated from the marketing content.
     */
    sales?: MoneyV2;
    
    /**
     * The total number of marketing emails or messages that were sent.
     */
    sendsCount?: number;
    
    /**
     * The number of online store sessions generated from the marketing content.
     */
    sessionsCount?: number;
    
    /**
     * The total number of times marketing content was distributed or reposted to either one's own network of followers through a social media platform or other digital channels. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were forwarded.
     */
    sharesCount?: number;
    
    /**
     * The total number of unique clicks on the marketing content.
     */
    uniqueClicksCount?: number;
    
    /**
     * The total number of all users who saw marketing content since it was published. For  message-based platforms such as email or SMS, this represents the number of unique users that opened a  marketing email or message. For video-based content, this represents the number of unique users that  played video content.
     */
    uniqueViewsCount?: number;
    
    /**
     * The total number of unsubscribes on the marketing content. For social media platforms, this represents the number of unfollows.
     */
    unsubscribesCount?: number;
    
    /**
     * The time difference, in hours, between UTC and the time zone used to aggregate these metrics.
     */
    utcOffset: UtcOffset;
    
    /**
     * The total number of views on the marketing content. For message-based platforms such as email or SMS, this represents the number of times marketing emails or messages were opened. For video-based content, this represents the number of times videos were played.
     */
    viewsCount?: number;
  }
  
  /**
   * Return type for `marketingEngagementsDelete` mutation.
   */
  export interface MarketingEngagementsDeletePayload {
    
    /**
     * Informational message about the engagement data that has been marked for deletion.
     */
    result?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MarketingActivityUserError>;
  }
  
  /**
   * The input fields required to create a metafield definition.
   * 
   */
  export interface MetafieldDefinitionInput {
    
    /**
     * The container for a group of metafields that the metafield definition will be associated with. If omitted, the
     * app-reserved namespace will be used.
     * 
     * Must be 3-255 characters long and only contain alphanumeric, hyphen, and underscore characters.
     * 
     */
    namespace?: string;
    
    /**
     * The unique identifier for the metafield definition within its namespace.
     * 
     * Must be 3-64 characters long and only contain alphanumeric, hyphen, and underscore characters.
     * 
     */
    key: string;
    
    /**
     * The human-readable name for the metafield definition.
     */
    name: string;
    
    /**
     * The description for the metafield definition.
     */
    description?: string;
    
    /**
     * The resource type that the metafield definition is attached to.
     */
    ownerType: MetafieldOwnerType;
    
    /**
     * The type of data that each of the metafields that belong to the metafield definition will store.
     * Refer to the list of [supported types](https://shopify.dev/apps/metafields/types).
     * 
     */
    type: string;
    
    /**
     * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
     * the metafields that belong to the metafield definition. For example, for a metafield definition with the
     * type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
     * store dates after the specified minimum.
     * 
     */
    validations?: Array<MetafieldDefinitionValidationInput>;
    
    /**
     * Whether the metafield definition can be used as a collection condition.
     */
    useAsCollectionCondition?: boolean;
    
    /**
     * Whether to [pin](https://help.shopify.com/manual/custom-data/metafields/pinning-metafield-definitions)
     * the metafield definition.
     * 
     */
    pin?: boolean;
    
    /**
     * The access settings that apply to each of the metafields that belong to the metafield definition.
     */
    access?: MetafieldAccessInput;
  }
  
  /**
   * The name and value for a metafield definition validation.
   * 
   * For example, for a metafield definition of `single_line_text_field` type, you can set a validation with the name `min` and a value of `10`.
   * This validation will ensure that the value of the metafield is at least 10 characters.
   * 
   * Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
   * 
   */
  export interface MetafieldDefinitionValidationInput {
    
    /**
     * The name for the metafield definition validation.
     */
    name: string;
    
    /**
     * The value for the metafield definition validation.
     */
    value: string;
  }
  
  /**
   * The input fields for the access settings for the metafields under the definition.
   * 
   */
  export interface MetafieldAccessInput {
    
    /**
     * The admin access setting to use for the metafields under this definition.
     */
    admin: MetafieldAdminAccess;
    
    /**
     * The storefront access setting to use for the metafields under this definition.
     */
    storefront?: MetafieldStorefrontAccess;
    
    /**
     * The list of explicit grants to grant for the metafields under this definition.
     * 
     */
    grants?: Array<MetafieldAccessGrantInput>;
  }
  
  /**
   * The input fields for an explicit access grant to be created or updated for the metafields under this definition.
   * 
   */
  export interface MetafieldAccessGrantInput {
    
    /**
     * The grantee being granted access.
     */
    grantee: string;
    
    /**
     * The level of access being granted.
     */
    access: MetafieldGrantAccessLevel;
  }
  
  /**
   * Return type for `metafieldDefinitionCreate` mutation.
   */
  export interface MetafieldDefinitionCreatePayload {
    
    /**
     * The metafield definition that was created.
     */
    createdDefinition?: MetafieldDefinition;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetafieldDefinitionCreateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `MetafieldDefinitionCreate`.
   */
  export interface MetafieldDefinitionCreateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: MetafieldDefinitionCreateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `MetafieldDefinitionCreateUserError`.
   */
  export const enum MetafieldDefinitionCreateUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * The definition limit per owner type has exceeded.
     */
    RESOURCE_TYPE_LIMIT_EXCEEDED = 'RESOURCE_TYPE_LIMIT_EXCEEDED',
    
    /**
     * The maximum limit of definitions per owner type has exceeded.
     */
    LIMIT_EXCEEDED = 'LIMIT_EXCEEDED',
    
    /**
     * An invalid option.
     */
    INVALID_OPTION = 'INVALID_OPTION',
    
    /**
     * A duplicate option.
     */
    DUPLICATE_OPTION = 'DUPLICATE_OPTION',
    
    /**
     * This namespace and key combination is reserved for standard definitions.
     */
    RESERVED_NAMESPACE_KEY = 'RESERVED_NAMESPACE_KEY',
    
    /**
     * The pinned limit has been reached for the owner type.
     */
    PINNED_LIMIT_REACHED = 'PINNED_LIMIT_REACHED',
    
    /**
     * This namespace and key combination is already in use for a set of your metafields.
     */
    UNSTRUCTURED_ALREADY_EXISTS = 'UNSTRUCTURED_ALREADY_EXISTS',
    
    /**
     * A field contains an invalid character.
     */
    INVALID_CHARACTER = 'INVALID_CHARACTER',
    
    /**
     * The definition type is not eligible to be used as collection condition.
     */
    TYPE_NOT_ALLOWED_FOR_CONDITIONS = 'TYPE_NOT_ALLOWED_FOR_CONDITIONS',
    
    /**
     * You have reached the maximum allowed definitions for automated collections.
     */
    OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS = 'OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS',
    
    /**
     * The maximum limit of grants per definition type has been exceeded.
     */
    GRANT_LIMIT_EXCEEDED = 'GRANT_LIMIT_EXCEEDED',
    
    /**
     * The input combination is invalid.
     */
    INVALID_INPUT_COMBINATION = 'INVALID_INPUT_COMBINATION'
  }
  
  /**
   * Return type for `metafieldDefinitionDelete` mutation.
   */
  export interface MetafieldDefinitionDeletePayload {
    
    /**
     * The ID of the deleted metafield definition.
     */
    deletedDefinitionId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetafieldDefinitionDeleteUserError>;
  }
  
  /**
   * An error that occurs during the execution of `MetafieldDefinitionDelete`.
   */
  export interface MetafieldDefinitionDeleteUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: MetafieldDefinitionDeleteUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `MetafieldDefinitionDeleteUserError`.
   */
  export const enum MetafieldDefinitionDeleteUserErrorCode {
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * Definition not found.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * An internal error occurred.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * Deleting a reference type metafield definition requires deletion of its associated metafields.
     */
    REFERENCE_TYPE_DELETION_ERROR = 'REFERENCE_TYPE_DELETION_ERROR',
    
    /**
     * Action cannot proceed. Definition is currently in use.
     */
    METAFIELD_DEFINITION_IN_USE = 'METAFIELD_DEFINITION_IN_USE',
    
    /**
     * Owner type can't be used in this mutation.
     */
    DISALLOWED_OWNER_TYPE = 'DISALLOWED_OWNER_TYPE'
  }
  
  /**
   * Return type for `metafieldDefinitionPin` mutation.
   */
  export interface MetafieldDefinitionPinPayload {
    
    /**
     * The metafield definition that was pinned.
     */
    pinnedDefinition?: MetafieldDefinition;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetafieldDefinitionPinUserError>;
  }
  
  /**
   * An error that occurs during the execution of `MetafieldDefinitionPin`.
   */
  export interface MetafieldDefinitionPinUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: MetafieldDefinitionPinUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `MetafieldDefinitionPinUserError`.
   */
  export const enum MetafieldDefinitionPinUserErrorCode {
    
    /**
     * The metafield definition was not found.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * The pinned limit has been reached for owner type.
     */
    PINNED_LIMIT_REACHED = 'PINNED_LIMIT_REACHED',
    
    /**
     * The metafield definition is already pinned.
     */
    ALREADY_PINNED = 'ALREADY_PINNED',
    
    /**
     * An internal error occurred.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * Owner type can't be used in this mutation.
     */
    DISALLOWED_OWNER_TYPE = 'DISALLOWED_OWNER_TYPE'
  }
  
  /**
   * Return type for `metafieldDefinitionUnpin` mutation.
   */
  export interface MetafieldDefinitionUnpinPayload {
    
    /**
     * The metafield definition that was unpinned.
     */
    unpinnedDefinition?: MetafieldDefinition;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetafieldDefinitionUnpinUserError>;
  }
  
  /**
   * An error that occurs during the execution of `MetafieldDefinitionUnpin`.
   */
  export interface MetafieldDefinitionUnpinUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: MetafieldDefinitionUnpinUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `MetafieldDefinitionUnpinUserError`.
   */
  export const enum MetafieldDefinitionUnpinUserErrorCode {
    
    /**
     * The metafield definition was not found.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * The metafield definition isn't pinned.
     */
    NOT_PINNED = 'NOT_PINNED',
    
    /**
     * An internal error occurred.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * Owner type can't be used in this mutation.
     */
    DISALLOWED_OWNER_TYPE = 'DISALLOWED_OWNER_TYPE'
  }
  
  /**
   * The input fields required to update a metafield definition.
   * 
   */
  export interface MetafieldDefinitionUpdateInput {
    
    /**
     * The container for a group of metafields that the metafield definition is associated with. Used to help identify
     * the metafield definition, but cannot be updated itself. If omitted, the app-reserved namespace will be used.
     * 
     */
    namespace?: string;
    
    /**
     * The unique identifier for the metafield definition within its namespace. Used to help identify the metafield
     * definition, but can't be updated itself.
     * 
     */
    key: string;
    
    /**
     * The human-readable name for the metafield definition.
     */
    name?: string;
    
    /**
     * The description for the metafield definition.
     */
    description?: string;
    
    /**
     * The resource type that the metafield definition is attached to. Used to help identify the metafield definition,
     * but can't be updated itself.
     * 
     */
    ownerType: MetafieldOwnerType;
    
    /**
     * A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
     * the metafields that belong to the metafield definition. For example, for a metafield definition with the
     * type `date`, you can set a minimum date validation so that each of the metafields that belong to it can only
     * store dates after the specified minimum.
     * 
     */
    validations?: Array<MetafieldDefinitionValidationInput>;
    
    /**
     * Whether to pin the metafield definition.
     */
    pin?: boolean;
    
    /**
     * Whether the metafield definition can be used as a collection condition.
     */
    useAsCollectionCondition?: boolean;
    
    /**
     * The access settings that apply to each of the metafields that belong to the metafield definition.
     */
    access?: MetafieldAccessUpdateInput;
  }
  
  /**
   * The input fields for the access settings for the metafields under the definition.
   * 
   */
  export interface MetafieldAccessUpdateInput {
    
    /**
     * The admin access setting to use for the metafields under this definition.
     */
    admin: MetafieldAdminAccess;
    
    /**
     * The storefront access setting to use for the metafields under this definition.
     */
    storefront?: MetafieldStorefrontAccess;
    
    /**
     * The set of grant operations to perform.
     */
    grants?: Array<MetafieldAccessGrantOperationInput>;
  }
  
  /**
   * The input fields for possible operations for modifying access grants. Exactly one option is required.
   * 
   */
  export interface MetafieldAccessGrantOperationInput {
    
    /**
     * The input fields for an explicit access grant to be created or updated for the metafields under this definition.
     * 
     */
    create?: MetafieldAccessGrantInput;
    
    /**
     * The input fields for an explicit access grant to be created or updated for the metafields under this definition.
     * 
     */
    update?: MetafieldAccessGrantInput;
    
    /**
     * The input fields for an explicit access grant to be deleted for the metafields under this definition.
     * 
     */
    delete?: MetafieldAccessGrantDeleteInput;
  }
  
  /**
   * The input fields for an explicit access grant to be deleted for the metafields under this definition.
   * 
   */
  export interface MetafieldAccessGrantDeleteInput {
    
    /**
     * The grantee whose grant should be deleted.
     */
    grantee: string;
  }
  
  /**
   * Return type for `metafieldDefinitionUpdate` mutation.
   */
  export interface MetafieldDefinitionUpdatePayload {
    
    /**
     * The metafield definition that was updated.
     */
    updatedDefinition?: MetafieldDefinition;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetafieldDefinitionUpdateUserError>;
    
    /**
     * The asynchronous job updating the metafield definition's validation_status.
     */
    validationJob?: Job;
  }
  
  /**
   * An error that occurs during the execution of `MetafieldDefinitionUpdate`.
   */
  export interface MetafieldDefinitionUpdateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: MetafieldDefinitionUpdateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `MetafieldDefinitionUpdateUserError`.
   */
  export const enum MetafieldDefinitionUpdateUserErrorCode {
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The metafield definition wasn't found.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * An invalid input.
     */
    INVALID_INPUT = 'INVALID_INPUT',
    
    /**
     * The pinned limit has been reached for the owner type.
     */
    PINNED_LIMIT_REACHED = 'PINNED_LIMIT_REACHED',
    
    /**
     * An internal error occurred.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * The definition type is not eligible to be used as collection condition.
     */
    TYPE_NOT_ALLOWED_FOR_CONDITIONS = 'TYPE_NOT_ALLOWED_FOR_CONDITIONS',
    
    /**
     * Action cannot proceed. Definition is currently in use.
     */
    METAFIELD_DEFINITION_IN_USE = 'METAFIELD_DEFINITION_IN_USE',
    
    /**
     * You have reached the maximum allowed definitions for automated collections.
     */
    OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS = 'OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS',
    
    /**
     * You cannot change the metaobject definition pointed to by a metaobject reference metafield definition.
     */
    METAOBJECT_DEFINITION_CHANGED = 'METAOBJECT_DEFINITION_CHANGED',
    
    /**
     * The maximum limit of grants per definition type has been exceeded.
     */
    GRANT_LIMIT_EXCEEDED = 'GRANT_LIMIT_EXCEEDED',
    
    /**
     * The input combination is invalid.
     */
    INVALID_INPUT_COMBINATION = 'INVALID_INPUT_COMBINATION'
  }
  
  /**
   * The input fields to delete a metafield.
   */
  export interface MetafieldDeleteInput {
    
    /**
     * The ID of the metafield to delete.
     */
    id: string;
  }
  
  /**
   * Return type for `metafieldDelete` mutation.
   */
  export interface MetafieldDeletePayload {
    
    /**
     * The ID of the deleted metafield.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields to create a MetafieldStorefrontVisibility record.
   * 
   */
  export interface MetafieldStorefrontVisibilityInput {
    
    /**
     * The namespace of a metafield to make visible in the Storefront API. If omitted the app reserved namespace will be used.
     */
    namespace?: string;
    
    /**
     * The key of a metafield to make visible in the Storefront API.
     */
    key: string;
    
    /**
     * The owner type of a metafield to make visible in the Storefront API.
     */
    ownerType: MetafieldOwnerType;
  }
  
  /**
   * Return type for `metafieldStorefrontVisibilityCreate` mutation.
   */
  export interface MetafieldStorefrontVisibilityCreatePayload {
    
    /**
     * The `MetafieldStorefrontVisibility` that was created.
     */
    metafieldStorefrontVisibility?: MetafieldStorefrontVisibility;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `metafieldStorefrontVisibilityDelete` mutation.
   */
  export interface MetafieldStorefrontVisibilityDeletePayload {
    
    /**
     * The ID of the deleted `MetafieldStorefrontVisibility` record.
     */
    deletedMetafieldStorefrontVisibilityId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for a metafield value to set.
   */
  export interface MetafieldsSetInput {
    
    /**
     * The unique ID of the resource that the metafield is attached to.
     */
    ownerId: string;
    
    /**
     * The container for a group of metafields that the metafield is or will be associated with. Used in tandem
     * with `key` to lookup a metafield on a resource, preventing conflicts with other metafields with the
     * same `key`. If omitted the app-reserved namespace will be used.
     * 
     * Must be 3-255 characters long and can contain alphanumeric, hyphen, and underscore characters.
     * 
     */
    namespace?: string;
    
    /**
     * The unique identifier for a metafield within its namespace.
     * 
     * Must be 3-64 characters long and can contain alphanumeric, hyphen, and underscore characters.
     * 
     */
    key: string;
    
    /**
     * The data stored in the metafield. Always stored as a string, regardless of the metafield's type.
     * 
     */
    value: string;
    
    /**
     * The type of data that is stored in the metafield.
     * The type must be one of the [supported types](https://shopify.dev/apps/metafields/types).
     * 
     * Required when there is no corresponding definition for the given `namespace`, `key`, and
     * owner resource type (derived from `ownerId`).
     * 
     */
    type?: string;
  }
  
  /**
   * Return type for `metafieldsSet` mutation.
   */
  export interface MetafieldsSetPayload {
    
    /**
     * The list of metafields that were set.
     */
    metafields?: Array<Metafield>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetafieldsSetUserError>;
  }
  
  /**
   * An error that occurs during the execution of `MetafieldsSet`.
   */
  export interface MetafieldsSetUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: MetafieldsSetUserErrorCode;
    
    /**
     * The index of the array element that's causing the error.
     */
    elementIndex?: number;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `MetafieldsSetUserError`.
   */
  export const enum MetafieldsSetUserErrorCode {
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * The input value should be less than or equal to the maximum value allowed.
     */
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The value is invalid for metafield type or for definition options.
     */
    INVALID_VALUE = 'INVALID_VALUE',
    
    /**
     * The type is invalid.
     */
    INVALID_TYPE = 'INVALID_TYPE',
    
    /**
     * ApiPermission metafields can only be created or updated by the app owner.
     */
    APP_NOT_AUTHORIZED = 'APP_NOT_AUTHORIZED',
    
    /**
     * The metafield violates a capability restriction.
     */
    CAPABILITY_VIOLATION = 'CAPABILITY_VIOLATION'
  }
  
  /**
   * Specifies the condition by which metaobjects are deleted.
   * Exactly one field of input is required.
   * 
   */
  export interface MetaobjectBulkDeleteWhereCondition {
    
    /**
     * Deletes all metaobjects with the specified `type`.
     */
    type?: string;
    
    /**
     * A list of metaobjects IDs to delete.
     */
    ids?: Array<string>;
  }
  
  /**
   * Return type for `metaobjectBulkDelete` mutation.
   */
  export interface MetaobjectBulkDeletePayload {
    
    /**
     * The asynchronous job that deletes the metaobjects.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetaobjectUserError>;
  }
  
  /**
   * Defines errors encountered while managing metaobject resources.
   */
  export interface MetaobjectUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: MetaobjectUserErrorCode;
    
    /**
     * The index of the failing list element in an array.
     */
    elementIndex?: number;
    
    /**
     * The key of the failing object element.
     */
    elementKey?: string;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `MetaobjectUserError`.
   */
  export const enum MetaobjectUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The metafield type is invalid.
     */
    INVALID_TYPE = 'INVALID_TYPE',
    
    /**
     * The value is invalid for the metafield type or the definition options.
     */
    INVALID_VALUE = 'INVALID_VALUE',
    
    /**
     * The value for the metafield definition option was invalid.
     */
    INVALID_OPTION = 'INVALID_OPTION',
    
    /**
     * Duplicate inputs were provided for this field key.
     */
    DUPLICATE_FIELD_INPUT = 'DUPLICATE_FIELD_INPUT',
    
    /**
     * No metaobject definition found for this type.
     */
    UNDEFINED_OBJECT_TYPE = 'UNDEFINED_OBJECT_TYPE',
    
    /**
     * No field definition found for this key.
     */
    UNDEFINED_OBJECT_FIELD = 'UNDEFINED_OBJECT_FIELD',
    
    /**
     * The specified field key is already in use.
     */
    OBJECT_FIELD_TAKEN = 'OBJECT_FIELD_TAKEN',
    
    /**
     * Missing required fields were found for this object.
     */
    OBJECT_FIELD_REQUIRED = 'OBJECT_FIELD_REQUIRED',
    
    /**
     * The requested record couldn't be found.
     */
    RECORD_NOT_FOUND = 'RECORD_NOT_FOUND',
    
    /**
     * An unexpected error occurred.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * The maximum number of metaobjects definitions has been exceeded.
     */
    MAX_DEFINITIONS_EXCEEDED = 'MAX_DEFINITIONS_EXCEEDED',
    
    /**
     * The maximum number of metaobjects per shop has been exceeded.
     */
    MAX_OBJECTS_EXCEEDED = 'MAX_OBJECTS_EXCEEDED',
    
    /**
     * The targeted object cannot be modified.
     */
    IMMUTABLE = 'IMMUTABLE',
    
    /**
     * Not authorized.
     */
    NOT_AUTHORIZED = 'NOT_AUTHORIZED',
    
    /**
     * The provided name is reserved for system use.
     */
    RESERVED_NAME = 'RESERVED_NAME',
    
    /**
     * The capability you are using is not enabled.
     */
    CAPABILITY_NOT_ENABLED = 'CAPABILITY_NOT_ENABLED',
    
    /**
     * The Online Store URL handle is already taken.
     */
    URL_HANDLE_TAKEN = 'URL_HANDLE_TAKEN',
    
    /**
     * The Online Store URL handle is invalid.
     */
    URL_HANDLE_INVALID = 'URL_HANDLE_INVALID',
    
    /**
     * The Online Store URL handle cannot be blank.
     */
    URL_HANDLE_BLANK = 'URL_HANDLE_BLANK',
    
    /**
     * Renderable data input is referencing an invalid field.
     */
    FIELD_TYPE_INVALID = 'FIELD_TYPE_INVALID',
    
    /**
     * The input is missing required keys.
     */
    MISSING_REQUIRED_KEYS = 'MISSING_REQUIRED_KEYS'
  }
  
  /**
   * The input fields for creating a metaobject.
   */
  export interface MetaobjectCreateInput {
    
    /**
     * The type of the metaobject. Must match an existing metaobject definition type.
     */
    type: string;
    
    /**
     * A unique handle for the metaobject. This value is auto-generated when omitted.
     */
    handle?: string;
    
    /**
     * Values for fields. These are mapped by key to fields of the metaobject definition.
     */
    fields?: Array<MetaobjectFieldInput>;
    
    /**
     * Capabilities for the metaobject.
     */
    capabilities?: MetaobjectCapabilityDataInput;
  }
  
  /**
   * The input fields for a metaobject field value.
   */
  export interface MetaobjectFieldInput {
    
    /**
     * The key of the field.
     */
    key: string;
    
    /**
     * The value of the field.
     */
    value: string;
  }
  
  /**
   * The input fields for metaobject capabilities.
   */
  export interface MetaobjectCapabilityDataInput {
    
    /**
     * Publishable capability input.
     */
    publishable?: MetaobjectCapabilityDataPublishableInput;
    
    /**
     * Online Store capability input.
     */
    onlineStore?: MetaobjectCapabilityDataOnlineStoreInput;
  }
  
  /**
   * The input fields for publishable capability to adjust visibility on channels.
   */
  export interface MetaobjectCapabilityDataPublishableInput {
    
    /**
     * The visibility status of this metaobject across all channels.
     */
    status: MetaobjectStatus;
  }
  
  /**
   * The input fields for the Online Store capability to control renderability on the Online Store.
   */
  export interface MetaobjectCapabilityDataOnlineStoreInput {
    
    /**
     * The theme template used when viewing the metaobject in a store.
     */
    templateSuffix?: string;
  }
  
  /**
   * Return type for `metaobjectCreate` mutation.
   */
  export interface MetaobjectCreatePayload {
    
    /**
     * The created metaobject.
     */
    metaobject?: Metaobject;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetaobjectUserError>;
  }
  
  /**
   * The input fields for creating a metaobject definition.
   */
  export interface MetaobjectDefinitionCreateInput {
    
    /**
     * A human-readable name for the definition. This can be changed at any time.
     */
    name?: string;
    
    /**
     * An administrative description of the definition.
     */
    description?: string;
    
    /**
     * The type of the metaobject definition. This can't be changed.
     * 
     * Must be 3-255 characters long and only contain alphanumeric, hyphen, and underscore characters.
     * 
     */
    type: string;
    
    /**
     * A set of field definitions to create on this metaobject definition.
     */
    fieldDefinitions: Array<MetaobjectFieldDefinitionCreateInput>;
    
    /**
     * Access configuration for the metaobjects created with this definition.
     */
    access?: MetaobjectAccessInput;
    
    /**
     * The key of a field to reference as the display name for metaobjects of this type.
     */
    displayNameKey?: string;
    
    /**
     * The capabilities of the metaobject definition.
     */
    capabilities?: MetaobjectCapabilityCreateInput;
  }
  
  /**
   * The input fields for creating a metaobject field definition.
   */
  export interface MetaobjectFieldDefinitionCreateInput {
    
    /**
     * The key of the new field definition. This can't be changed.
     * 
     * Must be 3-64 characters long and only contain alphanumeric, hyphen, and underscore characters.
     * 
     */
    key: string;
    
    /**
     * The metafield type applied to values of the field.
     */
    type: string;
    
    /**
     * A human-readable name for the field. This can be changed at any time.
     */
    name?: string;
    
    /**
     * An administrative description of the field.
     */
    description?: string;
    
    /**
     * Whether metaobjects require a saved value for the field.
     */
    required?: boolean;
    
    /**
     * Custom validations that apply to values assigned to the field.
     */
    validations?: Array<MetafieldDefinitionValidationInput>;
  }
  
  /**
   * The input fields for configuring metaobject access controls.
   */
  export interface MetaobjectAccessInput {
    
    /**
     * Access configuration for Admin API surface areas, including the GraphQL Admin API.
     * 
     */
    admin?: MetaobjectAdminAccess;
    
    /**
     * Access configuration for Storefront API surface areas, including the GraphQL Storefront API and Liquid.
     * 
     */
    storefront?: MetaobjectStorefrontAccess;
  }
  
  /**
   * The input fields for creating a metaobject capability.
   */
  export interface MetaobjectCapabilityCreateInput {
    
    /**
     * The input for enabling the publishable capability.
     */
    publishable?: MetaobjectCapabilityPublishableInput;
    
    /**
     * The input for enabling the translatable capability.
     */
    translatable?: MetaobjectCapabilityTranslatableInput;
    
    /**
     * The input for enabling the renderable capability.
     */
    renderable?: MetaobjectCapabilityRenderableInput;
    
    /**
     * The input for enabling the Online Store capability.
     */
    onlineStore?: MetaobjectCapabilityOnlineStoreInput;
  }
  
  /**
   * The input fields for enabling and disabling the publishable capability.
   */
  export interface MetaobjectCapabilityPublishableInput {
    
    /**
     * Indicates whether the capability should be enabled or disabled.
     */
    enabled: boolean;
  }
  
  /**
   * The input fields for enabling and disabling the translatable capability.
   */
  export interface MetaobjectCapabilityTranslatableInput {
    
    /**
     * Indicates whether the capability should be enabled or disabled.
     */
    enabled: boolean;
  }
  
  /**
   * The input fields for enabling and disabling the renderable capability.
   */
  export interface MetaobjectCapabilityRenderableInput {
    
    /**
     * Indicates whether the capability should be enabled or disabled.
     */
    enabled: boolean;
    
    /**
     * The data associated with the renderable capability.
     */
    data?: MetaobjectCapabilityDefinitionDataRenderableInput;
  }
  
  /**
   * The input fields of the renderable capability for SEO aliases.
   */
  export interface MetaobjectCapabilityDefinitionDataRenderableInput {
    
    /**
     * The metaobject field used as an alias for the SEO page title.
     */
    metaTitleKey?: string;
    
    /**
     * The metaobject field used as an alias for the SEO page description.
     */
    metaDescriptionKey?: string;
  }
  
  /**
   * The input fields for enabling and disabling the Online Store capability.
   */
  export interface MetaobjectCapabilityOnlineStoreInput {
    
    /**
     * Indicates whether the capability should be enabled or disabled.
     */
    enabled: boolean;
    
    /**
     * The data associated with the Online Store capability.
     */
    data?: MetaobjectCapabilityDefinitionDataOnlineStoreInput;
  }
  
  /**
   * The input fields of the Online Store capability.
   */
  export interface MetaobjectCapabilityDefinitionDataOnlineStoreInput {
    
    /**
     * The URL handle for accessing pages of this metaobject type in the Online Store.
     */
    urlHandle: string;
    
    /**
     * Whether to redirect published metaobjects automatically when the URL handle changes.
     */
    createRedirects?: boolean;
  }
  
  /**
   * Return type for `metaobjectDefinitionCreate` mutation.
   */
  export interface MetaobjectDefinitionCreatePayload {
    
    /**
     * The created metaobject definition.
     */
    metaobjectDefinition?: MetaobjectDefinition;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetaobjectUserError>;
  }
  
  /**
   * Return type for `metaobjectDefinitionDelete` mutation.
   */
  export interface MetaobjectDefinitionDeletePayload {
    
    /**
     * The ID of the deleted metaobjects definition.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetaobjectUserError>;
  }
  
  /**
   * The input fields for updating a metaobject definition.
   */
  export interface MetaobjectDefinitionUpdateInput {
    
    /**
     * A human-readable name for the definition.
     */
    name?: string;
    
    /**
     * An administrative description of the definition.
     */
    description?: string;
    
    /**
     * A set of operations for modifying field definitions.
     */
    fieldDefinitions?: Array<MetaobjectFieldDefinitionOperationInput>;
    
    /**
     * Access configuration for the metaobjects created with this definition.
     */
    access?: MetaobjectAccessInput;
    
    /**
     * The key of a metafield to reference as the display name for objects of this type.
     */
    displayNameKey?: string;
    
    /**
     * Whether the field order should be reset while updating.
     * If `true`, then the order is assigned based on submitted fields followed by alphabetized field omissions.
     * If `false`, then no changes are made to the existing field order and new fields are appended at the end.
     * 
     */
    resetFieldOrder?: boolean;
    
    /**
     * The capabilities of the metaobject definition.
     */
    capabilities?: MetaobjectCapabilityUpdateInput;
  }
  
  /**
   * The input fields for possible operations for modifying field definitions. Exactly one option is required.
   * 
   */
  export interface MetaobjectFieldDefinitionOperationInput {
    
    /**
     * The input fields for creating a metaobject field definition.
     */
    create?: MetaobjectFieldDefinitionCreateInput;
    
    /**
     * The input fields for updating a metaobject field definition.
     */
    update?: MetaobjectFieldDefinitionUpdateInput;
    
    /**
     * The input fields for deleting a metaobject field definition.
     */
    delete?: MetaobjectFieldDefinitionDeleteInput;
  }
  
  /**
   * The input fields for updating a metaobject field definition.
   */
  export interface MetaobjectFieldDefinitionUpdateInput {
    
    /**
     * The key of the field definition to update.
     */
    key: string;
    
    /**
     * A human-readable name for the field.
     */
    name?: string;
    
    /**
     * An administrative description of the field.
     */
    description?: string;
    
    /**
     * Whether metaobjects require a saved value for the field.
     */
    required?: boolean;
    
    /**
     * Custom validations that apply to values assigned to the field.
     */
    validations?: Array<MetafieldDefinitionValidationInput>;
  }
  
  /**
   * The input fields for deleting a metaobject field definition.
   */
  export interface MetaobjectFieldDefinitionDeleteInput {
    
    /**
     * The key of the field definition to delete.
     */
    key: string;
  }
  
  /**
   * The input fields for updating a metaobject capability.
   */
  export interface MetaobjectCapabilityUpdateInput {
    
    /**
     * The input for updating the publishable capability.
     */
    publishable?: MetaobjectCapabilityPublishableInput;
    
    /**
     * The input for updating the translatable capability.
     */
    translatable?: MetaobjectCapabilityTranslatableInput;
    
    /**
     * The input for enabling the renderable capability.
     */
    renderable?: MetaobjectCapabilityRenderableInput;
    
    /**
     * The input for enabling the Online Store capability.
     */
    onlineStore?: MetaobjectCapabilityOnlineStoreInput;
  }
  
  /**
   * Return type for `metaobjectDefinitionUpdate` mutation.
   */
  export interface MetaobjectDefinitionUpdatePayload {
    
    /**
     * The updated metaobject definition.
     */
    metaobjectDefinition?: MetaobjectDefinition;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetaobjectUserError>;
  }
  
  /**
   * Return type for `metaobjectDelete` mutation.
   */
  export interface MetaobjectDeletePayload {
    
    /**
     * The ID of the deleted metaobject.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetaobjectUserError>;
  }
  
  /**
   * The input fields for updating a metaobject.
   */
  export interface MetaobjectUpdateInput {
    
    /**
     * A unique handle for the metaobject.
     */
    handle?: string;
    
    /**
     * Values for fields. These are mapped by key to fields of the metaobject definition.
     */
    fields?: Array<MetaobjectFieldInput>;
    
    /**
     * Capabilities for the metaobject.
     */
    capabilities?: MetaobjectCapabilityDataInput;
    
    /**
     * Whether to create a redirect for the metaobject.
     */
    redirectNewHandle?: boolean;
  }
  
  /**
   * Return type for `metaobjectUpdate` mutation.
   */
  export interface MetaobjectUpdatePayload {
    
    /**
     * The updated metaobject.
     */
    metaobject?: Metaobject;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetaobjectUserError>;
  }
  
  /**
   * The input fields for upserting a metaobject.
   */
  export interface MetaobjectUpsertInput {
    
    /**
     * The handle of the metaobject.
     */
    handle?: string;
    
    /**
     * Values for fields. These are mapped by key to fields of the metaobject definition.
     */
    fields?: Array<MetaobjectFieldInput>;
    
    /**
     * Capabilities for the metaobject.
     */
    capabilities?: MetaobjectCapabilityDataInput;
  }
  
  /**
   * Return type for `metaobjectUpsert` mutation.
   */
  export interface MetaobjectUpsertPayload {
    
    /**
     * The created or updated metaobject.
     */
    metaobject?: Metaobject;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetaobjectUserError>;
  }
  
  /**
   * Return type for `orderCancel` mutation.
   */
  export interface OrderCancelPayload {
    
    /**
     * The job that asynchronously cancels the order.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    orderCancelUserErrors: Array<OrderCancelUserError>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `orderCancelUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Errors related to order cancellation.
   * 
   */
  export interface OrderCancelUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: OrderCancelUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `OrderCancelUserError`.
   */
  export const enum OrderCancelUserErrorCode {
    
    /**
     * An order refund was requested but the user does not have the refund_orders permission.
     */
    NO_REFUND_PERMISSION = 'NO_REFUND_PERMISSION',
    
    /**
     * The record with the ID used as the input value couldn't be found.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID'
  }
  
  /**
   * The input fields for the authorized transaction to capture and the total amount to capture from it.
   */
  export interface OrderCaptureInput {
    
    /**
     * The ID of the order to capture.
     */
    id: string;
    
    /**
     * The ID of the authorized transaction to capture.
     */
    parentTransactionId: string;
    
    /**
     * The amount to capture. The capture amount can't be greater than the amount of the authorized transaction.
     */
    amount: Money;
    
    /**
     * The currency (in ISO format) that's used to capture the order. This must be the presentment currency (the currency used by the customer) and is a required field for orders where the currency and presentment currency differ.
     */
    currency?: CurrencyCode;
  }
  
  /**
   * Return type for `orderCapture` mutation.
   */
  export interface OrderCapturePayload {
    
    /**
     * The created capture transaction.
     */
    transaction?: OrderTransaction;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for specifying an open order to close.
   */
  export interface OrderCloseInput {
    
    /**
     * The ID of the order to close.
     */
    id: string;
  }
  
  /**
   * Return type for `orderClose` mutation.
   */
  export interface OrderClosePayload {
    
    /**
     * The closed order.
     */
    order?: Order;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `orderCreateMandatePayment` mutation.
   */
  export interface OrderCreateMandatePaymentPayload {
    
    /**
     * The async job used for charging the payment.
     */
    job?: Job;
    
    /**
     * The Unique ID for the created payment.
     */
    paymentReferenceId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<OrderCreateMandatePaymentUserError>;
  }
  
  /**
   * An error that occurs during the execution of `OrderCreateMandatePayment`.
   */
  export interface OrderCreateMandatePaymentUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: OrderCreateMandatePaymentUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `OrderCreateMandatePaymentUserError`.
   */
  export const enum OrderCreateMandatePaymentUserErrorCode {
    
    /**
     * Errors for mandate payment on order.
     */
    ORDER_MANDATE_PAYMENT_ERROR_CODE = 'ORDER_MANDATE_PAYMENT_ERROR_CODE'
  }
  
  /**
   * Return type for `orderEditAddCustomItem` mutation.
   */
  export interface OrderEditAddCustomItemPayload {
    
    /**
     * The custom line item that will be added to the order based on the current edits.
     */
    calculatedLineItem?: CalculatedLineItem;
    
    /**
     * An order with the edits applied but not saved.
     */
    calculatedOrder?: CalculatedOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * A line item involved in order editing that may be newly added or have new changes applied.
   * 
   */
  export interface CalculatedLineItem {
    
    /**
     * The discounts that have been allocated onto the line item by discount applications.
     */
    calculatedDiscountAllocations: Array<CalculatedDiscountAllocation>;
    
    /**
     * A list of attributes that represent custom features or special requests.
     */
    customAttributes: Array<Attribute>;
    
    /**
     * The discounts that have been allocated onto the line item by discount applications.
     * @deprecated Use `calculatedDiscountAllocations` instead.
     */
    discountAllocations: Array<DiscountAllocation>;
    
    /**
     * The price of a single quantity of the line item with line item discounts applied, in shop and presentment currencies. Discounts applied to the entire order aren't included in this price.
     */
    discountedUnitPriceSet: MoneyBag;
    
    /**
     * The total number of items that can be edited.
     */
    editableQuantity: number;
    
    /**
     * The editable quantity prior to any changes made in the current edit.
     */
    editableQuantityBeforeChanges: number;
    
    /**
     * The total price of editable lines in shop and presentment currencies.
     */
    editableSubtotalSet: MoneyBag;
    
    /**
     * Whether the calculated line item has a staged discount.
     */
    hasStagedLineItemDiscount: boolean;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The image object associated to the line item's variant.
     */
    image?: Image;
    
    /**
     * The variant unit price in shop and presentment currencies, without any discounts applied.
     */
    originalUnitPriceSet: MoneyBag;
    
    /**
     * The total number of items.
     */
    quantity: number;
    
    /**
     * Whether the line item can be restocked or not.
     */
    restockable: boolean;
    
    /**
     * Whether the changes on the line item will result in a restock.
     */
    restocking: boolean;
    
    /**
     * The variant SKU number.
     */
    sku?: string;
    
    /**
     * A list of changes that affect this line item.
     */
    stagedChanges: Array<OrderStagedChange>;
    
    /**
     * The title of the product.
     */
    title: string;
    
    /**
     * The total price of uneditable lines in shop and presentment currencies.
     */
    uneditableSubtotalSet: MoneyBag;
    
    /**
     * The product variant associated with this line item. The value is null for custom line items and items where
     * the variant has been deleted.
     * 
     */
    variant?: ProductVariant;
    
    /**
     * The title of the variant.
     */
    variantTitle?: string;
  }
  
  /**
   * An amount discounting the line that has been allocated by an associated discount application.
   * 
   */
  export interface CalculatedDiscountAllocation {
    
    /**
     * The money amount that's allocated by the discount application in shop and presentment currencies.
     */
    allocatedAmountSet: MoneyBag;
    
    /**
     * The discount that the allocated amount originated from.
     */
    discountApplication: CalculatedDiscountApplication;
  }
  
  /**
   * A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied.
   * 
   */
  export interface CalculatedDiscountApplication {
    
    /**
     * The method by which the discount's value is allocated to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * The level at which the discount was applied.
     */
    appliedTo: DiscountApplicationLevel;
    
    /**
     * The description of discount application. Indicates the reason why the discount was applied.
     */
    description?: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * How the discount amount is distributed on the discounted lines.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * Whether the discount is applied on line items or shipping lines.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /** Use this to resolve interface type CalculatedDiscountApplication */
  export type PossibleCalculatedDiscountApplicationTypeNames =
  'CalculatedAutomaticDiscountApplication' |
  'CalculatedDiscountCodeApplication' |
  'CalculatedManualDiscountApplication' |
  'CalculatedScriptDiscountApplication';
  
  export interface CalculatedDiscountApplicationNameMap {
    CalculatedDiscountApplication: CalculatedDiscountApplication;
    CalculatedAutomaticDiscountApplication: CalculatedAutomaticDiscountApplication;
    CalculatedDiscountCodeApplication: CalculatedDiscountCodeApplication;
    CalculatedManualDiscountApplication: CalculatedManualDiscountApplication;
    CalculatedScriptDiscountApplication: CalculatedScriptDiscountApplication;
  }
  
  /**
   * The level at which the discount's value is applied.
   */
  export const enum DiscountApplicationLevel {
    
    /**
     * The discount is applied at the order level.
     * Order level discounts are not factored into the discountedUnitPriceSet on line items.
     * 
     */
    ORDER = 'ORDER',
    
    /**
     * The discount is applied at the line level.
     * Line level discounts are factored into the discountedUnitPriceSet on line items.
     * 
     */
    LINE = 'LINE'
  }
  
  /**
   * A change that has been applied to an order.
   * 
   */
  export type OrderStagedChange =
  OrderStagedChangeAddCustomItem |
  OrderStagedChangeAddLineItemDiscount |
  OrderStagedChangeAddShippingLine |
  OrderStagedChangeAddVariant |
  OrderStagedChangeDecrementItem |
  OrderStagedChangeIncrementItem;
  
  /** Use this to resolve union type OrderStagedChange */
  export type PossibleOrderStagedChangeTypeNames =
  'OrderStagedChangeAddCustomItem' |
  'OrderStagedChangeAddLineItemDiscount' |
  'OrderStagedChangeAddShippingLine' |
  'OrderStagedChangeAddVariant' |
  'OrderStagedChangeDecrementItem' |
  'OrderStagedChangeIncrementItem';
  
  export interface OrderStagedChangeNameMap {
    OrderStagedChange: OrderStagedChange;
    OrderStagedChangeAddCustomItem: OrderStagedChangeAddCustomItem;
    OrderStagedChangeAddLineItemDiscount: OrderStagedChangeAddLineItemDiscount;
    OrderStagedChangeAddShippingLine: OrderStagedChangeAddShippingLine;
    OrderStagedChangeAddVariant: OrderStagedChangeAddVariant;
    OrderStagedChangeDecrementItem: OrderStagedChangeDecrementItem;
    OrderStagedChangeIncrementItem: OrderStagedChangeIncrementItem;
  }
  
  /**
   * A change to the order representing the addition of a
   * custom line item. For example, you might want to add gift wrapping service
   * as a custom line item.
   * 
   */
  export interface OrderStagedChangeAddCustomItem {
    
    /**
     * The price of an individual item without any discounts applied. This value can't be negative.
     */
    originalUnitPrice: MoneyV2;
    
    /**
     * The quantity of the custom item to add to the order. This value must be greater than zero.
     */
    quantity: number;
    
    /**
     * The title of the custom item.
     */
    title: string;
  }
  
  /**
   * The discount applied to an item that was added during the current order edit.
   * 
   */
  export interface OrderStagedChangeAddLineItemDiscount {
    
    /**
     * The description of the discount.
     */
    description: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The pricing value of the discount.
     */
    value: PricingValue;
  }
  
  /**
   * A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)
   * added as part of an order edit.
   * 
   */
  export interface OrderStagedChangeAddShippingLine {
    
    /**
     * The phone number at the shipping address.
     */
    phone?: string;
    
    /**
     * The shipping line's title that's shown to the buyer.
     * 
     */
    presentmentTitle?: string;
    
    /**
     * The price that applies to the shipping line.
     */
    price: MoneyV2;
    
    /**
     * The title of the shipping line.
     */
    title?: string;
  }
  
  /**
   * A change to the order representing the addition of an existing product variant.
   * 
   */
  export interface OrderStagedChangeAddVariant {
    
    /**
     * The quantity of the product variant that was added.
     */
    quantity: number;
    
    /**
     * The product variant that was added.
     */
    variant: ProductVariant;
  }
  
  /**
   * An removal of items from an existing line item on the order.
   * 
   */
  export interface OrderStagedChangeDecrementItem {
    
    /**
     * The number of items removed.
     */
    delta: number;
    
    /**
     * The original line item.
     */
    lineItem: LineItem;
    
    /**
     * The intention to restock the removed items.
     */
    restock: boolean;
  }
  
  /**
   * An addition of items to an existing line item on the order.
   * 
   */
  export interface OrderStagedChangeIncrementItem {
    
    /**
     * The number of items added.
     */
    delta: number;
    
    /**
     * The original line item.
     */
    lineItem: LineItem;
  }
  
  /**
   * An order with edits applied but not saved.
   * 
   */
  export interface CalculatedOrder extends Node {
    
    /**
     * Returns only the new discount applications being added to the order in the current edit.
     */
    addedDiscountApplications: CalculatedDiscountApplicationConnection;
    
    /**
     * Returns only the new line items being added to the order during the current edit.
     * 
     */
    addedLineItems: CalculatedLineItemConnection;
    
    /**
     * Amount of the order-level discount (doesn't contain any line item discounts) in shop and presentment currencies.
     */
    cartDiscountAmountSet?: MoneyBag;
    
    /**
     * Whether the changes have been applied and saved to the order.
     */
    committed: boolean;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Returns all items on the order that existed before starting the edit.
     * Will include any changes that have been made.
     * Will not include line items added during the current edit.
     * 
     */
    lineItems: CalculatedLineItemConnection;
    
    /**
     * The HTML of the customer notification for the order edit.
     */
    notificationPreviewHtml?: HTML;
    
    /**
     * The customer notification title.
     */
    notificationPreviewTitle: string;
    
    /**
     * The order without any changes applied.
     * @deprecated Use `originalOrder` instead.
     */
    order: Order;
    
    /**
     * The order without any changes applied.
     * 
     */
    originalOrder: Order;
    
    /**
     * List of changes made to the order during the current edit.
     * 
     */
    stagedChanges: OrderStagedChangeConnection;
    
    /**
     * The sum of the quantities for the line items that contribute to the order's subtotal.
     */
    subtotalLineItemsQuantity: number;
    
    /**
     * The subtotal of the line items, in shop and presentment currencies, after all the discounts are applied.  The subtotal doesn't include shipping.  The subtotal includes taxes for taxes-included orders and excludes taxes for taxes-excluded orders.
     */
    subtotalPriceSet?: MoneyBag;
    
    /**
     * Taxes charged for the line item.
     */
    taxLines: Array<TaxLine>;
    
    /**
     * Total price of the order less the total amount received from the customer in shop and presentment currencies.
     */
    totalOutstandingSet: MoneyBag;
    
    /**
     * Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
     */
    totalPriceSet: MoneyBag;
  }
  
  /**
   * An auto-generated type for paginating through multiple CalculatedDiscountApplications.
   * 
   */
  export interface CalculatedDiscountApplicationConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CalculatedDiscountApplicationEdge>;
    
    /**
     * A list of the nodes contained in CalculatedDiscountApplicationEdge.
     */
    nodes: Array<CalculatedDiscountApplication>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.
   * 
   */
  export interface CalculatedDiscountApplicationEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CalculatedDiscountApplicationEdge.
     */
    node: CalculatedDiscountApplication;
  }
  
  /**
   * An auto-generated type for paginating through multiple CalculatedLineItems.
   * 
   */
  export interface CalculatedLineItemConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<CalculatedLineItemEdge>;
    
    /**
     * A list of the nodes contained in CalculatedLineItemEdge.
     */
    nodes: Array<CalculatedLineItem>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.
   * 
   */
  export interface CalculatedLineItemEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of CalculatedLineItemEdge.
     */
    node: CalculatedLineItem;
  }
  
  /**
   * An auto-generated type for paginating through multiple OrderStagedChanges.
   * 
   */
  export interface OrderStagedChangeConnection {
    
    /**
     * A list of edges.
     */
    edges: Array<OrderStagedChangeEdge>;
    
    /**
     * A list of the nodes contained in OrderStagedChangeEdge.
     */
    nodes: Array<OrderStagedChange>;
    
    /**
     * Information to aid in pagination.
     */
    pageInfo: PageInfo;
  }
  
  /**
   * An auto-generated type which holds one OrderStagedChange and a cursor during pagination.
   * 
   */
  export interface OrderStagedChangeEdge {
    
    /**
     * A cursor for use in pagination.
     */
    cursor: string;
    
    /**
     * The item at the end of OrderStagedChangeEdge.
     */
    node: OrderStagedChange;
  }
  
  /**
   * The input fields used to add a discount during an order edit.
   */
  export interface OrderEditAppliedDiscountInput {
    
    /**
     * The description of the discount.
     */
    description?: string;
    
    /**
     * The value of the discount as a fixed amount.
     */
    fixedValue?: MoneyInput;
    
    /**
     * The value of the discount as a percentage.
     */
    percentValue?: number;
  }
  
  /**
   * Return type for `orderEditAddLineItemDiscount` mutation.
   */
  export interface OrderEditAddLineItemDiscountPayload {
    
    /**
     * The discount applied to a line item during this order edit.
     */
    addedDiscountStagedChange?: OrderStagedChangeAddLineItemDiscount;
    
    /**
     * The line item with the edits applied but not saved.
     */
    calculatedLineItem?: CalculatedLineItem;
    
    /**
     * An order with the edits applied but not saved.
     */
    calculatedOrder?: CalculatedOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `orderEditAddVariant` mutation.
   */
  export interface OrderEditAddVariantPayload {
    
    /**
     * The [calculated line item](https://shopify.dev/api/admin-graphql/latest/objects/calculatedlineitem)
     * that's added during this order edit.
     * 
     */
    calculatedLineItem?: CalculatedLineItem;
    
    /**
     * The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
     * with the edits applied but not saved.
     * 
     */
    calculatedOrder?: CalculatedOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `orderEditBegin` mutation.
   */
  export interface OrderEditBeginPayload {
    
    /**
     * The order that will be edited.
     */
    calculatedOrder?: CalculatedOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `orderEditCommit` mutation.
   */
  export interface OrderEditCommitPayload {
    
    /**
     * The order with changes applied.
     */
    order?: Order;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `orderEditRemoveDiscount` mutation.
   */
  export interface OrderEditRemoveDiscountPayload {
    
    /**
     * An order with the edits applied but not saved.
     */
    calculatedOrder?: CalculatedOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<OrderEditRemoveDiscountUserError>;
  }
  
  /**
   * An error that occurs during the execution of `OrderEditRemoveDiscount`.
   */
  export interface OrderEditRemoveDiscountUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: OrderEditRemoveDiscountUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `OrderEditRemoveDiscountUserError`.
   */
  export const enum OrderEditRemoveDiscountUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID'
  }
  
  /**
   * Return type for `orderEditRemoveLineItemDiscount` mutation.
   */
  export interface OrderEditRemoveLineItemDiscountPayload {
    
    /**
     * The calculated line item after removal of the discount.
     */
    calculatedLineItem?: CalculatedLineItem;
    
    /**
     * An order with the edits applied but not saved.
     */
    calculatedOrder?: CalculatedOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `orderEditSetQuantity` mutation.
   */
  export interface OrderEditSetQuantityPayload {
    
    /**
     * The calculated line item with the edits applied but not saved.
     */
    calculatedLineItem?: CalculatedLineItem;
    
    /**
     * The calculated order with the edits applied but not saved.
     */
    calculatedOrder?: CalculatedOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `orderEditUpdateDiscount` mutation.
   */
  export interface OrderEditUpdateDiscountPayload {
    
    /**
     * An order with the edits applied but not saved.
     */
    calculatedOrder?: CalculatedOrder;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<OrderEditUpdateDiscountUserError>;
  }
  
  /**
   * An error that occurs during the execution of `OrderEditUpdateDiscount`.
   */
  export interface OrderEditUpdateDiscountUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: OrderEditUpdateDiscountUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `OrderEditUpdateDiscountUserError`.
   */
  export const enum OrderEditUpdateDiscountUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID'
  }
  
  /**
   * Return type for `orderInvoiceSend` mutation.
   */
  export interface OrderInvoiceSendPayload {
    
    /**
     * The order associated with the invoice email.
     */
    order?: Order;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<OrderInvoiceSendUserError>;
  }
  
  /**
   * An error that occurs during the execution of `OrderInvoiceSend`.
   */
  export interface OrderInvoiceSendUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: OrderInvoiceSendUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `OrderInvoiceSendUserError`.
   */
  export const enum OrderInvoiceSendUserErrorCode {
    
    /**
     * An error occurred while sending the invoice.
     */
    ORDER_INVOICE_SEND_UNSUCCESSFUL = 'ORDER_INVOICE_SEND_UNSUCCESSFUL'
  }
  
  /**
   * The input fields for specifying the order to mark as paid.
   */
  export interface OrderMarkAsPaidInput {
    
    /**
     * The ID of the order to mark as paid.
     */
    id: string;
  }
  
  /**
   * Return type for `orderMarkAsPaid` mutation.
   */
  export interface OrderMarkAsPaidPayload {
    
    /**
     * The order marked as paid.
     */
    order?: Order;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for specifying a closed order to open.
   */
  export interface OrderOpenInput {
    
    /**
     * The ID of the order to open.
     */
    id: string;
  }
  
  /**
   * Return type for `orderOpen` mutation.
   */
  export interface OrderOpenPayload {
    
    /**
     * The opened order.
     */
    order?: Order;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for specifying the information to be updated on an order when using the orderUpdate mutation.
   */
  export interface OrderInput {
    
    /**
     * The ID of the order to update.
     */
    id: string;
    
    /**
     * A new customer email address for the order. Overwrites the existing email address.
     */
    email?: string;
    
    /**
     * The new contents for the note associated with the order. Overwrites the existing note.
     */
    note?: string;
    
    /**
     * A new list of tags for the order. Overwrites the existing tags.
     */
    tags?: Array<string>;
    
    /**
     * The new shipping address for the order. Overwrites the existing shipping address.
     */
    shippingAddress?: MailingAddressInput;
    
    /**
     * A new list of custom attributes for the order. Overwrites the existing custom attributes.
     */
    customAttributes?: Array<AttributeInput>;
    
    /**
     * A list of new metafields to add to the existing metafields for the order.
     */
    metafields?: Array<MetafieldInput>;
    
    /**
     * A list of new [localization extensions](https://shopify.dev/api/admin-graphql/latest/objects/localizationextension) to add to the existing list of localization extensions for the order.
     */
    localizationExtensions?: Array<LocalizationExtensionInput>;
    
    /**
     * The new purchase order number for the order.
     */
    poNumber?: string;
  }
  
  /**
   * Return type for `orderUpdate` mutation.
   */
  export interface OrderUpdatePayload {
    
    /**
     * The updated order.
     */
    order?: Order;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `paymentCustomizationActivation` mutation.
   */
  export interface PaymentCustomizationActivationPayload {
    
    /**
     * The IDs of the updated payment customizations.
     */
    ids?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PaymentCustomizationError>;
  }
  
  /**
   * An error that occurs during the execution of a payment customization mutation.
   */
  export interface PaymentCustomizationError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: PaymentCustomizationErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `PaymentCustomizationError`.
   */
  export const enum PaymentCustomizationErrorCode {
    
    /**
     * Shop plan not eligible to use Functions from a custom app.
     */
    CUSTOM_APP_FUNCTION_NOT_ELIGIBLE = 'CUSTOM_APP_FUNCTION_NOT_ELIGIBLE',
    
    /**
     * Function does not implement the required interface.
     */
    FUNCTION_DOES_NOT_IMPLEMENT = 'FUNCTION_DOES_NOT_IMPLEMENT',
    
    /**
     * Function not found.
     */
    FUNCTION_NOT_FOUND = 'FUNCTION_NOT_FOUND',
    
    /**
     * Function is pending deletion.
     */
    FUNCTION_PENDING_DELETION = 'FUNCTION_PENDING_DELETION',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * Payment customization not found.
     */
    PAYMENT_CUSTOMIZATION_NOT_FOUND = 'PAYMENT_CUSTOMIZATION_NOT_FOUND',
    
    /**
     * Shop must be on a Shopify Plus plan to activate payment customizations from a custom app.
     */
    PAYMENT_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE = 'PAYMENT_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE',
    
    /**
     * Maximum payment customizations are already enabled.
     */
    MAXIMUM_ACTIVE_PAYMENT_CUSTOMIZATIONS = 'MAXIMUM_ACTIVE_PAYMENT_CUSTOMIZATIONS',
    
    /**
     * Required input field must be present.
     */
    REQUIRED_INPUT_FIELD = 'REQUIRED_INPUT_FIELD',
    
    /**
     * Could not create or update metafields.
     */
    INVALID_METAFIELDS = 'INVALID_METAFIELDS',
    
    /**
     * Function ID cannot be changed.
     */
    FUNCTION_ID_CANNOT_BE_CHANGED = 'FUNCTION_ID_CANNOT_BE_CHANGED'
  }
  
  /**
   * The input fields to create and update a payment customization.
   */
  export interface PaymentCustomizationInput {
    
    /**
     * The ID of the function providing the payment customization.
     */
    functionId?: string;
    
    /**
     * The title of the payment customization.
     */
    title?: string;
    
    /**
     * The enabled status of the payment customization.
     */
    enabled?: boolean;
    
    /**
     * Additional metafields to associate to the payment customization.
     */
    metafields?: Array<MetafieldInput>;
  }
  
  /**
   * Return type for `paymentCustomizationCreate` mutation.
   */
  export interface PaymentCustomizationCreatePayload {
    
    /**
     * Returns the created payment customization.
     */
    paymentCustomization?: PaymentCustomization;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PaymentCustomizationError>;
  }
  
  /**
   * Return type for `paymentCustomizationDelete` mutation.
   */
  export interface PaymentCustomizationDeletePayload {
    
    /**
     * Returns the deleted payment customization ID.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PaymentCustomizationError>;
  }
  
  /**
   * Return type for `paymentCustomizationUpdate` mutation.
   */
  export interface PaymentCustomizationUpdatePayload {
    
    /**
     * Returns the updated payment customization.
     */
    paymentCustomization?: PaymentCustomization;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PaymentCustomizationError>;
  }
  
  /**
   * Return type for `paymentReminderSend` mutation.
   */
  export interface PaymentReminderSendPayload {
    
    /**
     * Whether the payment reminder email was successfully sent.
     */
    success?: boolean;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PaymentReminderSendUserError>;
  }
  
  /**
   * An error that occurs during the execution of `PaymentReminderSend`.
   */
  export interface PaymentReminderSendUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: PaymentReminderSendUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `PaymentReminderSendUserError`.
   */
  export const enum PaymentReminderSendUserErrorCode {
    
    /**
     * An error occurred while sending the payment reminder.
     */
    PAYMENT_REMINDER_SEND_UNSUCCESSFUL = 'PAYMENT_REMINDER_SEND_UNSUCCESSFUL'
  }
  
  /**
   * The input fields used to create a payment terms.
   */
  export interface PaymentTermsCreateInput {
    
    /**
     * Specifies the payment terms template ID used to generate payment terms.
     */
    paymentTermsTemplateId: string;
    
    /**
     * Specifies the payment schedules for the payment terms.
     */
    paymentSchedules?: Array<PaymentScheduleInput>;
  }
  
  /**
   * Return type for `paymentTermsCreate` mutation.
   */
  export interface PaymentTermsCreatePayload {
    
    /**
     * The created payment terms.
     */
    paymentTerms?: PaymentTerms;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PaymentTermsCreateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `PaymentTermsCreate`.
   */
  export interface PaymentTermsCreateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: PaymentTermsCreateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `PaymentTermsCreateUserError`.
   */
  export const enum PaymentTermsCreateUserErrorCode {
    
    /**
     * An error occurred while creating payment terms.
     */
    PAYMENT_TERMS_CREATION_UNSUCCESSFUL = 'PAYMENT_TERMS_CREATION_UNSUCCESSFUL'
  }
  
  /**
   * The input fields used to delete the payment terms.
   */
  export interface PaymentTermsDeleteInput {
    
    /**
     * The ID of the payment terms being deleted.
     */
    paymentTermsId: string;
  }
  
  /**
   * Return type for `paymentTermsDelete` mutation.
   */
  export interface PaymentTermsDeletePayload {
    
    /**
     * The deleted payment terms ID.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PaymentTermsDeleteUserError>;
  }
  
  /**
   * An error that occurs during the execution of `PaymentTermsDelete`.
   */
  export interface PaymentTermsDeleteUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: PaymentTermsDeleteUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `PaymentTermsDeleteUserError`.
   */
  export const enum PaymentTermsDeleteUserErrorCode {
    
    /**
     * An error occurred while deleting payment terms.
     */
    PAYMENT_TERMS_DELETE_UNSUCCESSFUL = 'PAYMENT_TERMS_DELETE_UNSUCCESSFUL'
  }
  
  /**
   * The input fields used to update the payment terms.
   */
  export interface PaymentTermsUpdateInput {
    
    /**
     * The ID of the payment terms being updated.
     */
    paymentTermsId: string;
    
    /**
     * The attributes used to update the payment terms.
     */
    paymentTermsAttributes: PaymentTermsInput;
  }
  
  /**
   * Return type for `paymentTermsUpdate` mutation.
   */
  export interface PaymentTermsUpdatePayload {
    
    /**
     * The updated payment terms.
     */
    paymentTerms?: PaymentTerms;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PaymentTermsUpdateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `PaymentTermsUpdate`.
   */
  export interface PaymentTermsUpdateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: PaymentTermsUpdateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `PaymentTermsUpdateUserError`.
   */
  export const enum PaymentTermsUpdateUserErrorCode {
    
    /**
     * An error occurred while updating payment terms.
     */
    PAYMENT_TERMS_UPDATE_UNSUCCESSFUL = 'PAYMENT_TERMS_UPDATE_UNSUCCESSFUL'
  }
  
  /**
   * The input fields to create a price list.
   */
  export interface PriceListCreateInput {
    
    /**
     * The unique name of the price list, used as a human-readable identifier.
     */
    name: string;
    
    /**
     * Three letter currency code for fixed prices associated with this price list.
     */
    currency: CurrencyCode;
    
    /**
     * Relative adjustments to other prices.
     */
    parent: PriceListParentCreateInput;
    
    /**
     * The ID of the catalog to associate with this price list.If the catalog was already associated with another price list then it will be unlinked.
     */
    catalogId?: string;
  }
  
  /**
   * The input fields to create a price list adjustment.
   */
  export interface PriceListParentCreateInput {
    
    /**
     * The relative adjustments to other prices.
     */
    adjustment: PriceListAdjustmentInput;
    
    /**
     * The price list adjustment settings.
     */
    settings?: PriceListAdjustmentSettingsInput;
  }
  
  /**
   * The input fields to set a price list adjustment.
   */
  export interface PriceListAdjustmentInput {
    
    /**
     * The value of the price adjustment as specified by the `type`.
     */
    value: number;
    
    /**
     * The type of price adjustment, such as percentage increase or decrease.
     */
    type: PriceListAdjustmentType;
  }
  
  /**
   * The input fields to set a price list's adjustment settings.
   */
  export interface PriceListAdjustmentSettingsInput {
    
    /**
     * Determines how adjustments are applied to compare at prices.
     */
    compareAtMode: PriceListCompareAtMode;
  }
  
  /**
   * Return type for `priceListCreate` mutation.
   */
  export interface PriceListCreatePayload {
    
    /**
     * The newly created price list.
     */
    priceList?: PriceList;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PriceListUserError>;
  }
  
  /**
   * Error codes for failed contextual pricing operations.
   */
  export interface PriceListUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: PriceListUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `PriceListUserError`.
   */
  export const enum PriceListUserErrorCode {
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The specified price list doesn't exist.
     */
    PRICE_LIST_NOT_FOUND = 'PRICE_LIST_NOT_FOUND',
    
    /**
     * The price list is currently being modified. Please try again later.
     */
    PRICE_LIST_LOCKED = 'PRICE_LIST_LOCKED',
    
    /**
     * Cannot save the price list with context rule because the limit of context rules per shop was reached.
     * @deprecated The limit is removed.
     */
    CONTEXT_RULE_LIMIT_REACHED = 'CONTEXT_RULE_LIMIT_REACHED',
    
    /**
     * A price list context rule cannot have more than one country.
     */
    CONTEXT_RULE_COUNTRIES_LIMIT = 'CONTEXT_RULE_COUNTRIES_LIMIT',
    
    /**
     * A price list’s currency must be of the pricing rule’s country.
     */
    CURRENCY_COUNTRY_MISMATCH = 'CURRENCY_COUNTRY_MISMATCH',
    
    /**
     * A country in a context rule must use a valid currency.
     */
    COUNTRY_CURRENCY_MISMATCH = 'COUNTRY_CURRENCY_MISMATCH',
    
    /**
     * A price list’s currency must be the market currency.
     */
    CURRENCY_MARKET_MISMATCH = 'CURRENCY_MARKET_MISMATCH',
    
    /**
     * The context rule's market does not use the price list currency.
     */
    MARKET_CURRENCY_MISMATCH = 'MARKET_CURRENCY_MISMATCH',
    
    /**
     * The adjustment value must be a positive value and not be greater than 100% for `type` `PERCENTAGE_DECREASE` and not be greater than 1000% for `type` `PERCENTAGE_INCREASE`.
     */
    INVALID_ADJUSTMENT_VALUE = 'INVALID_ADJUSTMENT_VALUE',
    
    /**
     * The adjustment value must not be greater than 100% for `type` `PERCENTAGE_DECREASE`.
     */
    INVALID_ADJUSTMENT_MIN_VALUE = 'INVALID_ADJUSTMENT_MIN_VALUE',
    
    /**
     * The adjustment value must not be greater than 1000% for `type` `PERCENTAGE_INCREASE`.
     */
    INVALID_ADJUSTMENT_MAX_VALUE = 'INVALID_ADJUSTMENT_MAX_VALUE',
    
    /**
     * A price list for this country is already taken.
     */
    CONTEXT_RULE_COUNTRY_TAKEN = 'CONTEXT_RULE_COUNTRY_TAKEN',
    
    /**
     * Quantity rules can be associated only with company location catalogs.
     */
    CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES = 'CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES',
    
    /**
     * Quantity price breaks can be associated only with company location catalogs.
     */
    CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS = 'CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS',
    
    /**
     * Only one context rule option may be specified.
     */
    CONTEXT_RULE_LIMIT_ONE_OPTION = 'CONTEXT_RULE_LIMIT_ONE_OPTION',
    
    /**
     * The specified market wasn't found.
     */
    CONTEXT_RULE_MARKET_NOT_FOUND = 'CONTEXT_RULE_MARKET_NOT_FOUND',
    
    /**
     * A price list for this market is already taken.
     */
    CONTEXT_RULE_MARKET_TAKEN = 'CONTEXT_RULE_MARKET_TAKEN',
    
    /**
     * The price list currency is not supported by the shop's payment gateway.
     */
    CURRENCY_NOT_SUPPORTED = 'CURRENCY_NOT_SUPPORTED',
    
    /**
     * Cannot create price list for a primary market.
     */
    PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET = 'PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET',
    
    /**
     * Cannot assign a catalog to a price list that also has context rules.
     */
    CATALOG_ASSIGNMENT_NOT_ALLOWED = 'CATALOG_ASSIGNMENT_NOT_ALLOWED',
    
    /**
     * The specified catalog does not exist.
     */
    CATALOG_DOES_NOT_EXIST = 'CATALOG_DOES_NOT_EXIST',
    
    /**
     * The context type of a catalog cannot be changed.
     */
    CATALOG_CANNOT_CHANGE_CONTEXT_TYPE = 'CATALOG_CANNOT_CHANGE_CONTEXT_TYPE',
    
    /**
     * The price list currency must match the market catalog currency.
     */
    CATALOG_MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH = 'CATALOG_MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH',
    
    /**
     * Catalog has a price list already assigned.
     */
    CATALOG_TAKEN = 'CATALOG_TAKEN',
    
    /**
     * A country catalog cannot be assigned to a price list.
     */
    COUNTRY_PRICE_LIST_ASSIGNMENT = 'COUNTRY_PRICE_LIST_ASSIGNMENT',
    
    /**
     * An app catalog cannot be assigned to a price list.
     */
    APP_CATALOG_PRICE_LIST_ASSIGNMENT = 'APP_CATALOG_PRICE_LIST_ASSIGNMENT',
    
    /**
     * Something went wrong when trying to save the price list. Please try again.
     */
    GENERIC_ERROR = 'GENERIC_ERROR'
  }
  
  /**
   * Return type for `priceListDelete` mutation.
   */
  export interface PriceListDeletePayload {
    
    /**
     * The ID of the deleted price list.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PriceListUserError>;
  }
  
  /**
   * The input fields for providing the fields and values to use when creating or updating a fixed price list price.
   * 
   */
  export interface PriceListPriceInput {
    
    /**
     * The product variant ID associated with the price list price.
     */
    variantId: string;
    
    /**
     * The price of the product variant on this price list.
     */
    price: MoneyInput;
    
    /**
     * The compare-at price of the product variant on this price list.
     */
    compareAtPrice?: MoneyInput;
  }
  
  /**
   * Return type for `priceListFixedPricesAdd` mutation.
   */
  export interface PriceListFixedPricesAddPayload {
    
    /**
     * The list of fixed prices that were added to or updated in the price list.
     */
    prices?: Array<PriceListPrice>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PriceListPriceUserError>;
  }
  
  /**
   * An error for a failed price list price operation.
   */
  export interface PriceListPriceUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: PriceListPriceUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `PriceListPriceUserError`.
   */
  export const enum PriceListPriceUserErrorCode {
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The price list doesn't exist.
     */
    PRICE_LIST_NOT_FOUND = 'PRICE_LIST_NOT_FOUND',
    
    /**
     * The specified currency doesn't match the price list's currency.
     */
    PRICE_LIST_CURRENCY_MISMATCH = 'PRICE_LIST_CURRENCY_MISMATCH',
    
    /**
     * A fixed price for the specified product variant doesn't exist.
     */
    VARIANT_NOT_FOUND = 'VARIANT_NOT_FOUND',
    
    /**
     * Only fixed prices can be deleted.
     */
    PRICE_NOT_FIXED = 'PRICE_NOT_FIXED'
  }
  
  /**
   * The input fields representing the price for all variants of a product.
   */
  export interface PriceListProductPriceInput {
    
    /**
     * Specifies the ID of the product to update its variants for.
     */
    productId: string;
    
    /**
     * The price of the product to use for all variants with its currency.
     */
    price: MoneyInput;
  }
  
  /**
   * Return type for `priceListFixedPricesByProductUpdate` mutation.
   */
  export interface PriceListFixedPricesByProductUpdatePayload {
    
    /**
     * The price list for which the fixed prices were modified.
     */
    priceList?: PriceList;
    
    /**
     * The product for which the fixed prices were added.
     */
    pricesToAddProducts?: Array<Product>;
    
    /**
     * The product for which the fixed prices were deleted.
     */
    pricesToDeleteProducts?: Array<Product>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PriceListFixedPricesByProductBulkUpdateUserError>;
  }
  
  /**
   * Error codes for failed price list fixed prices by product bulk update operations.
   */
  export interface PriceListFixedPricesByProductBulkUpdateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: PriceListFixedPricesByProductBulkUpdateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `PriceListFixedPricesByProductBulkUpdateUserError`.
   */
  export const enum PriceListFixedPricesByProductBulkUpdateUserErrorCode {
    
    /**
     * No update operations specified.
     */
    NO_UPDATE_OPERATIONS_SPECIFIED = 'NO_UPDATE_OPERATIONS_SPECIFIED',
    
    /**
     * The currency specified does not match the price list's currency.
     */
    PRICES_TO_ADD_CURRENCY_MISMATCH = 'PRICES_TO_ADD_CURRENCY_MISMATCH',
    
    /**
     * Price list does not exist.
     */
    PRICE_LIST_DOES_NOT_EXIST = 'PRICE_LIST_DOES_NOT_EXIST',
    
    /**
     * Duplicate ID in input.
     */
    DUPLICATE_ID_IN_INPUT = 'DUPLICATE_ID_IN_INPUT',
    
    /**
     * IDs must be mutually exclusive across add or delete operations.
     */
    ID_MUST_BE_MUTUALLY_EXCLUSIVE = 'ID_MUST_BE_MUTUALLY_EXCLUSIVE',
    
    /**
     * Product does not exist.
     */
    PRODUCT_DOES_NOT_EXIST = 'PRODUCT_DOES_NOT_EXIST',
    
    /**
     * Exceeded the 10000 prices to add limit.
     */
    PRICE_LIMIT_EXCEEDED = 'PRICE_LIMIT_EXCEEDED'
  }
  
  /**
   * Return type for `priceListFixedPricesDelete` mutation.
   */
  export interface PriceListFixedPricesDeletePayload {
    
    /**
     * A list of product variant IDs whose fixed prices were removed from the price list.
     */
    deletedFixedPriceVariantIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PriceListPriceUserError>;
  }
  
  /**
   * Return type for `priceListFixedPricesUpdate` mutation.
   */
  export interface PriceListFixedPricesUpdatePayload {
    
    /**
     * A list of deleted variant IDs for prices.
     */
    deletedFixedPriceVariantIds?: Array<string>;
    
    /**
     * The price list for which the fixed prices were modified.
     */
    priceList?: PriceList;
    
    /**
     * The prices that were added to the price list.
     */
    pricesAdded?: Array<PriceListPrice>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PriceListPriceUserError>;
  }
  
  /**
   * The input fields used to update a price list.
   */
  export interface PriceListUpdateInput {
    
    /**
     * The unique name of the price list, used as a human-readable identifier.
     */
    name?: string;
    
    /**
     * The three-letter currency code for fixed prices associated with this price list.
     */
    currency?: CurrencyCode;
    
    /**
     * Relative adjustments to other prices.
     */
    parent?: PriceListParentUpdateInput;
    
    /**
     * The ID of the catalog to associate with this price list.
     */
    catalogId?: string;
  }
  
  /**
   * The input fields used to update a price list's adjustment.
   */
  export interface PriceListParentUpdateInput {
    
    /**
     * The relative adjustments to other prices..
     */
    adjustment: PriceListAdjustmentInput;
    
    /**
     * The price list adjustment settings.
     */
    settings?: PriceListAdjustmentSettingsInput;
  }
  
  /**
   * Return type for `priceListUpdate` mutation.
   */
  export interface PriceListUpdatePayload {
    
    /**
     * The updated price list.
     */
    priceList?: PriceList;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PriceListUserError>;
  }
  
  /**
   * Return type for `priceRuleActivate` mutation.
   */
  export interface PriceRuleActivatePayload {
    
    /**
     * The activated price rule.
     */
    priceRule?: PriceRule;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    priceRuleUserErrors: Array<PriceRuleUserError>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `priceRuleUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Represents an error that happens during execution of a price rule mutation.
   */
  export interface PriceRuleUserError extends DisplayableError {
    
    /**
     * Error code to uniquely identify the error.
     */
    code?: PriceRuleErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that could be returned by a price rule mutation.
   */
  export const enum PriceRuleErrorCode {
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value should be equal to the value allowed.
     */
    EQUAL_TO = 'EQUAL_TO',
    
    /**
     * The input value should be greater than the minimum allowed value.
     */
    GREATER_THAN = 'GREATER_THAN',
    
    /**
     * The input value should be greater than or equal to the minimum value allowed.
     */
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value should be less than the maximum value allowed.
     */
    LESS_THAN = 'LESS_THAN',
    
    /**
     * The input value should be less than or equal to the maximum value allowed.
     */
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * Unexpected internal error happened.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * Too many arguments provided.
     */
    TOO_MANY_ARGUMENTS = 'TOO_MANY_ARGUMENTS',
    
    /**
     * Missing a required argument.
     */
    MISSING_ARGUMENT = 'MISSING_ARGUMENT',
    
    /**
     * Can't exceed the maximum number.
     */
    EXCEEDED_MAX = 'EXCEEDED_MAX',
    
    /**
     * The allocation limit can only be set on Buy x, get y (BXGY) discounts.
     */
    PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO = 'PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO',
    
    /**
     * The allocation limit must be a non-zero positive number.
     */
    PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO = 'PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO',
    
    /**
     * The number of discount codes in the shop has reached its limit.
     */
    PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE = 'PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE',
    
    /**
     * The number of discounts in the shop has reached its limit.
     */
    SHOP_EXCEEDED_MAX_PRICE_RULES = 'SHOP_EXCEEDED_MAX_PRICE_RULES',
    
    /**
     * The discount end date must be after the start date.
     */
    END_DATE_BEFORE_START_DATE = 'END_DATE_BEFORE_START_DATE',
    
    /**
     * The percentage value must be between 0 and -100.
     */
    PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE = 'PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE',
    
    /**
     * Only one of the minimum subtotal or minimum quantity condition can be defined.
     */
    PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT = 'PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT',
    
    /**
     * The allocation method must be `ACROSS` for the provided target selection.
     */
    ALLOCATION_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION = 'ALLOCATION_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION',
    
    /**
     * The discount must apply on either one-time purchase or subscription items, or both.
     */
    APPLIES_ON_NOTHING = 'APPLIES_ON_NOTHING',
    
    /**
     * The recurring cycle limit must be 1 when a discount doesn't apply on subscription items.
     */
    MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS = 'MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS',
    
    /**
     * Invalid BOGO target selection.
     */
    BOGO_INVALID_TARGET_SELECTION = 'BOGO_INVALID_TARGET_SELECTION',
    
    /**
     * Invalid BOGO target type.
     */
    BOGO_INVALID_TARGET_TYPE = 'BOGO_INVALID_TARGET_TYPE',
    
    /**
     * Invalid BOGO value type.
     */
    BOGO_INVALID_VALUE_TYPE = 'BOGO_INVALID_VALUE_TYPE',
    
    /**
     * A duplicate discount code exists.
     */
    DISCOUNT_CODE_DUPLICATE = 'DISCOUNT_CODE_DUPLICATE',
    
    /**
     * Can't use both prerequisite customers and saved search.
     */
    BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED = 'BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED',
    
    /**
     * A duplicate customer saved search exists.
     */
    CUSTOMER_SAVED_SEARCH_DUPLICATE = 'CUSTOMER_SAVED_SEARCH_DUPLICATE',
    
    /**
     * The customer saved search exceeded the maximum number.
     */
    CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX = 'CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX',
    
    /**
     * Invalid customer saved search.
     */
    CUSTOMER_SAVED_SEARCH_INVALID = 'CUSTOMER_SAVED_SEARCH_INVALID',
    
    /**
     * The customer prerequisites exceeded the maximum number.
     */
    CUSTOMER_PREREQUISITES_EXCEEDED_MAX = 'CUSTOMER_PREREQUISITES_EXCEEDED_MAX',
    
    /**
     * Invalid customer prerequisites selection.
     */
    CUSTOMER_PREREQUISITES_INVALID_SELECTION = 'CUSTOMER_PREREQUISITES_INVALID_SELECTION',
    
    /**
     * A duplicate customer prerequisite ID exists.
     */
    CUSTOMER_PREREQUISITE_DUPLICATE = 'CUSTOMER_PREREQUISITE_DUPLICATE',
    
    /**
     * Customer prerequisites are missing.
     */
    CUSTOMER_PREREQUISITES_MISSING = 'CUSTOMER_PREREQUISITES_MISSING',
    
    /**
     * Can't have both prerequisite customers and prerequisite segments.
     */
    BOTH_CUSTOMER_AND_SEGMENT_PREREQUISITES_SELECTED = 'BOTH_CUSTOMER_AND_SEGMENT_PREREQUISITES_SELECTED',
    
    /**
     * Can't have both saved searches and segments prerequisites.
     */
    BOTH_SAVED_SEARCH_AND_SEGMENT_PREREQUISITES_SELECTED = 'BOTH_SAVED_SEARCH_AND_SEGMENT_PREREQUISITES_SELECTED',
    
    /**
     * The customer segment prerequisites exceeded the maximum number.
     */
    CUSTOMER_SEGMENT_EXCEEDED_MAX = 'CUSTOMER_SEGMENT_EXCEEDED_MAX',
    
    /**
     * The customer segment prerequisite ID is invalid.
     */
    CUSTOMER_SEGMENT_INVALID = 'CUSTOMER_SEGMENT_INVALID',
    
    /**
     * A duplicate customer segment prerequisite ID exists.
     */
    CUSTOMER_SEGMENT_PREREQUISITE_DUPLICATE = 'CUSTOMER_SEGMENT_PREREQUISITE_DUPLICATE',
    
    /**
     * Can't use collections as a prequisite in combination with product variants or products.
     */
    CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS = 'CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS',
    
    /**
     * Can't add the same collection twice.
     */
    ITEM_PREREQUISITES_DUPLICATE_COLLECTION = 'ITEM_PREREQUISITES_DUPLICATE_COLLECTION',
    
    /**
     * Can't add the same product twice.
     */
    ITEM_PREREQUISITES_DUPLICATE_PRODUCT = 'ITEM_PREREQUISITES_DUPLICATE_PRODUCT',
    
    /**
     * Can't add the same variant twice.
     */
    ITEM_PREREQUISITES_DUPLICATE_VARIANT = 'ITEM_PREREQUISITES_DUPLICATE_VARIANT',
    
    /**
     * Can't exceed the maximum number of item prerequisites.
     */
    ITEM_PREREQUISITES_EXCEEDED_MAX = 'ITEM_PREREQUISITES_EXCEEDED_MAX',
    
    /**
     * Invalid collection.
     */
    ITEM_PREREQUISITES_INVALID_COLLECTION = 'ITEM_PREREQUISITES_INVALID_COLLECTION',
    
    /**
     * Invalid type.
     */
    ITEM_PREREQUISITES_INVALID_TYPE = 'ITEM_PREREQUISITES_INVALID_TYPE',
    
    /**
     * Invalid product.
     */
    ITEM_PREREQUISITES_INVALID_PRODUCT = 'ITEM_PREREQUISITES_INVALID_PRODUCT',
    
    /**
     * Invalid variant.
     */
    ITEM_PREREQUISITES_INVALID_VARIANT = 'ITEM_PREREQUISITES_INVALID_VARIANT',
    
    /**
     * Item prerequisites must be empty if the prerequisite quantity ratio isn't defined.
     */
    ITEM_PREREQUISITES_MUST_BE_EMPTY = 'ITEM_PREREQUISITES_MUST_BE_EMPTY',
    
    /**
     * Item prerequisites must have at least one item prerequisite if the prerequisite quantity ratio is defined.
     */
    ITEM_PREREQUISITES_MISSING = 'ITEM_PREREQUISITES_MISSING',
    
    /**
     * Can't entitle collections in combination with product variants or products.
     */
    CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS = 'CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS',
    
    /**
     * Can't add the same collection twice.
     */
    ITEM_ENTITLEMENTS_DUPLICATE_COLLECTION = 'ITEM_ENTITLEMENTS_DUPLICATE_COLLECTION',
    
    /**
     * Can't add the same product twice.
     */
    ITEM_ENTITLEMENTS_DUPLICATE_PRODUCT = 'ITEM_ENTITLEMENTS_DUPLICATE_PRODUCT',
    
    /**
     * Can't add the same collection twice.
     */
    ITEM_ENTITLEMENTS_DUPLICATE_VARIANT = 'ITEM_ENTITLEMENTS_DUPLICATE_VARIANT',
    
    /**
     * Can't exceed the maximum number of collection entitlements.
     */
    ITEM_ENTITLEMENTS_EXCEEDED_MAX_COLLECTION = 'ITEM_ENTITLEMENTS_EXCEEDED_MAX_COLLECTION',
    
    /**
     * Can't exceed the maximum number of product entitlements.
     */
    ITEM_ENTITLEMENTS_EXCEEDED_MAX_PRODUCT = 'ITEM_ENTITLEMENTS_EXCEEDED_MAX_PRODUCT',
    
    /**
     * Can't exceed the maximum number of variant entitlements.
     */
    ITEM_ENTITLEMENTS_EXCEEDED_MAX_VARIANT = 'ITEM_ENTITLEMENTS_EXCEEDED_MAX_VARIANT',
    
    /**
     * Invalid entitlement type.
     */
    ITEM_ENTITLEMENT_INVALID_TYPE = 'ITEM_ENTITLEMENT_INVALID_TYPE',
    
    /**
     * Invalid collection.
     */
    ITEM_ENTITLEMENTS_INVALID_COLLECTION = 'ITEM_ENTITLEMENTS_INVALID_COLLECTION',
    
    /**
     * Invalid product.
     */
    ITEM_ENTITLEMENTS_INVALID_PRODUCT = 'ITEM_ENTITLEMENTS_INVALID_PRODUCT',
    
    /**
     * Invalid variant.
     */
    ITEM_ENTITLEMENTS_INVALID_VARIANT = 'ITEM_ENTITLEMENTS_INVALID_VARIANT',
    
    /**
     * Invalid combination of target type and selection.
     */
    ITEM_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION = 'ITEM_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION',
    
    /**
     * Entitlements are missing.
     */
    ITEM_ENTITLEMENTS_MISSING = 'ITEM_ENTITLEMENTS_MISSING',
    
    /**
     * The variant is already entitled through a product.
     */
    VARIANT_ALREADY_ENTITLED_THROUGH_PRODUCT = 'VARIANT_ALREADY_ENTITLED_THROUGH_PRODUCT',
    
    /**
     * A duplicate country code exists.
     */
    SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY = 'SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY',
    
    /**
     * Can't exceed the maximum number of entitlements.
     */
    SHIPPING_ENTITLEMENTS_EXCEEDED_MAX = 'SHIPPING_ENTITLEMENTS_EXCEEDED_MAX',
    
    /**
     * The country is unknown.
     */
    SHIPPING_ENTITLEMENTS_INVALID_COUNTRY = 'SHIPPING_ENTITLEMENTS_INVALID_COUNTRY',
    
    /**
     * Invalid target type or selection.
     */
    SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION = 'SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION',
    
    /**
     * Missing entitlements.
     */
    SHIPPING_ENTITLEMENTS_MISSING = 'SHIPPING_ENTITLEMENTS_MISSING',
    
    /**
     * Unsupported destination type.
     */
    SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE = 'SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE',
    
    /**
     * The target type is invalid when defining a prerequisite shipping price range.
     */
    INVALID_TARGET_TYPE_PREREQUISITE_SHIPPING_PRICE_RANGE = 'INVALID_TARGET_TYPE_PREREQUISITE_SHIPPING_PRICE_RANGE',
    
    /**
     * The `combinesWith` settings are invalid for the discount class.
     */
    INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS = 'INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS',
    
    /**
     * The discountClass is invalid for the price rule.
     */
    INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE = 'INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE'
  }
  
  /**
   * The input fields to manipulate a price rule.
   */
  export interface PriceRuleInput {
    
    /**
     * Determines which discount classes the discount can combine with.
     */
    combinesWith?: DiscountCombinesWithInput;
    
    /**
     * PriceRuleValidityPeriod for the price rule.
     */
    validityPeriod?: PriceRuleValidityPeriodInput;
    
    /**
     * Whether the price rule can be applied only once per customer.
     */
    oncePerCustomer?: boolean;
    
    /**
     * The customers that can use this price rule.
     */
    customerSelection?: PriceRuleCustomerSelectionInput;
    
    /**
     * The maximum number of times that the price rule can be used in total.
     */
    usageLimit?: number;
    
    /**
     * Title of the price rule.
     */
    title?: string;
    
    /**
     * The maximum number of times that the price rule can be allocated onto an order.
     */
    allocationLimit?: number;
    
    /**
     * The method by which the price rule's value is allocated to its entitled items.
     */
    allocationMethod?: PriceRuleAllocationMethod;
    
    /**
     * The value of the price rule.
     */
    value?: PriceRuleValueInput;
    
    /**
     * The type of lines (line_item or shipping_line) to which the price rule applies.
     */
    target?: PriceRuleTarget;
    
    /**
     * The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
     */
    prerequisiteSubtotalRange?: PriceRuleMoneyRangeInput;
    
    /**
     * The number of the entitled items must fall within this range for the price rule to be applicable.
     */
    prerequisiteQuantityRange?: PriceRuleQuantityRangeInput;
    
    /**
     * The shipping cost must fall within this range for the price rule to be applicable.
     */
    prerequisiteShippingPriceRange?: PriceRuleMoneyRangeInput;
    
    /**
     * The items to which the price rule applies.
     */
    itemEntitlements?: PriceRuleItemEntitlementsInput;
    
    /**
     * The items required for the price rule to be applicable.
     */
    itemPrerequisites?: PriceRuleItemPrerequisitesInput;
    
    /**
     * The shipping lines to which the price rule applies.
     */
    shippingEntitlements?: PriceRuleShippingEntitlementsInput;
    
    /**
     * Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
     */
    prerequisiteToEntitlementQuantityRatio?: PriceRulePrerequisiteToEntitlementQuantityRatioInput;
  }
  
  /**
   * The input fields to update the validity period of a price rule.
   */
  export interface PriceRuleValidityPeriodInput {
    
    /**
     * The time after which the price rule is valid.
     */
    start: DateTime;
    
    /**
     * The time after which the price rule becomes invalid.
     */
    end?: DateTime;
  }
  
  /**
   * The input fields to update a price rule customer selection.
   */
  export interface PriceRuleCustomerSelectionInput {
    
    /**
     * Whether the price rule applies to all customers.
     */
    forAllCustomers?: boolean;
    
    /**
     * List of customer segments that contain the customers to whom the price rule applies. No single customer IDs may be present.
     */
    segmentIds?: Array<string>;
    
    /**
     * List of customers to add to the current list of customers to whom the price rule applies. `savedSearchIds` must be empty.
     */
    customerIdsToAdd?: Array<string>;
    
    /**
     * A list of customers to remove from the current list of customers to whom the price rule applies.
     */
    customerIdsToRemove?: Array<string>;
  }
  
  /**
   * The input fields to update a price rule.
   */
  export interface PriceRuleValueInput {
    
    /**
     * The percentage value of the price rule.
     */
    percentageValue?: number;
    
    /**
     * The fixed amount value of the price rule.
     */
    fixedAmountValue?: Money;
  }
  
  /**
   * The input fields to update the money range within which the price rule is applicable.
   * 
   */
  export interface PriceRuleMoneyRangeInput {
    
    /**
     * The upper bound of the money range.
     */
    lessThan?: Money;
    
    /**
     * The upper or equal bound of the money range.
     */
    lessThanOrEqualTo?: Money;
    
    /**
     * The lower bound of the money range.
     */
    greaterThan?: Money;
    
    /**
     * The lower or equal bound of the money range.
     */
    greaterThanOrEqualTo?: Money;
  }
  
  /**
   * The input fields to update the quantity range within which the price rule is applicable.
   * 
   */
  export interface PriceRuleQuantityRangeInput {
    
    /**
     * The upper bound of the quantity range.
     */
    lessThan?: number;
    
    /**
     * The upper or equal bound of the quantity range.
     */
    lessThanOrEqualTo?: number;
    
    /**
     * The lower bound of the quantity range.
     */
    greaterThan?: number;
    
    /**
     * The lower or equal bound of the quantity range.
     */
    greaterThanOrEqualTo?: number;
  }
  
  /**
   * The input fields to update a price rule line item entitlement.
   */
  export interface PriceRuleItemEntitlementsInput {
    
    /**
     * Whether the price rule applies to all items.
     */
    targetAllLineItems?: boolean;
    
    /**
     * The products to which the price rule applies.
     */
    productIds?: Array<string>;
    
    /**
     * The product variants to which the price rule applies.
     */
    productVariantIds?: Array<string>;
    
    /**
     * The collections to which the price rule applies.
     */
    collectionIds?: Array<string>;
  }
  
  /**
   * The input fields to update a price rule's item prerequisites.
   */
  export interface PriceRuleItemPrerequisitesInput {
    
    /**
     * The products needed for the price rule to be applied.
     */
    productIds?: Array<string>;
    
    /**
     * The product variants needed for the price rule to be applied.
     */
    productVariantIds?: Array<string>;
    
    /**
     * The collections needed for the price rule to be applied.
     */
    collectionIds?: Array<string>;
  }
  
  /**
   * The input fields to update a price rule shipping entitlement.
   */
  export interface PriceRuleShippingEntitlementsInput {
    
    /**
     * Whether the price rule applies to all shipping lines.
     */
    targetAllShippingLines?: boolean;
    
    /**
     * The codes for the countries to which the price rule applies to.
     */
    countryCodes?: Array<CountryCode>;
    
    /**
     * Whether the price rule is applicable to countries that haven't been defined in the shop's shipping zones.
     */
    includeRestOfWorld?: boolean;
  }
  
  /**
   * Specifies the quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
   */
  export interface PriceRulePrerequisiteToEntitlementQuantityRatioInput {
    
    /**
     * The quantity of entitled items in the ratio.
     */
    entitlementQuantity?: number;
    
    /**
     * The quantity of prerequisite items in the ratio.
     */
    prerequisiteQuantity?: number;
  }
  
  /**
   * The input fields to manipulate a discount code.
   */
  export interface PriceRuleDiscountCodeInput {
    
    /**
     * The code to use the discount.
     */
    code?: string;
  }
  
  /**
   * Return type for `priceRuleCreate` mutation.
   */
  export interface PriceRuleCreatePayload {
    
    /**
     * The newly created price rule.
     */
    priceRule?: PriceRule;
    
    /**
     * The newly created discount code.
     */
    priceRuleDiscountCode?: PriceRuleDiscountCode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    priceRuleUserErrors: Array<PriceRuleUserError>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `priceRuleUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `priceRuleDeactivate` mutation.
   */
  export interface PriceRuleDeactivatePayload {
    
    /**
     * The deactivated price rule.
     */
    priceRule?: PriceRule;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    priceRuleUserErrors: Array<PriceRuleUserError>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `priceRuleUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `priceRuleDelete` mutation.
   */
  export interface PriceRuleDeletePayload {
    
    /**
     * The ID price of the deleted price rule.
     */
    deletedPriceRuleId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    priceRuleUserErrors: Array<PriceRuleUserError>;
    
    /**
     * The shop of the deleted price rule.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `priceRuleUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `priceRuleDiscountCodeCreate` mutation.
   */
  export interface PriceRuleDiscountCodeCreatePayload {
    
    /**
     * The updated price rule.
     */
    priceRule?: PriceRule;
    
    /**
     * The newly created discount code.
     */
    priceRuleDiscountCode?: PriceRuleDiscountCode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    priceRuleUserErrors: Array<PriceRuleUserError>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `priceRuleUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `priceRuleDiscountCodeUpdate` mutation.
   */
  export interface PriceRuleDiscountCodeUpdatePayload {
    
    /**
     * The updated price rule.
     */
    priceRule?: PriceRule;
    
    /**
     * The updated discount code.
     */
    priceRuleDiscountCode?: PriceRuleDiscountCode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    priceRuleUserErrors: Array<PriceRuleUserError>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `priceRuleUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `priceRuleUpdate` mutation.
   */
  export interface PriceRuleUpdatePayload {
    
    /**
     * The updated price rule.
     */
    priceRule?: PriceRule;
    
    /**
     * The updated discount code.
     */
    priceRuleDiscountCode?: PriceRuleDiscountCode;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    priceRuleUserErrors: Array<PriceRuleUserError>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `priceRuleUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for the private metafield to delete.
   * 
   */
  export interface PrivateMetafieldDeleteInput {
    
    /**
     * The ID of the resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
     */
    owner?: string;
    
    /**
     * The namespace of the private metafield.
     */
    namespace: string;
    
    /**
     * The key of the private metafield.
     */
    key: string;
  }
  
  /**
   * Return type for `privateMetafieldDelete` mutation.
   */
  export interface PrivateMetafieldDeletePayload {
    
    /**
     * The ID of private metafield that was deleted.
     */
    deletedPrivateMetafieldId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for a private metafield.
   * 
   */
  export interface PrivateMetafieldInput {
    
    /**
     * The resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
     */
    owner?: string;
    
    /**
     * The namespace of the private metafield.
     */
    namespace: string;
    
    /**
     * The key of the private metafield.
     */
    key: string;
    
    /**
     * The `value` and `valueType` of the private metafield, wrapped in a `ValueInput` object.
     */
    valueInput: PrivateMetafieldValueInput;
  }
  
  /**
   * The input fields for the value and value type of the private metafield.
   * 
   */
  export interface PrivateMetafieldValueInput {
    
    /**
     * The value of a private metafield.
     */
    value: string;
    
    /**
     * Represents the private metafield value type.
     */
    valueType: PrivateMetafieldValueType;
  }
  
  /**
   * Return type for `privateMetafieldUpsert` mutation.
   */
  export interface PrivateMetafieldUpsertPayload {
    
    /**
     * The private metafield that was created or updated.
     */
    privateMetafield?: PrivateMetafield;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for specifying product images to append.
   */
  export interface ProductAppendImagesInput {
    
    /**
     * The ID of the product.
     */
    id: string;
    
    /**
     * A list of images to be appended to the product.
     */
    images: Array<ImageInput>;
  }
  
  /**
   * Return type for `productAppendImages` mutation.
   */
  export interface ProductAppendImagesPayload {
    
    /**
     * List of new images appended to the product.
     */
    newImages?: Array<Image>;
    
    /**
     * The product object.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `productChangeStatus` mutation.
   */
  export interface ProductChangeStatusPayload {
    
    /**
     * The product object.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductChangeStatusUserError>;
  }
  
  /**
   * An error that occurs during the execution of `ProductChangeStatus`.
   */
  export interface ProductChangeStatusUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ProductChangeStatusUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ProductChangeStatusUserError`.
   */
  export const enum ProductChangeStatusUserErrorCode {
    
    /**
     * Product could not be found.
     */
    PRODUCT_NOT_FOUND = 'PRODUCT_NOT_FOUND'
  }
  
  /**
   * The input fields required to create a product.
   */
  export interface ProductInput {
    
    /**
     * The description of the product, complete with HTML formatting.
     */
    descriptionHtml?: string;
    
    /**
     * A unique, human-friendly string for the product.
     * Automatically generated from the product's title unless otherwise specified.
     * 
     */
    handle?: string;
    
    /**
     * Whether a redirect is required after a new handle has been provided.
     * If true, then the old handle is redirected to the new one automatically.
     * 
     */
    redirectNewHandle?: boolean;
    
    /**
     * The SEO information associated with the product.
     */
    seo?: SEOInput;
    
    /**
     * The product type specified by the merchant.
     */
    productType?: string;
    
    /**
     * The standardized product type in the Shopify product taxonomy.
     */
    standardizedProductType?: StandardizedProductTypeInput;
    
    /**
     * The product category in the Shopify product taxonomy.
     */
    productCategory?: ProductCategoryInput;
    
    /**
     * The custom product type specified by the merchant.
     */
    customProductType?: string;
    
    /**
     * A comma separated list of tags that have been added to the product.
     */
    tags?: Array<string>;
    
    /**
     * The theme template used when viewing the product in a store.
     */
    templateSuffix?: string;
    
    /**
     * Whether the product is a gift card.
     */
    giftCard?: boolean;
    
    /**
     * The theme template used when viewing the gift card in a store.
     */
    giftCardTemplateSuffix?: string;
    
    /**
     * The title of the product.
     */
    title?: string;
    
    /**
     * The name of the product's vendor.
     */
    vendor?: string;
    
    /**
     * The IDs of the collections that this product will be added to.
     */
    collectionsToJoin?: Array<string>;
    
    /**
     * The IDs of collections that will no longer include the existing product.
     */
    collectionsToLeave?: Array<string>;
    
    /**
     * Specifies the product to update in productUpdate or creates a new product if absent in productCreate.
     */
    id?: string;
    
    /**
     * The metafields to associate with this product.
     */
    metafields?: Array<MetafieldInput>;
    
    /**
     * List of custom product options (maximum of 3 per product).
     */
    options?: Array<string>;
    
    /**
     * A list of variants associated with the product.
     * 
     */
    variants?: Array<ProductVariantInput>;
    
    /**
     * The status of the product.
     */
    status?: ProductStatus;
    
    /**
     * Whether the product can only be purchased with a selling plan (subscription). Products that are sold exclusively on subscription can only be created on online stores. If set to `true` on an already existing product, then the product will be marked unavailable on channels that don't support subscriptions.
     */
    requiresSellingPlan?: boolean;
    
    /**
     * Claim ownership of a product.
     */
    claimOwnership?: ProductClaimOwnershipInput;
  }
  
  /**
   * Provides the fields and values to use when adding a standard product type to a product. The [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) contains the full list of available values.
   */
  export interface StandardizedProductTypeInput {
    
    /**
     * The ID of the node in the Shopify taxonomy that represents the product type.
     */
    productTaxonomyNodeId: string;
  }
  
  /**
   * The input fields to use when adding a product category to a product. The [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) contains the full list of available values.
   */
  export interface ProductCategoryInput {
    
    /**
     * The ID of the node in the Shopify taxonomy that represents the product category.
     */
    productTaxonomyNodeId: string;
  }
  
  /**
   * The input fields for specifying a product variant to create or update.
   */
  export interface ProductVariantInput {
    
    /**
     * Whether a product variant requires components. The default value is `false`.
     * If `true`, then the product variant can only be purchased as a parent bundle with components and it will be omitted
     * from channels that don't support bundles.
     * 
     */
    requiresComponents?: boolean;
    
    /**
     * The value of the barcode associated with the product.
     */
    barcode?: string;
    
    /**
     * The compare-at price of the variant.
     */
    compareAtPrice?: Money;
    
    /**
     * Specifies the product variant to update or create a new variant if absent.
     */
    id?: string;
    
    /**
     * The ID of the media to associate with the variant. This field can only be used in mutations that create media images and must match one of the IDs being created on the product. This field only accepts one value.
     */
    mediaId?: string;
    
    /**
     * The URL of the media to associate with the variant. This field can only be used in mutations that create media images and must match one of the URLs being created on the product. This field only accepts one value.
     */
    mediaSrc?: Array<string>;
    
    /**
     * Whether customers are allowed to place an order for the product variant when it's out of stock.
     */
    inventoryPolicy?: ProductVariantInventoryPolicy;
    
    /**
     * The inventory quantities at each location where the variant is stocked. Supported as input with the `productVariantCreate` mutation only.
     */
    inventoryQuantities?: Array<InventoryLevelInput>;
    
    /**
     * The inventory item associated with the variant. Used for unit cost.
     */
    inventoryItem?: InventoryItemInput;
    
    /**
     * Additional customizable information about the product variant.
     */
    metafields?: Array<MetafieldInput>;
    
    /**
     * The custom properties that a shop owner uses to define product variants.
     */
    options?: Array<string>;
    
    /**
     * The order of the product variant in the list of product variants. The first position in the list is 1.
     * 
     */
    position?: number;
    
    /**
     * The price of the variant.
     */
    price?: Money;
    
    /**
     * The product to create the variant for. Used as input only to the `productVariantCreate` mutation.
     */
    productId?: string;
    
    /**
     * The SKU for the variant. Case-sensitive string.
     */
    sku?: string;
    
    /**
     * Whether the variant is taxable.
     */
    taxable?: boolean;
    
    /**
     * The tax code associated with the variant.
     */
    taxCode?: string;
  }
  
  /**
   * The input fields for an inventory level.
   */
  export interface InventoryLevelInput {
    
    /**
     * The available quantity of an inventory item at a location.
     */
    availableQuantity: number;
    
    /**
     * The ID of a location.
     */
    locationId: string;
  }
  
  /**
   * The input fields for an inventory item.
   */
  export interface InventoryItemInput {
    
    /**
     * Unit cost associated with the inventory item, the currency is the shop's default currency.
     */
    cost?: Decimal;
    
    /**
     * Whether the inventory item is tracked.
     */
    tracked?: boolean;
  }
  
  /**
   * The input fields to claim ownership for Product features such as Bundles.
   */
  export interface ProductClaimOwnershipInput {
    
    /**
     * Claiming ownership of bundles lets the app render a custom UI for the bundles' card on the
     * products details page in the Shopify admin.
     * 
     * Bundle ownership can only be claimed when creating the product. If you create `ProductVariantComponents`
     * in any of its product variants, then the bundle ownership is automatically assigned to the app making the call.
     * 
     * [Learn more](https://shopify.dev/docs/apps/selling-strategies/bundles/product-config).
     * 
     */
    bundles?: boolean;
  }
  
  /**
   * The input fields required to create a media object.
   */
  export interface CreateMediaInput {
    
    /**
     * The original source of the media object. This might be an external URL or a staged upload URL.
     */
    originalSource: string;
    
    /**
     * The alt text associated with the media.
     */
    alt?: string;
    
    /**
     * The media content type.
     */
    mediaContentType: MediaContentType;
  }
  
  /**
   * Return type for `productCreate` mutation.
   */
  export interface ProductCreatePayload {
    
    /**
     * The product object.
     */
    product?: Product;
    
    /**
     * The shop associated with the product.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `productCreateMedia` mutation.
   */
  export interface ProductCreateMediaPayload {
    
    /**
     * The newly created media.
     */
    media?: Array<Media>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    mediaUserErrors: Array<MediaUserError>;
    
    /**
     * The product associated with the media.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `mediaUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Represents an error that happens during execution of a Media query or mutation.
   */
  export interface MediaUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: MediaUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `MediaUserError`.
   */
  export const enum MediaUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * Video validation failed.
     */
    VIDEO_VALIDATION_ERROR = 'VIDEO_VALIDATION_ERROR',
    
    /**
     * Model validation failed.
     */
    MODEL3D_VALIDATION_ERROR = 'MODEL3D_VALIDATION_ERROR',
    
    /**
     * Video creation throttle was exceeded.
     */
    VIDEO_THROTTLE_EXCEEDED = 'VIDEO_THROTTLE_EXCEEDED',
    
    /**
     * Model3d creation throttle was exceeded.
     */
    MODEL3D_THROTTLE_EXCEEDED = 'MODEL3D_THROTTLE_EXCEEDED',
    
    /**
     * Exceeded the limit of media per product.
     */
    PRODUCT_MEDIA_LIMIT_EXCEEDED = 'PRODUCT_MEDIA_LIMIT_EXCEEDED',
    
    /**
     * Exceeded the limit of media per shop.
     */
    SHOP_MEDIA_LIMIT_EXCEEDED = 'SHOP_MEDIA_LIMIT_EXCEEDED',
    
    /**
     * Product does not exist.
     */
    PRODUCT_DOES_NOT_EXIST = 'PRODUCT_DOES_NOT_EXIST',
    
    /**
     * Media does not exist.
     */
    MEDIA_DOES_NOT_EXIST = 'MEDIA_DOES_NOT_EXIST',
    
    /**
     * Media does not exist on the given product.
     */
    MEDIA_DOES_NOT_EXIST_ON_PRODUCT = 'MEDIA_DOES_NOT_EXIST_ON_PRODUCT',
    
    /**
     * Only one mediaId is allowed per variant-media input pair.
     */
    TOO_MANY_MEDIA_PER_INPUT_PAIR = 'TOO_MANY_MEDIA_PER_INPUT_PAIR',
    
    /**
     * Exceeded the maximum number of 100 variant-media pairs per mutation call.
     */
    MAXIMUM_VARIANT_MEDIA_PAIRS_EXCEEDED = 'MAXIMUM_VARIANT_MEDIA_PAIRS_EXCEEDED',
    
    /**
     * Invalid media type.
     */
    INVALID_MEDIA_TYPE = 'INVALID_MEDIA_TYPE',
    
    /**
     * Variant specified in more than one pair.
     */
    PRODUCT_VARIANT_SPECIFIED_MULTIPLE_TIMES = 'PRODUCT_VARIANT_SPECIFIED_MULTIPLE_TIMES',
    
    /**
     * Variant does not exist on the given product.
     */
    PRODUCT_VARIANT_DOES_NOT_EXIST_ON_PRODUCT = 'PRODUCT_VARIANT_DOES_NOT_EXIST_ON_PRODUCT',
    
    /**
     * Non-ready media are not supported.
     */
    NON_READY_MEDIA = 'NON_READY_MEDIA',
    
    /**
     * Product variant already has attached media.
     */
    PRODUCT_VARIANT_ALREADY_HAS_MEDIA = 'PRODUCT_VARIANT_ALREADY_HAS_MEDIA',
    
    /**
     * The specified media is not attached to the specified variant.
     */
    MEDIA_IS_NOT_ATTACHED_TO_VARIANT = 'MEDIA_IS_NOT_ATTACHED_TO_VARIANT',
    
    /**
     * Media cannot be modified. It is currently being modified by another operation.
     */
    MEDIA_CANNOT_BE_MODIFIED = 'MEDIA_CANNOT_BE_MODIFIED'
  }
  
  /**
   * The input fields for specifying the product to delete.
   */
  export interface ProductDeleteInput {
    
    /**
     * The ID of the product.
     */
    id: string;
  }
  
  /**
   * Return type for `productDelete` mutation.
   */
  export interface ProductDeletePayload {
    
    /**
     * The ID of the deleted product.
     */
    deletedProductId?: string;
    
    /**
     * The shop associated with the product.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `productDeleteAsync` mutation.
   */
  export interface ProductDeleteAsyncPayload {
    
    /**
     * The ID of the product that was requested to be deleted.
     */
    deleteProductId?: string;
    
    /**
     * The background job that will delete the product and its associated variants and media.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductDeleteUserError>;
  }
  
  /**
   * An error that occurred while setting the activation status of an inventory item.
   */
  export interface ProductDeleteUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ProductDeleteUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ProductDeleteUserError`.
   */
  export const enum ProductDeleteUserErrorCode {
    
    /**
     * Product does not exist.
     */
    PRODUCT_DOES_NOT_EXIST = 'PRODUCT_DOES_NOT_EXIST',
    
    /**
     * Something went wrong, please try again.
     */
    GENERIC_ERROR = 'GENERIC_ERROR'
  }
  
  /**
   * Return type for `productDeleteImages` mutation.
   */
  export interface ProductDeleteImagesPayload {
    
    /**
     * The array of image IDs to delete.
     */
    deletedImageIds: Array<string>;
    
    /**
     * The product object.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `productDeleteMedia` mutation.
   */
  export interface ProductDeleteMediaPayload {
    
    /**
     * List of media IDs which were deleted.
     */
    deletedMediaIds?: Array<string>;
    
    /**
     * List of product image IDs which were deleted.
     */
    deletedProductImageIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    mediaUserErrors: Array<MediaUserError>;
    
    /**
     * The product associated with the deleted media.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `mediaUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `productDuplicate` mutation.
   */
  export interface ProductDuplicatePayload {
    
    /**
     * The asynchronous job that duplicates the product images.
     */
    imageJob?: Job;
    
    /**
     * The duplicated product.
     */
    newProduct?: Product;
    
    /**
     * The user's shop.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for the product async duplicate mutation.
   */
  export interface ProductDuplicateAsyncInput {
    
    /**
     * The ID of the product to be duplicated.
     */
    productId: string;
    
    /**
     * The new title of the product.
     */
    newTitle: string;
    
    /**
     * The new status of the product. If no value is provided the status will be inherited from the original product.
     */
    newStatus?: ProductStatus;
    
    /**
     * Specifies whether or not to duplicate images.
     */
    includeImages?: boolean;
  }
  
  /**
   * Return type for `productDuplicateAsync` mutation.
   */
  export interface ProductDuplicateAsyncPayload {
    
    /**
     * The duplicated product ID.
     */
    duplicatedProductId?: string;
    
    /**
     * The asynchronous job for duplicating the products.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductDuplicateUserError>;
  }
  
  /**
   * An error that occurred while duplicating the product.
   */
  export interface ProductDuplicateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ProductDuplicateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ProductDuplicateUserError`.
   */
  export const enum ProductDuplicateUserErrorCode {
    
    /**
     * The product does not exist.
     */
    PRODUCT_DOES_NOT_EXIST = 'PRODUCT_DOES_NOT_EXIST',
    
    /**
     * Cannot duplicate a product which has no variants.
     */
    EMPTY_VARIANT = 'EMPTY_VARIANT',
    
    /**
     * The title cannot be empty.
     */
    EMPTY_TITLE = 'EMPTY_TITLE',
    
    /**
     * Cannot duplicate a bundle product.
     */
    BUNDLES_ERROR = 'BUNDLES_ERROR',
    
    /**
     * Something went wrong, please try again.
     */
    GENERIC_ERROR = 'GENERIC_ERROR',
    
    /**
     * Something went wrong when saving the product, please try again.
     */
    FAILED_TO_SAVE = 'FAILED_TO_SAVE'
  }
  
  /**
   * Return type for `productDuplicateAsyncV2` mutation.
   */
  export interface ProductDuplicateAsyncV2Payload {
    
    /**
     * The duplicated product ID.
     */
    duplicatedProductId?: string;
    
    /**
     * The asynchronous job for duplicating the product.
     */
    productDuplicateJobId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductDuplicateUserError>;
  }
  
  /**
   * The input fields required to create a product feed.
   */
  export interface ProductFeedInput {
    
    /**
     * The language of the product feed.
     */
    language: LanguageCode;
    
    /**
     * The country of the product feed.
     */
    country: CountryCode;
  }
  
  /**
   * Return type for `productFeedCreate` mutation.
   */
  export interface ProductFeedCreatePayload {
    
    /**
     * The newly created product feed.
     */
    productFeed?: ProductFeed;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductFeedCreateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `ProductFeedCreate`.
   */
  export interface ProductFeedCreateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ProductFeedCreateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ProductFeedCreateUserError`.
   */
  export const enum ProductFeedCreateUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN'
  }
  
  /**
   * Return type for `productFeedDelete` mutation.
   */
  export interface ProductFeedDeletePayload {
    
    /**
     * The ID of the product feed that was deleted.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductFeedDeleteUserError>;
  }
  
  /**
   * An error that occurs during the execution of `ProductFeedDelete`.
   */
  export interface ProductFeedDeleteUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ProductFeedDeleteUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ProductFeedDeleteUserError`.
   */
  export const enum ProductFeedDeleteUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID'
  }
  
  /**
   * Return type for `productFullSync` mutation.
   */
  export interface ProductFullSyncPayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductFullSyncUserError>;
  }
  
  /**
   * An error that occurs during the execution of `ProductFullSync`.
   */
  export interface ProductFullSyncUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ProductFullSyncUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ProductFullSyncUserError`.
   */
  export const enum ProductFullSyncUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID'
  }
  
  /**
   * Return type for `productImageUpdate` mutation.
   */
  export interface ProductImageUpdatePayload {
    
    /**
     * The image that has been updated.
     */
    image?: Image;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `productJoinSellingPlanGroups` mutation.
   */
  export interface ProductJoinSellingPlanGroupsPayload {
    
    /**
     * The product object.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SellingPlanGroupUserError>;
  }
  
  /**
   * Represents a selling plan group custom error.
   * 
   */
  export interface SellingPlanGroupUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: SellingPlanGroupUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `SellingPlanGroupUserError`.
   */
  export const enum SellingPlanGroupUserErrorCode {
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value should be equal to the value allowed.
     */
    EQUAL_TO = 'EQUAL_TO',
    
    /**
     * The input value should be greater than the minimum allowed value.
     */
    GREATER_THAN = 'GREATER_THAN',
    
    /**
     * The input value should be greater than or equal to the minimum value allowed.
     */
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value should be less than the maximum value allowed.
     */
    LESS_THAN = 'LESS_THAN',
    
    /**
     * The input value should be less than or equal to the maximum value allowed.
     */
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO',
    
    /**
     * The input value is not a number.
     */
    NOT_A_NUMBER = 'NOT_A_NUMBER',
    
    /**
     * The record with the ID used as the input value couldn't be found.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is too big.
     */
    TOO_BIG = 'TOO_BIG',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * The input value is the wrong length.
     */
    WRONG_LENGTH = 'WRONG_LENGTH',
    
    /**
     * Exceeded the selling plan limit (31).
     */
    SELLING_PLAN_COUNT_UPPER_BOUND = 'SELLING_PLAN_COUNT_UPPER_BOUND',
    
    /**
     * Must include at least one selling plan.
     */
    SELLING_PLAN_COUNT_LOWER_BOUND = 'SELLING_PLAN_COUNT_LOWER_BOUND',
    
    /**
     * Selling plan's billing policy max cycles must be greater than min cycles.
     */
    SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES = 'SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES',
    
    /**
     * Selling plan's billing and delivery policies anchors must be equal.
     */
    SELLING_PLAN_BILLING_AND_DELIVERY_POLICY_ANCHORS_MUST_BE_EQUAL = 'SELLING_PLAN_BILLING_AND_DELIVERY_POLICY_ANCHORS_MUST_BE_EQUAL',
    
    /**
     * Selling plan's billing cycle must be a multiple of delivery cycle.
     */
    SELLING_PLAN_BILLING_CYCLE_MUST_BE_A_MULTIPLE_OF_DELIVERY_CYCLE = 'SELLING_PLAN_BILLING_CYCLE_MUST_BE_A_MULTIPLE_OF_DELIVERY_CYCLE',
    
    /**
     * Selling plan's pricing policies must contain one fixed pricing policy.
     */
    SELLING_PLAN_PRICING_POLICIES_MUST_CONTAIN_A_FIXED_PRICING_POLICY = 'SELLING_PLAN_PRICING_POLICIES_MUST_CONTAIN_A_FIXED_PRICING_POLICY',
    
    /**
     * Cannot define option2 on this selling plan as there's no label on the parent selling plan group.
     */
    SELLING_PLAN_MISSING_OPTION2_LABEL_ON_PARENT_GROUP = 'SELLING_PLAN_MISSING_OPTION2_LABEL_ON_PARENT_GROUP',
    
    /**
     * Cannot define option3 on this selling plan as there's no label on the parent selling plan group.
     */
    SELLING_PLAN_MISSING_OPTION3_LABEL_ON_PARENT_GROUP = 'SELLING_PLAN_MISSING_OPTION3_LABEL_ON_PARENT_GROUP',
    
    /**
     * Selling plan's option2 is required because option2 exists.
     */
    SELLING_PLAN_OPTION2_REQUIRED_AS_DEFINED_ON_PARENT_GROUP = 'SELLING_PLAN_OPTION2_REQUIRED_AS_DEFINED_ON_PARENT_GROUP',
    
    /**
     * Selling plan's option3 is required because option3 exists.
     */
    SELLING_PLAN_OPTION3_REQUIRED_AS_DEFINED_ON_PARENT_GROUP = 'SELLING_PLAN_OPTION3_REQUIRED_AS_DEFINED_ON_PARENT_GROUP',
    
    /**
     * Selling plans can't have more than 2 pricing policies.
     */
    SELLING_PLAN_PRICING_POLICIES_LIMIT = 'SELLING_PLAN_PRICING_POLICIES_LIMIT',
    
    /**
     * The selling plan list provided contains 1 or more invalid IDs.
     */
    RESOURCE_LIST_CONTAINS_INVALID_IDS = 'RESOURCE_LIST_CONTAINS_INVALID_IDS',
    
    /**
     * Product variant does not exist.
     */
    PRODUCT_VARIANT_DOES_NOT_EXIST = 'PRODUCT_VARIANT_DOES_NOT_EXIST',
    
    /**
     * Product does not exist.
     */
    PRODUCT_DOES_NOT_EXIST = 'PRODUCT_DOES_NOT_EXIST',
    
    /**
     * Selling plan group does not exist.
     */
    GROUP_DOES_NOT_EXIST = 'GROUP_DOES_NOT_EXIST',
    
    /**
     * Selling plan group could not be deleted.
     */
    GROUP_COULD_NOT_BE_DELETED = 'GROUP_COULD_NOT_BE_DELETED',
    
    /**
     * Could not add the resource to the selling plan group.
     */
    ERROR_ADDING_RESOURCE_TO_GROUP = 'ERROR_ADDING_RESOURCE_TO_GROUP',
    
    /**
     * Missing delivery policy.
     */
    SELLING_PLAN_DELIVERY_POLICY_MISSING = 'SELLING_PLAN_DELIVERY_POLICY_MISSING',
    
    /**
     * Missing billing policy.
     */
    SELLING_PLAN_BILLING_POLICY_MISSING = 'SELLING_PLAN_BILLING_POLICY_MISSING',
    
    /**
     * Selling plan does not exist.
     */
    PLAN_DOES_NOT_EXIST = 'PLAN_DOES_NOT_EXIST',
    
    /**
     * Selling plan ID must be specified to update.
     */
    PLAN_ID_MUST_BE_SPECIFIED_TO_UPDATE = 'PLAN_ID_MUST_BE_SPECIFIED_TO_UPDATE',
    
    /**
     * Only one billing policy type can be defined.
     */
    ONLY_NEED_ONE_BILLING_POLICY_TYPE = 'ONLY_NEED_ONE_BILLING_POLICY_TYPE',
    
    /**
     * Only one delivery policy type can be defined.
     */
    ONLY_NEED_ONE_DELIVERY_POLICY_TYPE = 'ONLY_NEED_ONE_DELIVERY_POLICY_TYPE',
    
    /**
     * Only one pricing policy type can be defined.
     */
    ONLY_NEED_ONE_PRICING_POLICY_TYPE = 'ONLY_NEED_ONE_PRICING_POLICY_TYPE',
    
    /**
     * Billing and delivery policy types must be the same.
     */
    BILLING_AND_DELIVERY_POLICY_TYPES_MUST_BE_THE_SAME = 'BILLING_AND_DELIVERY_POLICY_TYPES_MUST_BE_THE_SAME',
    
    /**
     * Only one pricing policy adjustment value type can be defined.
     */
    ONLY_NEED_ONE_PRICING_POLICY_VALUE = 'ONLY_NEED_ONE_PRICING_POLICY_VALUE',
    
    /**
     * Pricing policy's adjustment value and adjustment type must match.
     */
    PRICING_POLICY_ADJUSTMENT_VALUE_AND_TYPE_MUST_MATCH = 'PRICING_POLICY_ADJUSTMENT_VALUE_AND_TYPE_MUST_MATCH',
    
    /**
     * Cannot have multiple selling plans with the same name.
     */
    SELLING_PLAN_DUPLICATE_NAME = 'SELLING_PLAN_DUPLICATE_NAME',
    
    /**
     * Cannot have multiple selling plans with the same options.
     */
    SELLING_PLAN_DUPLICATE_OPTIONS = 'SELLING_PLAN_DUPLICATE_OPTIONS',
    
    /**
     * A fixed selling plan can have at most one pricing policy.
     */
    SELLING_PLAN_FIXED_PRICING_POLICIES_LIMIT = 'SELLING_PLAN_FIXED_PRICING_POLICIES_LIMIT',
    
    /**
     * A fixed billing policy's remaining_balance_charge_exact_time can't be blank when the remaining_balance_charge_trigger is EXACT_TIME.
     */
    REMAINING_BALANCE_CHARGE_EXACT_TIME_REQUIRED = 'REMAINING_BALANCE_CHARGE_EXACT_TIME_REQUIRED',
    
    /**
     * A fixed billing policy's checkout charge value and type must match.
     */
    CHECKOUT_CHARGE_VALUE_AND_TYPE_MUST_MATCH = 'CHECKOUT_CHARGE_VALUE_AND_TYPE_MUST_MATCH',
    
    /**
     * A fixed billing policy's checkout charge can have at most one value.
     */
    ONLY_NEED_ONE_CHECKOUT_CHARGE_VALUE = 'ONLY_NEED_ONE_CHECKOUT_CHARGE_VALUE',
    
    /**
     * A fixed billing policy's remaining_balance_charge_exact_time must not be present when the remaining_balance_charge_trigger isn't EXACT_TIME.
     */
    REMAINING_BALANCE_CHARGE_EXACT_TIME_NOT_ALLOWED = 'REMAINING_BALANCE_CHARGE_EXACT_TIME_NOT_ALLOWED',
    
    /**
     * A fixed billing policy's remaining_balance_charge_time_after_checkout must be present and greater than zero when the remaining_balance_charge_trigger is TIME_AFTER_CHECKOUT.
     */
    REMAINING_BALANCE_CHARGE_TIME_AFTER_CHECKOUT_MUST_BE_GREATER_THAN_ZERO = 'REMAINING_BALANCE_CHARGE_TIME_AFTER_CHECKOUT_MUST_BE_GREATER_THAN_ZERO',
    
    /**
     * A fixed billing policy's remaining_balance_charge_trigger must be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is 100.
     */
    REMAINING_BALANCE_CHARGE_TRIGGER_ON_FULL_CHECKOUT = 'REMAINING_BALANCE_CHARGE_TRIGGER_ON_FULL_CHECKOUT',
    
    /**
     * A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and checkout_charge_value is less than 100.
     */
    REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PARTIAL_PERCENTAGE_CHECKOUT_CHARGE = 'REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PARTIAL_PERCENTAGE_CHECKOUT_CHARGE',
    
    /**
     * A fixed billing policy's remaining_balance_charge_trigger can't be NO_REMAINING_BALANCE when the checkout_charge_type is PRICE.
     */
    REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PRICE_CHECKOUT_CHARGE = 'REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PRICE_CHECKOUT_CHARGE',
    
    /**
     * A fixed billing policy's fulfillment_exact_time can't be blank when the fulfillment_trigger is EXACT_TIME.
     */
    FULFILLMENT_EXACT_TIME_REQUIRED = 'FULFILLMENT_EXACT_TIME_REQUIRED',
    
    /**
     * A fixed billing policy's fulfillment_exact_time must not be present when the fulfillment_trigger isn't EXACT_TIME.
     */
    FULFILLMENT_EXACT_TIME_NOT_ALLOWED = 'FULFILLMENT_EXACT_TIME_NOT_ALLOWED',
    
    /**
     * A fixed delivery policy's anchors must not be present when the fulfillment_trigger isn't ANCHOR.
     */
    SELLING_PLAN_ANCHORS_NOT_ALLOWED = 'SELLING_PLAN_ANCHORS_NOT_ALLOWED',
    
    /**
     * A fixed delivery policy's anchors must be present when the fulfillment_trigger is ANCHOR.
     */
    SELLING_PLAN_ANCHORS_REQUIRED = 'SELLING_PLAN_ANCHORS_REQUIRED',
    
    /**
     * A selling plan can't have both fixed and recurring billing policies.
     */
    ONLY_ONE_OF_FIXED_OR_RECURRING_BILLING = 'ONLY_ONE_OF_FIXED_OR_RECURRING_BILLING',
    
    /**
     * A selling plan can't have both fixed and recurring delivery policies.
     */
    ONLY_ONE_OF_FIXED_OR_RECURRING_DELIVERY = 'ONLY_ONE_OF_FIXED_OR_RECURRING_DELIVERY',
    
    /**
     * Billing policy's interval is too large.
     */
    BILLING_POLICY_INTERVAL_TOO_LARGE = 'BILLING_POLICY_INTERVAL_TOO_LARGE',
    
    /**
     * Delivery policy's interval is too large.
     */
    DELIVERY_POLICY_INTERVAL_TOO_LARGE = 'DELIVERY_POLICY_INTERVAL_TOO_LARGE'
  }
  
  /**
   * Return type for `productLeaveSellingPlanGroups` mutation.
   */
  export interface ProductLeaveSellingPlanGroupsPayload {
    
    /**
     * The product object.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SellingPlanGroupUserError>;
  }
  
  /**
   * The input fields for specifying a product to publish and the channels to publish it to.
   */
  export interface ProductPublishInput {
    
    /**
     * The product to create or update publications for.
     */
    id: string;
    
    /**
     * The publication that the product is published to.
     */
    productPublications: Array<ProductPublicationInput>;
  }
  
  /**
   * The input fields for specifying a publication to which a product will be published.
   */
  export interface ProductPublicationInput {
    
    /**
     * ID of the publication.
     */
    publicationId?: string;
    
    /**
     * The date and time that the product was (or will be) published.
     */
    publishDate?: DateTime;
  }
  
  /**
   * Return type for `productPublish` mutation.
   */
  export interface ProductPublishPayload {
    
    /**
     * The product that has been published.
     */
    product?: Product;
    
    /**
     * The channels where the product is published.
     * @deprecated Use Product.publications instead.
     */
    productPublications?: Array<ProductPublication>;
    
    /**
     * The user's shop.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `productReorderImages` mutation.
   */
  export interface ProductReorderImagesPayload {
    
    /**
     * The asynchronous job which reorders the images.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `productReorderMedia` mutation.
   */
  export interface ProductReorderMediaPayload {
    
    /**
     * The asynchronous job which reorders the media.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    mediaUserErrors: Array<MediaUserError>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `mediaUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for specifying a product to unpublish from a channel and the sales channels to unpublish it from.
   * 
   */
  export interface ProductUnpublishInput {
    
    /**
     * The ID of the product to create or update publications for.
     */
    id: string;
    
    /**
     * The channels to unpublish the product from.
     */
    productPublications: Array<ProductPublicationInput>;
  }
  
  /**
   * Return type for `productUnpublish` mutation.
   */
  export interface ProductUnpublishPayload {
    
    /**
     * The product that has been unpublished.
     */
    product?: Product;
    
    /**
     * The user's shop.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `productUpdate` mutation.
   */
  export interface ProductUpdatePayload {
    
    /**
     * The updated product object.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields required to update a media object.
   */
  export interface UpdateMediaInput {
    
    /**
     * Specifies the media to update.
     */
    id: string;
    
    /**
     * The source from which to update the media preview image. May be an external URL or staged upload URL.
     */
    previewImageSource?: string;
    
    /**
     * The alt text associated to the media.
     */
    alt?: string;
  }
  
  /**
   * Return type for `productUpdateMedia` mutation.
   */
  export interface ProductUpdateMediaPayload {
    
    /**
     * The updated media object.
     */
    media?: Array<Media>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    mediaUserErrors: Array<MediaUserError>;
    
    /**
     * The product on which media was updated.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     * @deprecated Use `mediaUserErrors` instead.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields required to append media to a single variant.
   */
  export interface ProductVariantAppendMediaInput {
    
    /**
     * Specifies the variant to which media will be appended.
     */
    variantId: string;
    
    /**
     * Specifies the media to append to the variant.
     */
    mediaIds: Array<string>;
  }
  
  /**
   * Return type for `productVariantAppendMedia` mutation.
   */
  export interface ProductVariantAppendMediaPayload {
    
    /**
     * The product associated with the variants and media.
     */
    product?: Product;
    
    /**
     * The product variants that were updated.
     */
    productVariants?: Array<ProductVariant>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MediaUserError>;
  }
  
  /**
   * Return type for `productVariantCreate` mutation.
   */
  export interface ProductVariantCreatePayload {
    
    /**
     * The product associated with the variant.
     */
    product?: Product;
    
    /**
     * The successfully created variant.
     */
    productVariant?: ProductVariant;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `productVariantDelete` mutation.
   */
  export interface ProductVariantDeletePayload {
    
    /**
     * The ID of the deleted product variant.
     */
    deletedProductVariantId?: string;
    
    /**
     * The product associated with the deleted product variant.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields required to detach media from a single variant.
   */
  export interface ProductVariantDetachMediaInput {
    
    /**
     * Specifies the variant from which media will be detached.
     */
    variantId: string;
    
    /**
     * Specifies the media to detach from the variant.
     */
    mediaIds: Array<string>;
  }
  
  /**
   * Return type for `productVariantDetachMedia` mutation.
   */
  export interface ProductVariantDetachMediaPayload {
    
    /**
     * The product associated with the variants and media.
     */
    product?: Product;
    
    /**
     * The product variants that were updated.
     */
    productVariants?: Array<ProductVariant>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MediaUserError>;
  }
  
  /**
   * Return type for `productVariantJoinSellingPlanGroups` mutation.
   */
  export interface ProductVariantJoinSellingPlanGroupsPayload {
    
    /**
     * The product variant object.
     */
    productVariant?: ProductVariant;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SellingPlanGroupUserError>;
  }
  
  /**
   * Return type for `productVariantLeaveSellingPlanGroups` mutation.
   */
  export interface ProductVariantLeaveSellingPlanGroupsPayload {
    
    /**
     * The product variant object.
     */
    productVariant?: ProductVariant;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SellingPlanGroupUserError>;
  }
  
  /**
   * The input fields for updating a composite product variant.
   */
  export interface ProductVariantRelationshipUpdateInput {
    
    /**
     * The product variant ID representing that which contains the relationships with other variants.
     */
    parentProductVariantId?: string;
    
    /**
     * A product ID which contains product variants that have relationships with other variants.
     */
    parentProductId?: string;
    
    /**
     * The product variants and associated quantitites to add to the product variant.
     */
    productVariantRelationshipsToCreate?: Array<ProductVariantGroupRelationshipInput>;
    
    /**
     * The product variants and associated quantitites to update in specified product variant.
     */
    productVariantRelationshipsToUpdate?: Array<ProductVariantGroupRelationshipInput>;
    
    /**
     * The bundle component product variants to be removed from the product variant.
     */
    productVariantRelationshipsToRemove?: Array<string>;
    
    /**
     * Whether to remove all components from the product variant. The default value is `false`.
     */
    removeAllProductVariantRelationships?: boolean;
    
    /**
     * Method in which to update the price of the parent product variant.
     */
    priceInput?: PriceInput;
  }
  
  /**
   * The input fields for the bundle components for core.
   */
  export interface ProductVariantGroupRelationshipInput {
    
    /**
     * The ID of the product variant that's a component of the bundle.
     */
    id: string;
    
    /**
     * The number of units of the product variant required to construct one unit of the bundle.
     */
    quantity: number;
  }
  
  /**
   * The input fields for updating the price of a parent product variant.
   */
  export interface PriceInput {
    
    /**
     * The specific type of calculation done to determine the price of the parent variant.
     * The price is calculated during Bundle creation. Updating a component variant won't recalculate the price.
     * 
     */
    calculation?: PriceCalculationType;
    
    /**
     * The price of the parent product variant. This will be be used if calcualtion is set to 'FIXED'.
     */
    price?: Money;
  }
  
  /**
   * How to caluclate the parent product variant's price while bulk updating variant relationships.
   */
  export const enum PriceCalculationType {
    
    /**
     * The price of the parent will be the sum of the components price times their quantity.
     */
    COMPONENTS_SUM = 'COMPONENTS_SUM',
    
    /**
     * The price of the parent will be set to the price provided.
     */
    FIXED = 'FIXED',
    
    /**
     * The price of the parent will not be adjusted.
     */
    NONE = 'NONE'
  }
  
  /**
   * Return type for `productVariantRelationshipBulkUpdate` mutation.
   */
  export interface ProductVariantRelationshipBulkUpdatePayload {
    
    /**
     * The product variants with successfully updated product variant relationships.
     */
    parentProductVariants?: Array<ProductVariant>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductVariantRelationshipBulkUpdateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `ProductVariantRelationshipBulkUpdate`.
   */
  export interface ProductVariantRelationshipBulkUpdateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ProductVariantRelationshipBulkUpdateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ProductVariantRelationshipBulkUpdateUserError`.
   */
  export const enum ProductVariantRelationshipBulkUpdateUserErrorCode {
    
    /**
     * A parent product variant ID or product ID must be provided.
     */
    PARENT_REQUIRED = 'PARENT_REQUIRED',
    
    /**
     * Unable to create parent product variant.
     */
    FAILED_TO_CREATE = 'FAILED_TO_CREATE',
    
    /**
     * The product variants were not found.
     */
    PRODUCT_VARIANTS_NOT_FOUND = 'PRODUCT_VARIANTS_NOT_FOUND',
    
    /**
     * A parent product variant cannot contain itself as a component.
     */
    CIRCULAR_REFERENCE = 'CIRCULAR_REFERENCE',
    
    /**
     * Nested parent product variants aren't supported.
     */
    NESTED_PARENT_PRODUCT_VARIANT = 'NESTED_PARENT_PRODUCT_VARIANT',
    
    /**
     * Product variant relationships must have a quantity greater than 0.
     */
    INVALID_QUANTITY = 'INVALID_QUANTITY',
    
    /**
     * A parent product variant must not contain duplicate product variant relationships.
     */
    DUPLICATE_PRODUCT_VARIANT_RELATIONSHIP = 'DUPLICATE_PRODUCT_VARIANT_RELATIONSHIP',
    
    /**
     * Exceeded the maximum allowable product variant relationships in a parent product variant.
     */
    EXCEEDED_PRODUCT_VARIANT_RELATIONSHIP_LIMIT = 'EXCEEDED_PRODUCT_VARIANT_RELATIONSHIP_LIMIT',
    
    /**
     * A Core type relationship cannot be added to a composite product variant with SFN type relationships.
     */
    PRODUCT_VARIANT_RELATIONSHIP_TYPE_CONFLICT = 'PRODUCT_VARIANT_RELATIONSHIP_TYPE_CONFLICT',
    
    /**
     * Unexpected error.
     */
    UNEXPECTED_ERROR = 'UNEXPECTED_ERROR',
    
    /**
     * Unable to remove product variant relationships.
     */
    FAILED_TO_REMOVE = 'FAILED_TO_REMOVE',
    
    /**
     * The product variant relationships to remove must be specified if all the parent product variant's components aren't being removed.
     */
    MUST_SPECIFY_COMPONENTS = 'MUST_SPECIFY_COMPONENTS',
    
    /**
     * Unable to update product variant relationships.
     */
    FAILED_TO_UPDATE = 'FAILED_TO_UPDATE',
    
    /**
     * Unable to update parent product variant price.
     */
    FAILED_TO_UPDATE_PARENT_PRODUCT_VARIANT_PRICE = 'FAILED_TO_UPDATE_PARENT_PRODUCT_VARIANT_PRICE',
    
    /**
     * A price must be provided for a parent product variant if the price calucation is set to fixed.
     */
    UPDATE_PARENT_VARIANT_PRICE_REQUIRED = 'UPDATE_PARENT_VARIANT_PRICE_REQUIRED',
    
    /**
     * Some of the provided product variants are not components of the specified parent product variant.
     */
    PRODUCT_VARIANTS_NOT_COMPONENTS = 'PRODUCT_VARIANTS_NOT_COMPONENTS',
    
    /**
     * The products for these product variants are already owned by another App.
     */
    PRODUCT_EXPANDER_APP_OWNERSHIP_ALREADY_EXISTS = 'PRODUCT_EXPANDER_APP_OWNERSHIP_ALREADY_EXISTS',
    
    /**
     * Multipack bundles are not supported.
     */
    UNSUPPORTED_MULTIPACK_RELATIONSHIP = 'UNSUPPORTED_MULTIPACK_RELATIONSHIP',
    
    /**
     * Gift cards cannot be parent product variants.
     */
    PARENT_PRODUCT_VARIANT_CANNOT_BE_GIFT_CARD = 'PARENT_PRODUCT_VARIANT_CANNOT_BE_GIFT_CARD',
    
    /**
     * Parent product variants cannot require a selling plan.
     */
    PARENT_PRODUCT_VARIANT_CANNOT_REQUIRE_SELLING_PLAN = 'PARENT_PRODUCT_VARIANT_CANNOT_REQUIRE_SELLING_PLAN'
  }
  
  /**
   * Return type for `productVariantUpdate` mutation.
   */
  export interface ProductVariantUpdatePayload {
    
    /**
     * The product associated with the variant.
     */
    product?: Product;
    
    /**
     * The updated variant.
     */
    productVariant?: ProductVariant;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for specifying a product variant to create as part of a variant bulk mutation.
   */
  export interface ProductVariantsBulkInput {
    
    /**
     * The value of the barcode associated with the product variant.
     */
    barcode?: string;
    
    /**
     * The compare-at price of the variant.
     */
    compareAtPrice?: Money;
    
    /**
     * Specifies the product variant to update or delete.
     */
    id?: string;
    
    /**
     * The URL of the media to associate with the variant.
     */
    mediaSrc?: Array<string>;
    
    /**
     * Whether customers are allowed to place an order for the variant when it's out of stock.
     */
    inventoryPolicy?: ProductVariantInventoryPolicy;
    
    /**
     * The inventory quantities at each location where the variant is stocked. The number of elements
     * in the array of inventory quantities can't exceed the amount specified for the plan.
     * Supported as input with the `productVariantsBulkCreate` mutation only.
     * 
     */
    inventoryQuantities?: Array<InventoryLevelInput>;
    
    /**
     * The inventory item associated with the variant, used for unit cost.
     */
    inventoryItem?: InventoryItemInput;
    
    /**
     * The ID of the media that's associated with the variant.
     */
    mediaId?: string;
    
    /**
     * The additional customizable information about the product variant.
     */
    metafields?: Array<MetafieldInput>;
    
    /**
     * The custom properties that a shop owner uses to define product variants.
     */
    options?: Array<string>;
    
    /**
     * The price of the variant.
     */
    price?: Money;
    
    /**
     * The SKU for the variant.
     */
    sku?: string;
    
    /**
     * Whether the variant is taxable.
     */
    taxable?: boolean;
    
    /**
     * The tax code associated with the variant.
     */
    taxCode?: string;
  }
  
  /**
   * Return type for `productVariantsBulkCreate` mutation.
   */
  export interface ProductVariantsBulkCreatePayload {
    
    /**
     * The updated product object.
     */
    product?: Product;
    
    /**
     * The newly created variants.
     */
    productVariants?: Array<ProductVariant>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductVariantsBulkCreateUserError>;
  }
  
  /**
   * Error codes for failed product variant bulk create mutations.
   */
  export interface ProductVariantsBulkCreateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ProductVariantsBulkCreateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ProductVariantsBulkCreateUserError`.
   */
  export const enum ProductVariantsBulkCreateUserErrorCode {
    
    /**
     * Product does not exist.
     */
    PRODUCT_DOES_NOT_EXIST = 'PRODUCT_DOES_NOT_EXIST',
    
    /**
     * On create, this key cannot be used.
     */
    NO_KEY_ON_CREATE = 'NO_KEY_ON_CREATE',
    
    /**
     * Variant already exists.
     */
    VARIANT_ALREADY_EXISTS = 'VARIANT_ALREADY_EXISTS',
    
    /**
     * Variant price must be greater than or equal to zero.
     */
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
    
    /**
     * Variant options are not enough.
     */
    NEED_TO_ADD_OPTION_VALUES = 'NEED_TO_ADD_OPTION_VALUES',
    
    /**
     * Variant options are more than the product options.
     */
    OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS = 'OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS',
    
    /**
     * Inventory locations cannot exceed the allowed resource limit or 10.
     */
    TOO_MANY_INVENTORY_LOCATIONS = 'TOO_MANY_INVENTORY_LOCATIONS',
    
    /**
     * You reached the limit of available SKUs in your current plan.
     */
    SUBSCRIPTION_VIOLATION = 'SUBSCRIPTION_VIOLATION',
    
    /**
     * Variant options already exist. Please change the variant option(s).
     */
    VARIANT_ALREADY_EXISTS_CHANGE_OPTION_VALUE = 'VARIANT_ALREADY_EXISTS_CHANGE_OPTION_VALUE',
    
    /**
     * Quantity could not be set. The location was not found.
     */
    TRACKED_VARIANT_LOCATION_NOT_FOUND = 'TRACKED_VARIANT_LOCATION_NOT_FOUND',
    
    /**
     * Input must be for this product.
     */
    MUST_BE_FOR_THIS_PRODUCT = 'MUST_BE_FOR_THIS_PRODUCT',
    
    /**
     * Input is not defined for this shop.
     */
    NOT_DEFINED_FOR_SHOP = 'NOT_DEFINED_FOR_SHOP',
    
    /**
     * Invalid input detected.
     */
    INVALID = 'INVALID',
    
    /**
     * Price cannot take a negative value.
     */
    NEGATIVE_PRICE_VALUE = 'NEGATIVE_PRICE_VALUE'
  }
  
  /**
   * Return type for `productVariantsBulkDelete` mutation.
   */
  export interface ProductVariantsBulkDeletePayload {
    
    /**
     * The updated product object.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductVariantsBulkDeleteUserError>;
  }
  
  /**
   * Error codes for failed bulk variant delete mutations.
   */
  export interface ProductVariantsBulkDeleteUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ProductVariantsBulkDeleteUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ProductVariantsBulkDeleteUserError`.
   */
  export const enum ProductVariantsBulkDeleteUserErrorCode {
    
    /**
     * Product does not exist.
     */
    PRODUCT_DOES_NOT_EXIST = 'PRODUCT_DOES_NOT_EXIST',
    
    /**
     * Cannot delete default variant.
     */
    CANNOT_DELETE_LAST_VARIANT = 'CANNOT_DELETE_LAST_VARIANT',
    
    /**
     * The variant does not exist.
     */
    AT_LEAST_ONE_VARIANT_DOES_NOT_BELONG_TO_THE_PRODUCT = 'AT_LEAST_ONE_VARIANT_DOES_NOT_BELONG_TO_THE_PRODUCT'
  }
  
  /**
   * The input fields representing a product variant position.
   */
  export interface ProductVariantPositionInput {
    
    /**
     * Specifies the ID of the product variant to update.
     */
    id: string;
    
    /**
     * The order of the product variant in the list of product variants. The first position in the list is 1.
     */
    position: number;
  }
  
  /**
   * Return type for `productVariantsBulkReorder` mutation.
   */
  export interface ProductVariantsBulkReorderPayload {
    
    /**
     * The updated product.
     */
    product?: Product;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductVariantsBulkReorderUserError>;
  }
  
  /**
   * Error codes for failed bulk product variants reorder operation.
   */
  export interface ProductVariantsBulkReorderUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ProductVariantsBulkReorderUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ProductVariantsBulkReorderUserError`.
   */
  export const enum ProductVariantsBulkReorderUserErrorCode {
    
    /**
     * Product does not exist.
     */
    PRODUCT_DOES_NOT_EXIST = 'PRODUCT_DOES_NOT_EXIST',
    
    /**
     * Product variant does not exist.
     */
    MISSING_VARIANT = 'MISSING_VARIANT',
    
    /**
     * Product variant position cannot be zero or negative number.
     */
    INVALID_POSITION = 'INVALID_POSITION',
    
    /**
     * Product variant IDs must be unique.
     */
    DUPLICATED_VARIANT_ID = 'DUPLICATED_VARIANT_ID'
  }
  
  /**
   * Return type for `productVariantsBulkUpdate` mutation.
   */
  export interface ProductVariantsBulkUpdatePayload {
    
    /**
     * The updated product object.
     */
    product?: Product;
    
    /**
     * The updated variants.
     */
    productVariants?: Array<ProductVariant>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ProductVariantsBulkUpdateUserError>;
  }
  
  /**
   * Error codes for failed variant bulk update mutations.
   */
  export interface ProductVariantsBulkUpdateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ProductVariantsBulkUpdateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ProductVariantsBulkUpdateUserError`.
   */
  export const enum ProductVariantsBulkUpdateUserErrorCode {
    
    /**
     * Product does not exist.
     */
    PRODUCT_DOES_NOT_EXIST = 'PRODUCT_DOES_NOT_EXIST',
    
    /**
     * Product variant is missing ID attribute.
     */
    PRODUCT_VARIANT_ID_MISSING = 'PRODUCT_VARIANT_ID_MISSING',
    
    /**
     * Product variant does not exist.
     */
    PRODUCT_VARIANT_DOES_NOT_EXIST = 'PRODUCT_VARIANT_DOES_NOT_EXIST',
    
    /**
     * Inventory quantities cannot be updated with variants API.
     */
    NO_INVENTORY_QUANTITIES_ON_VARIANTS_UPDATE = 'NO_INVENTORY_QUANTITIES_ON_VARIANTS_UPDATE',
    
    /**
     * The variant already exists.
     */
    VARIANT_ALREADY_EXISTS = 'VARIANT_ALREADY_EXISTS',
    
    /**
     * The price of the variant must be greater than or equal to zero.
     */
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
    
    /**
     * Variant options are not enough.
     */
    NEED_TO_ADD_OPTION_VALUES = 'NEED_TO_ADD_OPTION_VALUES',
    
    /**
     * Variant options are more than the product options.
     */
    OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS = 'OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS',
    
    /**
     * You reached the limit of available SKUs in your current plan.
     */
    SUBSCRIPTION_VIOLATION = 'SUBSCRIPTION_VIOLATION',
    
    /**
     * Inventory quantities cannot be provided during update.
     */
    NO_INVENTORY_QUANTITES_DURING_UPDATE = 'NO_INVENTORY_QUANTITES_DURING_UPDATE',
    
    /**
     * Price cannot take a negative value.
     */
    NEGATIVE_PRICE_VALUE = 'NEGATIVE_PRICE_VALUE'
  }
  
  /**
   * Return type for `pubSubServerPixelUpdate` mutation.
   */
  export interface PubSubServerPixelUpdatePayload {
    
    /**
     * The server pixel as configured by the mutation.
     */
    serverPixel?: ServerPixel;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ErrorsServerPixelUserError>;
  }
  
  /**
   * The input fields for a PubSub webhook subscription.
   * 
   */
  export interface PubSubWebhookSubscriptionInput {
    
    /**
     * The Pub/Sub project ID.
     */
    pubSubProject: string;
    
    /**
     * The Pub/Sub topic ID.
     */
    pubSubTopic: string;
    
    /**
     * The format in which the webhook subscription should send the data.
     */
    format?: WebhookSubscriptionFormat;
    
    /**
     * The list of fields to be included in the webhook subscription.
     */
    includeFields?: Array<string>;
    
    /**
     * The list of namespaces for any metafields that should be included in the webhook subscription.
     */
    metafieldNamespaces?: Array<string>;
  }
  
  /**
   * Return type for `pubSubWebhookSubscriptionCreate` mutation.
   */
  export interface PubSubWebhookSubscriptionCreatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PubSubWebhookSubscriptionCreateUserError>;
    
    /**
     * The webhook subscription that was created.
     */
    webhookSubscription?: WebhookSubscription;
  }
  
  /**
   * An error that occurs during the execution of `PubSubWebhookSubscriptionCreate`.
   */
  export interface PubSubWebhookSubscriptionCreateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: PubSubWebhookSubscriptionCreateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `PubSubWebhookSubscriptionCreateUserError`.
   */
  export const enum PubSubWebhookSubscriptionCreateUserErrorCode {
    
    /**
     * Invalid parameters provided.
     */
    INVALID_PARAMETERS = 'INVALID_PARAMETERS'
  }
  
  /**
   * Return type for `pubSubWebhookSubscriptionUpdate` mutation.
   */
  export interface PubSubWebhookSubscriptionUpdatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PubSubWebhookSubscriptionUpdateUserError>;
    
    /**
     * The webhook subscription that was updated.
     */
    webhookSubscription?: WebhookSubscription;
  }
  
  /**
   * An error that occurs during the execution of `PubSubWebhookSubscriptionUpdate`.
   */
  export interface PubSubWebhookSubscriptionUpdateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: PubSubWebhookSubscriptionUpdateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `PubSubWebhookSubscriptionUpdateUserError`.
   */
  export const enum PubSubWebhookSubscriptionUpdateUserErrorCode {
    
    /**
     * Invalid parameters provided.
     */
    INVALID_PARAMETERS = 'INVALID_PARAMETERS'
  }
  
  /**
   * The input fields for creating a publication.
   */
  export interface PublicationCreateInput {
    
    /**
     * The ID of the catalog.
     */
    catalogId?: string;
    
    /**
     * Whether to create an empty publication or prepopulate it with all products.
     */
    defaultState?: PublicationCreateInputPublicationDefaultState;
    
    /**
     * Whether to automatically add newly created products to this publication.
     */
    autoPublish?: boolean;
  }
  
  /**
   * The input fields for the possible values for the default state of a publication.
   */
  export const enum PublicationCreateInputPublicationDefaultState {
    
    /**
     * The publication is empty.
     */
    EMPTY = 'EMPTY',
    
    /**
     * The publication is populated with all products.
     */
    ALL_PRODUCTS = 'ALL_PRODUCTS'
  }
  
  /**
   * Return type for `publicationCreate` mutation.
   */
  export interface PublicationCreatePayload {
    
    /**
     * The publication that's been created.
     */
    publication?: Publication;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PublicationUserError>;
  }
  
  /**
   * Defines errors encountered while managing a publication.
   * 
   */
  export interface PublicationUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: PublicationUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `PublicationUserError`.
   */
  export const enum PublicationUserErrorCode {
    
    /**
     * Can't perform this action on a publication.
     */
    UNSUPPORTED_PUBLICATION_ACTION = 'UNSUPPORTED_PUBLICATION_ACTION',
    
    /**
     * Publication not found.
     */
    PUBLICATION_NOT_FOUND = 'PUBLICATION_NOT_FOUND',
    
    /**
     * The publication is currently being modified. Please try again later.
     */
    PUBLICATION_LOCKED = 'PUBLICATION_LOCKED',
    
    /**
     * A catalog publication can only contain products.
     */
    UNSUPPORTED_PUBLISHABLE_TYPE = 'UNSUPPORTED_PUBLISHABLE_TYPE',
    
    /**
     * Publishable ID not found.
     */
    INVALID_PUBLISHABLE_ID = 'INVALID_PUBLISHABLE_ID',
    
    /**
     * Market does not exist.
     */
    MARKET_NOT_FOUND = 'MARKET_NOT_FOUND',
    
    /**
     * Catalog does not exist.
     */
    CATALOG_NOT_FOUND = 'CATALOG_NOT_FOUND',
    
    /**
     * Can't modify a publication that belongs to an app catalog.
     */
    CANNOT_MODIFY_APP_CATALOG_PUBLICATION = 'CANNOT_MODIFY_APP_CATALOG_PUBLICATION',
    
    /**
     * Can't modify a publication that belongs to a market catalog.
     */
    CANNOT_MODIFY_MARKET_CATALOG_PUBLICATION = 'CANNOT_MODIFY_MARKET_CATALOG_PUBLICATION',
    
    /**
     * Cannot modify a catalog for an app.
     */
    CANNOT_MODIFY_APP_CATALOG = 'CANNOT_MODIFY_APP_CATALOG',
    
    /**
     * Cannot modify a catalog for a market.
     */
    CANNOT_MODIFY_MARKET_CATALOG = 'CANNOT_MODIFY_MARKET_CATALOG',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * A product publication cannot be created because the catalog type associated with this publication does not permit publications of this product type.
     */
    PRODUCT_TYPE_INCOMPATIBLE_WITH_CATALOG_TYPE = 'PRODUCT_TYPE_INCOMPATIBLE_WITH_CATALOG_TYPE',
    
    /**
     * The limit for simultaneous publication updates has been exceeded.
     */
    PUBLICATION_UPDATE_LIMIT_EXCEEDED = 'PUBLICATION_UPDATE_LIMIT_EXCEEDED'
  }
  
  /**
   * Return type for `publicationDelete` mutation.
   */
  export interface PublicationDeletePayload {
    
    /**
     * The ID of the publication that was deleted.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PublicationUserError>;
  }
  
  /**
   * The input fields for updating a publication.
   */
  export interface PublicationUpdateInput {
    
    /**
     * A list of publishable IDs to add. The maximum number of publishables to update simultaneously is 50.
     */
    publishablesToAdd?: Array<string>;
    
    /**
     * A list of publishable IDs to remove. The maximum number of publishables to update simultaneously is 50.
     */
    publishablesToRemove?: Array<string>;
    
    /**
     * Whether new products should be automatically published to the publication.
     */
    autoPublish?: boolean;
  }
  
  /**
   * Return type for `publicationUpdate` mutation.
   */
  export interface PublicationUpdatePayload {
    
    /**
     * The publication that's been updated.
     */
    publication?: Publication;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<PublicationUserError>;
  }
  
  /**
   * The input fields required to publish a resource.
   */
  export interface PublicationInput {
    
    /**
     * ID of the publication.
     */
    publicationId?: string;
    
    /**
     * The date and time that the resource was published. Setting this to a date in the future will schedule the resource to be published. Only online store channels support future publishing. This field has no effect if you include it in the `publishableUnpublish` mutation.
     * 
     */
    publishDate?: DateTime;
  }
  
  /**
   * Return type for `publishablePublish` mutation.
   */
  export interface PublishablePublishPayload {
    
    /**
     * Resource that has been published.
     */
    publishable?: Publishable;
    
    /**
     * The user's shop.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `publishablePublishToCurrentChannel` mutation.
   */
  export interface PublishablePublishToCurrentChannelPayload {
    
    /**
     * Resource that has been published.
     */
    publishable?: Publishable;
    
    /**
     * The user's shop.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `publishableUnpublish` mutation.
   */
  export interface PublishableUnpublishPayload {
    
    /**
     * Resource that has been unpublished.
     */
    publishable?: Publishable;
    
    /**
     * The user's shop.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `publishableUnpublishToCurrentChannel` mutation.
   */
  export interface PublishableUnpublishToCurrentChannelPayload {
    
    /**
     * Resource that has been unpublished.
     */
    publishable?: Publishable;
    
    /**
     * The user's shop.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields used to update quantity pricing.
   */
  export interface QuantityPricingByVariantUpdateInput {
    
    /**
     * A list of quantity price breaks to add.
     */
    quantityPriceBreaksToAdd: Array<QuantityPriceBreakInput>;
    
    /**
     * A list of quantity price break IDs that identify which quantity breaks to remove.
     */
    quantityPriceBreaksToDelete: Array<string>;
    
    /**
     * A list of quantity rules to add.
     */
    quantityRulesToAdd: Array<QuantityRuleInput>;
    
    /**
     * A list of variant IDs that identify which quantity rules to remove.
     */
    quantityRulesToDeleteByVariantId: Array<string>;
    
    /**
     * A list of fixed prices to add.
     */
    pricesToAdd: Array<PriceListPriceInput>;
    
    /**
     * A list of variant IDs that identify which fixed prices to remove.
     */
    pricesToDeleteByVariantId: Array<string>;
  }
  
  /**
   * The input fields and values to use when creating quantity price breaks.
   */
  export interface QuantityPriceBreakInput {
    
    /**
     * The product variant ID associated with the quantity break.
     */
    variantId: string;
    
    /**
     * The price of the product variant when its quantity meets the break's minimum quantity.
     */
    price: MoneyInput;
    
    /**
     * The minimum required quantity for a variant to qualify for this price.
     */
    minimumQuantity: number;
  }
  
  /**
   * The input fields for the per-order quantity rule to be applied on the product variant.
   * 
   */
  export interface QuantityRuleInput {
    
    /**
     * The quantity increment.
     */
    increment: number;
    
    /**
     * The maximum quantity.
     */
    maximum?: number;
    
    /**
     * The minimum quantity.
     */
    minimum: number;
    
    /**
     * Product variant on which to apply the quantity rule.
     */
    variantId: string;
  }
  
  /**
   * Return type for `quantityPricingByVariantUpdate` mutation.
   */
  export interface QuantityPricingByVariantUpdatePayload {
    
    /**
     * The variants for which quantity pricing was created successfully in the price list.
     */
    productVariants?: Array<ProductVariant>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<QuantityPricingByVariantUserError>;
  }
  
  /**
   * Error codes for failed volume pricing operations.
   */
  export interface QuantityPricingByVariantUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: QuantityPricingByVariantUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `QuantityPricingByVariantUserError`.
   */
  export const enum QuantityPricingByVariantUserErrorCode {
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * Price List does not exist.
     */
    PRICE_LIST_NOT_FOUND = 'PRICE_LIST_NOT_FOUND',
    
    /**
     * Something went wrong when trying to update quantity pricing. Please try again later.
     */
    GENERIC_ERROR = 'GENERIC_ERROR',
    
    /**
     * Invalid quantity price break.
     */
    QUANTITY_PRICE_BREAK_ADD_INVALID = 'QUANTITY_PRICE_BREAK_ADD_INVALID',
    
    /**
     * Quantity price break's fixed price not found.
     */
    QUANTITY_PRICE_BREAK_ADD_PRICE_LIST_PRICE_NOT_FOUND = 'QUANTITY_PRICE_BREAK_ADD_PRICE_LIST_PRICE_NOT_FOUND',
    
    /**
     * Exceeded the allowed number of quantity price breaks per variant.
     */
    QUANTITY_PRICE_BREAK_ADD_LIMIT_EXCEEDED = 'QUANTITY_PRICE_BREAK_ADD_LIMIT_EXCEEDED',
    
    /**
     * Price list and quantity price break currency mismatch.
     */
    QUANTITY_PRICE_BREAK_ADD_CURRENCY_MISMATCH = 'QUANTITY_PRICE_BREAK_ADD_CURRENCY_MISMATCH',
    
    /**
     * Failed to save quantity price break.
     */
    QUANTITY_PRICE_BREAK_ADD_FAILED_TO_SAVE = 'QUANTITY_PRICE_BREAK_ADD_FAILED_TO_SAVE',
    
    /**
     * Quantity price break miniumum is less than the quantity rule minimum.
     */
    QUANTITY_PRICE_BREAK_ADD_MIN_LOWER_THAN_QUANTITY_RULES_MIN = 'QUANTITY_PRICE_BREAK_ADD_MIN_LOWER_THAN_QUANTITY_RULES_MIN',
    
    /**
     * Quantity price break miniumum is higher than the quantity rule maximum.
     */
    QUANTITY_PRICE_BREAK_ADD_MIN_HIGHER_THAN_QUANTITY_RULES_MAX = 'QUANTITY_PRICE_BREAK_ADD_MIN_HIGHER_THAN_QUANTITY_RULES_MAX',
    
    /**
     * Quantity price break miniumum is not multiple of the quantity rule increment.
     */
    QUANTITY_PRICE_BREAK_ADD_MIN_NOT_A_MULTIPLE_OF_QUANTITY_RULES_INCREMENT = 'QUANTITY_PRICE_BREAK_ADD_MIN_NOT_A_MULTIPLE_OF_QUANTITY_RULES_INCREMENT',
    
    /**
     * Quantity price break variant not found.
     */
    QUANTITY_PRICE_BREAK_ADD_VARIANT_NOT_FOUND = 'QUANTITY_PRICE_BREAK_ADD_VARIANT_NOT_FOUND',
    
    /**
     * Quantity price breaks to add inputs must be unique by variant id and minimum quantity.
     */
    QUANTITY_PRICE_BREAK_ADD_DUPLICATE_INPUT_FOR_VARIANT_AND_MIN = 'QUANTITY_PRICE_BREAK_ADD_DUPLICATE_INPUT_FOR_VARIANT_AND_MIN',
    
    /**
     * Quantity price break not found.
     */
    QUANTITY_PRICE_BREAK_DELETE_NOT_FOUND = 'QUANTITY_PRICE_BREAK_DELETE_NOT_FOUND',
    
    /**
     * Failed to delete quantity price break.
     */
    QUANTITY_PRICE_BREAK_DELETE_FAILED = 'QUANTITY_PRICE_BREAK_DELETE_FAILED',
    
    /**
     * Quantity rule variant not found.
     */
    QUANTITY_RULE_ADD_VARIANT_NOT_FOUND = 'QUANTITY_RULE_ADD_VARIANT_NOT_FOUND',
    
    /**
     * Quantity rule minimum is higher than the quantity price break minimum.
     */
    QUANTITY_RULE_ADD_MIN_HIGHER_THAN_QUANTITY_PRICE_BREAK_MIN = 'QUANTITY_RULE_ADD_MIN_HIGHER_THAN_QUANTITY_PRICE_BREAK_MIN',
    
    /**
     * Quantity rule maximum is less than the quantity price break minimum.
     */
    QUANTITY_RULE_ADD_MAX_LOWER_THAN_QUANTITY_PRICE_BREAK_MIN = 'QUANTITY_RULE_ADD_MAX_LOWER_THAN_QUANTITY_PRICE_BREAK_MIN',
    
    /**
     * Quantity rule increment must be a multiple of the quantity price break minimum.
     */
    QUANTITY_RULE_ADD_INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MIN = 'QUANTITY_RULE_ADD_INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MIN',
    
    /**
     * Quantity rule catalog context not supported.
     */
    QUANTITY_RULE_ADD_CATALOG_CONTEXT_NOT_SUPPORTED = 'QUANTITY_RULE_ADD_CATALOG_CONTEXT_NOT_SUPPORTED',
    
    /**
     * Quantity rule increment is greater than minimum.
     */
    QUANTITY_RULE_ADD_INCREMENT_IS_GREATER_THAN_MINIMUM = 'QUANTITY_RULE_ADD_INCREMENT_IS_GREATER_THAN_MINIMUM',
    
    /**
     * Quantity rule minimum is not a multiple of increment.
     */
    QUANTITY_RULE_ADD_MINIMUM_NOT_A_MULTIPLE_OF_INCREMENT = 'QUANTITY_RULE_ADD_MINIMUM_NOT_A_MULTIPLE_OF_INCREMENT',
    
    /**
     * Quantity rule maximum is not a multiple of increment.
     */
    QUANTITY_RULE_ADD_MAXIMUM_NOT_A_MULTIPLE_OF_INCREMENT = 'QUANTITY_RULE_ADD_MAXIMUM_NOT_A_MULTIPLE_OF_INCREMENT',
    
    /**
     * Quantity rule minimum is greater than maximum.
     */
    QUANTITY_RULE_ADD_MINIMUM_GREATER_THAN_MAXIMUM = 'QUANTITY_RULE_ADD_MINIMUM_GREATER_THAN_MAXIMUM',
    
    /**
     * Quantity rule increment is less than one.
     */
    QUANTITY_RULE_ADD_INCREMENT_IS_LESS_THAN_ONE = 'QUANTITY_RULE_ADD_INCREMENT_IS_LESS_THAN_ONE',
    
    /**
     * Quantity rule minimum is less than one.
     */
    QUANTITY_RULE_ADD_MINIMUM_IS_LESS_THAN_ONE = 'QUANTITY_RULE_ADD_MINIMUM_IS_LESS_THAN_ONE',
    
    /**
     * Quantity rule maximum is less than one.
     */
    QUANTITY_RULE_ADD_MAXIMUM_IS_LESS_THAN_ONE = 'QUANTITY_RULE_ADD_MAXIMUM_IS_LESS_THAN_ONE',
    
    /**
     * Quantity rules to add inputs must be unique by variant id.
     */
    QUANTITY_RULE_ADD_DUPLICATE_INPUT_FOR_VARIANT = 'QUANTITY_RULE_ADD_DUPLICATE_INPUT_FOR_VARIANT',
    
    /**
     * Quantity rule not found.
     */
    QUANTITY_RULE_DELETE_RULE_NOT_FOUND = 'QUANTITY_RULE_DELETE_RULE_NOT_FOUND',
    
    /**
     * Quantity rule variant not found.
     */
    QUANTITY_RULE_DELETE_VARIANT_NOT_FOUND = 'QUANTITY_RULE_DELETE_VARIANT_NOT_FOUND',
    
    /**
     * Price list and fixed price currency mismatch.
     */
    PRICE_ADD_CURRENCY_MISMATCH = 'PRICE_ADD_CURRENCY_MISMATCH',
    
    /**
     * Fixed price's variant not found.
     */
    PRICE_ADD_VARIANT_NOT_FOUND = 'PRICE_ADD_VARIANT_NOT_FOUND',
    
    /**
     * Prices to add inputs must be unique by variant id.
     */
    PRICE_ADD_DUPLICATE_INPUT_FOR_VARIANT = 'PRICE_ADD_DUPLICATE_INPUT_FOR_VARIANT',
    
    /**
     * Price is not fixed.
     */
    PRICE_DELETE_PRICE_NOT_FIXED = 'PRICE_DELETE_PRICE_NOT_FIXED',
    
    /**
     * Fixed price's variant not found.
     */
    PRICE_DELETE_VARIANT_NOT_FOUND = 'PRICE_DELETE_VARIANT_NOT_FOUND'
  }
  
  /**
   * Return type for `quantityRulesAdd` mutation.
   */
  export interface QuantityRulesAddPayload {
    
    /**
     * The list of quantity rules that were added to or updated in the price list.
     */
    quantityRules?: Array<QuantityRule>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<QuantityRuleUserError>;
  }
  
  /**
   * An error for a failed quantity rule operation.
   * 
   */
  export interface QuantityRuleUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: QuantityRuleUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `QuantityRuleUserError`.
   */
  export const enum QuantityRuleUserErrorCode {
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * Product variant ID does not exist.
     */
    PRODUCT_VARIANT_DOES_NOT_EXIST = 'PRODUCT_VARIANT_DOES_NOT_EXIST',
    
    /**
     * Price list does not exist.
     */
    PRICE_LIST_DOES_NOT_EXIST = 'PRICE_LIST_DOES_NOT_EXIST',
    
    /**
     * Quantity rule for variant associated with the price list provided does not exist.
     */
    VARIANT_QUANTITY_RULE_DOES_NOT_EXIST = 'VARIANT_QUANTITY_RULE_DOES_NOT_EXIST',
    
    /**
     * Minimum must be lower than or equal to the maximum.
     */
    MINIMUM_IS_GREATER_THAN_MAXIMUM = 'MINIMUM_IS_GREATER_THAN_MAXIMUM',
    
    /**
     * Minimum must be less than or equal to all quantity price break minimums associated with this variant in the specified price list.
     */
    MINIMUM_IS_HIGHER_THAN_QUANTITY_PRICE_BREAK_MINIMUM = 'MINIMUM_IS_HIGHER_THAN_QUANTITY_PRICE_BREAK_MINIMUM',
    
    /**
     * Maximum must be greater than or equal to all quantity price break minimums associated with this variant in the specified price list.
     */
    MAXIMUM_IS_LOWER_THAN_QUANTITY_PRICE_BREAK_MINIMUM = 'MAXIMUM_IS_LOWER_THAN_QUANTITY_PRICE_BREAK_MINIMUM',
    
    /**
     * Increment must be a multiple of all quantity price break minimums associated with this variant in the specified price list.
     */
    INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MINIMUM = 'INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MINIMUM',
    
    /**
     * Increment must be lower than or equal to the minimum.
     */
    INCREMENT_IS_GREATER_THAN_MINIMUM = 'INCREMENT_IS_GREATER_THAN_MINIMUM',
    
    /**
     * Value must be greater than or equal to 1.
     */
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
    
    /**
     * The maximum must be a multiple of the increment.
     */
    MAXIMUM_NOT_MULTIPLE_OF_INCREMENT = 'MAXIMUM_NOT_MULTIPLE_OF_INCREMENT',
    
    /**
     * The minimum must be a multiple of the increment.
     */
    MINIMUM_NOT_MULTIPLE_OF_INCREMENT = 'MINIMUM_NOT_MULTIPLE_OF_INCREMENT',
    
    /**
     * Quantity rules can be associated only with company location catalogs.
     */
    CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES = 'CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES',
    
    /**
     * Quantity rule inputs must be unique by variant id.
     */
    DUPLICATE_INPUT_FOR_VARIANT = 'DUPLICATE_INPUT_FOR_VARIANT',
    
    /**
     * Something went wrong when trying to save the quantity rule. Please try again later.
     */
    GENERIC_ERROR = 'GENERIC_ERROR'
  }
  
  /**
   * Return type for `quantityRulesDelete` mutation.
   */
  export interface QuantityRulesDeletePayload {
    
    /**
     * A list of product variant IDs whose quantity rules were removed from the price list.
     * 
     */
    deletedQuantityRulesVariantIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<QuantityRuleUserError>;
  }
  
  /**
   * The input fields to create a refund.
   */
  export interface RefundInput {
    
    /**
     * The currency that is used to refund the order. This must be the presentment currency, which is the currency used by the customer. This is a required field for orders where the currency and presentment currency differ.
     */
    currency?: CurrencyCode;
    
    /**
     * The ID of the order that's being refunded.
     */
    orderId: string;
    
    /**
     * An optional note that's attached to the refund.
     */
    note?: string;
    
    /**
     * Whether to send a refund notification to the customer.
     */
    notify?: boolean;
    
    /**
     * The input fields that are required to reimburse shipping costs.
     */
    shipping?: ShippingRefundInput;
    
    /**
     * A list of line items to refund.
     */
    refundLineItems?: Array<RefundLineItemInput>;
    
    /**
     * A list of duties to refund.
     */
    refundDuties?: Array<RefundDutyInput>;
    
    /**
     * A list of transactions involved in the refund.
     */
    transactions?: Array<OrderTransactionInput>;
  }
  
  /**
   * The input fields that are required to reimburse shipping costs.
   */
  export interface ShippingRefundInput {
    
    /**
     * The monetary value of the shipping fees to be reimbursed.
     */
    amount?: Money;
    
    /**
     * Whether a full refund is provided.
     */
    fullRefund?: boolean;
  }
  
  /**
   * The input fields for the information needed to create an order transaction.
   */
  export interface OrderTransactionInput {
    
    /**
     * The amount of money for this transaction.
     */
    amount: Money;
    
    /**
     * The payment gateway to use for this transaction.
     */
    gateway: string;
    
    /**
     * The kind of transaction.
     */
    kind: OrderTransactionKind;
    
    /**
     * The ID of the order associated with the transaction.
     */
    orderId: string;
    
    /**
     * The ID of the optional parent transaction, for example the authorization of a capture.
     */
    parentId?: string;
  }
  
  /**
   * Return type for `refundCreate` mutation.
   */
  export interface RefundCreatePayload {
    
    /**
     * The order associated with the created refund.
     */
    order?: Order;
    
    /**
     * The created refund.
     */
    refund?: Refund;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for approving a customer's return request.
   */
  export interface ReturnApproveRequestInput {
    
    /**
     * The ID of the return that's being approved.
     */
    id: string;
  }
  
  /**
   * Return type for `returnApproveRequest` mutation.
   */
  export interface ReturnApproveRequestPayload {
    
    /**
     * The approved return.
     */
    return?: Return;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * An error that occurs during the execution of a return mutation.
   */
  export interface ReturnUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ReturnErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ReturnUserError`.
   */
  export const enum ReturnErrorCode {
    
    /**
     * Unexpected internal error happened.
     */
    INTERNAL_ERROR = 'INTERNAL_ERROR',
    
    /**
     * Too many arguments provided.
     */
    TOO_MANY_ARGUMENTS = 'TOO_MANY_ARGUMENTS',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value should be equal to the value allowed.
     */
    EQUAL_TO = 'EQUAL_TO',
    
    /**
     * The input value should be greater than the minimum allowed value.
     */
    GREATER_THAN = 'GREATER_THAN',
    
    /**
     * The input value should be greater than or equal to the minimum value allowed.
     */
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value should be less than the maximum value allowed.
     */
    LESS_THAN = 'LESS_THAN',
    
    /**
     * The input value should be less than or equal to the maximum value allowed.
     */
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO',
    
    /**
     * The input value is not a number.
     */
    NOT_A_NUMBER = 'NOT_A_NUMBER',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value is too big.
     */
    TOO_BIG = 'TOO_BIG',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT',
    
    /**
     * The input value is the wrong length.
     */
    WRONG_LENGTH = 'WRONG_LENGTH',
    
    /**
     * The requested resource already exists.
     */
    ALREADY_EXISTS = 'ALREADY_EXISTS',
    
    /**
     * A requested resource could not be created.
     */
    CREATION_FAILED = 'CREATION_FAILED',
    
    /**
     * A required feature is not enabled.
     */
    FEATURE_NOT_ENABLED = 'FEATURE_NOT_ENABLED',
    
    /**
     * A resource was not in the correct state for the operation to succeed.
     */
    INVALID_STATE = 'INVALID_STATE',
    
    /**
     * A requested notification could not be sent.
     */
    NOTIFICATION_FAILED = 'NOTIFICATION_FAILED',
    
    /**
     * A requested item is not editable.
     */
    NOT_EDITABLE = 'NOT_EDITABLE',
    
    /**
     * A requested item could not be found.
     */
    NOT_FOUND = 'NOT_FOUND'
  }
  
  /**
   * Return type for `returnCancel` mutation.
   */
  export interface ReturnCancelPayload {
    
    /**
     * The canceled return.
     */
    return?: Return;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * Return type for `returnClose` mutation.
   */
  export interface ReturnClosePayload {
    
    /**
     * The closed return.
     */
    return?: Return;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * The input fields for a return.
   */
  export interface ReturnInput {
    
    /**
     * The ID of the order to be returned.
     */
    orderId: string;
    
    /**
     * The return line items list to be handled.
     */
    returnLineItems: Array<ReturnLineItemInput>;
    
    /**
     * When `true` the customer will receive a notification if there's an `Order.email` present.
     */
    notifyCustomer?: boolean;
    
    /**
     * The UTC date and time when the return was first solicited by the customer.
     */
    requestedAt?: DateTime;
  }
  
  /**
   * The input fields for a return line item.
   */
  export interface ReturnLineItemInput {
    
    /**
     * The ID of the fulfillment line item to be returned.
     * Specifically, this field expects a `FulfillmentLineItem.id`.
     * 
     */
    fulfillmentLineItemId: string;
    
    /**
     * The quantity of the item to be returned.
     */
    quantity: number;
    
    /**
     * The reason for the item to be returned.
     */
    returnReason: ReturnReason;
    
    /**
     * A note about the reason that the item is being returned.
     * Maximum length: 255 characters.
     * 
     */
    returnReasonNote?: string;
  }
  
  /**
   * Return type for `returnCreate` mutation.
   */
  export interface ReturnCreatePayload {
    
    /**
     * The created return.
     */
    return?: Return;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * The input fields for declining a customer's return request.
   */
  export interface ReturnDeclineRequestInput {
    
    /**
     * The ID of the return that's being declined.
     */
    id: string;
    
    /**
     * The reason why the merchant declined the customer's return request.
     */
    declineReason: ReturnDeclineReason;
  }
  
  /**
   * Return type for `returnDeclineRequest` mutation.
   */
  export interface ReturnDeclineRequestPayload {
    
    /**
     * The declined return.
     */
    return?: Return;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * The input fields to refund a return.
   */
  export interface ReturnRefundInput {
    
    /**
     * The ID of the return.
     */
    returnId: string;
    
    /**
     * A list of return line items to refund.
     */
    returnRefundLineItems: Array<ReturnRefundLineItemInput>;
    
    /**
     * The shipping amount to refund.
     */
    refundShipping?: RefundShippingInput;
    
    /**
     * A list of duties to refund.
     */
    refundDuties?: Array<RefundDutyInput>;
    
    /**
     * A list of transactions involved in refunding the return.
     */
    orderTransactions?: Array<ReturnRefundOrderTransactionInput>;
    
    /**
     * Whether to send a refund notification to the customer.
     */
    notifyCustomer?: boolean;
  }
  
  /**
   * The input fields to create order transactions when refunding a return.
   */
  export interface ReturnRefundOrderTransactionInput {
    
    /**
     * The amount of money for the transaction in the presentment currency of the order.
     */
    transactionAmount: MoneyInput;
    
    /**
     * The ID of the parent order transaction. The transaction must be of kind `CAPTURE` or a `SALE`.
     */
    parentId: string;
  }
  
  /**
   * Return type for `returnRefund` mutation.
   */
  export interface ReturnRefundPayload {
    
    /**
     * The created refund.
     */
    refund?: Refund;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * Return type for `returnReopen` mutation.
   */
  export interface ReturnReopenPayload {
    
    /**
     * The reopened return.
     */
    return?: Return;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * The input fields for requesting a return.
   */
  export interface ReturnRequestInput {
    
    /**
     * The ID of the order that's being returned.
     */
    orderId: string;
    
    /**
     * The line items that are being handled in the return.
     */
    returnLineItems: Array<ReturnRequestLineItemInput>;
  }
  
  /**
   * The input fields for a return line item.
   */
  export interface ReturnRequestLineItemInput {
    
    /**
     * The ID of the fulfillment line item to be returned.
     * Specifically, this field expects a `FulfillmentLineItem.id`.
     * 
     */
    fulfillmentLineItemId: string;
    
    /**
     * The quantity of the item that's being returned.
     */
    quantity: number;
    
    /**
     * The reason why the line item is being returned.
     */
    returnReason: ReturnReason;
    
    /**
     * A note from the customer that describes the item to be returned.
     * For example, the note can communicate issues with the item to the merchant.
     * Maximum length: 300 characters.
     * 
     */
    customerNote?: string;
  }
  
  /**
   * Return type for `returnRequest` mutation.
   */
  export interface ReturnRequestPayload {
    
    /**
     * The requested return.
     */
    return?: Return;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * The input fields for a reverse delivery line item.
   */
  export interface ReverseDeliveryLineItemInput {
    
    /**
     * The ID of the related reverse fulfillment order line item.
     */
    reverseFulfillmentOrderLineItemId: string;
    
    /**
     * The quantity of the item to be included in the delivery.
     */
    quantity: number;
  }
  
  /**
   * The input fields for tracking information about a return delivery.
   */
  export interface ReverseDeliveryTrackingInput {
    
    /**
     * The tracking number for the label.
     */
    number?: string;
    
    /**
     * The tracking URL for the carrier. If the carrier isn't supported by Shopify, then provide the tracking URL of the delivery.
     */
    url?: URL;
  }
  
  /**
   * The input fields for a reverse label.
   */
  export interface ReverseDeliveryLabelInput {
    
    /**
     * The URL of the label file. If a label file was uploaded to be attached to the delivery, then provide the temporary staged URL.
     */
    fileUrl: URL;
  }
  
  /**
   * Return type for `reverseDeliveryCreateWithShipping` mutation.
   */
  export interface ReverseDeliveryCreateWithShippingPayload {
    
    /**
     * The created reverse delivery.
     */
    reverseDelivery?: ReverseDelivery;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * The input fields to dispose a reverse delivery line item.
   */
  export interface ReverseDeliveryDisposeInput {
    
    /**
     * The ID of the reverse delivery line item.
     */
    reverseDeliveryLineItemId: string;
    
    /**
     * The quantity of the reverse delivery line item to dispose.
     */
    quantity: number;
    
    /**
     * The final arrangement for the reverse delivery line item.
     */
    dispositionType: ReverseFulfillmentOrderDispositionType;
    
    /**
     * The ID of the location where the reverse delivery line item is to be disposed. This is required
     *           when the disposition type is RESTOCKED.
     */
    locationId?: string;
  }
  
  /**
   * Return type for `reverseDeliveryDispose` mutation.
   */
  export interface ReverseDeliveryDisposePayload {
    
    /**
     * The disposed reverse delivery line items.
     */
    reverseDeliveryLineItems?: Array<ReverseDeliveryLineItem>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * Return type for `reverseDeliveryShippingUpdate` mutation.
   */
  export interface ReverseDeliveryShippingUpdatePayload {
    
    /**
     * The updated reverse delivery.
     */
    reverseDelivery?: ReverseDelivery;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * The input fields to dispose a reverse fulfillment order line item.
   */
  export interface ReverseFulfillmentOrderDisposeInput {
    
    /**
     * The ID of the reverse fulfillment order line item.
     */
    reverseFulfillmentOrderLineItemId: string;
    
    /**
     * The quantity of the reverse fulfillment order line item to dispose.
     */
    quantity: number;
    
    /**
     * The ID of the location where the reverse fulfillment order line item is to be disposed.
     *         This is required when the disposition type is RESTOCKED.
     */
    locationId?: string;
    
    /**
     * The final arrangement for the reverse fulfillment order line item.
     */
    dispositionType: ReverseFulfillmentOrderDispositionType;
  }
  
  /**
   * Return type for `reverseFulfillmentOrderDispose` mutation.
   */
  export interface ReverseFulfillmentOrderDisposePayload {
    
    /**
     * The disposed reverse fulfillment order line items.
     */
    reverseFulfillmentOrderLineItems?: Array<ReverseFulfillmentOrderLineItem>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ReturnUserError>;
  }
  
  /**
   * The input fields to create a saved search.
   */
  export interface SavedSearchCreateInput {
    
    /**
     * The type of resource this saved search is searching in.
     */
    resourceType: SearchResultType;
    
    /**
     * A descriptive name of the saved search.
     */
    name: string;
    
    /**
     * The query string of a saved search. This includes search terms and filters.
     */
    query: string;
  }
  
  /**
   * Return type for `savedSearchCreate` mutation.
   */
  export interface SavedSearchCreatePayload {
    
    /**
     * The saved search that was created.
     */
    savedSearch?: SavedSearch;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields to delete a saved search.
   */
  export interface SavedSearchDeleteInput {
    
    /**
     * ID of the saved search to delete.
     */
    id: string;
  }
  
  /**
   * Return type for `savedSearchDelete` mutation.
   */
  export interface SavedSearchDeletePayload {
    
    /**
     * The ID of the saved search that was deleted.
     */
    deletedSavedSearchId?: string;
    
    /**
     * The shop of the saved search that was deleted.
     */
    shop: Shop;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields to update a saved search.
   */
  export interface SavedSearchUpdateInput {
    
    /**
     * ID of the saved search to update.
     */
    id: string;
    
    /**
     * A descriptive name of the saved search.
     */
    name?: string;
    
    /**
     * The query string of a saved search. This included search terms and filters.
     */
    query?: string;
  }
  
  /**
   * Return type for `savedSearchUpdate` mutation.
   */
  export interface SavedSearchUpdatePayload {
    
    /**
     * The saved search that was updated.
     */
    savedSearch?: SavedSearch;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for a script tag. This input object is used when creating or updating
   * a script tag to specify its URL, where it should be included, and how it will be cached.
   * 
   */
  export interface ScriptTagInput {
    
    /**
     * The URL of the remote script. For example: `https://example.com/path/to/script.js`.
     */
    src?: URL;
    
    /**
     * The page or pages on the online store where the script should be included.
     */
    displayScope?: ScriptTagDisplayScope;
    
    /**
     * Whether the Shopify CDN can cache and serve the script tag.
     * If `true`, then the script will be cached and served by the CDN.
     * The cache expires 15 minutes after the script tag is successfully returned.
     * If `false`, then the script is served as is.
     * The default value is `false`.
     * 
     */
    cache?: boolean;
  }
  
  /**
   * Return type for `scriptTagCreate` mutation.
   */
  export interface ScriptTagCreatePayload {
    
    /**
     * The script tag that was created.
     */
    scriptTag?: ScriptTag;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `scriptTagDelete` mutation.
   */
  export interface ScriptTagDeletePayload {
    
    /**
     * The ID of the deleted script tag.
     */
    deletedScriptTagId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `scriptTagUpdate` mutation.
   */
  export interface ScriptTagUpdatePayload {
    
    /**
     * The script tag that was updated.
     */
    scriptTag?: ScriptTag;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `segmentCreate` mutation.
   */
  export interface SegmentCreatePayload {
    
    /**
     * The newly created segment.
     */
    segment?: Segment;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `segmentDelete` mutation.
   */
  export interface SegmentDeletePayload {
    
    /**
     * ID of the deleted segment.
     */
    deletedSegmentId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `segmentUpdate` mutation.
   */
  export interface SegmentUpdatePayload {
    
    /**
     * The updated segment.
     */
    segment?: Segment;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `sellingPlanGroupAddProductVariants` mutation.
   */
  export interface SellingPlanGroupAddProductVariantsPayload {
    
    /**
     * The updated selling plan group.
     */
    sellingPlanGroup?: SellingPlanGroup;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SellingPlanGroupUserError>;
  }
  
  /**
   * Return type for `sellingPlanGroupAddProducts` mutation.
   */
  export interface SellingPlanGroupAddProductsPayload {
    
    /**
     * The updated selling plan group.
     */
    sellingPlanGroup?: SellingPlanGroup;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SellingPlanGroupUserError>;
  }
  
  /**
   * The input fields required to create or update a selling plan group.
   */
  export interface SellingPlanGroupInput {
    
    /**
     * Buyer facing label of the selling plan group.
     */
    name?: string;
    
    /**
     * ID for app, exposed in Liquid and product JSON.
     */
    appId?: string;
    
    /**
     * Merchant facing label of the selling plan group.
     */
    merchantCode?: string;
    
    /**
     * Merchant facing description of the selling plan group.
     */
    description?: string;
    
    /**
     * List of selling plans to create.
     */
    sellingPlansToCreate?: Array<SellingPlanInput>;
    
    /**
     * List of selling plans to update.
     */
    sellingPlansToUpdate?: Array<SellingPlanInput>;
    
    /**
     * List of selling plans ids to delete.
     */
    sellingPlansToDelete?: Array<string>;
    
    /**
     * The values of all options available on the selling plan group. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
     */
    options?: Array<string>;
    
    /**
     * Relative value for display purposes of the selling plan group. A lower position will be displayed before a higher one.
     */
    position?: number;
  }
  
  /**
   * The input fields to create or update a selling plan.
   */
  export interface SellingPlanInput {
    
    /**
     * ID of the selling plan.
     */
    id?: string;
    
    /**
     * Buyer facing string which describes the selling plan content.
     */
    name?: string;
    
    /**
     * Buyer facing string which describes the selling plan commitment.
     */
    description?: string;
    
    /**
     * Selling plan policy which describes the billing details.
     */
    billingPolicy?: SellingPlanBillingPolicyInput;
    
    /**
     * A selling plan policy which describes the delivery details.
     */
    deliveryPolicy?: SellingPlanDeliveryPolicyInput;
    
    /**
     * A selling plan policy which describes the inventory details.
     */
    inventoryPolicy?: SellingPlanInventoryPolicyInput;
    
    /**
     * The pricing policies which describe the pricing details. Each selling plan
     * can only contain a maximum of 2 pricing policies.
     * 
     */
    pricingPolicies?: Array<SellingPlanPricingPolicyInput>;
    
    /**
     * The values of all options available on the selling plan. Selling plans are grouped together in Liquid when they're created by the same app, and have the same `selling_plan_group.name` and `selling_plan_group.options` values.
     */
    options?: Array<string>;
    
    /**
     * Relative value for display purposes of this plan. A lower position will be displayed before a higher one.
     */
    position?: number;
    
    /**
     * The category used to classify this selling plan for reporting purposes.
     */
    category?: SellingPlanCategory;
  }
  
  /**
   * The input fields that are required to create or update a billing policy type.
   */
  export interface SellingPlanBillingPolicyInput {
    
    /**
     * The fixed billing policy details.
     */
    fixed?: SellingPlanFixedBillingPolicyInput;
    
    /**
     * The recurring billing policy details.
     */
    recurring?: SellingPlanRecurringBillingPolicyInput;
  }
  
  /**
   * The input fields required to create or update a fixed billing policy.
   */
  export interface SellingPlanFixedBillingPolicyInput {
    
    /**
     * When to capture the payment for the amount due.
     */
    remainingBalanceChargeTrigger?: SellingPlanRemainingBalanceChargeTrigger;
    
    /**
     * The date and time to capture the full payment.
     */
    remainingBalanceChargeExactTime?: DateTime;
    
    /**
     * The period after capturing the payment for the amount due (`remainingBalanceChargeTrigger`), and before capturing the full payment. Expressed as an ISO8601 duration.
     */
    remainingBalanceChargeTimeAfterCheckout?: string;
    
    /**
     * The checkout charge policy for the selling plan.
     */
    checkoutCharge?: SellingPlanCheckoutChargeInput;
  }
  
  /**
   * The input fields that are required to create or update a checkout charge.
   */
  export interface SellingPlanCheckoutChargeInput {
    
    /**
     * The checkout charge type defined by the policy.
     */
    type?: SellingPlanCheckoutChargeType;
    
    /**
     * The checkout charge value defined by the policy.
     */
    value?: SellingPlanCheckoutChargeValueInput;
  }
  
  /**
   * The input fields required to create or update an checkout charge value.
   */
  export interface SellingPlanCheckoutChargeValueInput {
    
    /**
     * The percentage value.
     */
    percentage?: number;
    
    /**
     * The fixed value for an checkout charge.
     */
    fixedValue?: Decimal;
  }
  
  /**
   * The input fields required to create or update a recurring billing policy.
   */
  export interface SellingPlanRecurringBillingPolicyInput {
    
    /**
     * The billing frequency, it can be either: day, week, month or year.
     */
    interval?: SellingPlanInterval;
    
    /**
     * The number of intervals between billings.
     */
    intervalCount?: number;
    
    /**
     * Specific anchor dates upon which the billing interval calculations should be made.
     */
    anchors?: Array<SellingPlanAnchorInput>;
    
    /**
     * Minimum number of billing iterations.
     */
    minCycles?: number;
    
    /**
     * Maximum number of billing iterations.
     */
    maxCycles?: number;
  }
  
  /**
   * The input fields required to create or update a selling plan anchor.
   */
  export interface SellingPlanAnchorInput {
    
    /**
     * Represents the anchor type, must be one of WEEKDAY, MONTHDAY, YEARDAY.
     * 
     */
    type?: SellingPlanAnchorType;
    
    /**
     * The day of the anchor.
     * 
     * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
     * the days of the week according to ISO 8601, where 1 is Monday.
     * 
     * If `type` isn't WEEKDAY, then the value must be between 1-31.
     * 
     */
    day?: number;
    
    /**
     * The month of the anchor. If type is different than YEARDAY, then the value must
     * be `null` or between 1-12.
     * 
     */
    month?: number;
    
    /**
     * The cutoff day of the anchor.
     * 
     * If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
     * the days of the week according to ISO 8601, where 1 is Monday.
     * 
     * If `type` is MONTHDAY, then the value must be between 1-31.
     * 
     * If `type` is YEARDAY, then the value must be `null`.
     * 
     * This field should only be set if the cutoff field for the delivery policy is `null`.
     * 
     */
    cutoffDay?: number;
  }
  
  /**
   * The input fields that are required to create or update a delivery policy.
   */
  export interface SellingPlanDeliveryPolicyInput {
    
    /**
     * The fixed delivery policy details.
     */
    fixed?: SellingPlanFixedDeliveryPolicyInput;
    
    /**
     * The recurring delivery policy details.
     */
    recurring?: SellingPlanRecurringDeliveryPolicyInput;
  }
  
  /**
   * The input fields required to create or update a fixed delivery policy.
   */
  export interface SellingPlanFixedDeliveryPolicyInput {
    
    /**
     * The specific anchor dates upon which the delivery interval calculations should be made.
     */
    anchors?: Array<SellingPlanAnchorInput>;
    
    /**
     * What triggers the fulfillment.
     */
    fulfillmentTrigger?: SellingPlanFulfillmentTrigger;
    
    /**
     * The date and time when the fulfillment should trigger.
     */
    fulfillmentExactTime?: DateTime;
    
    /**
     * A buffer period for orders to be included in a cycle.
     */
    cutoff?: number;
    
    /**
     * Whether the delivery policy is merchant or buyer-centric.
     */
    intent?: SellingPlanFixedDeliveryPolicyIntent;
    
    /**
     * The pre-anchor behavior.
     */
    preAnchorBehavior?: SellingPlanFixedDeliveryPolicyPreAnchorBehavior;
  }
  
  /**
   * The input fields to create or update a recurring delivery policy.
   */
  export interface SellingPlanRecurringDeliveryPolicyInput {
    
    /**
     * The delivery frequency, it can be either: day, week, month or year.
     */
    interval?: SellingPlanInterval;
    
    /**
     * The number of intervals between deliveries.
     */
    intervalCount?: number;
    
    /**
     * The specific anchor dates upon which the delivery interval calculations should be made.
     */
    anchors?: Array<SellingPlanAnchorInput>;
    
    /**
     * A buffer period for orders to be included in a cycle.
     */
    cutoff?: number;
    
    /**
     * Intention of this delivery policy, it can be either: delivery or fulfillment.
     */
    intent?: SellingPlanRecurringDeliveryPolicyIntent;
    
    /**
     * The pre-anchor behavior. It can be either: asap or next.
     */
    preAnchorBehavior?: SellingPlanRecurringDeliveryPolicyPreAnchorBehavior;
  }
  
  /**
   * The input fields required to create or update an inventory policy.
   */
  export interface SellingPlanInventoryPolicyInput {
    
    /**
     * When to reserve inventory for the order. The value must be ON_FULFILLMENT or ON_SALE.
     */
    reserve?: SellingPlanReserve;
  }
  
  /**
   * The input fields required to create or update a selling plan pricing policy.
   */
  export interface SellingPlanPricingPolicyInput {
    
    /**
     * Recurring pricing policy details.
     */
    recurring?: SellingPlanRecurringPricingPolicyInput;
    
    /**
     * Fixed pricing policy details.
     */
    fixed?: SellingPlanFixedPricingPolicyInput;
  }
  
  /**
   * The input fields required to create or update a recurring selling plan pricing policy.
   */
  export interface SellingPlanRecurringPricingPolicyInput {
    
    /**
     * ID of the pricing policy.
     */
    id?: string;
    
    /**
     * Price adjustment type defined by the policy.
     */
    adjustmentType?: SellingPlanPricingPolicyAdjustmentType;
    
    /**
     * Price adjustment value defined by the policy.
     */
    adjustmentValue?: SellingPlanPricingPolicyValueInput;
    
    /**
     * Cycle after which the pricing policy applies.
     */
    afterCycle: number;
  }
  
  /**
   * The input fields required to create or update a pricing policy adjustment value.
   */
  export interface SellingPlanPricingPolicyValueInput {
    
    /**
     * The percentage value.
     */
    percentage?: number;
    
    /**
     * The fixed value for an fixed amount off or a new policy price.
     */
    fixedValue?: Decimal;
  }
  
  /**
   * The input fields required to create or update a fixed selling plan pricing policy.
   */
  export interface SellingPlanFixedPricingPolicyInput {
    
    /**
     * ID of the pricing policy.
     */
    id?: string;
    
    /**
     * Price adjustment type defined by the policy.
     */
    adjustmentType?: SellingPlanPricingPolicyAdjustmentType;
    
    /**
     * Price adjustment value defined by the policy.
     */
    adjustmentValue?: SellingPlanPricingPolicyValueInput;
  }
  
  /**
   * The input fields for resource association with a Selling Plan Group.
   */
  export interface SellingPlanGroupResourceInput {
    
    /**
     * The IDs of the Variants to add to the Selling Plan Group.
     */
    productVariantIds?: Array<string>;
    
    /**
     * The IDs of the Products to add to the Selling Plan Group.
     */
    productIds?: Array<string>;
  }
  
  /**
   * Return type for `sellingPlanGroupCreate` mutation.
   */
  export interface SellingPlanGroupCreatePayload {
    
    /**
     * The created selling plan group object.
     */
    sellingPlanGroup?: SellingPlanGroup;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SellingPlanGroupUserError>;
  }
  
  /**
   * Return type for `sellingPlanGroupDelete` mutation.
   */
  export interface SellingPlanGroupDeletePayload {
    
    /**
     * The ID of the deleted selling plan group object.
     */
    deletedSellingPlanGroupId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SellingPlanGroupUserError>;
  }
  
  /**
   * Return type for `sellingPlanGroupRemoveProductVariants` mutation.
   */
  export interface SellingPlanGroupRemoveProductVariantsPayload {
    
    /**
     * The removed product variant ids.
     */
    removedProductVariantIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SellingPlanGroupUserError>;
  }
  
  /**
   * Return type for `sellingPlanGroupRemoveProducts` mutation.
   */
  export interface SellingPlanGroupRemoveProductsPayload {
    
    /**
     * The removed product ids.
     */
    removedProductIds?: Array<string>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SellingPlanGroupUserError>;
  }
  
  /**
   * Return type for `sellingPlanGroupUpdate` mutation.
   */
  export interface SellingPlanGroupUpdatePayload {
    
    /**
     * The IDs of the deleted Subscription Plans.
     */
    deletedSellingPlanIds?: Array<string>;
    
    /**
     * The updated Selling Plan Group.
     */
    sellingPlanGroup?: SellingPlanGroup;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SellingPlanGroupUserError>;
  }
  
  /**
   * Return type for `serverPixelCreate` mutation.
   */
  export interface ServerPixelCreatePayload {
    
    /**
     * The new server pixel.
     */
    serverPixel?: ServerPixel;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ErrorsServerPixelUserError>;
  }
  
  /**
   * Return type for `serverPixelDelete` mutation.
   */
  export interface ServerPixelDeletePayload {
    
    /**
     * The ID of the server pixel that was deleted, if one was deleted.
     */
    deletedServerPixelId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ErrorsServerPixelUserError>;
  }
  
  /**
   * Return type for `shippingPackageDelete` mutation.
   */
  export interface ShippingPackageDeletePayload {
    
    /**
     * The ID of the deleted shipping package.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `shippingPackageMakeDefault` mutation.
   */
  export interface ShippingPackageMakeDefaultPayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for a custom shipping package used to pack shipment.
   */
  export interface CustomShippingPackageInput {
    
    /**
     * Weight of the empty shipping package.
     */
    weight?: WeightInput;
    
    /**
     * Outside dimensions of the empty shipping package.
     */
    dimensions?: ObjectDimensionsInput;
    
    /**
     * The default package is the one used to calculate shipping costs on checkout.
     */
    default?: boolean;
    
    /**
     * Descriptive name for the package.
     */
    name?: string;
    
    /**
     * Type of package.
     */
    type?: ShippingPackageType;
  }
  
  /**
   * The input fields for dimensions of an object.
   */
  export interface ObjectDimensionsInput {
    
    /**
     * The length in `unit`s.
     */
    length: number;
    
    /**
     * The width in `unit`s.
     */
    width: number;
    
    /**
     * The height in `unit`s.
     */
    height: number;
    
    /**
     * Unit of measurement for `length`, `width`, and `height`.
     */
    unit: LengthUnit;
  }
  
  /**
   * Units of measurement for length.
   */
  export const enum LengthUnit {
    
    /**
     * 1000 millimeters equals 1 meter.
     */
    MILLIMETERS = 'MILLIMETERS',
    
    /**
     * 100 centimeters equals 1 meter.
     */
    CENTIMETERS = 'CENTIMETERS',
    
    /**
     * Metric system unit of length.
     */
    METERS = 'METERS',
    
    /**
     * 12 inches equals 1 foot.
     */
    INCHES = 'INCHES',
    
    /**
     * Imperial system unit of length.
     */
    FEET = 'FEET',
    
    /**
     * 1 yard equals 3 feet.
     */
    YARDS = 'YARDS'
  }
  
  /**
   * Type of a shipping package.
   */
  export const enum ShippingPackageType {
    
    /**
     * A shipping box.
     */
    BOX = 'BOX',
    
    /**
     * A flat rate packaging supplied by a carrier.
     */
    FLAT_RATE = 'FLAT_RATE',
    
    /**
     * An envelope.
     */
    ENVELOPE = 'ENVELOPE',
    
    /**
     * A soft-pack, bubble-wrap or vinyl envelope.
     */
    SOFT_PACK = 'SOFT_PACK'
  }
  
  /**
   * Return type for `shippingPackageUpdate` mutation.
   */
  export interface ShippingPackageUpdatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `shopLocaleDisable` mutation.
   */
  export interface ShopLocaleDisablePayload {
    
    /**
     * ISO code of the locale that was deleted.
     */
    locale?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `shopLocaleEnable` mutation.
   */
  export interface ShopLocaleEnablePayload {
    
    /**
     * ISO code of the locale that was enabled.
     */
    shopLocale?: ShopLocale;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields for a shop locale.
   * 
   */
  export interface ShopLocaleInput {
    
    /**
     * Whether the locale is published. Only published locales are visible to the buyer.
     */
    published?: boolean;
    
    /**
     * The market web presences on which the locale should be enabled. Pass in an empty array to remove the locale across all market web presences.
     */
    marketWebPresenceIds?: Array<string>;
  }
  
  /**
   * Return type for `shopLocaleUpdate` mutation.
   */
  export interface ShopLocaleUpdatePayload {
    
    /**
     * The locale that was updated.
     */
    shopLocale?: ShopLocale;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields required to update a policy.
   */
  export interface ShopPolicyInput {
    
    /**
     * The shop policy type.
     */
    type: ShopPolicyType;
    
    /**
     * Policy text, maximum size of 512kb.
     */
    body: string;
  }
  
  /**
   * Return type for `shopPolicyUpdate` mutation.
   */
  export interface ShopPolicyUpdatePayload {
    
    /**
     * The shop policy that has been updated.
     */
    shopPolicy?: ShopPolicy;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ShopPolicyUserError>;
  }
  
  /**
   * An error that occurs during the execution of a shop policy mutation.
   */
  export interface ShopPolicyUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ShopPolicyErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ShopPolicyUserError`.
   */
  export const enum ShopPolicyErrorCode {
    
    /**
     * The input value is too big.
     */
    TOO_BIG = 'TOO_BIG'
  }
  
  /**
   * The input fields for a resource feedback object.
   */
  export interface ResourceFeedbackCreateInput {
    
    /**
     * The date and time when the feedback was generated. Used to help determine whether
     * incoming feedback is outdated compared to existing feedback.
     * 
     */
    feedbackGeneratedAt: DateTime;
    
    /**
     * If the feedback state is `requires_action`, then you can send a string message that communicates the action to be taken by the merchant.
     * The string must be a single message up to 100 characters long and must end with a period.
     * You need to adhere to the message formatting rules or your requests will fail:
     * - `[Explanation of the problem]. [Suggested action].`
     * 
     * **Examples:**
     * - `[Your app name]` isn't connected. Connect your account to use this sales channel. `[Learn more]`
     * - `[Your app name]` isn't configured. Agree to the terms and conditions to use this app. `[Learn more]`
     * Both `Your app name` and `Learn more` (a button which directs merchants to your app) are automatically populated in the Shopify admin.
     * 
     */
    messages?: Array<string>;
    
    /**
     * The state of the feedback and whether it requires merchant action.
     */
    state: ResourceFeedbackState;
  }
  
  /**
   * Return type for `shopResourceFeedbackCreate` mutation.
   */
  export interface ShopResourceFeedbackCreatePayload {
    
    /**
     * The shop feedback that's created.
     */
    feedback?: AppFeedback;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ShopResourceFeedbackCreateUserError>;
  }
  
  /**
   * An error that occurs during the execution of `ShopResourceFeedbackCreate`.
   */
  export interface ShopResourceFeedbackCreateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ShopResourceFeedbackCreateUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ShopResourceFeedbackCreateUserError`.
   */
  export const enum ShopResourceFeedbackCreateUserErrorCode {
    
    /**
     * The feedback for a later version of the resource was already accepted.
     */
    OUTDATED_FEEDBACK = 'OUTDATED_FEEDBACK',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT'
  }
  
  /**
   * The required fields and parameters to generate the URL upload an"
   * asset to Shopify.
   * 
   * Deprecated in favor of
   * [StagedUploadInput](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadInput),
   * which is used by the
   * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
   * 
   */
  export interface StagedUploadTargetGenerateInput {
    
    /**
     * The resource type being uploaded.
     */
    resource: StagedUploadTargetGenerateUploadResource;
    
    /**
     * The filename of the asset being uploaded.
     */
    filename: string;
    
    /**
     * The MIME type of the asset being uploaded.
     */
    mimeType: string;
    
    /**
     * The HTTP method to be used by the staged upload.
     */
    httpMethod?: StagedUploadHttpMethodType;
    
    /**
     * The size of the file to upload, in bytes.
     */
    fileSize?: UnsignedInt64;
  }
  
  /**
   * The resource type to receive.
   */
  export const enum StagedUploadTargetGenerateUploadResource {
    
    /**
     * An image associated with a collection.
     * 
     * For example, after uploading an image, you can use the
     * [collectionUpdate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/collectionUpdate)
     * to add the image to a collection.
     * 
     */
    COLLECTION_IMAGE = 'COLLECTION_IMAGE',
    
    /**
     * Represents any file other than HTML.
     * 
     * For example, after uploading the file, you can add the file to the
     * [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
     * [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
     * 
     */
    FILE = 'FILE',
    
    /**
     * An image.
     * 
     * For example, after uploading an image, you can add the image to a product using the
     * [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)
     * or to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
     * [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
     * 
     */
    IMAGE = 'IMAGE',
    
    /**
     * A Shopify hosted 3d model.
     * 
     * For example, after uploading the 3d model, you can add the 3d model to a product using the
     * [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).
     * 
     */
    MODEL_3D = 'MODEL_3D',
    
    /**
     * An image that's associated with a product.
     * 
     * For example, after uploading the image, you can add the image to a product using the
     * [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).
     * 
     */
    PRODUCT_IMAGE = 'PRODUCT_IMAGE',
    
    /**
     * An image.
     * 
     * For example, after uploading the image, you can add the image to the
     * [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
     * [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
     * 
     */
    SHOP_IMAGE = 'SHOP_IMAGE',
    
    /**
     * A Shopify-hosted video.
     * 
     * For example, after uploading the video, you can add the video to a product using the
     * [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)
     * or to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
     * [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
     * 
     */
    VIDEO = 'VIDEO',
    
    /**
     * Represents bulk mutation variables.
     * 
     * For example, bulk mutation variables can be used for bulk operations using the
     * [bulkOperationRunMutation mutation](https://shopify.dev/api/admin-graphql/latest/mutations/bulkOperationRunMutation).
     * 
     */
    BULK_MUTATION_VARIABLES = 'BULK_MUTATION_VARIABLES',
    
    /**
     * Represents a label associated with a return.
     * 
     * For example, once uploaded, this resource can be used to [create a
     * ReverseDelivery](https://shopify.dev/api/admin-graphql/unstable/mutations/reverseDeliveryCreateWithShipping).
     * 
     */
    RETURN_LABEL = 'RETURN_LABEL',
    
    /**
     * Represents a redirect CSV file.
     * 
     * Example usage: This resource can be used for creating a
     * [UrlRedirectImport](https://shopify.dev/api/admin-graphql/2022-04/objects/UrlRedirectImport)
     * object for use in the
     * [urlRedirectImportCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate).
     * 
     */
    URL_REDIRECT_IMPORT = 'URL_REDIRECT_IMPORT'
  }
  
  /**
   * The possible HTTP methods that can be used when sending a request to upload a file using information from a
   * [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget).
   * 
   */
  export const enum StagedUploadHttpMethodType {
    
    /**
     * The POST HTTP method.
     */
    POST = 'POST',
    
    /**
     * The PUT HTTP method.
     */
    PUT = 'PUT'
  }
  
  /**
   * Return type for `stagedUploadTargetGenerate` mutation.
   */
  export interface StagedUploadTargetGeneratePayload {
    
    /**
     * The signed parameters that can be used to upload the asset.
     */
    parameters: Array<MutationsStagedUploadTargetGenerateUploadParameter>;
    
    /**
     * The signed URL where the asset can be uploaded.
     */
    url: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * A signed upload parameter for uploading an asset to Shopify.
   * 
   * Deprecated in favor of
   * [StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
   * which is used in
   * [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
   * and returned by the
   * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
   * 
   */
  export interface MutationsStagedUploadTargetGenerateUploadParameter {
    
    /**
     * The upload parameter name.
     */
    name: string;
    
    /**
     * The upload parameter value.
     */
    value: string;
  }
  
  /**
   * An image to be uploaded.
   * 
   * Deprecated in favor of
   * [StagedUploadInput](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadInput),
   * which is used by the
   * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
   * 
   */
  export interface StageImageInput {
    
    /**
     * The image resource.
     */
    resource: StagedUploadTargetGenerateUploadResource;
    
    /**
     * The image filename.
     */
    filename: string;
    
    /**
     * The image MIME type.
     */
    mimeType: string;
    
    /**
     * HTTP method to be used by the staged upload.
     */
    httpMethod?: StagedUploadHttpMethodType;
  }
  
  /**
   * Return type for `stagedUploadTargetsGenerate` mutation.
   */
  export interface StagedUploadTargetsGeneratePayload {
    
    /**
     * The staged upload targets that were generated.
     */
    urls?: Array<StagedUploadTarget>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Information about the staged target.
   * 
   * Deprecated in favor of
   * [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget),
   * which is returned by the
   * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
   * 
   */
  export interface StagedUploadTarget {
    
    /**
     * The parameters of an image to be uploaded.
     */
    parameters: Array<ImageUploadParameter>;
    
    /**
     * The image URL.
     */
    url: string;
  }
  
  /**
   * A parameter to upload an image.
   * 
   * Deprecated in favor of
   * [StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
   * which is used in
   * [StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
   * and returned by the
   * [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
   * 
   */
  export interface ImageUploadParameter {
    
    /**
     * The parameter name.
     */
    name: string;
    
    /**
     * The parameter value.
     */
    value: string;
  }
  
  /**
   * The input fields for generating staged upload targets.
   */
  export interface StagedUploadInput {
    
    /**
     * The file's intended Shopify resource type.
     */
    resource: StagedUploadTargetGenerateUploadResource;
    
    /**
     * The file's name and extension.
     */
    filename: string;
    
    /**
     * The file's MIME type.
     */
    mimeType: string;
    
    /**
     * The HTTP method to be used when sending a request to upload the file using the returned staged
     * upload target.
     * 
     */
    httpMethod?: StagedUploadHttpMethodType;
    
    /**
     * The size of the file to upload, in bytes. This is required when the request's resource property is set to
     * [VIDEO](https://shopify.dev/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#value-video)
     * or [MODEL_3D](https://shopify.dev/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#value-model3d).
     * 
     */
    fileSize?: UnsignedInt64;
  }
  
  /**
   * Return type for `stagedUploadsCreate` mutation.
   */
  export interface StagedUploadsCreatePayload {
    
    /**
     * The staged upload targets that were generated.
     */
    stagedTargets?: Array<StagedMediaUploadTarget>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Information about a staged upload target, which should be used to send a request to upload
   * the file.
   * 
   * For more information on the upload process, refer to
   * [Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
   * 
   */
  export interface StagedMediaUploadTarget {
    
    /**
     * Parameters needed to authenticate a request to upload the file.
     */
    parameters: Array<StagedUploadParameter>;
    
    /**
     * The URL to be passed as `originalSource` in
     * [CreateMediaInput](https://shopify.dev/api/admin-graphql/latest/input-objects/CreateMediaInput)
     * and [FileCreateInput](https://shopify.dev/api/admin-graphql/2022-04/input-objects/FileCreateInput)
     * for the [productCreateMedia](https://shopify.dev/api/admin-graphql/2022-04/mutations/productCreateMedia)
     * and [fileCreate](https://shopify.dev/api/admin-graphql/2022-04/mutations/fileCreate)
     * mutations.
     * 
     */
    resourceUrl?: URL;
    
    /**
     * The URL to use when sending an request to upload the file. Should be used in conjunction with
     * the parameters field.
     * 
     */
    url?: URL;
  }
  
  /**
   * The parameters required to authenticate a file upload request using a
   * [StagedMediaUploadTarget's url field](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-stagedmediauploadtarget-url).
   * 
   * For more information on the upload process, refer to
   * [Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
   * 
   */
  export interface StagedUploadParameter {
    
    /**
     * The parameter's name.
     */
    name: string;
    
    /**
     * The parameter's value.
     */
    value: string;
  }
  
  /**
   * Return type for `standardMetafieldDefinitionEnable` mutation.
   */
  export interface StandardMetafieldDefinitionEnablePayload {
    
    /**
     * The metafield definition that was created.
     */
    createdDefinition?: MetafieldDefinition;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<StandardMetafieldDefinitionEnableUserError>;
  }
  
  /**
   * An error that occurs during the execution of `StandardMetafieldDefinitionEnable`.
   */
  export interface StandardMetafieldDefinitionEnableUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: StandardMetafieldDefinitionEnableUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `StandardMetafieldDefinitionEnableUserError`.
   */
  export const enum StandardMetafieldDefinitionEnableUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The standard metafield definition template was not found.
     */
    TEMPLATE_NOT_FOUND = 'TEMPLATE_NOT_FOUND',
    
    /**
     * The maximum number of definitions per owner type has been exceeded.
     */
    LIMIT_EXCEEDED = 'LIMIT_EXCEEDED',
    
    /**
     * The namespace and key is already in use for a set of your metafields.
     */
    UNSTRUCTURED_ALREADY_EXISTS = 'UNSTRUCTURED_ALREADY_EXISTS',
    
    /**
     * The definition type is not eligible to be used as collection condition.
     */
    TYPE_NOT_ALLOWED_FOR_CONDITIONS = 'TYPE_NOT_ALLOWED_FOR_CONDITIONS'
  }
  
  /**
   * Return type for `standardMetaobjectDefinitionEnable` mutation.
   */
  export interface StandardMetaobjectDefinitionEnablePayload {
    
    /**
     * The metaobject definition that was enabled using the standard template.
     */
    metaobjectDefinition?: MetaobjectDefinition;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<MetaobjectUserError>;
  }
  
  /**
   * The input fields for a storefront access token.
   */
  export interface StorefrontAccessTokenInput {
    
    /**
     * A title for the storefront access token.
     */
    title: string;
  }
  
  /**
   * Return type for `storefrontAccessTokenCreate` mutation.
   */
  export interface StorefrontAccessTokenCreatePayload {
    
    /**
     * The user's shop.
     */
    shop: Shop;
    
    /**
     * The storefront access token.
     */
    storefrontAccessToken?: StorefrontAccessToken;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields to delete a storefront access token.
   */
  export interface StorefrontAccessTokenDeleteInput {
    
    /**
     * The ID of the storefront access token to delete.
     */
    id: string;
  }
  
  /**
   * Return type for `storefrontAccessTokenDelete` mutation.
   */
  export interface StorefrontAccessTokenDeletePayload {
    
    /**
     * The ID of the deleted storefront access token.
     */
    deletedStorefrontAccessTokenId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * The input fields required to complete a subscription billing attempt.
   */
  export interface SubscriptionBillingAttemptInput {
    
    /**
     * A unique key generated by the client to avoid duplicate payments. For more information, refer to [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
     */
    idempotencyKey: string;
    
    /**
     * The date and time used to calculate fulfillment intervals for a billing attempt that
     * successfully completed after the current anchor date. To prevent fulfillment from being
     * pushed to the next anchor date, this field can override the billing attempt date.
     * 
     */
    originTime?: DateTime;
    
    /**
     * Select the specific billing cycle to be billed.
     * Default to bill the current billing cycle if not specified.
     * 
     */
    billingCycleSelector?: SubscriptionBillingCycleSelector;
  }
  
  /**
   * Return type for `subscriptionBillingAttemptCreate` mutation.
   */
  export interface SubscriptionBillingAttemptCreatePayload {
    
    /**
     * The subscription billing attempt.
     */
    subscriptionBillingAttempt?: SubscriptionBillingAttempt;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<BillingAttemptUserError>;
  }
  
  /**
   * Represents an error that happens during the execution of a billing attempt mutation.
   */
  export interface BillingAttemptUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: BillingAttemptUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `BillingAttemptUserError`.
   */
  export const enum BillingAttemptUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * Subscription contract does not exist.
     */
    CONTRACT_NOT_FOUND = 'CONTRACT_NOT_FOUND',
    
    /**
     * Origin time cannot be before the contract creation time.
     */
    ORIGIN_TIME_BEFORE_CONTRACT_CREATION = 'ORIGIN_TIME_BEFORE_CONTRACT_CREATION',
    
    /**
     * Billing cycle selector cannot select upcoming billing cycle past limit.
     */
    UPCOMING_CYCLE_LIMIT_EXCEEDED = 'UPCOMING_CYCLE_LIMIT_EXCEEDED',
    
    /**
     * Billing cycle selector cannot select billing cycle outside of index range.
     */
    CYCLE_INDEX_OUT_OF_RANGE = 'CYCLE_INDEX_OUT_OF_RANGE',
    
    /**
     * Billing cycle selector cannot select billing cycle outside of start date range.
     */
    CYCLE_START_DATE_OUT_OF_RANGE = 'CYCLE_START_DATE_OUT_OF_RANGE',
    
    /**
     * Origin time needs to be within the selected billing cycle's start and end at date.
     */
    ORIGIN_TIME_OUT_OF_RANGE = 'ORIGIN_TIME_OUT_OF_RANGE',
    
    /**
     * Subscription contract is under review.
     */
    CONTRACT_UNDER_REVIEW = 'CONTRACT_UNDER_REVIEW',
    
    /**
     * Subscription contract cannot be billed once terminated.
     */
    CONTRACT_TERMINATED = 'CONTRACT_TERMINATED'
  }
  
  /**
   * Return type for `subscriptionBillingCycleContractDraftCommit` mutation.
   */
  export interface SubscriptionBillingCycleContractDraftCommitPayload {
    
    /**
     * The committed Subscription Billing Cycle Edited Contract object.
     */
    contract?: SubscriptionBillingCycleEditedContract;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Represents a Subscription Draft error.
   */
  export interface SubscriptionDraftUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: SubscriptionDraftErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `SubscriptionDraftUserError`.
   */
  export const enum SubscriptionDraftErrorCode {
    
    /**
     * This line has already been removed.
     */
    ALREADY_REMOVED = 'ALREADY_REMOVED',
    
    /**
     * Input value is not present.
     */
    PRESENCE = 'PRESENCE',
    
    /**
     * Subscription draft has been already committed.
     */
    COMMITTED = 'COMMITTED',
    
    /**
     * Value is not in range.
     */
    NOT_IN_RANGE = 'NOT_IN_RANGE',
    
    /**
     * The value is not an integer.
     */
    NOT_AN_INTEGER = 'NOT_AN_INTEGER',
    
    /**
     * The maximum number of cycles must be greater than the minimum.
     */
    SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES = 'SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES',
    
    /**
     * The delivery policy interval must be a multiple of the billing policy interval.
     */
    DELIVERY_MUST_BE_MULTIPLE_OF_BILLING = 'DELIVERY_MUST_BE_MULTIPLE_OF_BILLING',
    
    /**
     * Next billing date is invalid.
     */
    INVALID_BILLING_DATE = 'INVALID_BILLING_DATE',
    
    /**
     * Note length is too long.
     */
    INVALID_NOTE_LENGTH = 'INVALID_NOTE_LENGTH',
    
    /**
     * Must have at least one line.
     */
    INVALID_LINES = 'INVALID_LINES',
    
    /**
     * Discount must have at least one entitled line.
     */
    NO_ENTITLED_LINES = 'NO_ENTITLED_LINES',
    
    /**
     * The customer doesn't exist.
     */
    CUSTOMER_DOES_NOT_EXIST = 'CUSTOMER_DOES_NOT_EXIST',
    
    /**
     * The payment method customer must be the same as the contract customer.
     */
    CUSTOMER_MISMATCH = 'CUSTOMER_MISMATCH',
    
    /**
     * The delivery method can't be blank if any lines require shipping.
     */
    DELIVERY_METHOD_REQUIRED = 'DELIVERY_METHOD_REQUIRED',
    
    /**
     * The local delivery options must be set for local delivery.
     */
    MISSING_LOCAL_DELIVERY_OPTIONS = 'MISSING_LOCAL_DELIVERY_OPTIONS',
    
    /**
     * The after cycle attribute must be unique between cycle discounts.
     */
    CYCLE_DISCOUNTS_UNIQUE_AFTER_CYCLE = 'CYCLE_DISCOUNTS_UNIQUE_AFTER_CYCLE',
    
    /**
     * The adjustment value must the same type as the adjustment type.
     */
    INVALID_ADJUSTMENT_TYPE = 'INVALID_ADJUSTMENT_TYPE',
    
    /**
     * The adjustment value must be either fixed_value or percentage.
     */
    INVALID_ADJUSTMENT_VALUE = 'INVALID_ADJUSTMENT_VALUE',
    
    /**
     * Another operation updated the contract concurrently as the commit was in progress.
     */
    STALE_CONTRACT = 'STALE_CONTRACT',
    
    /**
     * Currency is not enabled.
     */
    CURRENCY_NOT_ENABLED = 'CURRENCY_NOT_ENABLED',
    
    /**
     * Cannot update a subscription contract with a current or upcoming billing cycle contract edit.
     */
    HAS_FUTURE_EDITS = 'HAS_FUTURE_EDITS',
    
    /**
     * Cannot commit a billing cycle contract draft with this mutation. Please use SubscriptionBillingCycleContractDraftCommit.
     */
    BILLING_CYCLE_PRESENT = 'BILLING_CYCLE_PRESENT',
    
    /**
     * Cannot commit a contract draft with this mutation. Please use SubscriptionDraftCommit.
     */
    BILLING_CYCLE_ABSENT = 'BILLING_CYCLE_ABSENT',
    
    /**
     * Delivery policy cannot be updated for billing cycle contract drafts.
     */
    BILLING_CYCLE_CONTRACT_DRAFT_DELIVERY_POLICY_INVALID = 'BILLING_CYCLE_CONTRACT_DRAFT_DELIVERY_POLICY_INVALID',
    
    /**
     * Billing policy cannot be updated for billing cycle contract drafts.
     */
    BILLING_CYCLE_CONTRACT_DRAFT_BILLING_POLICY_INVALID = 'BILLING_CYCLE_CONTRACT_DRAFT_BILLING_POLICY_INVALID',
    
    /**
     * Contract draft must be a billing cycle contract draft for contract concatenation.
     */
    CONCATENATION_BILLING_CYCLE_CONTRACT_DRAFT_REQUIRED = 'CONCATENATION_BILLING_CYCLE_CONTRACT_DRAFT_REQUIRED',
    
    /**
     * Concatenated contracts cannot contain duplicate subscription contracts.
     */
    DUPLICATE_CONCATENATED_CONTRACTS = 'DUPLICATE_CONCATENATED_CONTRACTS',
    
    /**
     * Billing cycle selector cannot select upcoming billing cycle past limit.
     */
    UPCOMING_CYCLE_LIMIT_EXCEEDED = 'UPCOMING_CYCLE_LIMIT_EXCEEDED',
    
    /**
     * Billing cycle selector cannot select billing cycle outside of index range.
     */
    CYCLE_INDEX_OUT_OF_RANGE = 'CYCLE_INDEX_OUT_OF_RANGE',
    
    /**
     * Billing cycle selector cannot select billing cycle outside of start date range.
     */
    CYCLE_START_DATE_OUT_OF_RANGE = 'CYCLE_START_DATE_OUT_OF_RANGE',
    
    /**
     * Billing cycle selector requires exactly one of index or date to be provided.
     */
    CYCLE_SELECTOR_VALIDATE_ONE_OF = 'CYCLE_SELECTOR_VALIDATE_ONE_OF',
    
    /**
     * Maximum number of concatenated contracts on a billing cycle contract draft exceeded.
     */
    EXCEEDED_MAX_CONCATENATED_CONTRACTS = 'EXCEEDED_MAX_CONCATENATED_CONTRACTS',
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value should be greater than the minimum allowed value.
     */
    GREATER_THAN = 'GREATER_THAN',
    
    /**
     * The input value should be greater than or equal to the minimum value allowed.
     */
    GREATER_THAN_OR_EQUAL_TO = 'GREATER_THAN_OR_EQUAL_TO',
    
    /**
     * The input value should be less than the maximum value allowed.
     */
    LESS_THAN = 'LESS_THAN',
    
    /**
     * The input value should be less than or equal to the maximum value allowed.
     */
    LESS_THAN_OR_EQUAL_TO = 'LESS_THAN_OR_EQUAL_TO',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT'
  }
  
  /**
   * Return type for `subscriptionBillingCycleContractDraftConcatenate` mutation.
   */
  export interface SubscriptionBillingCycleContractDraftConcatenatePayload {
    
    /**
     * The Subscription Draft object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionBillingCycleContractEdit` mutation.
   */
  export interface SubscriptionBillingCycleContractEditPayload {
    
    /**
     * The draft subscription contract object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionBillingCycleEditDelete` mutation.
   */
  export interface SubscriptionBillingCycleEditDeletePayload {
    
    /**
     * The list of updated billing cycles.
     */
    billingCycles?: Array<SubscriptionBillingCycle>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionBillingCycleUserError>;
  }
  
  /**
   * The possible errors for a subscription billing cycle.
   */
  export interface SubscriptionBillingCycleUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: SubscriptionBillingCycleErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `SubscriptionBillingCycleUserError`.
   */
  export const enum SubscriptionBillingCycleErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * Can't find the billing cycle.
     */
    CYCLE_NOT_FOUND = 'CYCLE_NOT_FOUND',
    
    /**
     * There's no contract or schedule edit associated with the targeted billing cycle(s).
     */
    NO_CYCLE_EDITS = 'NO_CYCLE_EDITS',
    
    /**
     * The index selector is invalid.
     */
    INVALID_CYCLE_INDEX = 'INVALID_CYCLE_INDEX',
    
    /**
     * The date selector is invalid.
     */
    INVALID_DATE = 'INVALID_DATE',
    
    /**
     * Billing cycle schedule edit input provided is empty. Must take in parameters to modify schedule.
     */
    EMPTY_BILLING_CYCLE_EDIT_SCHEDULE_INPUT = 'EMPTY_BILLING_CYCLE_EDIT_SCHEDULE_INPUT',
    
    /**
     * Billing date cannot be set on skipped billing cycle.
     */
    BILLING_DATE_SET_ON_SKIPPED = 'BILLING_DATE_SET_ON_SKIPPED',
    
    /**
     * Billing date of a cycle cannot be set to a value outside of its billing date range.
     */
    OUT_OF_BOUNDS = 'OUT_OF_BOUNDS',
    
    /**
     * Billing cycle selector cannot select upcoming billing cycle past limit.
     */
    UPCOMING_CYCLE_LIMIT_EXCEEDED = 'UPCOMING_CYCLE_LIMIT_EXCEEDED',
    
    /**
     * Billing cycle selector cannot select billing cycle outside of index range.
     */
    CYCLE_INDEX_OUT_OF_RANGE = 'CYCLE_INDEX_OUT_OF_RANGE',
    
    /**
     * Billing cycle selector cannot select billing cycle outside of start date range.
     */
    CYCLE_START_DATE_OUT_OF_RANGE = 'CYCLE_START_DATE_OUT_OF_RANGE',
    
    /**
     * Billing cycle has incomplete billing attempts in progress.
     */
    INCOMPLETE_BILLING_ATTEMPTS = 'INCOMPLETE_BILLING_ATTEMPTS'
  }
  
  /**
   * Select subscription billing cycles to be targeted.
   */
  export const enum SubscriptionBillingCyclesTargetSelection {
    
    /**
     * Target all current and upcoming subscription billing cycles.
     */
    ALL = 'ALL'
  }
  
  /**
   * Return type for `subscriptionBillingCycleEditsDelete` mutation.
   */
  export interface SubscriptionBillingCycleEditsDeletePayload {
    
    /**
     * The list of updated billing cycles.
     */
    billingCycles?: Array<SubscriptionBillingCycle>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionBillingCycleUserError>;
  }
  
  /**
   * The input fields for parameters to modify the schedule of a specific billing cycle.
   */
  export interface SubscriptionBillingCycleScheduleEditInput {
    
    /**
     * Sets the skip status for the billing cycle.
     */
    skip?: boolean;
    
    /**
     * Sets the expected billing date for the billing cycle.
     */
    billingDate?: DateTime;
    
    /**
     * The reason for editing.
     */
    reason: SubscriptionBillingCycleScheduleEditInputScheduleEditReason;
  }
  
  /**
   * The input fields for possible reasons for editing the billing cycle's schedule.
   */
  export const enum SubscriptionBillingCycleScheduleEditInputScheduleEditReason {
    
    /**
     * Buyer initiated the schedule edit.
     */
    BUYER_INITIATED = 'BUYER_INITIATED',
    
    /**
     * Merchant initiated the schedule edit.
     */
    MERCHANT_INITIATED = 'MERCHANT_INITIATED',
    
    /**
     * Developer initiated the schedule edit.
     */
    DEV_INITIATED = 'DEV_INITIATED'
  }
  
  /**
   * Return type for `subscriptionBillingCycleScheduleEdit` mutation.
   */
  export interface SubscriptionBillingCycleScheduleEditPayload {
    
    /**
     * The updated billing cycle.
     */
    billingCycle?: SubscriptionBillingCycle;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionBillingCycleUserError>;
  }
  
  /**
   * Return type for `subscriptionBillingCycleSkip` mutation.
   */
  export interface SubscriptionBillingCycleSkipPayload {
    
    /**
     * The updated billing cycle.
     */
    billingCycle?: SubscriptionBillingCycle;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionBillingCycleSkipUserError>;
  }
  
  /**
   * An error that occurs during the execution of `SubscriptionBillingCycleSkip`.
   */
  export interface SubscriptionBillingCycleSkipUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: SubscriptionBillingCycleSkipUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `SubscriptionBillingCycleSkipUserError`.
   */
  export const enum SubscriptionBillingCycleSkipUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID'
  }
  
  /**
   * Return type for `subscriptionBillingCycleUnskip` mutation.
   */
  export interface SubscriptionBillingCycleUnskipPayload {
    
    /**
     * The updated billing cycle.
     */
    billingCycle?: SubscriptionBillingCycle;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionBillingCycleUnskipUserError>;
  }
  
  /**
   * An error that occurs during the execution of `SubscriptionBillingCycleUnskip`.
   */
  export interface SubscriptionBillingCycleUnskipUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: SubscriptionBillingCycleUnskipUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `SubscriptionBillingCycleUnskipUserError`.
   */
  export const enum SubscriptionBillingCycleUnskipUserErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID'
  }
  
  /**
   * Return type for `subscriptionContractActivate` mutation.
   */
  export interface SubscriptionContractActivatePayload {
    
    /**
     * The new Subscription Contract object.
     */
    contract?: SubscriptionContract;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionContractStatusUpdateUserError>;
  }
  
  /**
   * Represents a subscription contract status update error.
   */
  export interface SubscriptionContractStatusUpdateUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: SubscriptionContractStatusUpdateErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `SubscriptionContractStatusUpdateUserError`.
   */
  export const enum SubscriptionContractStatusUpdateErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID',
    
    /**
     * Subscription contract status cannot be changed once terminated.
     */
    CONTRACT_TERMINATED = 'CONTRACT_TERMINATED'
  }
  
  /**
   * The input fields required to create a Subscription Contract.
   */
  export interface SubscriptionContractAtomicCreateInput {
    
    /**
     * The ID of the customer to associate with the subscription contract.
     */
    customerId: string;
    
    /**
     * The next billing date for the subscription contract.
     */
    nextBillingDate: DateTime;
    
    /**
     * The currency used for the subscription contract.
     */
    currencyCode: CurrencyCode;
    
    /**
     * The attributes used as input for the Subscription Draft.
     */
    contract: SubscriptionDraftInput;
    
    /**
     * A list of new Subscription Lines.
     */
    lines: Array<SubscriptionAtomicLineInput>;
    
    /**
     * A list of discount redeem codes to apply to the subscription contract.
     */
    discountCodes?: Array<string>;
  }
  
  /**
   * The input fields required to create a Subscription Draft.
   */
  export interface SubscriptionDraftInput {
    
    /**
     * The current status of the subscription contract.
     */
    status?: SubscriptionContractSubscriptionStatus;
    
    /**
     * The ID of the payment method to be used for the subscription contract.
     */
    paymentMethodId?: string;
    
    /**
     * The next billing date for the subscription contract.
     */
    nextBillingDate?: DateTime;
    
    /**
     * The billing policy for the subscription contract.
     */
    billingPolicy?: SubscriptionBillingPolicyInput;
    
    /**
     * The delivery policy for the subscription contract.
     */
    deliveryPolicy?: SubscriptionDeliveryPolicyInput;
    
    /**
     * The shipping price for each renewal the subscription contract.
     */
    deliveryPrice?: Decimal;
    
    /**
     * The delivery method for the subscription contract.
     */
    deliveryMethod?: SubscriptionDeliveryMethodInput;
    
    /**
     * The note field that will be applied to the generated orders.
     */
    note?: string;
    
    /**
     * A list of the custom attributes added to the subscription contract.
     */
    customAttributes?: Array<AttributeInput>;
  }
  
  /**
   * The input fields for a Subscription Billing Policy.
   */
  export interface SubscriptionBillingPolicyInput {
    
    /**
     * The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).
     */
    interval: SellingPlanInterval;
    
    /**
     * The number of billing intervals between invoices.
     */
    intervalCount: number;
    
    /**
     * Minimum amount of cycles required in the subscription.
     */
    minCycles?: number;
    
    /**
     * Maximum amount of cycles required in the subscription.
     */
    maxCycles?: number;
    
    /**
     * Specific anchor dates upon which the billing interval calculations should be made.
     */
    anchors?: Array<SellingPlanAnchorInput>;
  }
  
  /**
   * The input fields for a Subscription Delivery Policy.
   */
  export interface SubscriptionDeliveryPolicyInput {
    
    /**
     * The kind of interval that's associated with this schedule (e.g. Monthly, Weekly, etc).
     */
    interval: SellingPlanInterval;
    
    /**
     * The number of billing intervals between invoices.
     */
    intervalCount: number;
    
    /**
     * The specific anchor dates upon which the delivery interval calculations should be made.
     */
    anchors?: Array<SellingPlanAnchorInput>;
  }
  
  /**
   * Specifies delivery method fields for a subscription draft.
   * This is an input union: one, and only one, field can be provided.
   * The field provided will determine which delivery method is to be used.
   * 
   */
  export interface SubscriptionDeliveryMethodInput {
    
    /**
     * The input fields for the shipping delivery method.
     */
    shipping?: SubscriptionDeliveryMethodShippingInput;
    
    /**
     * The input fields for the local delivery method.
     */
    localDelivery?: SubscriptionDeliveryMethodLocalDeliveryInput;
    
    /**
     * The input fields for the pickup delivery method.
     */
    pickup?: SubscriptionDeliveryMethodPickupInput;
  }
  
  /**
   * Specifies shipping delivery method fields.
   * 
   * This input accepts partial input. When a field is not provided,
   * its prior value is left unchanged.
   * 
   */
  export interface SubscriptionDeliveryMethodShippingInput {
    
    /**
     * The address to ship to.
     */
    address?: MailingAddressInput;
    
    /**
     * The details of the shipping method to use.
     */
    shippingOption?: SubscriptionDeliveryMethodShippingOptionInput;
  }
  
  /**
   * The input fields for shipping option.
   */
  export interface SubscriptionDeliveryMethodShippingOptionInput {
    
    /**
     * The title of the shipping option.
     */
    title?: string;
    
    /**
     * The presentment title of the shipping option.
     */
    presentmentTitle?: string;
    
    /**
     * The description of the shipping option.
     */
    description?: string;
    
    /**
     * The code of the shipping option.
     */
    code?: string;
    
    /**
     * The carrier service ID of the shipping option.
     */
    carrierServiceId?: string;
  }
  
  /**
   * The input fields for a local delivery method.
   * 
   * This input accepts partial input. When a field is not provided,
   * its prior value is left unchanged.
   * 
   */
  export interface SubscriptionDeliveryMethodLocalDeliveryInput {
    
    /**
     * The address to deliver to.
     */
    address?: MailingAddressInput;
    
    /**
     * The details of the local delivery method to use.
     */
    localDeliveryOption?: SubscriptionDeliveryMethodLocalDeliveryOptionInput;
  }
  
  /**
   * The input fields for local delivery option.
   */
  export interface SubscriptionDeliveryMethodLocalDeliveryOptionInput {
    
    /**
     * The title of the local delivery option.
     */
    title?: string;
    
    /**
     * The presentment title of the local delivery option.
     */
    presentmentTitle?: string;
    
    /**
     * The details displayed to the customer to describe the local delivery option.
     */
    description?: string;
    
    /**
     * A custom reference to the delivery method for use with automations.
     */
    code?: string;
    
    /**
     * The phone number that the customer must provide to the merchant.
     * Formatted using E.164 standard. For example, `+16135551111`.
     * 
     */
    phone: string;
    
    /**
     * The delivery instructions that the customer can provide to the merchant.
     */
    instructions?: string;
  }
  
  /**
   * The input fields for a pickup delivery method.
   * 
   * This input accepts partial input. When a field is not provided,
   * its prior value is left unchanged.
   * 
   */
  export interface SubscriptionDeliveryMethodPickupInput {
    
    /**
     * The details of the pickup method to use.
     */
    pickupOption?: SubscriptionDeliveryMethodPickupOptionInput;
  }
  
  /**
   * The input fields for pickup option.
   */
  export interface SubscriptionDeliveryMethodPickupOptionInput {
    
    /**
     * The title of the pickup option.
     */
    title?: string;
    
    /**
     * The presentment title of the pickup option.
     */
    presentmentTitle?: string;
    
    /**
     * The details displayed to the customer to describe the pickup option.
     */
    description?: string;
    
    /**
     * A custom reference to the delivery method for use with automations.
     */
    code?: string;
    
    /**
     * The ID of the pickup location.
     */
    locationId: string;
  }
  
  /**
   * The input fields for mapping a subscription line to a discount.
   */
  export interface SubscriptionAtomicLineInput {
    
    /**
     * The new subscription line.
     */
    line: SubscriptionLineInput;
    
    /**
     * The discount to be added to the subscription line.
     */
    discounts?: Array<SubscriptionAtomicManualDiscountInput>;
  }
  
  /**
   * The input fields required to add a new subscription line to a contract.
   */
  export interface SubscriptionLineInput {
    
    /**
     * The ID of the product variant the subscription line refers to.
     */
    productVariantId: string;
    
    /**
     * The quantity of the product.
     */
    quantity: number;
    
    /**
     * The price of the product.
     */
    currentPrice: Decimal;
    
    /**
     * The custom attributes for this subscription line.
     */
    customAttributes?: Array<AttributeInput>;
    
    /**
     * The selling plan for the subscription line.
     */
    sellingPlanId?: string;
    
    /**
     * The selling plan name for the subscription line.
     * 
     * Defaults to using the selling plan's current name when not specified.
     * 
     */
    sellingPlanName?: string;
    
    /**
     * Describes expected price changes of the subscription line over time.
     */
    pricingPolicy?: SubscriptionPricingPolicyInput;
  }
  
  /**
   * The input fields for expected price changes of the subscription line over time.
   */
  export interface SubscriptionPricingPolicyInput {
    
    /**
     * The base price per unit for the subscription line in the contract's currency.
     */
    basePrice: Decimal;
    
    /**
     * An array containing all pricing changes for each billing cycle.
     */
    cycleDiscounts: Array<SubscriptionPricingPolicyCycleDiscountsInput>;
  }
  
  /**
   * The input fields for an array containing all pricing changes for each billing cycle.
   */
  export interface SubscriptionPricingPolicyCycleDiscountsInput {
    
    /**
     * The cycle after which the pricing policy applies.
     */
    afterCycle: number;
    
    /**
     * The price adjustment type.
     */
    adjustmentType: SellingPlanPricingPolicyAdjustmentType;
    
    /**
     * The price adjustment value.
     */
    adjustmentValue: SellingPlanPricingPolicyValueInput;
    
    /**
     * The computed price after the adjustments are applied.
     */
    computedPrice: Decimal;
  }
  
  /**
   * The input fields for mapping a subscription line to a discount.
   */
  export interface SubscriptionAtomicManualDiscountInput {
    
    /**
     * The title associated with the subscription discount.
     */
    title?: string;
    
    /**
     * Percentage or fixed amount value of the discount.
     */
    value?: SubscriptionManualDiscountValueInput;
    
    /**
     * The maximum number of times the subscription discount will be applied on orders.
     */
    recurringCycleLimit?: number;
  }
  
  /**
   * The input fields for the discount value and its distribution.
   */
  export interface SubscriptionManualDiscountValueInput {
    
    /**
     * The percentage value of the discount. Value must be between 0 - 100.
     */
    percentage?: number;
    
    /**
     * Fixed amount input in the currency defined by the subscription.
     */
    fixedAmount?: SubscriptionManualDiscountFixedAmountInput;
  }
  
  /**
   * The input fields for the fixed amount value of the discount and distribution on the lines.
   */
  export interface SubscriptionManualDiscountFixedAmountInput {
    
    /**
     * Fixed amount value.
     */
    amount?: number;
    
    /**
     * Whether the amount is intended per line item or once per subscription.
     */
    appliesOnEachItem?: boolean;
  }
  
  /**
   * Return type for `subscriptionContractAtomicCreate` mutation.
   */
  export interface SubscriptionContractAtomicCreatePayload {
    
    /**
     * The new Subscription Contract object.
     */
    contract?: SubscriptionContract;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionContractCancel` mutation.
   */
  export interface SubscriptionContractCancelPayload {
    
    /**
     * The new Subscription Contract object.
     */
    contract?: SubscriptionContract;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionContractStatusUpdateUserError>;
  }
  
  /**
   * The input fields required to create a Subscription Contract.
   */
  export interface SubscriptionContractCreateInput {
    
    /**
     * The ID of the customer to associate with the subscription contract.
     */
    customerId: string;
    
    /**
     * The next billing date for the subscription contract.
     */
    nextBillingDate: DateTime;
    
    /**
     * The currency used for the subscription contract.
     */
    currencyCode: CurrencyCode;
    
    /**
     * The attributes used as input for the Subscription Draft.
     */
    contract: SubscriptionDraftInput;
  }
  
  /**
   * Return type for `subscriptionContractCreate` mutation.
   */
  export interface SubscriptionContractCreatePayload {
    
    /**
     * The Subscription Contract object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionContractExpire` mutation.
   */
  export interface SubscriptionContractExpirePayload {
    
    /**
     * The new Subscription Contract object.
     */
    contract?: SubscriptionContract;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionContractStatusUpdateUserError>;
  }
  
  /**
   * Return type for `subscriptionContractFail` mutation.
   */
  export interface SubscriptionContractFailPayload {
    
    /**
     * The new Subscription Contract object.
     */
    contract?: SubscriptionContract;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionContractStatusUpdateUserError>;
  }
  
  /**
   * Return type for `subscriptionContractPause` mutation.
   */
  export interface SubscriptionContractPausePayload {
    
    /**
     * The new Subscription Contract object.
     */
    contract?: SubscriptionContract;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionContractStatusUpdateUserError>;
  }
  
  /**
   * The input fields required to create a Subscription Contract.
   */
  export interface SubscriptionContractProductChangeInput {
    
    /**
     * The ID of the product variant the subscription line refers to.
     */
    productVariantId?: string;
    
    /**
     * The price of the product.
     */
    currentPrice?: Decimal;
  }
  
  /**
   * Return type for `subscriptionContractProductChange` mutation.
   */
  export interface SubscriptionContractProductChangePayload {
    
    /**
     * The new Subscription Contract object.
     */
    contract?: SubscriptionContract;
    
    /**
     * The updated Subscription Line.
     */
    lineUpdated?: SubscriptionLine;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionContractSetNextBillingDate` mutation.
   */
  export interface SubscriptionContractSetNextBillingDatePayload {
    
    /**
     * The updated Subscription Contract object.
     */
    contract?: SubscriptionContract;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionContractUserError>;
  }
  
  /**
   * Represents a Subscription Contract error.
   */
  export interface SubscriptionContractUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: SubscriptionContractErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `SubscriptionContractUserError`.
   */
  export const enum SubscriptionContractErrorCode {
    
    /**
     * The input value is invalid.
     */
    INVALID = 'INVALID'
  }
  
  /**
   * Return type for `subscriptionContractUpdate` mutation.
   */
  export interface SubscriptionContractUpdatePayload {
    
    /**
     * The Subscription Contract object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionDraftCommit` mutation.
   */
  export interface SubscriptionDraftCommitPayload {
    
    /**
     * The updated Subscription Contract object.
     */
    contract?: SubscriptionContract;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * The input fields for a subscription discount on a contract.
   */
  export interface SubscriptionManualDiscountInput {
    
    /**
     * The title associated with the subscription discount.
     */
    title?: string;
    
    /**
     * Percentage or fixed amount value of the discount.
     */
    value?: SubscriptionManualDiscountValueInput;
    
    /**
     * The maximum number of times the subscription discount will be applied on orders.
     */
    recurringCycleLimit?: number;
    
    /**
     * Entitled line items used to apply the subscription discount on.
     */
    entitledLines?: SubscriptionManualDiscountEntitledLinesInput;
  }
  
  /**
   * The input fields for the subscription lines the discount applies on.
   */
  export interface SubscriptionManualDiscountEntitledLinesInput {
    
    /**
     * Specify whether the subscription discount will apply on all subscription lines.
     */
    all?: boolean;
    
    /**
     * The ID of the lines to add to or remove from the subscription discount.
     */
    lines?: SubscriptionManualDiscountLinesInput;
  }
  
  /**
   * The input fields for line items that the discount refers to.
   */
  export interface SubscriptionManualDiscountLinesInput {
    
    /**
     * The ID of the lines to add to the subscription discount.
     */
    add?: Array<string>;
    
    /**
     * The ID of the lines to remove from the subscription discount.
     */
    remove?: Array<string>;
  }
  
  /**
   * Return type for `subscriptionDraftDiscountAdd` mutation.
   */
  export interface SubscriptionDraftDiscountAddPayload {
    
    /**
     * The added Subscription Discount.
     */
    discountAdded?: SubscriptionManualDiscount;
    
    /**
     * The Subscription Contract draft object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionDraftDiscountCodeApply` mutation.
   */
  export interface SubscriptionDraftDiscountCodeApplyPayload {
    
    /**
     * The added subscription discount.
     */
    appliedDiscount?: SubscriptionAppliedCodeDiscount;
    
    /**
     * The subscription contract draft object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionDraftDiscountRemove` mutation.
   */
  export interface SubscriptionDraftDiscountRemovePayload {
    
    /**
     * The removed subscription draft discount.
     */
    discountRemoved?: SubscriptionDiscount;
    
    /**
     * The subscription contract draft object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionDraftDiscountUpdate` mutation.
   */
  export interface SubscriptionDraftDiscountUpdatePayload {
    
    /**
     * The updated Subscription Discount.
     */
    discountUpdated?: SubscriptionManualDiscount;
    
    /**
     * The Subscription Contract draft object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * The input fields for a subscription free shipping discount on a contract.
   */
  export interface SubscriptionFreeShippingDiscountInput {
    
    /**
     * The title associated with the subscription free shipping discount.
     */
    title?: string;
    
    /**
     * The maximum number of times the subscription free shipping discount will be applied on orders.
     */
    recurringCycleLimit?: number;
  }
  
  /**
   * Return type for `subscriptionDraftFreeShippingDiscountAdd` mutation.
   */
  export interface SubscriptionDraftFreeShippingDiscountAddPayload {
    
    /**
     * The added subscription free shipping discount.
     */
    discountAdded?: SubscriptionManualDiscount;
    
    /**
     * The subscription contract draft object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionDraftFreeShippingDiscountUpdate` mutation.
   */
  export interface SubscriptionDraftFreeShippingDiscountUpdatePayload {
    
    /**
     * The updated Subscription Discount.
     */
    discountUpdated?: SubscriptionManualDiscount;
    
    /**
     * The Subscription Contract draft object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionDraftLineAdd` mutation.
   */
  export interface SubscriptionDraftLineAddPayload {
    
    /**
     * The Subscription Contract draft object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The added Subscription Line.
     */
    lineAdded?: SubscriptionLine;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionDraftLineRemove` mutation.
   */
  export interface SubscriptionDraftLineRemovePayload {
    
    /**
     * The list of updated subscription discounts impacted by the removed line.
     */
    discountsUpdated?: Array<SubscriptionManualDiscount>;
    
    /**
     * The Subscription Contract draft object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The removed Subscription Line.
     */
    lineRemoved?: SubscriptionLine;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * The input fields required to update a subscription line on a contract.
   */
  export interface SubscriptionLineUpdateInput {
    
    /**
     * The ID of the product variant the subscription line refers to.
     */
    productVariantId?: string;
    
    /**
     * The quantity of the product.
     */
    quantity?: number;
    
    /**
     * The selling plan for the subscription line.
     */
    sellingPlanId?: string;
    
    /**
     * The selling plan name for the subscription line.
     */
    sellingPlanName?: string;
    
    /**
     * The price of the product.
     */
    currentPrice?: Decimal;
    
    /**
     * The custom attributes for this subscription line.
     */
    customAttributes?: Array<AttributeInput>;
    
    /**
     * Describes expected price changes of the subscription line over time.
     */
    pricingPolicy?: SubscriptionPricingPolicyInput;
  }
  
  /**
   * Return type for `subscriptionDraftLineUpdate` mutation.
   */
  export interface SubscriptionDraftLineUpdatePayload {
    
    /**
     * The Subscription Contract draft object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The updated Subscription Line.
     */
    lineUpdated?: SubscriptionLine;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `subscriptionDraftUpdate` mutation.
   */
  export interface SubscriptionDraftUpdatePayload {
    
    /**
     * The Subscription Draft object.
     */
    draft?: SubscriptionDraft;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<SubscriptionDraftUserError>;
  }
  
  /**
   * Return type for `tagsAdd` mutation.
   */
  export interface TagsAddPayload {
    
    /**
     * The object that was updated.
     */
    node?: Node;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `tagsRemove` mutation.
   */
  export interface TagsRemovePayload {
    
    /**
     * The object that was updated.
     */
    node?: Node;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `taxAppConfigure` mutation.
   */
  export interface TaxAppConfigurePayload {
    
    /**
     * The updated tax app configuration.
     */
    taxAppConfiguration?: TaxAppConfiguration;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<TaxAppConfigureUserError>;
  }
  
  /**
   * Tax app configuration of a merchant.
   */
  export interface TaxAppConfiguration {
    
    /**
     * State of the tax app configuration.
     */
    state: TaxPartnerState;
  }
  
  /**
   * State of the tax app configuration.
   */
  export const enum TaxPartnerState {
    
    /**
     * App is not configured.
     */
    PENDING = 'PENDING',
    
    /**
     * App is configured, but not used for tax calculations.
     */
    READY = 'READY',
    
    /**
     * App is configured and to be used for tax calculations.
     */
    ACTIVE = 'ACTIVE'
  }
  
  /**
   * An error that occurs during the execution of `TaxAppConfigure`.
   */
  export interface TaxAppConfigureUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: TaxAppConfigureUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `TaxAppConfigureUserError`.
   */
  export const enum TaxAppConfigureUserErrorCode {
    
    /**
     * Unable to find the tax partner record.
     */
    TAX_PARTNER_NOT_FOUND = 'TAX_PARTNER_NOT_FOUND',
    
    /**
     * Unable to update tax partner state.
     */
    TAX_PARTNER_STATE_UPDATE_FAILED = 'TAX_PARTNER_STATE_UPDATE_FAILED',
    
    /**
     * Unable to update already active tax partner.
     */
    TAX_PARTNER_ALREADY_ACTIVE = 'TAX_PARTNER_ALREADY_ACTIVE'
  }
  
  /**
   * The input fields and values for creating or updating a translation.
   */
  export interface TranslationInput {
    
    /**
     * ISO code of the locale being translated into. Only locales returned in `shopLocales` are valid.
     */
    locale: string;
    
    /**
     * On the resource that this translation belongs to, the reference to the value being translated.
     */
    key: string;
    
    /**
     * The value of the translation.
     */
    value: string;
    
    /**
     * Hash digest representation of the content being translated.
     */
    translatableContentDigest: string;
    
    /**
     * The ID of the market that the translation is specific to. Not specifying this field means that the translation will be available in all markets.
     */
    marketId?: string;
  }
  
  /**
   * Return type for `translationsRegister` mutation.
   */
  export interface TranslationsRegisterPayload {
    
    /**
     * The translations that were created or updated.
     */
    translations?: Array<Translation>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<TranslationUserError>;
  }
  
  /**
   * Return type for `translationsRemove` mutation.
   */
  export interface TranslationsRemovePayload {
    
    /**
     * The translations that were deleted.
     */
    translations?: Array<Translation>;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<TranslationUserError>;
  }
  
  /**
   * Return type for `urlRedirectBulkDeleteAll` mutation.
   */
  export interface UrlRedirectBulkDeleteAllPayload {
    
    /**
     * The asynchronous job removing the redirects.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `urlRedirectBulkDeleteByIds` mutation.
   */
  export interface UrlRedirectBulkDeleteByIdsPayload {
    
    /**
     * The asynchronous job removing the redirects.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UrlRedirectBulkDeleteByIdsUserError>;
  }
  
  /**
   * An error that occurs during the execution of `UrlRedirectBulkDeleteByIds`.
   */
  export interface UrlRedirectBulkDeleteByIdsUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: UrlRedirectBulkDeleteByIdsUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `UrlRedirectBulkDeleteByIdsUserError`.
   */
  export const enum UrlRedirectBulkDeleteByIdsUserErrorCode {
    
    /**
     * You must pass one or more [`URLRedirect`](
     *             https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect
     *           ) object IDs.
     */
    IDS_EMPTY = 'IDS_EMPTY'
  }
  
  /**
   * Return type for `urlRedirectBulkDeleteBySavedSearch` mutation.
   */
  export interface UrlRedirectBulkDeleteBySavedSearchPayload {
    
    /**
     * The asynchronous job removing the redirects.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UrlRedirectBulkDeleteBySavedSearchUserError>;
  }
  
  /**
   * An error that occurs during the execution of `UrlRedirectBulkDeleteBySavedSearch`.
   */
  export interface UrlRedirectBulkDeleteBySavedSearchUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: UrlRedirectBulkDeleteBySavedSearchUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `UrlRedirectBulkDeleteBySavedSearchUserError`.
   */
  export const enum UrlRedirectBulkDeleteBySavedSearchUserErrorCode {
    
    /**
     * Saved search not found.
     */
    SAVED_SEARCH_NOT_FOUND = 'SAVED_SEARCH_NOT_FOUND',
    
    /**
     * The saved search's query cannot match all entries or be empty.
     */
    INVALID_SAVED_SEARCH_QUERY = 'INVALID_SAVED_SEARCH_QUERY'
  }
  
  /**
   * Return type for `urlRedirectBulkDeleteBySearch` mutation.
   */
  export interface UrlRedirectBulkDeleteBySearchPayload {
    
    /**
     * The asynchronous job removing the redirects.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UrlRedirectBulkDeleteBySearchUserError>;
  }
  
  /**
   * An error that occurs during the execution of `UrlRedirectBulkDeleteBySearch`.
   */
  export interface UrlRedirectBulkDeleteBySearchUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: UrlRedirectBulkDeleteBySearchUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `UrlRedirectBulkDeleteBySearchUserError`.
   */
  export const enum UrlRedirectBulkDeleteBySearchUserErrorCode {
    
    /**
     * Invalid search string.
     */
    INVALID_SEARCH_ARGUMENT = 'INVALID_SEARCH_ARGUMENT'
  }
  
  /**
   * The input fields to create or update a URL redirect.
   */
  export interface UrlRedirectInput {
    
    /**
     * The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
     */
    path?: string;
    
    /**
     * The target location where the user will be redirected to.
     */
    target?: string;
  }
  
  /**
   * Return type for `urlRedirectCreate` mutation.
   */
  export interface UrlRedirectCreatePayload {
    
    /**
     * The created redirect.
     */
    urlRedirect?: UrlRedirect;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UrlRedirectUserError>;
  }
  
  /**
   * Represents an error that happens during execution of a redirect mutation.
   */
  export interface UrlRedirectUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: UrlRedirectErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `UrlRedirectUserError`.
   */
  export const enum UrlRedirectErrorCode {
    
    /**
     * Redirect does not exist.
     */
    DOES_NOT_EXIST = 'DOES_NOT_EXIST',
    
    /**
     * Redirect could not be created.
     */
    CREATE_FAILED = 'CREATE_FAILED',
    
    /**
     * Redirect could not be updated.
     */
    UPDATE_FAILED = 'UPDATE_FAILED',
    
    /**
     * Redirect could not be deleted.
     */
    DELETE_FAILED = 'DELETE_FAILED'
  }
  
  /**
   * Return type for `urlRedirectDelete` mutation.
   */
  export interface UrlRedirectDeletePayload {
    
    /**
     * The ID of the deleted redirect.
     */
    deletedUrlRedirectId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UrlRedirectUserError>;
  }
  
  /**
   * Return type for `urlRedirectImportCreate` mutation.
   */
  export interface UrlRedirectImportCreatePayload {
    
    /**
     * The created `URLRedirectImport` object.
     */
    urlRedirectImport?: UrlRedirectImport;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UrlRedirectImportUserError>;
  }
  
  /**
   * Represents an error that happens during execution of a redirect import mutation.
   */
  export interface UrlRedirectImportUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: UrlRedirectImportErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `UrlRedirectImportUserError`.
   */
  export const enum UrlRedirectImportErrorCode {
    
    /**
     * CSV file does not exist at given URL.
     * @deprecated This error code is never returned
     */
    FILE_DOES_NOT_EXIST = 'FILE_DOES_NOT_EXIST',
    
    /**
     * URL redirect import not found.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * The import has already completed.
     */
    ALREADY_IMPORTED = 'ALREADY_IMPORTED',
    
    /**
     * The import is already in progress.
     */
    IN_PROGRESS = 'IN_PROGRESS'
  }
  
  /**
   * Return type for `urlRedirectImportSubmit` mutation.
   */
  export interface UrlRedirectImportSubmitPayload {
    
    /**
     * The asynchronous job importing the redirects.
     */
    job?: Job;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UrlRedirectImportUserError>;
  }
  
  /**
   * Return type for `urlRedirectUpdate` mutation.
   */
  export interface UrlRedirectUpdatePayload {
    
    /**
     * Returns the updated URL redirect.
     */
    urlRedirect?: UrlRedirect;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UrlRedirectUserError>;
  }
  
  /**
   * The input fields required to install a validation.
   */
  export interface ValidationCreateInput {
    
    /**
     * The function ID representing the extension to install.
     */
    functionId: string;
    
    /**
     * Whether the validation should be live on the merchant checkout.
     */
    enable?: boolean;
    
    /**
     * Whether the validation should block on failures other than expected violations.
     */
    blockOnFailure?: boolean;
    
    /**
     * Additional metafields to associate to the validation.
     */
    metafields?: Array<MetafieldInput>;
  }
  
  /**
   * Return type for `validationCreate` mutation.
   */
  export interface ValidationCreatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ValidationUserError>;
    
    /**
     * The created validation.
     */
    validation?: Validation;
  }
  
  /**
   * An error that occurs during the execution of a validation mutation.
   */
  export interface ValidationUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ValidationUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ValidationUserError`.
   */
  export const enum ValidationUserErrorCode {
    
    /**
     * Validation not found.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * Function not found.
     */
    FUNCTION_NOT_FOUND = 'FUNCTION_NOT_FOUND',
    
    /**
     * Shop must be on a Shopify Plus plan to activate functions from a custom app.
     */
    CUSTOM_APP_FUNCTION_NOT_ELIGIBLE = 'CUSTOM_APP_FUNCTION_NOT_ELIGIBLE',
    
    /**
     * Function does not implement the required interface for this cart & checkout validation.
     */
    FUNCTION_DOES_NOT_IMPLEMENT = 'FUNCTION_DOES_NOT_IMPLEMENT',
    
    /**
     * Only unlisted apps can be used for this cart & checkout validation.
     */
    PUBLIC_APP_NOT_ALLOWED = 'PUBLIC_APP_NOT_ALLOWED',
    
    /**
     * Function is pending deletion.
     */
    FUNCTION_PENDING_DELETION = 'FUNCTION_PENDING_DELETION',
    
    /**
     * The type is invalid.
     */
    INVALID_TYPE = 'INVALID_TYPE',
    
    /**
     * The value is invalid for the metafield type or for the definition options.
     */
    INVALID_VALUE = 'INVALID_VALUE',
    
    /**
     * ApiPermission metafields can only be created or updated by the app owner.
     */
    APP_NOT_AUTHORIZED = 'APP_NOT_AUTHORIZED',
    
    /**
     * Unstructured reserved namespace.
     */
    UNSTRUCTURED_RESERVED_NAMESPACE = 'UNSTRUCTURED_RESERVED_NAMESPACE',
    
    /**
     * Owner type can't be used in this mutation.
     */
    DISALLOWED_OWNER_TYPE = 'DISALLOWED_OWNER_TYPE',
    
    /**
     * The input value isn't included in the list.
     */
    INCLUSION = 'INCLUSION',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The input value needs to be blank.
     */
    PRESENT = 'PRESENT',
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value is too long.
     */
    TOO_LONG = 'TOO_LONG',
    
    /**
     * The input value is too short.
     */
    TOO_SHORT = 'TOO_SHORT'
  }
  
  /**
   * Return type for `validationDelete` mutation.
   */
  export interface ValidationDeletePayload {
    
    /**
     * Returns the deleted validation ID.
     */
    deletedId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ValidationUserError>;
  }
  
  /**
   * The input fields required to update a validation.
   */
  export interface ValidationUpdateInput {
    
    /**
     * Whether the validation should be live on the merchant checkout.
     */
    enable?: boolean;
    
    /**
     * Whether the validation should block on failures other than expected violations.
     */
    blockOnFailure?: boolean;
    
    /**
     * Additional metafields to associate to the validation.
     */
    metafields?: Array<MetafieldInput>;
  }
  
  /**
   * Return type for `validationUpdate` mutation.
   */
  export interface ValidationUpdatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ValidationUserError>;
    
    /**
     * The updated validation.
     */
    validation?: Validation;
  }
  
  /**
   * The input fields to use to update a web pixel.
   */
  export interface WebPixelInput {
    
    /**
     * The web pixel settings in JSON format.
     */
    settings: JSON;
  }
  
  /**
   * Return type for `webPixelCreate` mutation.
   */
  export interface WebPixelCreatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ErrorsWebPixelUserError>;
    
    /**
     * The created web pixel settings.
     */
    webPixel?: WebPixel;
  }
  
  /**
   * An error that occurs during the execution of a web pixel mutation.
   */
  export interface ErrorsWebPixelUserError extends DisplayableError {
    
    /**
     * The error code.
     */
    code?: ErrorsWebPixelUserErrorCode;
    
    /**
     * The path to the input field that caused the error.
     */
    field?: Array<string>;
    
    /**
     * The error message.
     */
    message: string;
  }
  
  /**
   * Possible error codes that can be returned by `ErrorsWebPixelUserError`.
   */
  export const enum ErrorsWebPixelUserErrorCode {
    
    /**
     * The input value is blank.
     */
    BLANK = 'BLANK',
    
    /**
     * The input value is already taken.
     */
    TAKEN = 'TAKEN',
    
    /**
     * The record with the ID used as the input value couldn't be found.
     */
    NOT_FOUND = 'NOT_FOUND',
    
    /**
     * The provided settings ID does not match the expected settings definition on the app.
     */
    INVALID_SETTINGS = 'INVALID_SETTINGS',
    
    /**
     * An error occurred and the web pixel couldnt be deleted.
     */
    UNABLE_TO_DELETE = 'UNABLE_TO_DELETE'
  }
  
  /**
   * Return type for `webPixelDelete` mutation.
   */
  export interface WebPixelDeletePayload {
    
    /**
     * The ID of the web pixel settings that was deleted.
     */
    deletedWebPixelId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ErrorsWebPixelUserError>;
  }
  
  /**
   * Return type for `webPixelUpdate` mutation.
   */
  export interface WebPixelUpdatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<ErrorsWebPixelUserError>;
    
    /**
     * The updated web pixel settings.
     */
    webPixel?: WebPixel;
  }
  
  /**
   * The input fields for a webhook subscription.
   * 
   */
  export interface WebhookSubscriptionInput {
    
    /**
     * URL where the webhook subscription should send the POST request when the event occurs.
     */
    callbackUrl?: URL;
    
    /**
     * The format in which the webhook subscription should send the data.
     */
    format?: WebhookSubscriptionFormat;
    
    /**
     * The list of fields to be included in the webhook subscription.
     */
    includeFields?: Array<string>;
    
    /**
     * The list of namespaces for any metafields that should be included in the webhook subscription.
     */
    metafieldNamespaces?: Array<string>;
  }
  
  /**
   * Return type for `webhookSubscriptionCreate` mutation.
   */
  export interface WebhookSubscriptionCreatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
    
    /**
     * The webhook subscription that was created.
     */
    webhookSubscription?: WebhookSubscription;
  }
  
  /**
   * Return type for `webhookSubscriptionDelete` mutation.
   */
  export interface WebhookSubscriptionDeletePayload {
    
    /**
     * The ID of the deleted webhook subscription.
     */
    deletedWebhookSubscriptionId?: string;
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
  }
  
  /**
   * Return type for `webhookSubscriptionUpdate` mutation.
   */
  export interface WebhookSubscriptionUpdatePayload {
    
    /**
     * The list of errors that occurred from executing the mutation.
     */
    userErrors: Array<UserError>;
    
    /**
     * The webhook subscription that was updated.
     */
    webhookSubscription?: WebhookSubscription;
  }
  
  /**
   * A sale associated with an additional fee charge.
   */
  export interface AdditionalFeeSale extends Sale {
    
    /**
     * The type of order action that the sale represents.
     */
    actionType: SaleActionType;
    
    /**
     * The additional fees for the associated sale.
     */
    additionalFee: SaleAdditionalFee;
    
    /**
     * The unique ID for the sale.
     */
    id: string;
    
    /**
     * The line type assocated with the sale.
     */
    lineType: SaleLineType;
    
    /**
     * The number of units either ordered or intended to be returned.
     */
    quantity?: number;
    
    /**
     * All individual taxes associated with the sale.
     */
    taxes: Array<SaleTax>;
    
    /**
     * The total sale amount after taxes and discounts.
     */
    totalAmount: MoneyBag;
    
    /**
     * The total discounts allocated to the sale after taxes.
     */
    totalDiscountAmountAfterTaxes: MoneyBag;
    
    /**
     * The total discounts allocated to the sale before taxes.
     */
    totalDiscountAmountBeforeTaxes: MoneyBag;
    
    /**
     * The total amount of taxes for the sale.
     */
    totalTaxAmount: MoneyBag;
  }
  
  /**
   * The additional fee details for a line item.
   */
  export interface SaleAdditionalFee extends Node {
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The name of the additional fee.
     */
    name: string;
    
    /**
     * The price of the additional fee.
     */
    price: MoneyBag;
    
    /**
     * A list of taxes charged on the additional fee.
     */
    taxLines: Array<TaxLine>;
  }
  
  /**
   * A sale associated with an order price adjustment.
   */
  export interface AdjustmentSale extends Sale {
    
    /**
     * The type of order action that the sale represents.
     */
    actionType: SaleActionType;
    
    /**
     * The unique ID for the sale.
     */
    id: string;
    
    /**
     * The line type assocated with the sale.
     */
    lineType: SaleLineType;
    
    /**
     * The number of units either ordered or intended to be returned.
     */
    quantity?: number;
    
    /**
     * All individual taxes associated with the sale.
     */
    taxes: Array<SaleTax>;
    
    /**
     * The total sale amount after taxes and discounts.
     */
    totalAmount: MoneyBag;
    
    /**
     * The total discounts allocated to the sale after taxes.
     */
    totalDiscountAmountAfterTaxes: MoneyBag;
    
    /**
     * The total discounts allocated to the sale before taxes.
     */
    totalDiscountAmountBeforeTaxes: MoneyBag;
    
    /**
     * The total amount of taxes for the sale.
     */
    totalTaxAmount: MoneyBag;
  }
  
  /**
   * A catalog that defines the publication associated with an app.
   * 
   */
  export interface AppCatalog extends Catalog, Node {
    
    /**
     * The apps associated with the catalog.
     */
    apps: AppConnection;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Most recent catalog operations.
     */
    operations: Array<ResourceOperation>;
    
    /**
     * The price list associated with the catalog.
     */
    priceList?: PriceList;
    
    /**
     * A group of products and collections that's published to a catalog.
     */
    publication?: Publication;
    
    /**
     * The status of the catalog.
     */
    status: CatalogStatus;
    
    /**
     * The name of the catalog.
     */
    title: string;
  }
  
  /**
   * Automatic discount applications capture the intentions of a discount that was automatically applied.
   * 
   */
  export interface AutomaticDiscountApplication extends DiscountApplication {
    
    /**
     * The method by which the discount's value is applied to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * An ordered index that can be used to identify the discount application and indicate the precedence
     * of the discount application for calculations.
     * 
     */
    index: number;
    
    /**
     * How the discount amount is distributed on the discounted lines.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * Whether the discount is applied on line items or shipping lines.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The title of the discount application.
     */
    title: string;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
   * the addition of a product.
   * 
   */
  export interface BasicEvent extends Event, Node {
    
    /**
     * The name of the app that created the event.
     */
    appTitle?: string;
    
    /**
     * Whether the event was created by an app.
     */
    attributeToApp: boolean;
    
    /**
     * Whether the event was caused by an admin user.
     */
    attributeToUser: boolean;
    
    /**
     * The date and time when the event was created.
     */
    createdAt: DateTime;
    
    /**
     * Whether the event is critical.
     */
    criticalAlert: boolean;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Human readable text that describes the event.
     */
    message: FormattedString;
  }
  
  /**
   * A discount that is automatically applied to an order that is being edited.
   * 
   */
  export interface CalculatedAutomaticDiscountApplication extends CalculatedDiscountApplication {
    
    /**
     * The method by which the discount's value is allocated to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * The level at which the discount was applied.
     */
    appliedTo: DiscountApplicationLevel;
    
    /**
     * The description of discount application. Indicates the reason why the discount was applied.
     */
    description?: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * How the discount amount is distributed on the discounted lines.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * Whether the discount is applied on line items or shipping lines.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * A discount code that is applied to an order that is being edited.
   * 
   */
  export interface CalculatedDiscountCodeApplication extends CalculatedDiscountApplication {
    
    /**
     * The method by which the discount's value is allocated to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * The level at which the discount was applied.
     */
    appliedTo: DiscountApplicationLevel;
    
    /**
     * The string identifying the discount code that was used at the time of application.
     */
    code: string;
    
    /**
     * The description of discount application. Indicates the reason why the discount was applied.
     */
    description?: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * How the discount amount is distributed on the discounted lines.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * Whether the discount is applied on line items or shipping lines.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * Represents a discount that was manually created for an order that is being edited.
   * 
   */
  export interface CalculatedManualDiscountApplication extends CalculatedDiscountApplication {
    
    /**
     * The method by which the discount's value is allocated to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * The level at which the discount was applied.
     */
    appliedTo: DiscountApplicationLevel;
    
    /**
     * The description of discount application. Indicates the reason why the discount was applied.
     */
    description?: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * How the discount amount is distributed on the discounted lines.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * Whether the discount is applied on line items or shipping lines.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * A discount created by a Shopify script for an order that is being edited.
   * 
   */
  export interface CalculatedScriptDiscountApplication extends CalculatedDiscountApplication {
    
    /**
     * The method by which the discount's value is allocated to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * The level at which the discount was applied.
     */
    appliedTo: DiscountApplicationLevel;
    
    /**
     * The description of discount application. Indicates the reason why the discount was applied.
     */
    description?: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * How the discount amount is distributed on the discounted lines.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * Whether the discount is applied on line items or shipping lines.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * A custom font.
   */
  export interface CheckoutBrandingCustomFont extends CheckoutBrandingFont {
    
    /**
     * Globally unique ID reference to the custom font file.
     */
    genericFileId?: string;
    
    /**
     * The font sources.
     */
    sources?: string;
    
    /**
     * The font weight.
     */
    weight?: number;
  }
  
  /**
   * A Shopify font.
   */
  export interface CheckoutBrandingShopifyFont extends CheckoutBrandingFont {
    
    /**
     * The font sources.
     */
    sources?: string;
    
    /**
     * The font weight.
     */
    weight?: number;
  }
  
  /**
   * Comment events are generated by staff members of a shop.
   * They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
   * 
   */
  export interface CommentEvent extends Event, Node {
    
    /**
     * The name of the app that created the event.
     */
    appTitle?: string;
    
    /**
     * The attachments associated with the comment event.
     */
    attachments: Array<CommentEventAttachment>;
    
    /**
     * Whether the event was created by an app.
     */
    attributeToApp: boolean;
    
    /**
     * Whether the event was caused by an admin user.
     */
    attributeToUser: boolean;
    
    /**
     * The name of the user that authored the comment event.
     */
    author: StaffMember;
    
    /**
     * Whether the comment event can be deleted. If true, then the comment event can be deleted.
     */
    canDelete: boolean;
    
    /**
     * Whether the comment event can be edited. If true, then the comment event can be edited.
     */
    canEdit: boolean;
    
    /**
     * The date and time when the event was created.
     */
    createdAt: DateTime;
    
    /**
     * Whether the event is critical.
     */
    criticalAlert: boolean;
    
    /**
     * Whether the comment event has been edited. If true, then the comment event has been edited.
     */
    edited: boolean;
    
    /**
     * The object reference associated with the comment event. For example, a product or discount).
     */
    embed?: CommentEventEmbed;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Human readable text that describes the event.
     */
    message: FormattedString;
    
    /**
     * The raw body of the comment event.
     */
    rawMessage: string;
    
    /**
     * The parent subject to which the comment event belongs.
     */
    subject: CommentEventSubject;
  }
  
  /**
   * A file attachment associated to a comment event.
   */
  export interface CommentEventAttachment {
    
    /**
     * The file extension of the comment event attachment, indicating the file format.
     */
    fileExtension?: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The image attached to the comment event.
     */
    image?: Image;
    
    /**
     * The filename of the comment event attachment.
     */
    name: string;
    
    /**
     * The size of the attachment.
     */
    size: number;
    
    /**
     * The URL of the attachment.
     */
    url: URL;
  }
  
  /**
   * The main embed of a comment event.
   */
  export type CommentEventEmbed =
  Customer |
  DraftOrder |
  Order |
  Product |
  ProductVariant;
  
  /** Use this to resolve union type CommentEventEmbed */
  export type PossibleCommentEventEmbedTypeNames =
  'Customer' |
  'DraftOrder' |
  'Order' |
  'Product' |
  'ProductVariant';
  
  export interface CommentEventEmbedNameMap {
    CommentEventEmbed: CommentEventEmbed;
    Customer: Customer;
    DraftOrder: DraftOrder;
    Order: Order;
    Product: Product;
    ProductVariant: ProductVariant;
  }
  
  /**
   * A list of products with publishing and pricing information associated with company locations.
   * 
   */
  export interface CompanyLocationCatalog extends Catalog, Node {
    
    /**
     * The company locations associated with the catalog.
     */
    companyLocations: CompanyLocationConnection;
    
    /**
     * The number of company locations associated with the catalog.
     */
    companyLocationsCount: number;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * Most recent catalog operations.
     */
    operations: Array<ResourceOperation>;
    
    /**
     * The price list associated with the catalog.
     */
    priceList?: PriceList;
    
    /**
     * A group of products and collections that's published to a catalog.
     */
    publication?: Publication;
    
    /**
     * The status of the catalog.
     */
    status: CatalogStatus;
    
    /**
     * The name of the catalog.
     */
    title: string;
  }
  
  /**
   * Discount code applications capture the intentions of a discount code at
   * the time that it is applied onto an order.
   * 
   * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
   * 
   */
  export interface DiscountCodeApplication extends DiscountApplication {
    
    /**
     * The method by which the discount's value is applied to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * The string identifying the discount code that was used at the time of application.
     */
    code: string;
    
    /**
     * An ordered index that can be used to identify the discount application and indicate the precedence
     * of the discount application for calculations.
     * 
     */
    index: number;
    
    /**
     * How the discount amount is distributed on the discounted lines.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * Whether the discount is applied on line items or shipping lines.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * A sale associated with a duty charge.
   */
  export interface DutySale extends Sale {
    
    /**
     * The type of order action that the sale represents.
     */
    actionType: SaleActionType;
    
    /**
     * The duty for the associated sale.
     */
    duty: Duty;
    
    /**
     * The unique ID for the sale.
     */
    id: string;
    
    /**
     * The line type assocated with the sale.
     */
    lineType: SaleLineType;
    
    /**
     * The number of units either ordered or intended to be returned.
     */
    quantity?: number;
    
    /**
     * All individual taxes associated with the sale.
     */
    taxes: Array<SaleTax>;
    
    /**
     * The total sale amount after taxes and discounts.
     */
    totalAmount: MoneyBag;
    
    /**
     * The total discounts allocated to the sale after taxes.
     */
    totalDiscountAmountAfterTaxes: MoneyBag;
    
    /**
     * The total discounts allocated to the sale before taxes.
     */
    totalDiscountAmountBeforeTaxes: MoneyBag;
    
    /**
     * The total amount of taxes for the sale.
     */
    totalTaxAmount: MoneyBag;
  }
  
  /**
   * Represents a video hosted outside of Shopify.
   * 
   */
  export interface ExternalVideo extends Media, Node {
    
    /**
     * A word or phrase to share the nature or contents of a media.
     */
    alt?: string;
    
    /**
     * The embed URL of the video for the respective host.
     */
    embedUrl: URL;
    
    /**
     * The URL.
     * @deprecated Use `originUrl` instead.
     */
    embeddedUrl: URL;
    
    /**
     * The host of the external video.
     */
    host: MediaHost;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The media content type.
     */
    mediaContentType: MediaContentType;
    
    /**
     * Any errors which have occurred on the media.
     */
    mediaErrors: Array<MediaError>;
    
    /**
     * The warnings attached to the media.
     */
    mediaWarnings: Array<MediaWarning>;
    
    /**
     * The origin URL of the video on the respective host.
     */
    originUrl: URL;
    
    /**
     * The preview image for the media.
     */
    preview?: MediaPreviewImage;
    
    /**
     * Current status of the media.
     */
    status: MediaStatus;
  }
  
  /**
   * Host for a Media Resource.
   */
  export const enum MediaHost {
    
    /**
     * Host for YouTube embedded videos.
     */
    YOUTUBE = 'YOUTUBE',
    
    /**
     * Host for Vimeo embedded videos.
     */
    VIMEO = 'VIMEO'
  }
  
  /**
   * A sale associated with a gift card.
   */
  export interface GiftCardSale extends Sale {
    
    /**
     * The type of order action that the sale represents.
     */
    actionType: SaleActionType;
    
    /**
     * The unique ID for the sale.
     */
    id: string;
    
    /**
     * The line item for the associated sale.
     */
    lineItem: LineItem;
    
    /**
     * The line type assocated with the sale.
     */
    lineType: SaleLineType;
    
    /**
     * The number of units either ordered or intended to be returned.
     */
    quantity?: number;
    
    /**
     * All individual taxes associated with the sale.
     */
    taxes: Array<SaleTax>;
    
    /**
     * The total sale amount after taxes and discounts.
     */
    totalAmount: MoneyBag;
    
    /**
     * The total discounts allocated to the sale after taxes.
     */
    totalDiscountAmountAfterTaxes: MoneyBag;
    
    /**
     * The total discounts allocated to the sale before taxes.
     */
    totalDiscountAmountBeforeTaxes: MoneyBag;
    
    /**
     * The total amount of taxes for the sale.
     */
    totalTaxAmount: MoneyBag;
  }
  
  /**
   * Manual discount applications capture the intentions of a discount that was manually created for an order.
   * 
   * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
   * 
   */
  export interface ManualDiscountApplication extends DiscountApplication {
    
    /**
     * The method by which the discount's value is applied to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * The description of the discount application.
     */
    description?: string;
    
    /**
     * An ordered index that can be used to identify the discount application and indicate the precedence
     * of the discount application for calculations.
     * 
     */
    index: number;
    
    /**
     * How the discount amount is distributed on the discounted lines.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * Whether the discount is applied on line items or shipping lines.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The title of the discount application.
     */
    title: string;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * A country which comprises a market.
   */
  export interface MarketRegionCountry extends MarketRegion, Node {
    
    /**
     * The ISO code identifying the country.
     */
    code: CountryCode;
    
    /**
     * The currency which this country uses given its market settings.
     */
    currency: CurrencySetting;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The name of the region.
     */
    name: string;
  }
  
  /**
   * Represents a Shopify hosted 3D model.
   * 
   */
  export interface Model3d extends Media, Node {
    
    /**
     * A word or phrase to share the nature or contents of a media.
     */
    alt?: string;
    
    /**
     * The 3d model's bounding box information.
     */
    boundingBox?: Model3dBoundingBox;
    
    /**
     * The 3d model's filename.
     */
    filename: string;
    
    /**
     * A globally-unique ID.
     */
    id: string;
    
    /**
     * The media content type.
     */
    mediaContentType: MediaContentType;
    
    /**
     * Any errors which have occurred on the media.
     */
    mediaErrors: Array<MediaError>;
    
    /**
     * The warnings attached to the media.
     */
    mediaWarnings: Array<MediaWarning>;
    
    /**
     * The 3d model's original source.
     */
    originalSource?: Model3dSource;
    
    /**
     * The preview image for the media.
     */
    preview?: MediaPreviewImage;
    
    /**
     * The 3d model's sources.
     */
    sources: Array<Model3dSource>;
    
    /**
     * Current status of the media.
     */
    status: MediaStatus;
  }
  
  /**
   * Bounding box information of a 3d model.
   * 
   */
  export interface Model3dBoundingBox {
    
    /**
     * Size in meters of the smallest volume which contains the 3d model.
     * 
     */
    size: Vector3;
  }
  
  /**
   * Representation of 3d vectors and points. It can represent
   * either the coordinates of a point in space, a direction, or
   * size. Presented as an object with three floating-point values.
   * 
   */
  export interface Vector3 {
    
    /**
     * The x coordinate of Vector3.
     */
    x: number;
    
    /**
     * The y coordinate of Vector3.
     */
    y: number;
    
    /**
     * The z coordinate of Vector3.
     */
    z: number;
  }
  
  /**
   * A source for a Shopify-hosted 3d model.
   * 
   * Types of sources include GLB and USDZ formatted 3d models, where the former
   * is an original 3d model and the latter has been converted from the original.
   * 
   * If the original source is in GLB format and over 15 MBs in size, then both the
   * original and the USDZ formatted source are optimized to reduce the file size.
   * 
   */
  export interface Model3dSource {
    
    /**
     * The 3d model source's filesize.
     */
    filesize: number;
    
    /**
     * The 3d model source's format.
     */
    format: string;
    
    /**
     * The 3d model source's MIME type.
     */
    mimeType: string;
    
    /**
     * The 3d model source's URL.
     */
    url: string;
  }
  
  /**
   * An agreement associated with an order placement.
   */
  export interface OrderAgreement extends SalesAgreement {
    
    /**
     * The application that created the agreement.
     */
    app?: App;
    
    /**
     * The date and time at which the agreement occured.
     */
    happenedAt: DateTime;
    
    /**
     * The unique ID for the agreement.
     */
    id: string;
    
    /**
     * The order associated with the agreement.
     */
    order: Order;
    
    /**
     * The reason the agremeent was created.
     */
    reason: OrderActionType;
    
    /**
     * The sales associated with the agreement.
     */
    sales: SaleConnection;
    
    /**
     * The staff member associated with the agreement.
     */
    user?: StaffMember;
  }
  
  /**
   * An agreement associated with an edit to the order.
   */
  export interface OrderEditAgreement extends SalesAgreement {
    
    /**
     * The application that created the agreement.
     */
    app?: App;
    
    /**
     * The date and time at which the agreement occured.
     */
    happenedAt: DateTime;
    
    /**
     * The unique ID for the agreement.
     */
    id: string;
    
    /**
     * The reason the agremeent was created.
     */
    reason: OrderActionType;
    
    /**
     * The sales associated with the agreement.
     */
    sales: SaleConnection;
    
    /**
     * The staff member associated with the agreement.
     */
    user?: StaffMember;
  }
  
  /**
   * A PolarisViz data point structure for ShopifyQL query.
   */
  export interface PolarisVizDataPoint {
    
    /**
     * The data key. Typically a category, dimension, or other qualitative data.
     */
    key: string;
    
    /**
     * The data value is numeric and quantitative.
     */
    value?: string;
  }
  
  /**
   * The data series used for PolarisViz visualization.
   */
  export interface PolarisVizDataSeries {
    
    /**
     * An array of data points.
     */
    data: Array<PolarisVizDataPoint>;
    
    /**
     * Whether the series represents comparison data.
     */
    isComparison: boolean;
    
    /**
     * The name of the series.
     */
    name: string;
  }
  
  /**
   * A PolarisViz response to a ShopifyQL query.
   */
  export interface PolarisVizResponse extends ShopifyqlResponse {
    
    /**
     * The PolarisViz visualization of data.
     */
    data: Array<PolarisVizDataSeries>;
    
    /**
     * A list of parse errors, if parsing fails.
     */
    parseErrors?: Array<ParseError>;
    
    /**
     * The result in a tabular format with schema and row data.
     *                 It's always present even if query has a `VISUALIZE` keyword.
     */
    tableData?: TableData;
    
    /**
     * The type of visualization. For example, a line chart.
     */
    vizType: VisualizationType;
  }
  
  /**
   * A type of visualization.
   */
  export const enum VisualizationType {
    
    /**
     * Line Chart.
     */
    LINE = 'LINE',
    
    /**
     * Bar Chart.
     */
    BAR = 'BAR'
  }
  
  /**
   * Specifies the quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
   */
  export interface PriceRuleEntitlementToPrerequisiteQuantityRatioInput {
    
    /**
     * The quantity of entitled items in the ratio.
     */
    entitlementQuantity?: number;
    
    /**
     * The quantity of prerequisite items in the ratio.
     */
    prerequisiteQuantity?: number;
  }
  
  /**
   * A sale associated with a product.
   */
  export interface ProductSale extends Sale {
    
    /**
     * The type of order action that the sale represents.
     */
    actionType: SaleActionType;
    
    /**
     * The unique ID for the sale.
     */
    id: string;
    
    /**
     * The line item for the associated sale.
     */
    lineItem: LineItem;
    
    /**
     * The line type assocated with the sale.
     */
    lineType: SaleLineType;
    
    /**
     * The number of units either ordered or intended to be returned.
     */
    quantity?: number;
    
    /**
     * All individual taxes associated with the sale.
     */
    taxes: Array<SaleTax>;
    
    /**
     * The total sale amount after taxes and discounts.
     */
    totalAmount: MoneyBag;
    
    /**
     * The total discounts allocated to the sale after taxes.
     */
    totalDiscountAmountAfterTaxes: MoneyBag;
    
    /**
     * The total discounts allocated to the sale before taxes.
     */
    totalDiscountAmountBeforeTaxes: MoneyBag;
    
    /**
     * The total amount of taxes for the sale.
     */
    totalTaxAmount: MoneyBag;
  }
  
  /**
   * The set of valid sort keys for the ProfileItem query.
   */
  export const enum ProfileItemSortKeys {
    
    /**
     * Sort by the `title` value.
     */
    TITLE = 'TITLE',
    
    /**
     * Sort by the `product_type` value.
     */
    PRODUCT_TYPE = 'PRODUCT_TYPE',
    
    /**
     * Sort by the `vendor` value.
     */
    VENDOR = 'VENDOR',
    
    /**
     * Sort by the `inventory_total` value.
     */
    INVENTORY_TOTAL = 'INVENTORY_TOTAL',
    
    /**
     * Sort by the `updated_at` value.
     */
    UPDATED_AT = 'UPDATED_AT',
    
    /**
     * Sort by the `created_at` value.
     */
    CREATED_AT = 'CREATED_AT',
    
    /**
     * Sort by the `published_at` value.
     */
    PUBLISHED_AT = 'PUBLISHED_AT',
    
    /**
     * Sort by the `id` value.
     */
    ID = 'ID',
    
    /**
     * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
     * Don't use this sort key when no search query is specified.
     * 
     */
    RELEVANCE = 'RELEVANCE'
  }
  
  /**
   * An agreement between the merchant and customer to refund all or a portion of the order.
   */
  export interface RefundAgreement extends SalesAgreement {
    
    /**
     * The application that created the agreement.
     */
    app?: App;
    
    /**
     * The date and time at which the agreement occured.
     */
    happenedAt: DateTime;
    
    /**
     * The unique ID for the agreement.
     */
    id: string;
    
    /**
     * The reason the agremeent was created.
     */
    reason: OrderActionType;
    
    /**
     * The refund associated with the agreement.
     */
    refund: Refund;
    
    /**
     * The sales associated with the agreement.
     */
    sales: SaleConnection;
    
    /**
     * The staff member associated with the agreement.
     */
    user?: StaffMember;
  }
  
  /**
   * Script discount applications capture the intentions of a discount that
   * was created by a Shopify Script for an order's line item or shipping line.
   * 
   * Discount applications don't represent the actual final amount discounted on a line (line item or shipping line). The actual amount discounted on a line is represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
   * 
   */
  export interface ScriptDiscountApplication extends DiscountApplication {
    
    /**
     * The method by which the discount's value is applied to its entitled items.
     */
    allocationMethod: DiscountApplicationAllocationMethod;
    
    /**
     * The description of the application as defined by the Script.
     * @deprecated Use `title` instead.
     */
    description: string;
    
    /**
     * An ordered index that can be used to identify the discount application and indicate the precedence
     * of the discount application for calculations.
     * 
     */
    index: number;
    
    /**
     * How the discount amount is distributed on the discounted lines.
     */
    targetSelection: DiscountApplicationTargetSelection;
    
    /**
     * Whether the discount is applied on line items or shipping lines.
     */
    targetType: DiscountApplicationTargetType;
    
    /**
     * The title of the application as defined by the Script.
     */
    title: string;
    
    /**
     * The value of the discount application.
     */
    value: PricingValue;
  }
  
  /**
   * A filter that takes a value that's associated with an object. For example, the `tags` field is associated with the [`Customer`](/api/admin-graphql/latest/objects/Customer) object.
   */
  export interface SegmentAssociationFilter extends SegmentFilter {
    
    /**
     * The localized name of the filter.
     */
    localizedName: string;
    
    /**
     * Whether a file can have multiple values for a single customer.
     */
    multiValue: boolean;
    
    /**
     * The query name of the filter.
     */
    queryName: string;
  }
  
  /**
   * A filter with a Boolean value that's been added to a segment query.
   */
  export interface SegmentBooleanFilter extends SegmentFilter {
    
    /**
     * The localized name of the filter.
     */
    localizedName: string;
    
    /**
     * Whether a file can have multiple values for a single customer.
     */
    multiValue: boolean;
    
    /**
     * The query name of the filter.
     */
    queryName: string;
  }
  
  /**
   * A filter with a date value that's been added to a segment query.
   */
  export interface SegmentDateFilter extends SegmentFilter {
    
    /**
     * The localized name of the filter.
     */
    localizedName: string;
    
    /**
     * Whether a file can have multiple values for a single customer.
     */
    multiValue: boolean;
    
    /**
     * The query name of the filter.
     */
    queryName: string;
  }
  
  /**
   * A filter with a set of possible values that's been added to a segment query.
   */
  export interface SegmentEnumFilter extends SegmentFilter {
    
    /**
     * The localized name of the filter.
     */
    localizedName: string;
    
    /**
     * Whether a file can have multiple values for a single customer.
     */
    multiValue: boolean;
    
    /**
     * The query name of the filter.
     */
    queryName: string;
  }
  
  /**
   * A filter that's used to segment customers based on the date that an event occured. For example, the `product_bought` event filter allows you to segment customers based on what products they've bought.
   */
  export interface SegmentEventFilter extends SegmentFilter {
    
    /**
     * The localized name of the filter.
     */
    localizedName: string;
    
    /**
     * Whether a file can have multiple values for a single customer.
     */
    multiValue: boolean;
    
    /**
     * The parameters for an event segment filter.
     */
    parameters: Array<SegmentEventFilterParameter>;
    
    /**
     * The query name of the filter.
     */
    queryName: string;
    
    /**
     * The return value type for an event segment filter.
     */
    returnValueType: string;
  }
  
  /**
   * The parameters for an event segment filter.
   */
  export interface SegmentEventFilterParameter {
    
    /**
     * Whether the parameter accepts a list of values.
     */
    acceptsMultipleValues: boolean;
    
    /**
     * The localized description of the parameter.
     */
    localizedDescription: string;
    
    /**
     * The localized name of the parameter.
     */
    localizedName: string;
    
    /**
     * Whether the parameter is optional.
     */
    optional: boolean;
    
    /**
     * The type of the parameter.
     */
    parameterType: string;
    
    /**
     * The query name of the parameter.
     */
    queryName: string;
  }
  
  /**
   * A filter with a double-precision, floating-point value that's been added to a segment query.
   */
  export interface SegmentFloatFilter extends SegmentFilter {
    
    /**
     * The localized name of the filter.
     */
    localizedName: string;
    
    /**
     * Whether a file can have multiple values for a single customer.
     */
    multiValue: boolean;
    
    /**
     * The query name of the filter.
     */
    queryName: string;
  }
  
  /**
   * A filter with an integer that's been added to a segment query.
   */
  export interface SegmentIntegerFilter extends SegmentFilter {
    
    /**
     * The localized name of the filter.
     */
    localizedName: string;
    
    /**
     * Whether a file can have multiple values for a single customer.
     */
    multiValue: boolean;
    
    /**
     * The query name of the filter.
     */
    queryName: string;
  }
  
  /**
   * A filter with a string that's been added to a segment query.
   */
  export interface SegmentStringFilter extends SegmentFilter {
    
    /**
     * The localized name of the filter.
     */
    localizedName: string;
    
    /**
     * Whether a file can have multiple values for a single customer.
     */
    multiValue: boolean;
    
    /**
     * The query name of the filter.
     */
    queryName: string;
  }
  
  /**
   * A sale associated with a shipping charge.
   */
  export interface ShippingLineSale extends Sale {
    
    /**
     * The type of order action that the sale represents.
     */
    actionType: SaleActionType;
    
    /**
     * The unique ID for the sale.
     */
    id: string;
    
    /**
     * The line type assocated with the sale.
     */
    lineType: SaleLineType;
    
    /**
     * The number of units either ordered or intended to be returned.
     */
    quantity?: number;
    
    /**
     * The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return.
     */
    shippingLine?: ShippingLine;
    
    /**
     * All individual taxes associated with the sale.
     */
    taxes: Array<SaleTax>;
    
    /**
     * The total sale amount after taxes and discounts.
     */
    totalAmount: MoneyBag;
    
    /**
     * The total discounts allocated to the sale after taxes.
     */
    totalDiscountAmountAfterTaxes: MoneyBag;
    
    /**
     * The total discounts allocated to the sale before taxes.
     */
    totalDiscountAmountBeforeTaxes: MoneyBag;
    
    /**
     * The total amount of taxes for the sale.
     */
    totalTaxAmount: MoneyBag;
  }
  
  /**
   * The charge descriptors for a payments account.
   */
  export interface ShopifyPaymentsDefaultChargeStatementDescriptor extends ShopifyPaymentsChargeStatementDescriptor {
    
    /**
     * The default charge statement descriptor.
     */
    default?: string;
    
    /**
     * The prefix of the statement descriptor.
     */
    prefix: string;
  }
  
  /**
   * The charge descriptors for a Japanese payments account.
   */
  export interface ShopifyPaymentsJpChargeStatementDescriptor extends ShopifyPaymentsChargeStatementDescriptor {
    
    /**
     * The default charge statement descriptor.
     */
    default?: string;
    
    /**
     * The charge statement descriptor in kana.
     */
    kana?: string;
    
    /**
     * The charge statement descriptor in kanji.
     */
    kanji?: string;
    
    /**
     * The prefix of the statement descriptor.
     */
    prefix: string;
  }
  
  /**
   * The default table response structure for a ShopifyQL query.
   */
  export interface TableResponse extends ShopifyqlResponse {
    
    /**
     * A list of parse errors, if parsing fails.
     */
    parseErrors?: Array<ParseError>;
    
    /**
     * The result in a tabular format with schema and row data.
     */
    tableData?: TableData;
  }
  
  /**
   * A sale associated with a tip.
   */
  export interface TipSale extends Sale {
    
    /**
     * The type of order action that the sale represents.
     */
    actionType: SaleActionType;
    
    /**
     * The unique ID for the sale.
     */
    id: string;
    
    /**
     * The line item for the associated sale.
     */
    lineItem: LineItem;
    
    /**
     * The line type assocated with the sale.
     */
    lineType: SaleLineType;
    
    /**
     * The number of units either ordered or intended to be returned.
     */
    quantity?: number;
    
    /**
     * All individual taxes associated with the sale.
     */
    taxes: Array<SaleTax>;
    
    /**
     * The total sale amount after taxes and discounts.
     */
    totalAmount: MoneyBag;
    
    /**
     * The total discounts allocated to the sale after taxes.
     */
    totalDiscountAmountAfterTaxes: MoneyBag;
    
    /**
     * The total discounts allocated to the sale before taxes.
     */
    totalDiscountAmountBeforeTaxes: MoneyBag;
    
    /**
     * The total amount of taxes for the sale.
     */
    totalTaxAmount: MoneyBag;
  }
  
  /**
   * This is represents new sale types that have been added in future API versions. You may update to a more recent API version to receive additional details about this sale.
   */
  export interface UnknownSale extends Sale {
    
    /**
     * The type of order action that the sale represents.
     */
    actionType: SaleActionType;
    
    /**
     * The unique ID for the sale.
     */
    id: string;
    
    /**
     * The line type assocated with the sale.
     */
    lineType: SaleLineType;
    
    /**
     * The number of units either ordered or intended to be returned.
     */
    quantity?: number;
    
    /**
     * All individual taxes associated with the sale.
     */
    taxes: Array<SaleTax>;
    
    /**
     * The total sale amount after taxes and discounts.
     */
    totalAmount: MoneyBag;
    
    /**
     * The total discounts allocated to the sale after taxes.
     */
    totalDiscountAmountAfterTaxes: MoneyBag;
    
    /**
     * The total discounts allocated to the sale before taxes.
     */
    totalDiscountAmountBeforeTaxes: MoneyBag;
    
    /**
     * The total amount of taxes for the sale.
     */
    totalTaxAmount: MoneyBag;
  }
  
  /*********************************
   *                               *
   *         TYPE RESOLVERS        *
   *                               *
   *********************************/
  /**
   * This interface define the shape of your resolver
   * Note that this type is designed to be compatible with graphql-tools resolvers
   * However, you can still use other generated interfaces to make your resolver type-safed
   */
  export interface Resolver {
    QueryRoot?: QueryRootTypeResolver;
    Abandonment?: AbandonmentTypeResolver;
    Node?: {
      __resolveType: NodeTypeResolver
    };
    
    AbandonedCheckout?: AbandonedCheckoutTypeResolver;
    Navigable?: {
      __resolveType: NavigableTypeResolver
    };
    
    URL?: GraphQLScalarType;
    AbandonedCheckoutLineItemConnection?: AbandonedCheckoutLineItemConnectionTypeResolver;
    AbandonedCheckoutLineItemEdge?: AbandonedCheckoutLineItemEdgeTypeResolver;
    AbandonedCheckoutLineItem?: AbandonedCheckoutLineItemTypeResolver;
    Attribute?: AttributeTypeResolver;
    MoneyBag?: MoneyBagTypeResolver;
    MoneyV2?: MoneyV2TypeResolver;
    Decimal?: GraphQLScalarType;
    Image?: ImageTypeResolver;
    HasMetafields?: {
      __resolveType: HasMetafieldsTypeResolver
    };
    
    Metafield?: MetafieldTypeResolver;
    LegacyInteroperability?: {
      __resolveType: LegacyInteroperabilityTypeResolver
    };
    
    UnsignedInt64?: GraphQLScalarType;
    DateTime?: GraphQLScalarType;
    MetafieldDefinition?: MetafieldDefinitionTypeResolver;
    MetafieldAccess?: MetafieldAccessTypeResolver;
    MetafieldAccessGrant?: MetafieldAccessGrantTypeResolver;
    MetafieldConnection?: MetafieldConnectionTypeResolver;
    MetafieldEdge?: MetafieldEdgeTypeResolver;
    PageInfo?: PageInfoTypeResolver;
    StandardMetafieldDefinitionTemplate?: StandardMetafieldDefinitionTemplateTypeResolver;
    MetafieldDefinitionType?: MetafieldDefinitionTypeTypeResolver;
    MetafieldDefinitionSupportedValidation?: MetafieldDefinitionSupportedValidationTypeResolver;
    MetafieldDefinitionValidation?: MetafieldDefinitionValidationTypeResolver;
    MetafieldReference?: {
      __resolveType: MetafieldReferenceTypeResolver
    };
    
    Collection?: CollectionTypeResolver;
    HasMetafieldDefinitions?: {
      __resolveType: HasMetafieldDefinitionsTypeResolver
    };
    
    MetafieldDefinitionConnection?: MetafieldDefinitionConnectionTypeResolver;
    MetafieldDefinitionEdge?: MetafieldDefinitionEdgeTypeResolver;
    HasPublishedTranslations?: {
      __resolveType: HasPublishedTranslationsTypeResolver
    };
    
    Translation?: TranslationTypeResolver;
    Market?: MarketTypeResolver;
    MarketCatalogConnection?: MarketCatalogConnectionTypeResolver;
    MarketCatalogEdge?: MarketCatalogEdgeTypeResolver;
    MarketCatalog?: MarketCatalogTypeResolver;
    Catalog?: {
      __resolveType: CatalogTypeResolver
    };
    
    ResourceOperation?: {
      __resolveType: ResourceOperationTypeResolver
    };
    
    RowCount?: RowCountTypeResolver;
    PriceList?: PriceListTypeResolver;
    PriceListParent?: PriceListParentTypeResolver;
    PriceListAdjustment?: PriceListAdjustmentTypeResolver;
    PriceListAdjustmentSettings?: PriceListAdjustmentSettingsTypeResolver;
    PriceListPriceConnection?: PriceListPriceConnectionTypeResolver;
    PriceListPriceEdge?: PriceListPriceEdgeTypeResolver;
    PriceListPrice?: PriceListPriceTypeResolver;
    QuantityPriceBreakConnection?: QuantityPriceBreakConnectionTypeResolver;
    QuantityPriceBreakEdge?: QuantityPriceBreakEdgeTypeResolver;
    QuantityPriceBreak?: QuantityPriceBreakTypeResolver;
    ProductVariant?: ProductVariantTypeResolver;
    Money?: GraphQLScalarType;
    ProductVariantContextualPricing?: ProductVariantContextualPricingTypeResolver;
    QuantityRule?: QuantityRuleTypeResolver;
    DeliveryProfile?: DeliveryProfileTypeResolver;
    DeliveryProductVariantsCount?: DeliveryProductVariantsCountTypeResolver;
    DeliveryProfileItemConnection?: DeliveryProfileItemConnectionTypeResolver;
    DeliveryProfileItemEdge?: DeliveryProfileItemEdgeTypeResolver;
    DeliveryProfileItem?: DeliveryProfileItemTypeResolver;
    Product?: ProductTypeResolver;
    OnlineStorePreviewable?: {
      __resolveType: OnlineStorePreviewableTypeResolver
    };
    
    Publishable?: {
      __resolveType: PublishableTypeResolver
    };
    
    ResourcePublicationConnection?: ResourcePublicationConnectionTypeResolver;
    ResourcePublicationEdge?: ResourcePublicationEdgeTypeResolver;
    ResourcePublication?: ResourcePublicationTypeResolver;
    Channel?: ChannelTypeResolver;
    App?: AppTypeResolver;
    AccessScope?: AccessScopeTypeResolver;
    FailedRequirement?: FailedRequirementTypeResolver;
    NavigationItem?: NavigationItemTypeResolver;
    AppFeedback?: AppFeedbackTypeResolver;
    Link?: LinkTypeResolver;
    UserError?: UserErrorTypeResolver;
    DisplayableError?: {
      __resolveType: DisplayableErrorTypeResolver
    };
    
    AppInstallation?: AppInstallationTypeResolver;
    AppSubscription?: AppSubscriptionTypeResolver;
    AppSubscriptionLineItem?: AppSubscriptionLineItemTypeResolver;
    AppPlanV2?: AppPlanV2TypeResolver;
    AppPricingDetails?: {
      __resolveType: AppPricingDetailsTypeResolver
    };
    
    AppRecurringPricing?: AppRecurringPricingTypeResolver;
    AppSubscriptionDiscount?: AppSubscriptionDiscountTypeResolver;
    AppSubscriptionDiscountValue?: {
      __resolveType: AppSubscriptionDiscountValueTypeResolver
    };
    
    AppSubscriptionDiscountAmount?: AppSubscriptionDiscountAmountTypeResolver;
    AppSubscriptionDiscountPercentage?: AppSubscriptionDiscountPercentageTypeResolver;
    AppUsagePricing?: AppUsagePricingTypeResolver;
    AppUsageRecordConnection?: AppUsageRecordConnectionTypeResolver;
    AppUsageRecordEdge?: AppUsageRecordEdgeTypeResolver;
    AppUsageRecord?: AppUsageRecordTypeResolver;
    AppSubscriptionConnection?: AppSubscriptionConnectionTypeResolver;
    AppSubscriptionEdge?: AppSubscriptionEdgeTypeResolver;
    AppCreditConnection?: AppCreditConnectionTypeResolver;
    AppCreditEdge?: AppCreditEdgeTypeResolver;
    AppCredit?: AppCreditTypeResolver;
    AppPurchaseOneTimeConnection?: AppPurchaseOneTimeConnectionTypeResolver;
    AppPurchaseOneTimeEdge?: AppPurchaseOneTimeEdgeTypeResolver;
    AppPurchaseOneTime?: AppPurchaseOneTimeTypeResolver;
    AppPurchase?: {
      __resolveType: AppPurchaseTypeResolver
    };
    
    PrivateMetafield?: PrivateMetafieldTypeResolver;
    PrivateMetafieldConnection?: PrivateMetafieldConnectionTypeResolver;
    PrivateMetafieldEdge?: PrivateMetafieldEdgeTypeResolver;
    Publication?: PublicationTypeResolver;
    CollectionConnection?: CollectionConnectionTypeResolver;
    CollectionEdge?: CollectionEdgeTypeResolver;
    PublicationOperation?: {
      __resolveType: PublicationOperationTypeResolver
    };
    
    AddAllProductsOperation?: AddAllProductsOperationTypeResolver;
    CatalogCsvOperation?: CatalogCsvOperationTypeResolver;
    PublicationResourceOperation?: PublicationResourceOperationTypeResolver;
    ProductConnection?: ProductConnectionTypeResolver;
    ProductEdge?: ProductEdgeTypeResolver;
    AppRevenueAttributionRecordConnection?: AppRevenueAttributionRecordConnectionTypeResolver;
    AppRevenueAttributionRecordEdge?: AppRevenueAttributionRecordEdgeTypeResolver;
    AppRevenueAttributionRecord?: AppRevenueAttributionRecordTypeResolver;
    ProductPublicationConnection?: ProductPublicationConnectionTypeResolver;
    ProductPublicationEdge?: ProductPublicationEdgeTypeResolver;
    ProductPublication?: ProductPublicationTypeResolver;
    ResourcePublicationV2Connection?: ResourcePublicationV2ConnectionTypeResolver;
    ResourcePublicationV2Edge?: ResourcePublicationV2EdgeTypeResolver;
    ResourcePublicationV2?: ResourcePublicationV2TypeResolver;
    ChannelConnection?: ChannelConnectionTypeResolver;
    ChannelEdge?: ChannelEdgeTypeResolver;
    PublicationConnection?: PublicationConnectionTypeResolver;
    PublicationEdge?: PublicationEdgeTypeResolver;
    ProductCompareAtPriceRange?: ProductCompareAtPriceRangeTypeResolver;
    ProductContextualPricing?: ProductContextualPricingTypeResolver;
    ProductPriceRangeV2?: ProductPriceRangeV2TypeResolver;
    HTML?: GraphQLScalarType;
    Media?: {
      __resolveType: MediaTypeResolver
    };
    
    MediaError?: MediaErrorTypeResolver;
    MediaWarning?: MediaWarningTypeResolver;
    MediaPreviewImage?: MediaPreviewImageTypeResolver;
    ResourceFeedback?: ResourceFeedbackTypeResolver;
    ImageConnection?: ImageConnectionTypeResolver;
    ImageEdge?: ImageEdgeTypeResolver;
    MediaConnection?: MediaConnectionTypeResolver;
    MediaEdge?: MediaEdgeTypeResolver;
    ProductOption?: ProductOptionTypeResolver;
    ProductPriceRange?: ProductPriceRangeTypeResolver;
    ProductCategory?: ProductCategoryTypeResolver;
    ProductTaxonomyNode?: ProductTaxonomyNodeTypeResolver;
    SellingPlanGroupConnection?: SellingPlanGroupConnectionTypeResolver;
    SellingPlanGroupEdge?: SellingPlanGroupEdgeTypeResolver;
    SellingPlanGroup?: SellingPlanGroupTypeResolver;
    ProductVariantConnection?: ProductVariantConnectionTypeResolver;
    ProductVariantEdge?: ProductVariantEdgeTypeResolver;
    SellingPlanConnection?: SellingPlanConnectionTypeResolver;
    SellingPlanEdge?: SellingPlanEdgeTypeResolver;
    SellingPlan?: SellingPlanTypeResolver;
    SellingPlanBillingPolicy?: {
      __resolveType: SellingPlanBillingPolicyTypeResolver
    };
    
    SellingPlanFixedBillingPolicy?: SellingPlanFixedBillingPolicyTypeResolver;
    SellingPlanCheckoutCharge?: SellingPlanCheckoutChargeTypeResolver;
    SellingPlanCheckoutChargeValue?: {
      __resolveType: SellingPlanCheckoutChargeValueTypeResolver
    };
    
    SellingPlanCheckoutChargePercentageValue?: SellingPlanCheckoutChargePercentageValueTypeResolver;
    SellingPlanRecurringBillingPolicy?: SellingPlanRecurringBillingPolicyTypeResolver;
    SellingPlanAnchor?: SellingPlanAnchorTypeResolver;
    SellingPlanDeliveryPolicy?: {
      __resolveType: SellingPlanDeliveryPolicyTypeResolver
    };
    
    SellingPlanFixedDeliveryPolicy?: SellingPlanFixedDeliveryPolicyTypeResolver;
    SellingPlanRecurringDeliveryPolicy?: SellingPlanRecurringDeliveryPolicyTypeResolver;
    SellingPlanInventoryPolicy?: SellingPlanInventoryPolicyTypeResolver;
    SellingPlanPricingPolicy?: {
      __resolveType: SellingPlanPricingPolicyTypeResolver
    };
    
    SellingPlanFixedPricingPolicy?: SellingPlanFixedPricingPolicyTypeResolver;
    SellingPlanPricingPolicyBase?: {
      __resolveType: SellingPlanPricingPolicyBaseTypeResolver
    };
    
    SellingPlanPricingPolicyAdjustmentValue?: {
      __resolveType: SellingPlanPricingPolicyAdjustmentValueTypeResolver
    };
    
    SellingPlanPricingPolicyPercentageValue?: SellingPlanPricingPolicyPercentageValueTypeResolver;
    SellingPlanRecurringPricingPolicy?: SellingPlanRecurringPricingPolicyTypeResolver;
    SEO?: SEOTypeResolver;
    StandardizedProductType?: StandardizedProductTypeTypeResolver;
    StorefrontID?: GraphQLScalarType;
    DeliveryProfileLocationGroup?: DeliveryProfileLocationGroupTypeResolver;
    DeliveryCountryAndZone?: DeliveryCountryAndZoneTypeResolver;
    DeliveryCountry?: DeliveryCountryTypeResolver;
    DeliveryCountryCodeOrRestOfWorld?: DeliveryCountryCodeOrRestOfWorldTypeResolver;
    DeliveryProvince?: DeliveryProvinceTypeResolver;
    DeliveryLocationGroup?: DeliveryLocationGroupTypeResolver;
    LocationConnection?: LocationConnectionTypeResolver;
    LocationEdge?: LocationEdgeTypeResolver;
    Location?: LocationTypeResolver;
    LocationAddress?: LocationAddressTypeResolver;
    FulfillmentService?: FulfillmentServiceTypeResolver;
    ShippingMethod?: ShippingMethodTypeResolver;
    InventoryLevel?: InventoryLevelTypeResolver;
    FormattedString?: GraphQLScalarType;
    InventoryItem?: InventoryItemTypeResolver;
    CountryHarmonizedSystemCodeConnection?: CountryHarmonizedSystemCodeConnectionTypeResolver;
    CountryHarmonizedSystemCodeEdge?: CountryHarmonizedSystemCodeEdgeTypeResolver;
    CountryHarmonizedSystemCode?: CountryHarmonizedSystemCodeTypeResolver;
    InventoryLevelConnection?: InventoryLevelConnectionTypeResolver;
    InventoryLevelEdge?: InventoryLevelEdgeTypeResolver;
    EditableProperty?: EditablePropertyTypeResolver;
    InventoryQuantity?: InventoryQuantityTypeResolver;
    InventoryScheduledChangeConnection?: InventoryScheduledChangeConnectionTypeResolver;
    InventoryScheduledChangeEdge?: InventoryScheduledChangeEdgeTypeResolver;
    InventoryScheduledChange?: InventoryScheduledChangeTypeResolver;
    DeliveryLocalPickupSettings?: DeliveryLocalPickupSettingsTypeResolver;
    LocationSuggestedAddress?: LocationSuggestedAddressTypeResolver;
    DeliveryLocationGroupZoneConnection?: DeliveryLocationGroupZoneConnectionTypeResolver;
    DeliveryLocationGroupZoneEdge?: DeliveryLocationGroupZoneEdgeTypeResolver;
    DeliveryLocationGroupZone?: DeliveryLocationGroupZoneTypeResolver;
    DeliveryMethodDefinitionCounts?: DeliveryMethodDefinitionCountsTypeResolver;
    DeliveryMethodDefinitionConnection?: DeliveryMethodDefinitionConnectionTypeResolver;
    DeliveryMethodDefinitionEdge?: DeliveryMethodDefinitionEdgeTypeResolver;
    DeliveryMethodDefinition?: DeliveryMethodDefinitionTypeResolver;
    DeliveryCondition?: DeliveryConditionTypeResolver;
    DeliveryConditionCriteria?: {
      __resolveType: DeliveryConditionCriteriaTypeResolver
    };
    
    Weight?: WeightTypeResolver;
    DeliveryRateProvider?: {
      __resolveType: DeliveryRateProviderTypeResolver
    };
    
    DeliveryParticipant?: DeliveryParticipantTypeResolver;
    DeliveryCarrierService?: DeliveryCarrierServiceTypeResolver;
    DeliveryAvailableService?: DeliveryAvailableServiceTypeResolver;
    DeliveryCountryCodesOrRestOfWorld?: DeliveryCountryCodesOrRestOfWorldTypeResolver;
    DeliveryParticipantService?: DeliveryParticipantServiceTypeResolver;
    DeliveryRateDefinition?: DeliveryRateDefinitionTypeResolver;
    DeliveryZone?: DeliveryZoneTypeResolver;
    ProductVariantPricePairConnection?: ProductVariantPricePairConnectionTypeResolver;
    ProductVariantPricePairEdge?: ProductVariantPricePairEdgeTypeResolver;
    ProductVariantPricePair?: ProductVariantPricePairTypeResolver;
    ProductVariantComponentConnection?: ProductVariantComponentConnectionTypeResolver;
    ProductVariantComponentEdge?: ProductVariantComponentEdgeTypeResolver;
    ProductVariantComponent?: ProductVariantComponentTypeResolver;
    SelectedOption?: SelectedOptionTypeResolver;
    QuantityRuleConnection?: QuantityRuleConnectionTypeResolver;
    QuantityRuleEdge?: QuantityRuleEdgeTypeResolver;
    MarketConnection?: MarketConnectionTypeResolver;
    MarketEdge?: MarketEdgeTypeResolver;
    MarketCurrencySettings?: MarketCurrencySettingsTypeResolver;
    CurrencySetting?: CurrencySettingTypeResolver;
    MarketRegionConnection?: MarketRegionConnectionTypeResolver;
    MarketRegionEdge?: MarketRegionEdgeTypeResolver;
    MarketRegion?: {
      __resolveType: MarketRegionTypeResolver
    };
    
    MarketWebPresence?: MarketWebPresenceTypeResolver;
    Domain?: DomainTypeResolver;
    DomainLocalization?: DomainLocalizationTypeResolver;
    MarketWebPresenceRootUrl?: MarketWebPresenceRootUrlTypeResolver;
    MarketWebPresenceConnection?: MarketWebPresenceConnectionTypeResolver;
    MarketWebPresenceEdge?: MarketWebPresenceEdgeTypeResolver;
    CollectionPublicationConnection?: CollectionPublicationConnectionTypeResolver;
    CollectionPublicationEdge?: CollectionPublicationEdgeTypeResolver;
    CollectionPublication?: CollectionPublicationTypeResolver;
    CollectionRuleSet?: CollectionRuleSetTypeResolver;
    CollectionRule?: CollectionRuleTypeResolver;
    CollectionRuleConditionObject?: {
      __resolveType: CollectionRuleConditionObjectTypeResolver
    };
    
    CollectionRuleMetafieldCondition?: CollectionRuleMetafieldConditionTypeResolver;
    CollectionRuleProductCategoryCondition?: CollectionRuleProductCategoryConditionTypeResolver;
    CollectionRuleTextCondition?: CollectionRuleTextConditionTypeResolver;
    GenericFile?: GenericFileTypeResolver;
    File?: {
      __resolveType: FileTypeResolver
    };
    
    FileError?: FileErrorTypeResolver;
    MediaImage?: MediaImageTypeResolver;
    MediaImageOriginalSource?: MediaImageOriginalSourceTypeResolver;
    Metaobject?: MetaobjectTypeResolver;
    MetaobjectCapabilityData?: MetaobjectCapabilityDataTypeResolver;
    MetaobjectCapabilityDataOnlineStore?: MetaobjectCapabilityDataOnlineStoreTypeResolver;
    MetaobjectCapabilityDataPublishable?: MetaobjectCapabilityDataPublishableTypeResolver;
    StaffMember?: StaffMemberTypeResolver;
    StaffMemberPrivateData?: StaffMemberPrivateDataTypeResolver;
    MetaobjectDefinition?: MetaobjectDefinitionTypeResolver;
    MetaobjectAccess?: MetaobjectAccessTypeResolver;
    MetaobjectCapabilities?: MetaobjectCapabilitiesTypeResolver;
    MetaobjectCapabilitiesOnlineStore?: MetaobjectCapabilitiesOnlineStoreTypeResolver;
    MetaobjectCapabilityDefinitionDataOnlineStore?: MetaobjectCapabilityDefinitionDataOnlineStoreTypeResolver;
    MetaobjectCapabilitiesPublishable?: MetaobjectCapabilitiesPublishableTypeResolver;
    MetaobjectCapabilitiesRenderable?: MetaobjectCapabilitiesRenderableTypeResolver;
    MetaobjectCapabilityDefinitionDataRenderable?: MetaobjectCapabilityDefinitionDataRenderableTypeResolver;
    MetaobjectCapabilitiesTranslatable?: MetaobjectCapabilitiesTranslatableTypeResolver;
    MetaobjectFieldDefinition?: MetaobjectFieldDefinitionTypeResolver;
    MetaobjectConnection?: MetaobjectConnectionTypeResolver;
    MetaobjectEdge?: MetaobjectEdgeTypeResolver;
    MetaobjectField?: MetaobjectFieldTypeResolver;
    MetafieldReferenceConnection?: MetafieldReferenceConnectionTypeResolver;
    MetafieldReferenceEdge?: MetafieldReferenceEdgeTypeResolver;
    MetaobjectThumbnail?: MetaobjectThumbnailTypeResolver;
    MetafieldRelationConnection?: MetafieldRelationConnectionTypeResolver;
    MetafieldRelationEdge?: MetafieldRelationEdgeTypeResolver;
    MetafieldRelation?: MetafieldRelationTypeResolver;
    MetafieldReferencer?: {
      __resolveType: MetafieldReferencerTypeResolver
    };
    
    Customer?: CustomerTypeResolver;
    CommentEventSubject?: {
      __resolveType: CommentEventSubjectTypeResolver
    };
    
    HasEvents?: {
      __resolveType: HasEventsTypeResolver
    };
    
    EventConnection?: EventConnectionTypeResolver;
    EventEdge?: EventEdgeTypeResolver;
    Event?: {
      __resolveType: EventTypeResolver
    };
    
    MailingAddress?: MailingAddressTypeResolver;
    CompanyContact?: CompanyContactTypeResolver;
    Company?: CompanyTypeResolver;
    CompanyContactRoleConnection?: CompanyContactRoleConnectionTypeResolver;
    CompanyContactRoleEdge?: CompanyContactRoleEdgeTypeResolver;
    CompanyContactRole?: CompanyContactRoleTypeResolver;
    CompanyContactConnection?: CompanyContactConnectionTypeResolver;
    CompanyContactEdge?: CompanyContactEdgeTypeResolver;
    DraftOrderConnection?: DraftOrderConnectionTypeResolver;
    DraftOrderEdge?: DraftOrderEdgeTypeResolver;
    DraftOrder?: DraftOrderTypeResolver;
    HasLocalizationExtensions?: {
      __resolveType: HasLocalizationExtensionsTypeResolver
    };
    
    LocalizationExtensionConnection?: LocalizationExtensionConnectionTypeResolver;
    LocalizationExtensionEdge?: LocalizationExtensionEdgeTypeResolver;
    LocalizationExtension?: LocalizationExtensionTypeResolver;
    DraftOrderAppliedDiscount?: DraftOrderAppliedDiscountTypeResolver;
    DraftOrderLineItemConnection?: DraftOrderLineItemConnectionTypeResolver;
    DraftOrderLineItemEdge?: DraftOrderLineItemEdgeTypeResolver;
    DraftOrderLineItem?: DraftOrderLineItemTypeResolver;
    TypedAttribute?: TypedAttributeTypeResolver;
    TaxLine?: TaxLineTypeResolver;
    Order?: OrderTypeResolver;
    AdditionalFee?: AdditionalFeeTypeResolver;
    SalesAgreementConnection?: SalesAgreementConnectionTypeResolver;
    SalesAgreementEdge?: SalesAgreementEdgeTypeResolver;
    SalesAgreement?: {
      __resolveType: SalesAgreementTypeResolver
    };
    
    SaleConnection?: SaleConnectionTypeResolver;
    SaleEdge?: SaleEdgeTypeResolver;
    Sale?: {
      __resolveType: SaleTypeResolver
    };
    
    SaleTax?: SaleTaxTypeResolver;
    ResourceAlert?: ResourceAlertTypeResolver;
    ResourceAlertAction?: ResourceAlertActionTypeResolver;
    OrderApp?: OrderAppTypeResolver;
    OrderCancellation?: OrderCancellationTypeResolver;
    ChannelInformation?: ChannelInformationTypeResolver;
    ChannelDefinition?: ChannelDefinitionTypeResolver;
    CustomerJourney?: CustomerJourneyTypeResolver;
    CustomerVisit?: CustomerVisitTypeResolver;
    CustomerMoment?: {
      __resolveType: CustomerMomentTypeResolver
    };
    
    MarketingEvent?: MarketingEventTypeResolver;
    UTMParameters?: UTMParametersTypeResolver;
    CustomerJourneySummary?: CustomerJourneySummaryTypeResolver;
    CustomerMomentConnection?: CustomerMomentConnectionTypeResolver;
    CustomerMomentEdge?: CustomerMomentEdgeTypeResolver;
    DiscountApplicationConnection?: DiscountApplicationConnectionTypeResolver;
    DiscountApplicationEdge?: DiscountApplicationEdgeTypeResolver;
    DiscountApplication?: {
      __resolveType: DiscountApplicationTypeResolver
    };
    
    PricingValue?: {
      __resolveType: PricingValueTypeResolver
    };
    
    PricingPercentageValue?: PricingPercentageValueTypeResolver;
    OrderDisputeSummary?: OrderDisputeSummaryTypeResolver;
    ExchangeV2Connection?: ExchangeV2ConnectionTypeResolver;
    ExchangeV2Edge?: ExchangeV2EdgeTypeResolver;
    ExchangeV2?: ExchangeV2TypeResolver;
    ExchangeV2Additions?: ExchangeV2AdditionsTypeResolver;
    ExchangeV2LineItem?: ExchangeV2LineItemTypeResolver;
    GiftCard?: GiftCardTypeResolver;
    Date?: GraphQLScalarType;
    LineItem?: LineItemTypeResolver;
    SubscriptionContract?: SubscriptionContractTypeResolver;
    SubscriptionContractBase?: {
      __resolveType: SubscriptionContractBaseTypeResolver
    };
    
    CustomerPaymentMethod?: CustomerPaymentMethodTypeResolver;
    CustomerPaymentInstrument?: {
      __resolveType: CustomerPaymentInstrumentTypeResolver
    };
    
    CustomerCreditCard?: CustomerCreditCardTypeResolver;
    CustomerCreditCardBillingAddress?: CustomerCreditCardBillingAddressTypeResolver;
    CustomerPaypalBillingAgreement?: CustomerPaypalBillingAgreementTypeResolver;
    CustomerPaymentInstrumentBillingAddress?: CustomerPaymentInstrumentBillingAddressTypeResolver;
    CustomerShopPayAgreement?: CustomerShopPayAgreementTypeResolver;
    SubscriptionContractConnection?: SubscriptionContractConnectionTypeResolver;
    SubscriptionContractEdge?: SubscriptionContractEdgeTypeResolver;
    SubscriptionDeliveryMethod?: {
      __resolveType: SubscriptionDeliveryMethodTypeResolver
    };
    
    SubscriptionDeliveryMethodLocalDelivery?: SubscriptionDeliveryMethodLocalDeliveryTypeResolver;
    SubscriptionMailingAddress?: SubscriptionMailingAddressTypeResolver;
    SubscriptionDeliveryMethodLocalDeliveryOption?: SubscriptionDeliveryMethodLocalDeliveryOptionTypeResolver;
    SubscriptionDeliveryMethodPickup?: SubscriptionDeliveryMethodPickupTypeResolver;
    SubscriptionDeliveryMethodPickupOption?: SubscriptionDeliveryMethodPickupOptionTypeResolver;
    SubscriptionDeliveryMethodShipping?: SubscriptionDeliveryMethodShippingTypeResolver;
    SubscriptionDeliveryMethodShippingOption?: SubscriptionDeliveryMethodShippingOptionTypeResolver;
    SubscriptionManualDiscountConnection?: SubscriptionManualDiscountConnectionTypeResolver;
    SubscriptionManualDiscountEdge?: SubscriptionManualDiscountEdgeTypeResolver;
    SubscriptionManualDiscount?: SubscriptionManualDiscountTypeResolver;
    SubscriptionDiscountEntitledLines?: SubscriptionDiscountEntitledLinesTypeResolver;
    SubscriptionLineConnection?: SubscriptionLineConnectionTypeResolver;
    SubscriptionLineEdge?: SubscriptionLineEdgeTypeResolver;
    SubscriptionLine?: SubscriptionLineTypeResolver;
    SubscriptionDiscountAllocation?: SubscriptionDiscountAllocationTypeResolver;
    SubscriptionDiscount?: {
      __resolveType: SubscriptionDiscountTypeResolver
    };
    
    SubscriptionAppliedCodeDiscount?: SubscriptionAppliedCodeDiscountTypeResolver;
    SubscriptionPricingPolicy?: SubscriptionPricingPolicyTypeResolver;
    SubscriptionCyclePriceAdjustment?: SubscriptionCyclePriceAdjustmentTypeResolver;
    SubscriptionDiscountValue?: {
      __resolveType: SubscriptionDiscountValueTypeResolver
    };
    
    SubscriptionDiscountFixedAmountValue?: SubscriptionDiscountFixedAmountValueTypeResolver;
    SubscriptionDiscountPercentageValue?: SubscriptionDiscountPercentageValueTypeResolver;
    OrderConnection?: OrderConnectionTypeResolver;
    OrderEdge?: OrderEdgeTypeResolver;
    SubscriptionBillingAttemptConnection?: SubscriptionBillingAttemptConnectionTypeResolver;
    SubscriptionBillingAttemptEdge?: SubscriptionBillingAttemptEdgeTypeResolver;
    SubscriptionBillingAttempt?: SubscriptionBillingAttemptTypeResolver;
    SubscriptionBillingPolicy?: SubscriptionBillingPolicyTypeResolver;
    SubscriptionDeliveryPolicy?: SubscriptionDeliveryPolicyTypeResolver;
    DiscountAllocation?: DiscountAllocationTypeResolver;
    Duty?: DutyTypeResolver;
    LineItemGroup?: LineItemGroupTypeResolver;
    LineItemSellingPlan?: LineItemSellingPlanTypeResolver;
    Refund?: RefundTypeResolver;
    RefundDuty?: RefundDutyTypeResolver;
    RefundLineItemConnection?: RefundLineItemConnectionTypeResolver;
    RefundLineItemEdge?: RefundLineItemEdgeTypeResolver;
    RefundLineItem?: RefundLineItemTypeResolver;
    Return?: ReturnTypeResolver;
    ReturnDecline?: ReturnDeclineTypeResolver;
    RefundConnection?: RefundConnectionTypeResolver;
    RefundEdge?: RefundEdgeTypeResolver;
    ReturnLineItemConnection?: ReturnLineItemConnectionTypeResolver;
    ReturnLineItemEdge?: ReturnLineItemEdgeTypeResolver;
    ReturnLineItem?: ReturnLineItemTypeResolver;
    FulfillmentLineItem?: FulfillmentLineItemTypeResolver;
    ReverseFulfillmentOrderConnection?: ReverseFulfillmentOrderConnectionTypeResolver;
    ReverseFulfillmentOrderEdge?: ReverseFulfillmentOrderEdgeTypeResolver;
    ReverseFulfillmentOrder?: ReverseFulfillmentOrderTypeResolver;
    ReverseFulfillmentOrderLineItemConnection?: ReverseFulfillmentOrderLineItemConnectionTypeResolver;
    ReverseFulfillmentOrderLineItemEdge?: ReverseFulfillmentOrderLineItemEdgeTypeResolver;
    ReverseFulfillmentOrderLineItem?: ReverseFulfillmentOrderLineItemTypeResolver;
    ReverseFulfillmentOrderDisposition?: ReverseFulfillmentOrderDispositionTypeResolver;
    ReverseDeliveryConnection?: ReverseDeliveryConnectionTypeResolver;
    ReverseDeliveryEdge?: ReverseDeliveryEdgeTypeResolver;
    ReverseDelivery?: ReverseDeliveryTypeResolver;
    ReverseDeliveryDeliverable?: {
      __resolveType: ReverseDeliveryDeliverableTypeResolver
    };
    
    ReverseDeliveryShippingDeliverable?: ReverseDeliveryShippingDeliverableTypeResolver;
    ReverseDeliveryLabelV2?: ReverseDeliveryLabelV2TypeResolver;
    ReverseDeliveryTrackingV2?: ReverseDeliveryTrackingV2TypeResolver;
    ReverseDeliveryLineItemConnection?: ReverseDeliveryLineItemConnectionTypeResolver;
    ReverseDeliveryLineItemEdge?: ReverseDeliveryLineItemEdgeTypeResolver;
    ReverseDeliveryLineItem?: ReverseDeliveryLineItemTypeResolver;
    ReverseFulfillmentOrderThirdPartyConfirmation?: ReverseFulfillmentOrderThirdPartyConfirmationTypeResolver;
    SuggestedReturnRefund?: SuggestedReturnRefundTypeResolver;
    ShippingRefund?: ShippingRefundTypeResolver;
    SuggestedOrderTransaction?: SuggestedOrderTransactionTypeResolver;
    OrderTransaction?: OrderTransactionTypeResolver;
    TransactionFee?: TransactionFeeTypeResolver;
    PaymentDetails?: {
      __resolveType: PaymentDetailsTypeResolver
    };
    
    CardPaymentDetails?: CardPaymentDetailsTypeResolver;
    BasePaymentDetails?: {
      __resolveType: BasePaymentDetailsTypeResolver
    };
    
    ShopPayInstallmentsPaymentDetails?: ShopPayInstallmentsPaymentDetailsTypeResolver;
    JSON?: GraphQLScalarType;
    ShopifyPaymentsTransactionSet?: ShopifyPaymentsTransactionSetTypeResolver;
    ShopifyPaymentsExtendedAuthorization?: ShopifyPaymentsExtendedAuthorizationTypeResolver;
    ShopifyPaymentsRefundSet?: ShopifyPaymentsRefundSetTypeResolver;
    OrderTransactionConnection?: OrderTransactionConnectionTypeResolver;
    OrderTransactionEdge?: OrderTransactionEdgeTypeResolver;
    ExchangeV2Returns?: ExchangeV2ReturnsTypeResolver;
    FulfillmentOrderConnection?: FulfillmentOrderConnectionTypeResolver;
    FulfillmentOrderEdge?: FulfillmentOrderEdgeTypeResolver;
    FulfillmentOrder?: FulfillmentOrderTypeResolver;
    FulfillmentOrderAssignedLocation?: FulfillmentOrderAssignedLocationTypeResolver;
    DeliveryMethod?: DeliveryMethodTypeResolver;
    DeliveryBrandedPromise?: DeliveryBrandedPromiseTypeResolver;
    FulfillmentOrderDestination?: FulfillmentOrderDestinationTypeResolver;
    FulfillmentHold?: FulfillmentHoldTypeResolver;
    FulfillmentConnection?: FulfillmentConnectionTypeResolver;
    FulfillmentEdge?: FulfillmentEdgeTypeResolver;
    Fulfillment?: FulfillmentTypeResolver;
    FulfillmentEventConnection?: FulfillmentEventConnectionTypeResolver;
    FulfillmentEventEdge?: FulfillmentEventEdgeTypeResolver;
    FulfillmentEvent?: FulfillmentEventTypeResolver;
    FulfillmentLineItemConnection?: FulfillmentLineItemConnectionTypeResolver;
    FulfillmentLineItemEdge?: FulfillmentLineItemEdgeTypeResolver;
    FulfillmentOriginAddress?: FulfillmentOriginAddressTypeResolver;
    FulfillmentTrackingInfo?: FulfillmentTrackingInfoTypeResolver;
    FulfillmentOrderInternationalDuties?: FulfillmentOrderInternationalDutiesTypeResolver;
    FulfillmentOrderLineItemConnection?: FulfillmentOrderLineItemConnectionTypeResolver;
    FulfillmentOrderLineItemEdge?: FulfillmentOrderLineItemEdgeTypeResolver;
    FulfillmentOrderLineItem?: FulfillmentOrderLineItemTypeResolver;
    FulfillmentOrderLineItemFinancialSummary?: FulfillmentOrderLineItemFinancialSummaryTypeResolver;
    FinancialSummaryDiscountAllocation?: FinancialSummaryDiscountAllocationTypeResolver;
    FinancialSummaryDiscountApplication?: FinancialSummaryDiscountApplicationTypeResolver;
    FulfillmentOrderLineItemWarning?: FulfillmentOrderLineItemWarningTypeResolver;
    FulfillmentOrderLocationForMoveConnection?: FulfillmentOrderLocationForMoveConnectionTypeResolver;
    FulfillmentOrderLocationForMoveEdge?: FulfillmentOrderLocationForMoveEdgeTypeResolver;
    FulfillmentOrderLocationForMove?: FulfillmentOrderLocationForMoveTypeResolver;
    FulfillmentOrderMerchantRequestConnection?: FulfillmentOrderMerchantRequestConnectionTypeResolver;
    FulfillmentOrderMerchantRequestEdge?: FulfillmentOrderMerchantRequestEdgeTypeResolver;
    FulfillmentOrderMerchantRequest?: FulfillmentOrderMerchantRequestTypeResolver;
    FulfillmentOrderSupportedAction?: FulfillmentOrderSupportedActionTypeResolver;
    LineItemConnection?: LineItemConnectionTypeResolver;
    LineItemEdge?: LineItemEdgeTypeResolver;
    LineItemMutableConnection?: LineItemMutableConnectionTypeResolver;
    LineItemMutableEdge?: LineItemMutableEdgeTypeResolver;
    LineItemMutable?: LineItemMutableTypeResolver;
    OrderPaymentCollectionDetails?: OrderPaymentCollectionDetailsTypeResolver;
    PaymentMandate?: PaymentMandateTypeResolver;
    PaymentInstrument?: {
      __resolveType: PaymentInstrumentTypeResolver
    };
    
    VaultCreditCard?: VaultCreditCardTypeResolver;
    VaultPaypalBillingAgreement?: VaultPaypalBillingAgreementTypeResolver;
    PaymentTerms?: PaymentTermsTypeResolver;
    PaymentScheduleConnection?: PaymentScheduleConnectionTypeResolver;
    PaymentScheduleEdge?: PaymentScheduleEdgeTypeResolver;
    PaymentSchedule?: PaymentScheduleTypeResolver;
    PurchasingEntity?: {
      __resolveType: PurchasingEntityTypeResolver
    };
    
    PurchasingCompany?: PurchasingCompanyTypeResolver;
    CompanyLocation?: CompanyLocationTypeResolver;
    CompanyAddress?: CompanyAddressTypeResolver;
    BuyerExperienceConfiguration?: BuyerExperienceConfigurationTypeResolver;
    PaymentTermsTemplate?: PaymentTermsTemplateTypeResolver;
    CatalogConnection?: CatalogConnectionTypeResolver;
    CatalogEdge?: CatalogEdgeTypeResolver;
    CompanyContactRoleAssignmentConnection?: CompanyContactRoleAssignmentConnectionTypeResolver;
    CompanyContactRoleAssignmentEdge?: CompanyContactRoleAssignmentEdgeTypeResolver;
    CompanyContactRoleAssignment?: CompanyContactRoleAssignmentTypeResolver;
    ReturnConnection?: ReturnConnectionTypeResolver;
    ReturnEdge?: ReturnEdgeTypeResolver;
    OrderRisk?: OrderRiskTypeResolver;
    ShippingLine?: ShippingLineTypeResolver;
    ShippingLineConnection?: ShippingLineConnectionTypeResolver;
    ShippingLineEdge?: ShippingLineEdgeTypeResolver;
    ShopifyProtectOrderSummary?: ShopifyProtectOrderSummaryTypeResolver;
    ShopifyProtectOrderEligibility?: ShopifyProtectOrderEligibilityTypeResolver;
    SuggestedRefund?: SuggestedRefundTypeResolver;
    CompanyLocationConnection?: CompanyLocationConnectionTypeResolver;
    CompanyLocationEdge?: CompanyLocationEdgeTypeResolver;
    CustomerEmailMarketingConsentState?: CustomerEmailMarketingConsentStateTypeResolver;
    CustomerMergeable?: CustomerMergeableTypeResolver;
    CustomerMergeRequest?: CustomerMergeRequestTypeResolver;
    CustomerMergeError?: CustomerMergeErrorTypeResolver;
    CustomerPaymentMethodConnection?: CustomerPaymentMethodConnectionTypeResolver;
    CustomerPaymentMethodEdge?: CustomerPaymentMethodEdgeTypeResolver;
    CustomerSmsMarketingConsentState?: CustomerSmsMarketingConsentStateTypeResolver;
    CustomerStatistics?: CustomerStatisticsTypeResolver;
    DeliveryCustomization?: DeliveryCustomizationTypeResolver;
    FunctionsErrorHistory?: FunctionsErrorHistoryTypeResolver;
    ShopifyFunction?: ShopifyFunctionTypeResolver;
    FunctionsAppBridge?: FunctionsAppBridgeTypeResolver;
    DiscountAutomaticNode?: DiscountAutomaticNodeTypeResolver;
    DiscountAutomatic?: {
      __resolveType: DiscountAutomaticTypeResolver
    };
    
    DiscountAutomaticApp?: DiscountAutomaticAppTypeResolver;
    AppDiscountType?: AppDiscountTypeTypeResolver;
    DiscountCombinesWith?: DiscountCombinesWithTypeResolver;
    DiscountAutomaticBasic?: DiscountAutomaticBasicTypeResolver;
    DiscountCustomerGets?: DiscountCustomerGetsTypeResolver;
    DiscountItems?: {
      __resolveType: DiscountItemsTypeResolver
    };
    
    AllDiscountItems?: AllDiscountItemsTypeResolver;
    DiscountCollections?: DiscountCollectionsTypeResolver;
    DiscountProducts?: DiscountProductsTypeResolver;
    DiscountCustomerGetsValue?: {
      __resolveType: DiscountCustomerGetsValueTypeResolver
    };
    
    DiscountAmount?: DiscountAmountTypeResolver;
    DiscountOnQuantity?: DiscountOnQuantityTypeResolver;
    DiscountEffect?: {
      __resolveType: DiscountEffectTypeResolver
    };
    
    DiscountPercentage?: DiscountPercentageTypeResolver;
    DiscountQuantity?: DiscountQuantityTypeResolver;
    DiscountMinimumRequirement?: {
      __resolveType: DiscountMinimumRequirementTypeResolver
    };
    
    DiscountMinimumQuantity?: DiscountMinimumQuantityTypeResolver;
    DiscountMinimumSubtotal?: DiscountMinimumSubtotalTypeResolver;
    DiscountAutomaticBxgy?: DiscountAutomaticBxgyTypeResolver;
    DiscountCustomerBuys?: DiscountCustomerBuysTypeResolver;
    DiscountCustomerBuysValue?: {
      __resolveType: DiscountCustomerBuysValueTypeResolver
    };
    
    DiscountPurchaseAmount?: DiscountPurchaseAmountTypeResolver;
    DiscountAutomaticFreeShipping?: DiscountAutomaticFreeShippingTypeResolver;
    DiscountShippingDestinationSelection?: {
      __resolveType: DiscountShippingDestinationSelectionTypeResolver
    };
    
    DiscountCountries?: DiscountCountriesTypeResolver;
    DiscountCountryAll?: DiscountCountryAllTypeResolver;
    DiscountCodeNode?: DiscountCodeNodeTypeResolver;
    DiscountCode?: {
      __resolveType: DiscountCodeTypeResolver
    };
    
    DiscountCodeApp?: DiscountCodeAppTypeResolver;
    DiscountRedeemCodeConnection?: DiscountRedeemCodeConnectionTypeResolver;
    DiscountRedeemCodeEdge?: DiscountRedeemCodeEdgeTypeResolver;
    DiscountRedeemCode?: DiscountRedeemCodeTypeResolver;
    DiscountCustomerSelection?: {
      __resolveType: DiscountCustomerSelectionTypeResolver
    };
    
    DiscountCustomerAll?: DiscountCustomerAllTypeResolver;
    DiscountCustomerSegments?: DiscountCustomerSegmentsTypeResolver;
    Segment?: SegmentTypeResolver;
    DiscountCustomers?: DiscountCustomersTypeResolver;
    DiscountShareableUrl?: DiscountShareableUrlTypeResolver;
    DiscountCodeBasic?: DiscountCodeBasicTypeResolver;
    DiscountCodeBxgy?: DiscountCodeBxgyTypeResolver;
    DiscountCodeFreeShipping?: DiscountCodeFreeShippingTypeResolver;
    DiscountNode?: DiscountNodeTypeResolver;
    Discount?: {
      __resolveType: DiscountTypeResolver
    };
    
    OnlineStoreArticle?: OnlineStoreArticleTypeResolver;
    OnlineStoreBlog?: OnlineStoreBlogTypeResolver;
    OnlineStorePage?: OnlineStorePageTypeResolver;
    PaymentCustomization?: PaymentCustomizationTypeResolver;
    Shop?: ShopTypeResolver;
    ShopAlert?: ShopAlertTypeResolver;
    ShopAlertAction?: ShopAlertActionTypeResolver;
    AppConnection?: AppConnectionTypeResolver;
    AppEdge?: AppEdgeTypeResolver;
    ShopAddress?: ShopAddressTypeResolver;
    AvailableChannelDefinitionsByChannel?: AvailableChannelDefinitionsByChannelTypeResolver;
    SavedSearchConnection?: SavedSearchConnectionTypeResolver;
    SavedSearchEdge?: SavedSearchEdgeTypeResolver;
    SavedSearch?: SavedSearchTypeResolver;
    SearchFilter?: SearchFilterTypeResolver;
    CountriesInShippingZones?: CountriesInShippingZonesTypeResolver;
    CurrencyFormats?: CurrencyFormatsTypeResolver;
    CurrencySettingConnection?: CurrencySettingConnectionTypeResolver;
    CurrencySettingEdge?: CurrencySettingEdgeTypeResolver;
    CustomerAccountsV2?: CustomerAccountsV2TypeResolver;
    StringConnection?: StringConnectionTypeResolver;
    StringEdge?: StringEdgeTypeResolver;
    CustomerConnection?: CustomerConnectionTypeResolver;
    CustomerEdge?: CustomerEdgeTypeResolver;
    ShopFeatures?: ShopFeaturesTypeResolver;
    BundlesFeature?: BundlesFeatureTypeResolver;
    CartTransformFeature?: CartTransformFeatureTypeResolver;
    CartTransformEligibleOperations?: CartTransformEligibleOperationsTypeResolver;
    InventoryItemConnection?: InventoryItemConnectionTypeResolver;
    InventoryItemEdge?: InventoryItemEdgeTypeResolver;
    LimitedPendingOrderCount?: LimitedPendingOrderCountTypeResolver;
    MarketingEventConnection?: MarketingEventConnectionTypeResolver;
    MarketingEventEdge?: MarketingEventEdgeTypeResolver;
    MerchantApprovalSignals?: MerchantApprovalSignalsTypeResolver;
    PaymentSettings?: PaymentSettingsTypeResolver;
    ShopPlan?: ShopPlanTypeResolver;
    PriceRuleConnection?: PriceRuleConnectionTypeResolver;
    PriceRuleEdge?: PriceRuleEdgeTypeResolver;
    PriceRule?: PriceRuleTypeResolver;
    PriceRuleCustomerSelection?: PriceRuleCustomerSelectionTypeResolver;
    PriceRuleDiscountCodeConnection?: PriceRuleDiscountCodeConnectionTypeResolver;
    PriceRuleDiscountCodeEdge?: PriceRuleDiscountCodeEdgeTypeResolver;
    PriceRuleDiscountCode?: PriceRuleDiscountCodeTypeResolver;
    PriceRuleEntitlementToPrerequisiteQuantityRatio?: PriceRuleEntitlementToPrerequisiteQuantityRatioTypeResolver;
    PriceRuleItemEntitlements?: PriceRuleItemEntitlementsTypeResolver;
    PriceRuleLineItemPrerequisites?: PriceRuleLineItemPrerequisitesTypeResolver;
    PriceRuleQuantityRange?: PriceRuleQuantityRangeTypeResolver;
    PriceRuleMoneyRange?: PriceRuleMoneyRangeTypeResolver;
    PriceRulePrerequisiteToEntitlementQuantityRatio?: PriceRulePrerequisiteToEntitlementQuantityRatioTypeResolver;
    PriceRuleShareableUrl?: PriceRuleShareableUrlTypeResolver;
    PriceRuleShippingLineEntitlements?: PriceRuleShippingLineEntitlementsTypeResolver;
    PriceRuleValidityPeriod?: PriceRuleValidityPeriodTypeResolver;
    PriceRuleValue?: {
      __resolveType: PriceRuleValueTypeResolver
    };
    
    PriceRuleFixedAmountValue?: PriceRuleFixedAmountValueTypeResolver;
    PriceRulePercentValue?: PriceRulePercentValueTypeResolver;
    ShopResourceLimits?: ShopResourceLimitsTypeResolver;
    SearchResultConnection?: SearchResultConnectionTypeResolver;
    SearchResultEdge?: SearchResultEdgeTypeResolver;
    SearchResult?: SearchResultTypeResolver;
    SearchFilterOptions?: SearchFilterOptionsTypeResolver;
    FilterOption?: FilterOptionTypeResolver;
    ShopPolicy?: ShopPolicyTypeResolver;
    StaffMemberConnection?: StaffMemberConnectionTypeResolver;
    StaffMemberEdge?: StaffMemberEdgeTypeResolver;
    StorefrontAccessTokenConnection?: StorefrontAccessTokenConnectionTypeResolver;
    StorefrontAccessTokenEdge?: StorefrontAccessTokenEdgeTypeResolver;
    StorefrontAccessToken?: StorefrontAccessTokenTypeResolver;
    Video?: VideoTypeResolver;
    VideoSource?: VideoSourceTypeResolver;
    CustomerVisitProductInfoConnection?: CustomerVisitProductInfoConnectionTypeResolver;
    CustomerVisitProductInfoEdge?: CustomerVisitProductInfoEdgeTypeResolver;
    CustomerVisitProductInfo?: CustomerVisitProductInfoTypeResolver;
    AppInstallationConnection?: AppInstallationConnectionTypeResolver;
    AppInstallationEdge?: AppInstallationEdgeTypeResolver;
    DiscountAutomaticNodeConnection?: DiscountAutomaticNodeConnectionTypeResolver;
    DiscountAutomaticNodeEdge?: DiscountAutomaticNodeEdgeTypeResolver;
    DiscountAutomaticConnection?: DiscountAutomaticConnectionTypeResolver;
    DiscountAutomaticEdge?: DiscountAutomaticEdgeTypeResolver;
    DeliveryCarrierServiceAndLocations?: DeliveryCarrierServiceAndLocationsTypeResolver;
    Locale?: LocaleTypeResolver;
    CartTransformConnection?: CartTransformConnectionTypeResolver;
    CartTransformEdge?: CartTransformEdgeTypeResolver;
    CartTransform?: CartTransformTypeResolver;
    CheckoutBranding?: CheckoutBrandingTypeResolver;
    CheckoutBrandingCustomizations?: CheckoutBrandingCustomizationsTypeResolver;
    CheckoutBrandingCheckbox?: CheckoutBrandingCheckboxTypeResolver;
    CheckoutBrandingChoiceList?: CheckoutBrandingChoiceListTypeResolver;
    CheckoutBrandingChoiceListGroup?: CheckoutBrandingChoiceListGroupTypeResolver;
    CheckoutBrandingControl?: CheckoutBrandingControlTypeResolver;
    CheckoutBrandingImage?: CheckoutBrandingImageTypeResolver;
    CheckoutBrandingGlobal?: CheckoutBrandingGlobalTypeResolver;
    CheckoutBrandingTypographyStyleGlobal?: CheckoutBrandingTypographyStyleGlobalTypeResolver;
    CheckoutBrandingHeader?: CheckoutBrandingHeaderTypeResolver;
    CheckoutBrandingLogo?: CheckoutBrandingLogoTypeResolver;
    CheckoutBrandingHeadingLevel?: CheckoutBrandingHeadingLevelTypeResolver;
    CheckoutBrandingTypographyStyle?: CheckoutBrandingTypographyStyleTypeResolver;
    CheckoutBrandingMain?: CheckoutBrandingMainTypeResolver;
    CheckoutBrandingMerchandiseThumbnail?: CheckoutBrandingMerchandiseThumbnailTypeResolver;
    CheckoutBrandingOrderSummary?: CheckoutBrandingOrderSummaryTypeResolver;
    CheckoutBrandingButton?: CheckoutBrandingButtonTypeResolver;
    CheckoutBrandingSelect?: CheckoutBrandingSelectTypeResolver;
    CheckoutBrandingTextField?: CheckoutBrandingTextFieldTypeResolver;
    CheckoutBrandingDesignSystem?: CheckoutBrandingDesignSystemTypeResolver;
    CheckoutBrandingColors?: CheckoutBrandingColorsTypeResolver;
    CheckoutBrandingColorGlobal?: CheckoutBrandingColorGlobalTypeResolver;
    CheckoutBrandingColorSchemes?: CheckoutBrandingColorSchemesTypeResolver;
    CheckoutBrandingColorScheme?: CheckoutBrandingColorSchemeTypeResolver;
    CheckoutBrandingColorRoles?: CheckoutBrandingColorRolesTypeResolver;
    CheckoutBrandingControlColorRoles?: CheckoutBrandingControlColorRolesTypeResolver;
    CheckoutBrandingButtonColorRoles?: CheckoutBrandingButtonColorRolesTypeResolver;
    CheckoutBrandingCornerRadiusVariables?: CheckoutBrandingCornerRadiusVariablesTypeResolver;
    CheckoutBrandingTypography?: CheckoutBrandingTypographyTypeResolver;
    CheckoutBrandingFontGroup?: CheckoutBrandingFontGroupTypeResolver;
    CheckoutBrandingFont?: {
      __resolveType: CheckoutBrandingFontTypeResolver
    };
    
    CheckoutBrandingFontSize?: CheckoutBrandingFontSizeTypeResolver;
    CheckoutProfile?: CheckoutProfileTypeResolver;
    CheckoutProfileConnection?: CheckoutProfileConnectionTypeResolver;
    CheckoutProfileEdge?: CheckoutProfileEdgeTypeResolver;
    DiscountCodeNodeConnection?: DiscountCodeNodeConnectionTypeResolver;
    DiscountCodeNodeEdge?: DiscountCodeNodeEdgeTypeResolver;
    CollectionRuleConditions?: CollectionRuleConditionsTypeResolver;
    CollectionRuleConditionsRuleObject?: {
      __resolveType: CollectionRuleConditionsRuleObjectTypeResolver
    };
    
    CompanyConnection?: CompanyConnectionTypeResolver;
    CompanyEdge?: CompanyEdgeTypeResolver;
    BulkOperation?: BulkOperationTypeResolver;
    CustomerMergePreview?: CustomerMergePreviewTypeResolver;
    CustomerMergePreviewAlternateFields?: CustomerMergePreviewAlternateFieldsTypeResolver;
    CustomerEmailAddress?: CustomerEmailAddressTypeResolver;
    CustomerPhoneNumber?: CustomerPhoneNumberTypeResolver;
    CustomerMergePreviewBlockingFields?: CustomerMergePreviewBlockingFieldsTypeResolver;
    CustomerMergePreviewDefaultFields?: CustomerMergePreviewDefaultFieldsTypeResolver;
    MailingAddressConnection?: MailingAddressConnectionTypeResolver;
    MailingAddressEdge?: MailingAddressEdgeTypeResolver;
    DiscountNodeConnection?: DiscountNodeConnectionTypeResolver;
    DiscountNodeEdge?: DiscountNodeEdgeTypeResolver;
    GiftCardConnection?: GiftCardConnectionTypeResolver;
    GiftCardEdge?: GiftCardEdgeTypeResolver;
    CustomerSegmentMemberConnection?: CustomerSegmentMemberConnectionTypeResolver;
    CustomerSegmentMemberEdge?: CustomerSegmentMemberEdgeTypeResolver;
    CustomerSegmentMember?: CustomerSegmentMemberTypeResolver;
    SegmentStatistics?: SegmentStatisticsTypeResolver;
    SegmentAttributeStatistics?: SegmentAttributeStatisticsTypeResolver;
    CustomerSegmentMembersQuery?: CustomerSegmentMembersQueryTypeResolver;
    JobResult?: {
      __resolveType: JobResultTypeResolver
    };
    
    SegmentMembershipResponse?: SegmentMembershipResponseTypeResolver;
    SegmentMembership?: SegmentMembershipTypeResolver;
    DeletionEventConnection?: DeletionEventConnectionTypeResolver;
    DeletionEventEdge?: DeletionEventEdgeTypeResolver;
    DeletionEvent?: DeletionEventTypeResolver;
    DeliveryCustomizationConnection?: DeliveryCustomizationConnectionTypeResolver;
    DeliveryCustomizationEdge?: DeliveryCustomizationEdgeTypeResolver;
    DeliveryProfileConnection?: DeliveryProfileConnectionTypeResolver;
    DeliveryProfileEdge?: DeliveryProfileEdgeTypeResolver;
    DeliverySetting?: DeliverySettingTypeResolver;
    DeliveryLegacyModeBlocked?: DeliveryLegacyModeBlockedTypeResolver;
    DiscountRedeemCodeBulkCreation?: DiscountRedeemCodeBulkCreationTypeResolver;
    DiscountRedeemCodeBulkCreationCodeConnection?: DiscountRedeemCodeBulkCreationCodeConnectionTypeResolver;
    DiscountRedeemCodeBulkCreationCodeEdge?: DiscountRedeemCodeBulkCreationCodeEdgeTypeResolver;
    DiscountRedeemCodeBulkCreationCode?: DiscountRedeemCodeBulkCreationCodeTypeResolver;
    DiscountUserError?: DiscountUserErrorTypeResolver;
    ShopifyPaymentsDispute?: ShopifyPaymentsDisputeTypeResolver;
    ShopifyPaymentsDisputeReasonDetails?: ShopifyPaymentsDisputeReasonDetailsTypeResolver;
    ShopifyPaymentsDisputeEvidence?: ShopifyPaymentsDisputeEvidenceTypeResolver;
    ShopifyPaymentsDisputeFileUpload?: ShopifyPaymentsDisputeFileUploadTypeResolver;
    ShopifyPaymentsDisputeFulfillment?: ShopifyPaymentsDisputeFulfillmentTypeResolver;
    DraftOrderTag?: DraftOrderTagTypeResolver;
    FileConnection?: FileConnectionTypeResolver;
    FileEdge?: FileEdgeTypeResolver;
    FulfillmentConstraintRule?: FulfillmentConstraintRuleTypeResolver;
    InventoryProperties?: InventoryPropertiesTypeResolver;
    InventoryQuantityName?: InventoryQuantityNameTypeResolver;
    Job?: JobTypeResolver;
    MarketLocalizableResource?: MarketLocalizableResourceTypeResolver;
    MarketLocalizableContent?: MarketLocalizableContentTypeResolver;
    MarketLocalization?: MarketLocalizationTypeResolver;
    MarketLocalizableResourceConnection?: MarketLocalizableResourceConnectionTypeResolver;
    MarketLocalizableResourceEdge?: MarketLocalizableResourceEdgeTypeResolver;
    MarketingActivityConnection?: MarketingActivityConnectionTypeResolver;
    MarketingActivityEdge?: MarketingActivityEdgeTypeResolver;
    MarketingActivity?: MarketingActivityTypeResolver;
    MarketingActivityExtensionAppErrors?: MarketingActivityExtensionAppErrorsTypeResolver;
    MarketingBudget?: MarketingBudgetTypeResolver;
    MetafieldStorefrontVisibilityConnection?: MetafieldStorefrontVisibilityConnectionTypeResolver;
    MetafieldStorefrontVisibilityEdge?: MetafieldStorefrontVisibilityEdgeTypeResolver;
    MetafieldStorefrontVisibility?: MetafieldStorefrontVisibilityTypeResolver;
    MetaobjectDefinitionConnection?: MetaobjectDefinitionConnectionTypeResolver;
    MetaobjectDefinitionEdge?: MetaobjectDefinitionEdgeTypeResolver;
    OrderPaymentStatus?: OrderPaymentStatusTypeResolver;
    PaymentCustomizationConnection?: PaymentCustomizationConnectionTypeResolver;
    PaymentCustomizationEdge?: PaymentCustomizationEdgeTypeResolver;
    PriceListConnection?: PriceListConnectionTypeResolver;
    PriceListEdge?: PriceListEdgeTypeResolver;
    ProductDuplicateJob?: ProductDuplicateJobTypeResolver;
    ProductFeed?: ProductFeedTypeResolver;
    ProductFeedConnection?: ProductFeedConnectionTypeResolver;
    ProductFeedEdge?: ProductFeedEdgeTypeResolver;
    ProductResourceFeedback?: ProductResourceFeedbackTypeResolver;
    ApiVersion?: ApiVersionTypeResolver;
    ReturnableFulfillment?: ReturnableFulfillmentTypeResolver;
    ReturnableFulfillmentLineItemConnection?: ReturnableFulfillmentLineItemConnectionTypeResolver;
    ReturnableFulfillmentLineItemEdge?: ReturnableFulfillmentLineItemEdgeTypeResolver;
    ReturnableFulfillmentLineItem?: ReturnableFulfillmentLineItemTypeResolver;
    ReturnableFulfillmentConnection?: ReturnableFulfillmentConnectionTypeResolver;
    ReturnableFulfillmentEdge?: ReturnableFulfillmentEdgeTypeResolver;
    ScriptTag?: ScriptTagTypeResolver;
    ScriptTagConnection?: ScriptTagConnectionTypeResolver;
    ScriptTagEdge?: ScriptTagEdgeTypeResolver;
    SegmentFilterConnection?: SegmentFilterConnectionTypeResolver;
    SegmentFilterEdge?: SegmentFilterEdgeTypeResolver;
    SegmentFilter?: {
      __resolveType: SegmentFilterTypeResolver
    };
    
    SegmentMigrationConnection?: SegmentMigrationConnectionTypeResolver;
    SegmentMigrationEdge?: SegmentMigrationEdgeTypeResolver;
    SegmentMigration?: SegmentMigrationTypeResolver;
    SegmentValueConnection?: SegmentValueConnectionTypeResolver;
    SegmentValueEdge?: SegmentValueEdgeTypeResolver;
    SegmentValue?: SegmentValueTypeResolver;
    SegmentConnection?: SegmentConnectionTypeResolver;
    SegmentEdge?: SegmentEdgeTypeResolver;
    ServerPixel?: ServerPixelTypeResolver;
    ShopBillingPreferences?: ShopBillingPreferencesTypeResolver;
    ShopLocale?: ShopLocaleTypeResolver;
    ShopifyFunctionConnection?: ShopifyFunctionConnectionTypeResolver;
    ShopifyFunctionEdge?: ShopifyFunctionEdgeTypeResolver;
    ShopifyPaymentsAccount?: ShopifyPaymentsAccountTypeResolver;
    ShopifyPaymentsBalanceTransactionConnection?: ShopifyPaymentsBalanceTransactionConnectionTypeResolver;
    ShopifyPaymentsBalanceTransactionEdge?: ShopifyPaymentsBalanceTransactionEdgeTypeResolver;
    ShopifyPaymentsBalanceTransaction?: ShopifyPaymentsBalanceTransactionTypeResolver;
    ShopifyPaymentsAdjustmentOrder?: ShopifyPaymentsAdjustmentOrderTypeResolver;
    ShopifyPaymentsBankAccountConnection?: ShopifyPaymentsBankAccountConnectionTypeResolver;
    ShopifyPaymentsBankAccountEdge?: ShopifyPaymentsBankAccountEdgeTypeResolver;
    ShopifyPaymentsBankAccount?: ShopifyPaymentsBankAccountTypeResolver;
    ShopifyPaymentsPayoutConnection?: ShopifyPaymentsPayoutConnectionTypeResolver;
    ShopifyPaymentsPayoutEdge?: ShopifyPaymentsPayoutEdgeTypeResolver;
    ShopifyPaymentsPayout?: ShopifyPaymentsPayoutTypeResolver;
    ShopifyPaymentsPayoutSummary?: ShopifyPaymentsPayoutSummaryTypeResolver;
    ShopifyPaymentsChargeStatementDescriptor?: {
      __resolveType: ShopifyPaymentsChargeStatementDescriptorTypeResolver
    };
    
    ShopifyPaymentsDisputeConnection?: ShopifyPaymentsDisputeConnectionTypeResolver;
    ShopifyPaymentsDisputeEdge?: ShopifyPaymentsDisputeEdgeTypeResolver;
    ShopifyPaymentsFraudSettings?: ShopifyPaymentsFraudSettingsTypeResolver;
    ShopifyPaymentsNotificationSettings?: ShopifyPaymentsNotificationSettingsTypeResolver;
    ShopifyPaymentsPayoutSchedule?: ShopifyPaymentsPayoutScheduleTypeResolver;
    ShopifyPaymentsVerificationDocument?: ShopifyPaymentsVerificationDocumentTypeResolver;
    ShopifyPaymentsVerification?: ShopifyPaymentsVerificationTypeResolver;
    ShopifyPaymentsVerificationSubject?: ShopifyPaymentsVerificationSubjectTypeResolver;
    ShopifyqlResponse?: {
      __resolveType: ShopifyqlResponseTypeResolver
    };
    
    ParseError?: ParseErrorTypeResolver;
    ParseErrorRange?: ParseErrorRangeTypeResolver;
    ErrorPosition?: ErrorPositionTypeResolver;
    TableData?: TableDataTypeResolver;
    TableDataColumn?: TableDataColumnTypeResolver;
    StandardMetafieldDefinitionTemplateConnection?: StandardMetafieldDefinitionTemplateConnectionTypeResolver;
    StandardMetafieldDefinitionTemplateEdge?: StandardMetafieldDefinitionTemplateEdgeTypeResolver;
    SubscriptionBillingCycle?: SubscriptionBillingCycleTypeResolver;
    SubscriptionBillingCycleEditedContract?: SubscriptionBillingCycleEditedContractTypeResolver;
    SubscriptionBillingCycleConnection?: SubscriptionBillingCycleConnectionTypeResolver;
    SubscriptionBillingCycleEdge?: SubscriptionBillingCycleEdgeTypeResolver;
    SubscriptionDraft?: SubscriptionDraftTypeResolver;
    SubscriptionDeliveryOptionResult?: {
      __resolveType: SubscriptionDeliveryOptionResultTypeResolver
    };
    
    SubscriptionDeliveryOptionResultFailure?: SubscriptionDeliveryOptionResultFailureTypeResolver;
    SubscriptionDeliveryOptionResultSuccess?: SubscriptionDeliveryOptionResultSuccessTypeResolver;
    SubscriptionDeliveryOption?: {
      __resolveType: SubscriptionDeliveryOptionTypeResolver
    };
    
    SubscriptionLocalDeliveryOption?: SubscriptionLocalDeliveryOptionTypeResolver;
    SubscriptionPickupOption?: SubscriptionPickupOptionTypeResolver;
    SubscriptionShippingOption?: SubscriptionShippingOptionTypeResolver;
    SubscriptionDiscountConnection?: SubscriptionDiscountConnectionTypeResolver;
    SubscriptionDiscountEdge?: SubscriptionDiscountEdgeTypeResolver;
    SubscriptionShippingOptionResult?: {
      __resolveType: SubscriptionShippingOptionResultTypeResolver
    };
    
    SubscriptionShippingOptionResultFailure?: SubscriptionShippingOptionResultFailureTypeResolver;
    SubscriptionShippingOptionResultSuccess?: SubscriptionShippingOptionResultSuccessTypeResolver;
    TenderTransactionConnection?: TenderTransactionConnectionTypeResolver;
    TenderTransactionEdge?: TenderTransactionEdgeTypeResolver;
    TenderTransaction?: TenderTransactionTypeResolver;
    TenderTransactionDetails?: {
      __resolveType: TenderTransactionDetailsTypeResolver
    };
    
    TenderTransactionCreditCardDetails?: TenderTransactionCreditCardDetailsTypeResolver;
    TranslatableResource?: TranslatableResourceTypeResolver;
    TranslatableContent?: TranslatableContentTypeResolver;
    TranslatableResourceConnection?: TranslatableResourceConnectionTypeResolver;
    TranslatableResourceEdge?: TranslatableResourceEdgeTypeResolver;
    UrlRedirect?: UrlRedirectTypeResolver;
    UrlRedirectImport?: UrlRedirectImportTypeResolver;
    UrlRedirectImportPreview?: UrlRedirectImportPreviewTypeResolver;
    UrlRedirectConnection?: UrlRedirectConnectionTypeResolver;
    UrlRedirectEdge?: UrlRedirectEdgeTypeResolver;
    Validation?: ValidationTypeResolver;
    ValidationConnection?: ValidationConnectionTypeResolver;
    ValidationEdge?: ValidationEdgeTypeResolver;
    WebPixel?: WebPixelTypeResolver;
    WebhookSubscription?: WebhookSubscriptionTypeResolver;
    WebhookSubscriptionEndpoint?: {
      __resolveType: WebhookSubscriptionEndpointTypeResolver
    };
    
    WebhookEventBridgeEndpoint?: WebhookEventBridgeEndpointTypeResolver;
    ARN?: GraphQLScalarType;
    WebhookHttpEndpoint?: WebhookHttpEndpointTypeResolver;
    WebhookPubSubEndpoint?: WebhookPubSubEndpointTypeResolver;
    WebhookSubscriptionConnection?: WebhookSubscriptionConnectionTypeResolver;
    WebhookSubscriptionEdge?: WebhookSubscriptionEdgeTypeResolver;
    Mutation?: MutationTypeResolver;
    AbandonmentEmailStateUpdatePayload?: AbandonmentEmailStateUpdatePayloadTypeResolver;
    AbandonmentEmailStateUpdateUserError?: AbandonmentEmailStateUpdateUserErrorTypeResolver;
    AbandonmentUpdateActivitiesDeliveryStatusesPayload?: AbandonmentUpdateActivitiesDeliveryStatusesPayloadTypeResolver;
    AbandonmentUpdateActivitiesDeliveryStatusesUserError?: AbandonmentUpdateActivitiesDeliveryStatusesUserErrorTypeResolver;
    AppPurchaseOneTimeCreatePayload?: AppPurchaseOneTimeCreatePayloadTypeResolver;
    AppSubscriptionCancelPayload?: AppSubscriptionCancelPayloadTypeResolver;
    AppSubscriptionCreatePayload?: AppSubscriptionCreatePayloadTypeResolver;
    AppSubscriptionLineItemUpdatePayload?: AppSubscriptionLineItemUpdatePayloadTypeResolver;
    AppSubscriptionTrialExtendPayload?: AppSubscriptionTrialExtendPayloadTypeResolver;
    AppSubscriptionTrialExtendUserError?: AppSubscriptionTrialExtendUserErrorTypeResolver;
    AppUsageRecordCreatePayload?: AppUsageRecordCreatePayloadTypeResolver;
    BulkOperationCancelPayload?: BulkOperationCancelPayloadTypeResolver;
    BulkOperationRunMutationPayload?: BulkOperationRunMutationPayloadTypeResolver;
    BulkMutationUserError?: BulkMutationUserErrorTypeResolver;
    BulkOperationRunQueryPayload?: BulkOperationRunQueryPayloadTypeResolver;
    BulkProductResourceFeedbackCreatePayload?: BulkProductResourceFeedbackCreatePayloadTypeResolver;
    BulkProductResourceFeedbackCreateUserError?: BulkProductResourceFeedbackCreateUserErrorTypeResolver;
    CartTransformCreatePayload?: CartTransformCreatePayloadTypeResolver;
    CartTransformCreateUserError?: CartTransformCreateUserErrorTypeResolver;
    CartTransformDeletePayload?: CartTransformDeletePayloadTypeResolver;
    CartTransformDeleteUserError?: CartTransformDeleteUserErrorTypeResolver;
    CatalogContextUpdatePayload?: CatalogContextUpdatePayloadTypeResolver;
    CatalogUserError?: CatalogUserErrorTypeResolver;
    CatalogCreatePayload?: CatalogCreatePayloadTypeResolver;
    CatalogDeletePayload?: CatalogDeletePayloadTypeResolver;
    CatalogUpdatePayload?: CatalogUpdatePayloadTypeResolver;
    CheckoutBrandingUpsertPayload?: CheckoutBrandingUpsertPayloadTypeResolver;
    CheckoutBrandingUpsertUserError?: CheckoutBrandingUpsertUserErrorTypeResolver;
    CollectionAddProductsPayload?: CollectionAddProductsPayloadTypeResolver;
    CollectionAddProductsV2Payload?: CollectionAddProductsV2PayloadTypeResolver;
    CollectionAddProductsV2UserError?: CollectionAddProductsV2UserErrorTypeResolver;
    CollectionCreatePayload?: CollectionCreatePayloadTypeResolver;
    CollectionDeletePayload?: CollectionDeletePayloadTypeResolver;
    CollectionPublishPayload?: CollectionPublishPayloadTypeResolver;
    CollectionRemoveProductsPayload?: CollectionRemoveProductsPayloadTypeResolver;
    CollectionReorderProductsPayload?: CollectionReorderProductsPayloadTypeResolver;
    CollectionUnpublishPayload?: CollectionUnpublishPayloadTypeResolver;
    CollectionUpdatePayload?: CollectionUpdatePayloadTypeResolver;
    CompaniesDeletePayload?: CompaniesDeletePayloadTypeResolver;
    BusinessCustomerUserError?: BusinessCustomerUserErrorTypeResolver;
    CompanyAddressDeletePayload?: CompanyAddressDeletePayloadTypeResolver;
    CompanyAssignCustomerAsContactPayload?: CompanyAssignCustomerAsContactPayloadTypeResolver;
    CompanyAssignMainContactPayload?: CompanyAssignMainContactPayloadTypeResolver;
    CompanyContactAssignRolePayload?: CompanyContactAssignRolePayloadTypeResolver;
    CompanyContactAssignRolesPayload?: CompanyContactAssignRolesPayloadTypeResolver;
    CompanyContactCreatePayload?: CompanyContactCreatePayloadTypeResolver;
    CompanyContactDeletePayload?: CompanyContactDeletePayloadTypeResolver;
    CompanyContactRemoveFromCompanyPayload?: CompanyContactRemoveFromCompanyPayloadTypeResolver;
    CompanyContactRevokeRolePayload?: CompanyContactRevokeRolePayloadTypeResolver;
    CompanyContactRevokeRolesPayload?: CompanyContactRevokeRolesPayloadTypeResolver;
    CompanyContactSendWelcomeEmailPayload?: CompanyContactSendWelcomeEmailPayloadTypeResolver;
    CompanyContactUpdatePayload?: CompanyContactUpdatePayloadTypeResolver;
    CompanyContactsDeletePayload?: CompanyContactsDeletePayloadTypeResolver;
    CompanyCreatePayload?: CompanyCreatePayloadTypeResolver;
    CompanyDeletePayload?: CompanyDeletePayloadTypeResolver;
    CompanyLocationAssignAddressPayload?: CompanyLocationAssignAddressPayloadTypeResolver;
    CompanyLocationAssignRolesPayload?: CompanyLocationAssignRolesPayloadTypeResolver;
    CompanyLocationAssignTaxExemptionsPayload?: CompanyLocationAssignTaxExemptionsPayloadTypeResolver;
    CompanyLocationCreatePayload?: CompanyLocationCreatePayloadTypeResolver;
    CompanyLocationCreateTaxRegistrationPayload?: CompanyLocationCreateTaxRegistrationPayloadTypeResolver;
    CompanyLocationDeletePayload?: CompanyLocationDeletePayloadTypeResolver;
    CompanyLocationRevokeRolesPayload?: CompanyLocationRevokeRolesPayloadTypeResolver;
    CompanyLocationRevokeTaxExemptionsPayload?: CompanyLocationRevokeTaxExemptionsPayloadTypeResolver;
    CompanyLocationRevokeTaxRegistrationPayload?: CompanyLocationRevokeTaxRegistrationPayloadTypeResolver;
    CompanyLocationUpdatePayload?: CompanyLocationUpdatePayloadTypeResolver;
    CompanyLocationsDeletePayload?: CompanyLocationsDeletePayloadTypeResolver;
    CompanyRevokeMainContactPayload?: CompanyRevokeMainContactPayloadTypeResolver;
    CompanyUpdatePayload?: CompanyUpdatePayloadTypeResolver;
    CustomerAddTaxExemptionsPayload?: CustomerAddTaxExemptionsPayloadTypeResolver;
    CustomerCancelDataErasurePayload?: CustomerCancelDataErasurePayloadTypeResolver;
    CustomerCancelDataErasureUserError?: CustomerCancelDataErasureUserErrorTypeResolver;
    CustomerCreatePayload?: CustomerCreatePayloadTypeResolver;
    CustomerDeletePayload?: CustomerDeletePayloadTypeResolver;
    CustomerEmailMarketingConsentUpdatePayload?: CustomerEmailMarketingConsentUpdatePayloadTypeResolver;
    CustomerEmailMarketingConsentUpdateUserError?: CustomerEmailMarketingConsentUpdateUserErrorTypeResolver;
    CustomerGenerateAccountActivationUrlPayload?: CustomerGenerateAccountActivationUrlPayloadTypeResolver;
    CustomerMergePayload?: CustomerMergePayloadTypeResolver;
    CustomerMergeUserError?: CustomerMergeUserErrorTypeResolver;
    CustomerPaymentMethodCreateFromDuplicationDataPayload?: CustomerPaymentMethodCreateFromDuplicationDataPayloadTypeResolver;
    CustomerPaymentMethodCreateFromDuplicationDataUserError?: CustomerPaymentMethodCreateFromDuplicationDataUserErrorTypeResolver;
    CustomerPaymentMethodCreditCardCreatePayload?: CustomerPaymentMethodCreditCardCreatePayloadTypeResolver;
    CustomerPaymentMethodCreditCardUpdatePayload?: CustomerPaymentMethodCreditCardUpdatePayloadTypeResolver;
    CustomerPaymentMethodGetDuplicationDataPayload?: CustomerPaymentMethodGetDuplicationDataPayloadTypeResolver;
    CustomerPaymentMethodGetDuplicationDataUserError?: CustomerPaymentMethodGetDuplicationDataUserErrorTypeResolver;
    CustomerPaymentMethodGetUpdateUrlPayload?: CustomerPaymentMethodGetUpdateUrlPayloadTypeResolver;
    CustomerPaymentMethodGetUpdateUrlUserError?: CustomerPaymentMethodGetUpdateUrlUserErrorTypeResolver;
    CustomerPaymentMethodPaypalBillingAgreementCreatePayload?: CustomerPaymentMethodPaypalBillingAgreementCreatePayloadTypeResolver;
    CustomerPaymentMethodUserError?: CustomerPaymentMethodUserErrorTypeResolver;
    CustomerPaymentMethodPaypalBillingAgreementUpdatePayload?: CustomerPaymentMethodPaypalBillingAgreementUpdatePayloadTypeResolver;
    CustomerPaymentMethodRemoteCreatePayload?: CustomerPaymentMethodRemoteCreatePayloadTypeResolver;
    CustomerPaymentMethodRemoteUserError?: CustomerPaymentMethodRemoteUserErrorTypeResolver;
    CustomerPaymentMethodRemoteCreditCardCreatePayload?: CustomerPaymentMethodRemoteCreditCardCreatePayloadTypeResolver;
    CustomerPaymentMethodRevokePayload?: CustomerPaymentMethodRevokePayloadTypeResolver;
    CustomerPaymentMethodSendUpdateEmailPayload?: CustomerPaymentMethodSendUpdateEmailPayloadTypeResolver;
    CustomerRemoveTaxExemptionsPayload?: CustomerRemoveTaxExemptionsPayloadTypeResolver;
    CustomerReplaceTaxExemptionsPayload?: CustomerReplaceTaxExemptionsPayloadTypeResolver;
    CustomerRequestDataErasurePayload?: CustomerRequestDataErasurePayloadTypeResolver;
    CustomerRequestDataErasureUserError?: CustomerRequestDataErasureUserErrorTypeResolver;
    CustomerSegmentMembersQueryCreatePayload?: CustomerSegmentMembersQueryCreatePayloadTypeResolver;
    CustomerSegmentMembersQueryUserError?: CustomerSegmentMembersQueryUserErrorTypeResolver;
    CustomerSmsMarketingConsentUpdatePayload?: CustomerSmsMarketingConsentUpdatePayloadTypeResolver;
    CustomerSmsMarketingConsentError?: CustomerSmsMarketingConsentErrorTypeResolver;
    CustomerUpdatePayload?: CustomerUpdatePayloadTypeResolver;
    CustomerUpdateDefaultAddressPayload?: CustomerUpdateDefaultAddressPayloadTypeResolver;
    DelegateAccessTokenCreatePayload?: DelegateAccessTokenCreatePayloadTypeResolver;
    DelegateAccessToken?: DelegateAccessTokenTypeResolver;
    DelegateAccessTokenCreateUserError?: DelegateAccessTokenCreateUserErrorTypeResolver;
    DelegateAccessTokenDestroyPayload?: DelegateAccessTokenDestroyPayloadTypeResolver;
    DelegateAccessTokenDestroyUserError?: DelegateAccessTokenDestroyUserErrorTypeResolver;
    DeliveryCustomizationActivationPayload?: DeliveryCustomizationActivationPayloadTypeResolver;
    DeliveryCustomizationError?: DeliveryCustomizationErrorTypeResolver;
    DeliveryCustomizationCreatePayload?: DeliveryCustomizationCreatePayloadTypeResolver;
    DeliveryCustomizationDeletePayload?: DeliveryCustomizationDeletePayloadTypeResolver;
    DeliveryCustomizationUpdatePayload?: DeliveryCustomizationUpdatePayloadTypeResolver;
    deliveryProfileCreatePayload?: deliveryProfileCreatePayloadTypeResolver;
    deliveryProfileRemovePayload?: deliveryProfileRemovePayloadTypeResolver;
    deliveryProfileUpdatePayload?: deliveryProfileUpdatePayloadTypeResolver;
    DeliverySettingUpdatePayload?: DeliverySettingUpdatePayloadTypeResolver;
    DeliveryShippingOriginAssignPayload?: DeliveryShippingOriginAssignPayloadTypeResolver;
    DiscountAutomaticActivatePayload?: DiscountAutomaticActivatePayloadTypeResolver;
    DiscountAutomaticAppCreatePayload?: DiscountAutomaticAppCreatePayloadTypeResolver;
    DiscountAutomaticAppUpdatePayload?: DiscountAutomaticAppUpdatePayloadTypeResolver;
    DiscountAutomaticBasicCreatePayload?: DiscountAutomaticBasicCreatePayloadTypeResolver;
    DiscountAutomaticBasicUpdatePayload?: DiscountAutomaticBasicUpdatePayloadTypeResolver;
    DiscountAutomaticBulkDeletePayload?: DiscountAutomaticBulkDeletePayloadTypeResolver;
    DiscountAutomaticBxgyCreatePayload?: DiscountAutomaticBxgyCreatePayloadTypeResolver;
    DiscountAutomaticBxgyUpdatePayload?: DiscountAutomaticBxgyUpdatePayloadTypeResolver;
    DiscountAutomaticDeactivatePayload?: DiscountAutomaticDeactivatePayloadTypeResolver;
    DiscountAutomaticDeletePayload?: DiscountAutomaticDeletePayloadTypeResolver;
    DiscountAutomaticFreeShippingCreatePayload?: DiscountAutomaticFreeShippingCreatePayloadTypeResolver;
    DiscountAutomaticFreeShippingUpdatePayload?: DiscountAutomaticFreeShippingUpdatePayloadTypeResolver;
    DiscountCodeActivatePayload?: DiscountCodeActivatePayloadTypeResolver;
    DiscountCodeAppCreatePayload?: DiscountCodeAppCreatePayloadTypeResolver;
    DiscountCodeAppUpdatePayload?: DiscountCodeAppUpdatePayloadTypeResolver;
    DiscountCodeBasicCreatePayload?: DiscountCodeBasicCreatePayloadTypeResolver;
    DiscountCodeBasicUpdatePayload?: DiscountCodeBasicUpdatePayloadTypeResolver;
    DiscountCodeBulkActivatePayload?: DiscountCodeBulkActivatePayloadTypeResolver;
    DiscountCodeBulkDeactivatePayload?: DiscountCodeBulkDeactivatePayloadTypeResolver;
    DiscountCodeBulkDeletePayload?: DiscountCodeBulkDeletePayloadTypeResolver;
    DiscountCodeBxgyCreatePayload?: DiscountCodeBxgyCreatePayloadTypeResolver;
    DiscountCodeBxgyUpdatePayload?: DiscountCodeBxgyUpdatePayloadTypeResolver;
    DiscountCodeDeactivatePayload?: DiscountCodeDeactivatePayloadTypeResolver;
    DiscountCodeDeletePayload?: DiscountCodeDeletePayloadTypeResolver;
    DiscountCodeFreeShippingCreatePayload?: DiscountCodeFreeShippingCreatePayloadTypeResolver;
    DiscountCodeFreeShippingUpdatePayload?: DiscountCodeFreeShippingUpdatePayloadTypeResolver;
    DiscountCodeRedeemCodeBulkDeletePayload?: DiscountCodeRedeemCodeBulkDeletePayloadTypeResolver;
    DiscountRedeemCodeBulkAddPayload?: DiscountRedeemCodeBulkAddPayloadTypeResolver;
    DisputeEvidenceUpdatePayload?: DisputeEvidenceUpdatePayloadTypeResolver;
    DisputeEvidenceUpdateUserError?: DisputeEvidenceUpdateUserErrorTypeResolver;
    DraftOrderBulkAddTagsPayload?: DraftOrderBulkAddTagsPayloadTypeResolver;
    DraftOrderBulkDeletePayload?: DraftOrderBulkDeletePayloadTypeResolver;
    DraftOrderBulkRemoveTagsPayload?: DraftOrderBulkRemoveTagsPayloadTypeResolver;
    DraftOrderCalculatePayload?: DraftOrderCalculatePayloadTypeResolver;
    CalculatedDraftOrder?: CalculatedDraftOrderTypeResolver;
    ShippingRate?: ShippingRateTypeResolver;
    CalculatedDraftOrderLineItem?: CalculatedDraftOrderLineItemTypeResolver;
    DraftOrderCompletePayload?: DraftOrderCompletePayloadTypeResolver;
    DraftOrderCreatePayload?: DraftOrderCreatePayloadTypeResolver;
    DraftOrderCreateFromOrderPayload?: DraftOrderCreateFromOrderPayloadTypeResolver;
    DraftOrderCreateMerchantCheckoutPayload?: DraftOrderCreateMerchantCheckoutPayloadTypeResolver;
    DraftOrderDeletePayload?: DraftOrderDeletePayloadTypeResolver;
    DraftOrderDuplicatePayload?: DraftOrderDuplicatePayloadTypeResolver;
    DraftOrderInvoicePreviewPayload?: DraftOrderInvoicePreviewPayloadTypeResolver;
    DraftOrderInvoiceSendPayload?: DraftOrderInvoiceSendPayloadTypeResolver;
    DraftOrderUpdatePayload?: DraftOrderUpdatePayloadTypeResolver;
    EventBridgeServerPixelUpdatePayload?: EventBridgeServerPixelUpdatePayloadTypeResolver;
    ErrorsServerPixelUserError?: ErrorsServerPixelUserErrorTypeResolver;
    EventBridgeWebhookSubscriptionCreatePayload?: EventBridgeWebhookSubscriptionCreatePayloadTypeResolver;
    EventBridgeWebhookSubscriptionUpdatePayload?: EventBridgeWebhookSubscriptionUpdatePayloadTypeResolver;
    FileAcknowledgeUpdateFailedPayload?: FileAcknowledgeUpdateFailedPayloadTypeResolver;
    FilesUserError?: FilesUserErrorTypeResolver;
    FileCreatePayload?: FileCreatePayloadTypeResolver;
    FileDeletePayload?: FileDeletePayloadTypeResolver;
    FileUpdatePayload?: FileUpdatePayloadTypeResolver;
    FlowGenerateSignaturePayload?: FlowGenerateSignaturePayloadTypeResolver;
    FlowTriggerReceivePayload?: FlowTriggerReceivePayloadTypeResolver;
    FulfillmentCancelPayload?: FulfillmentCancelPayloadTypeResolver;
    FulfillmentConstraintRuleCreatePayload?: FulfillmentConstraintRuleCreatePayloadTypeResolver;
    FulfillmentConstraintRuleCreateUserError?: FulfillmentConstraintRuleCreateUserErrorTypeResolver;
    FulfillmentConstraintRuleDeletePayload?: FulfillmentConstraintRuleDeletePayloadTypeResolver;
    FulfillmentConstraintRuleDeleteUserError?: FulfillmentConstraintRuleDeleteUserErrorTypeResolver;
    FulfillmentCreateV2Payload?: FulfillmentCreateV2PayloadTypeResolver;
    FulfillmentEventCreatePayload?: FulfillmentEventCreatePayloadTypeResolver;
    FulfillmentOrderAcceptCancellationRequestPayload?: FulfillmentOrderAcceptCancellationRequestPayloadTypeResolver;
    FulfillmentOrderAcceptFulfillmentRequestPayload?: FulfillmentOrderAcceptFulfillmentRequestPayloadTypeResolver;
    FulfillmentOrderCancelPayload?: FulfillmentOrderCancelPayloadTypeResolver;
    FulfillmentOrderClosePayload?: FulfillmentOrderClosePayloadTypeResolver;
    FulfillmentOrderHoldPayload?: FulfillmentOrderHoldPayloadTypeResolver;
    FulfillmentOrderHoldUserError?: FulfillmentOrderHoldUserErrorTypeResolver;
    FulfillmentOrderLineItemsPreparedForPickupPayload?: FulfillmentOrderLineItemsPreparedForPickupPayloadTypeResolver;
    FulfillmentOrderLineItemsPreparedForPickupUserError?: FulfillmentOrderLineItemsPreparedForPickupUserErrorTypeResolver;
    FulfillmentOrderMergePayload?: FulfillmentOrderMergePayloadTypeResolver;
    FulfillmentOrderMergeResult?: FulfillmentOrderMergeResultTypeResolver;
    FulfillmentOrderMergeUserError?: FulfillmentOrderMergeUserErrorTypeResolver;
    FulfillmentOrderMovePayload?: FulfillmentOrderMovePayloadTypeResolver;
    FulfillmentOrderOpenPayload?: FulfillmentOrderOpenPayloadTypeResolver;
    FulfillmentOrderRejectCancellationRequestPayload?: FulfillmentOrderRejectCancellationRequestPayloadTypeResolver;
    FulfillmentOrderRejectFulfillmentRequestPayload?: FulfillmentOrderRejectFulfillmentRequestPayloadTypeResolver;
    FulfillmentOrderReleaseHoldPayload?: FulfillmentOrderReleaseHoldPayloadTypeResolver;
    FulfillmentOrderReleaseHoldUserError?: FulfillmentOrderReleaseHoldUserErrorTypeResolver;
    FulfillmentOrderReschedulePayload?: FulfillmentOrderReschedulePayloadTypeResolver;
    FulfillmentOrderRescheduleUserError?: FulfillmentOrderRescheduleUserErrorTypeResolver;
    FulfillmentOrderSplitPayload?: FulfillmentOrderSplitPayloadTypeResolver;
    FulfillmentOrderSplitResult?: FulfillmentOrderSplitResultTypeResolver;
    FulfillmentOrderSplitUserError?: FulfillmentOrderSplitUserErrorTypeResolver;
    FulfillmentOrderSubmitCancellationRequestPayload?: FulfillmentOrderSubmitCancellationRequestPayloadTypeResolver;
    FulfillmentOrderSubmitFulfillmentRequestPayload?: FulfillmentOrderSubmitFulfillmentRequestPayloadTypeResolver;
    FulfillmentOrdersReleaseHoldsPayload?: FulfillmentOrdersReleaseHoldsPayloadTypeResolver;
    FulfillmentOrdersReleaseHoldsUserError?: FulfillmentOrdersReleaseHoldsUserErrorTypeResolver;
    FulfillmentOrdersSetFulfillmentDeadlinePayload?: FulfillmentOrdersSetFulfillmentDeadlinePayloadTypeResolver;
    FulfillmentOrdersSetFulfillmentDeadlineUserError?: FulfillmentOrdersSetFulfillmentDeadlineUserErrorTypeResolver;
    FulfillmentServiceCreatePayload?: FulfillmentServiceCreatePayloadTypeResolver;
    FulfillmentServiceDeletePayload?: FulfillmentServiceDeletePayloadTypeResolver;
    FulfillmentServiceUpdatePayload?: FulfillmentServiceUpdatePayloadTypeResolver;
    FulfillmentTrackingInfoUpdateV2Payload?: FulfillmentTrackingInfoUpdateV2PayloadTypeResolver;
    GiftCardCreatePayload?: GiftCardCreatePayloadTypeResolver;
    GiftCardUserError?: GiftCardUserErrorTypeResolver;
    GiftCardDisablePayload?: GiftCardDisablePayloadTypeResolver;
    GiftCardUpdatePayload?: GiftCardUpdatePayloadTypeResolver;
    InventoryActivatePayload?: InventoryActivatePayloadTypeResolver;
    InventoryAdjustQuantitiesPayload?: InventoryAdjustQuantitiesPayloadTypeResolver;
    InventoryAdjustmentGroup?: InventoryAdjustmentGroupTypeResolver;
    InventoryChange?: InventoryChangeTypeResolver;
    InventoryAdjustQuantitiesUserError?: InventoryAdjustQuantitiesUserErrorTypeResolver;
    InventoryAdjustQuantityPayload?: InventoryAdjustQuantityPayloadTypeResolver;
    InventoryBulkAdjustQuantityAtLocationPayload?: InventoryBulkAdjustQuantityAtLocationPayloadTypeResolver;
    InventoryBulkToggleActivationPayload?: InventoryBulkToggleActivationPayloadTypeResolver;
    InventoryBulkToggleActivationUserError?: InventoryBulkToggleActivationUserErrorTypeResolver;
    InventoryDeactivatePayload?: InventoryDeactivatePayloadTypeResolver;
    InventoryItemUpdatePayload?: InventoryItemUpdatePayloadTypeResolver;
    InventoryMoveQuantitiesPayload?: InventoryMoveQuantitiesPayloadTypeResolver;
    InventoryMoveQuantitiesUserError?: InventoryMoveQuantitiesUserErrorTypeResolver;
    InventorySetOnHandQuantitiesPayload?: InventorySetOnHandQuantitiesPayloadTypeResolver;
    InventorySetOnHandQuantitiesUserError?: InventorySetOnHandQuantitiesUserErrorTypeResolver;
    InventorySetScheduledChangesPayload?: InventorySetScheduledChangesPayloadTypeResolver;
    InventorySetScheduledChangesUserError?: InventorySetScheduledChangesUserErrorTypeResolver;
    LocationActivatePayload?: LocationActivatePayloadTypeResolver;
    LocationActivateUserError?: LocationActivateUserErrorTypeResolver;
    LocationAddPayload?: LocationAddPayloadTypeResolver;
    LocationAddUserError?: LocationAddUserErrorTypeResolver;
    LocationDeactivatePayload?: LocationDeactivatePayloadTypeResolver;
    LocationDeactivateUserError?: LocationDeactivateUserErrorTypeResolver;
    LocationDeletePayload?: LocationDeletePayloadTypeResolver;
    LocationDeleteUserError?: LocationDeleteUserErrorTypeResolver;
    LocationEditPayload?: LocationEditPayloadTypeResolver;
    LocationEditUserError?: LocationEditUserErrorTypeResolver;
    LocationLocalPickupDisablePayload?: LocationLocalPickupDisablePayloadTypeResolver;
    DeliveryLocationLocalPickupSettingsError?: DeliveryLocationLocalPickupSettingsErrorTypeResolver;
    LocationLocalPickupEnablePayload?: LocationLocalPickupEnablePayloadTypeResolver;
    MarketCreatePayload?: MarketCreatePayloadTypeResolver;
    MarketUserError?: MarketUserErrorTypeResolver;
    MarketCurrencySettingsUpdatePayload?: MarketCurrencySettingsUpdatePayloadTypeResolver;
    MarketCurrencySettingsUserError?: MarketCurrencySettingsUserErrorTypeResolver;
    MarketDeletePayload?: MarketDeletePayloadTypeResolver;
    MarketLocalizationsRegisterPayload?: MarketLocalizationsRegisterPayloadTypeResolver;
    TranslationUserError?: TranslationUserErrorTypeResolver;
    MarketLocalizationsRemovePayload?: MarketLocalizationsRemovePayloadTypeResolver;
    MarketRegionDeletePayload?: MarketRegionDeletePayloadTypeResolver;
    MarketRegionsCreatePayload?: MarketRegionsCreatePayloadTypeResolver;
    MarketRegionsDeletePayload?: MarketRegionsDeletePayloadTypeResolver;
    MarketUpdatePayload?: MarketUpdatePayloadTypeResolver;
    MarketWebPresenceCreatePayload?: MarketWebPresenceCreatePayloadTypeResolver;
    MarketWebPresenceDeletePayload?: MarketWebPresenceDeletePayloadTypeResolver;
    MarketWebPresenceUpdatePayload?: MarketWebPresenceUpdatePayloadTypeResolver;
    MarketingActivitiesDeleteAllExternalPayload?: MarketingActivitiesDeleteAllExternalPayloadTypeResolver;
    MarketingActivityUserError?: MarketingActivityUserErrorTypeResolver;
    MarketingActivityCreatePayload?: MarketingActivityCreatePayloadTypeResolver;
    MarketingActivityCreateExternalPayload?: MarketingActivityCreateExternalPayloadTypeResolver;
    MarketingActivityDeleteExternalPayload?: MarketingActivityDeleteExternalPayloadTypeResolver;
    MarketingActivityUpdatePayload?: MarketingActivityUpdatePayloadTypeResolver;
    MarketingActivityUpdateExternalPayload?: MarketingActivityUpdateExternalPayloadTypeResolver;
    MarketingActivityUpsertExternalPayload?: MarketingActivityUpsertExternalPayloadTypeResolver;
    UtcOffset?: GraphQLScalarType;
    MarketingEngagementCreatePayload?: MarketingEngagementCreatePayloadTypeResolver;
    MarketingEngagement?: MarketingEngagementTypeResolver;
    MarketingEngagementsDeletePayload?: MarketingEngagementsDeletePayloadTypeResolver;
    MetafieldDefinitionCreatePayload?: MetafieldDefinitionCreatePayloadTypeResolver;
    MetafieldDefinitionCreateUserError?: MetafieldDefinitionCreateUserErrorTypeResolver;
    MetafieldDefinitionDeletePayload?: MetafieldDefinitionDeletePayloadTypeResolver;
    MetafieldDefinitionDeleteUserError?: MetafieldDefinitionDeleteUserErrorTypeResolver;
    MetafieldDefinitionPinPayload?: MetafieldDefinitionPinPayloadTypeResolver;
    MetafieldDefinitionPinUserError?: MetafieldDefinitionPinUserErrorTypeResolver;
    MetafieldDefinitionUnpinPayload?: MetafieldDefinitionUnpinPayloadTypeResolver;
    MetafieldDefinitionUnpinUserError?: MetafieldDefinitionUnpinUserErrorTypeResolver;
    MetafieldDefinitionUpdatePayload?: MetafieldDefinitionUpdatePayloadTypeResolver;
    MetafieldDefinitionUpdateUserError?: MetafieldDefinitionUpdateUserErrorTypeResolver;
    MetafieldDeletePayload?: MetafieldDeletePayloadTypeResolver;
    MetafieldStorefrontVisibilityCreatePayload?: MetafieldStorefrontVisibilityCreatePayloadTypeResolver;
    MetafieldStorefrontVisibilityDeletePayload?: MetafieldStorefrontVisibilityDeletePayloadTypeResolver;
    MetafieldsSetPayload?: MetafieldsSetPayloadTypeResolver;
    MetafieldsSetUserError?: MetafieldsSetUserErrorTypeResolver;
    MetaobjectBulkDeletePayload?: MetaobjectBulkDeletePayloadTypeResolver;
    MetaobjectUserError?: MetaobjectUserErrorTypeResolver;
    MetaobjectCreatePayload?: MetaobjectCreatePayloadTypeResolver;
    MetaobjectDefinitionCreatePayload?: MetaobjectDefinitionCreatePayloadTypeResolver;
    MetaobjectDefinitionDeletePayload?: MetaobjectDefinitionDeletePayloadTypeResolver;
    MetaobjectDefinitionUpdatePayload?: MetaobjectDefinitionUpdatePayloadTypeResolver;
    MetaobjectDeletePayload?: MetaobjectDeletePayloadTypeResolver;
    MetaobjectUpdatePayload?: MetaobjectUpdatePayloadTypeResolver;
    MetaobjectUpsertPayload?: MetaobjectUpsertPayloadTypeResolver;
    OrderCancelPayload?: OrderCancelPayloadTypeResolver;
    OrderCancelUserError?: OrderCancelUserErrorTypeResolver;
    OrderCapturePayload?: OrderCapturePayloadTypeResolver;
    OrderClosePayload?: OrderClosePayloadTypeResolver;
    OrderCreateMandatePaymentPayload?: OrderCreateMandatePaymentPayloadTypeResolver;
    OrderCreateMandatePaymentUserError?: OrderCreateMandatePaymentUserErrorTypeResolver;
    OrderEditAddCustomItemPayload?: OrderEditAddCustomItemPayloadTypeResolver;
    CalculatedLineItem?: CalculatedLineItemTypeResolver;
    CalculatedDiscountAllocation?: CalculatedDiscountAllocationTypeResolver;
    CalculatedDiscountApplication?: {
      __resolveType: CalculatedDiscountApplicationTypeResolver
    };
    
    OrderStagedChange?: {
      __resolveType: OrderStagedChangeTypeResolver
    };
    
    OrderStagedChangeAddCustomItem?: OrderStagedChangeAddCustomItemTypeResolver;
    OrderStagedChangeAddLineItemDiscount?: OrderStagedChangeAddLineItemDiscountTypeResolver;
    OrderStagedChangeAddShippingLine?: OrderStagedChangeAddShippingLineTypeResolver;
    OrderStagedChangeAddVariant?: OrderStagedChangeAddVariantTypeResolver;
    OrderStagedChangeDecrementItem?: OrderStagedChangeDecrementItemTypeResolver;
    OrderStagedChangeIncrementItem?: OrderStagedChangeIncrementItemTypeResolver;
    CalculatedOrder?: CalculatedOrderTypeResolver;
    CalculatedDiscountApplicationConnection?: CalculatedDiscountApplicationConnectionTypeResolver;
    CalculatedDiscountApplicationEdge?: CalculatedDiscountApplicationEdgeTypeResolver;
    CalculatedLineItemConnection?: CalculatedLineItemConnectionTypeResolver;
    CalculatedLineItemEdge?: CalculatedLineItemEdgeTypeResolver;
    OrderStagedChangeConnection?: OrderStagedChangeConnectionTypeResolver;
    OrderStagedChangeEdge?: OrderStagedChangeEdgeTypeResolver;
    OrderEditAddLineItemDiscountPayload?: OrderEditAddLineItemDiscountPayloadTypeResolver;
    OrderEditAddVariantPayload?: OrderEditAddVariantPayloadTypeResolver;
    OrderEditBeginPayload?: OrderEditBeginPayloadTypeResolver;
    OrderEditCommitPayload?: OrderEditCommitPayloadTypeResolver;
    OrderEditRemoveDiscountPayload?: OrderEditRemoveDiscountPayloadTypeResolver;
    OrderEditRemoveDiscountUserError?: OrderEditRemoveDiscountUserErrorTypeResolver;
    OrderEditRemoveLineItemDiscountPayload?: OrderEditRemoveLineItemDiscountPayloadTypeResolver;
    OrderEditSetQuantityPayload?: OrderEditSetQuantityPayloadTypeResolver;
    OrderEditUpdateDiscountPayload?: OrderEditUpdateDiscountPayloadTypeResolver;
    OrderEditUpdateDiscountUserError?: OrderEditUpdateDiscountUserErrorTypeResolver;
    OrderInvoiceSendPayload?: OrderInvoiceSendPayloadTypeResolver;
    OrderInvoiceSendUserError?: OrderInvoiceSendUserErrorTypeResolver;
    OrderMarkAsPaidPayload?: OrderMarkAsPaidPayloadTypeResolver;
    OrderOpenPayload?: OrderOpenPayloadTypeResolver;
    OrderUpdatePayload?: OrderUpdatePayloadTypeResolver;
    PaymentCustomizationActivationPayload?: PaymentCustomizationActivationPayloadTypeResolver;
    PaymentCustomizationError?: PaymentCustomizationErrorTypeResolver;
    PaymentCustomizationCreatePayload?: PaymentCustomizationCreatePayloadTypeResolver;
    PaymentCustomizationDeletePayload?: PaymentCustomizationDeletePayloadTypeResolver;
    PaymentCustomizationUpdatePayload?: PaymentCustomizationUpdatePayloadTypeResolver;
    PaymentReminderSendPayload?: PaymentReminderSendPayloadTypeResolver;
    PaymentReminderSendUserError?: PaymentReminderSendUserErrorTypeResolver;
    PaymentTermsCreatePayload?: PaymentTermsCreatePayloadTypeResolver;
    PaymentTermsCreateUserError?: PaymentTermsCreateUserErrorTypeResolver;
    PaymentTermsDeletePayload?: PaymentTermsDeletePayloadTypeResolver;
    PaymentTermsDeleteUserError?: PaymentTermsDeleteUserErrorTypeResolver;
    PaymentTermsUpdatePayload?: PaymentTermsUpdatePayloadTypeResolver;
    PaymentTermsUpdateUserError?: PaymentTermsUpdateUserErrorTypeResolver;
    PriceListCreatePayload?: PriceListCreatePayloadTypeResolver;
    PriceListUserError?: PriceListUserErrorTypeResolver;
    PriceListDeletePayload?: PriceListDeletePayloadTypeResolver;
    PriceListFixedPricesAddPayload?: PriceListFixedPricesAddPayloadTypeResolver;
    PriceListPriceUserError?: PriceListPriceUserErrorTypeResolver;
    PriceListFixedPricesByProductUpdatePayload?: PriceListFixedPricesByProductUpdatePayloadTypeResolver;
    PriceListFixedPricesByProductBulkUpdateUserError?: PriceListFixedPricesByProductBulkUpdateUserErrorTypeResolver;
    PriceListFixedPricesDeletePayload?: PriceListFixedPricesDeletePayloadTypeResolver;
    PriceListFixedPricesUpdatePayload?: PriceListFixedPricesUpdatePayloadTypeResolver;
    PriceListUpdatePayload?: PriceListUpdatePayloadTypeResolver;
    PriceRuleActivatePayload?: PriceRuleActivatePayloadTypeResolver;
    PriceRuleUserError?: PriceRuleUserErrorTypeResolver;
    PriceRuleCreatePayload?: PriceRuleCreatePayloadTypeResolver;
    PriceRuleDeactivatePayload?: PriceRuleDeactivatePayloadTypeResolver;
    PriceRuleDeletePayload?: PriceRuleDeletePayloadTypeResolver;
    PriceRuleDiscountCodeCreatePayload?: PriceRuleDiscountCodeCreatePayloadTypeResolver;
    PriceRuleDiscountCodeUpdatePayload?: PriceRuleDiscountCodeUpdatePayloadTypeResolver;
    PriceRuleUpdatePayload?: PriceRuleUpdatePayloadTypeResolver;
    PrivateMetafieldDeletePayload?: PrivateMetafieldDeletePayloadTypeResolver;
    PrivateMetafieldUpsertPayload?: PrivateMetafieldUpsertPayloadTypeResolver;
    ProductAppendImagesPayload?: ProductAppendImagesPayloadTypeResolver;
    ProductChangeStatusPayload?: ProductChangeStatusPayloadTypeResolver;
    ProductChangeStatusUserError?: ProductChangeStatusUserErrorTypeResolver;
    ProductCreatePayload?: ProductCreatePayloadTypeResolver;
    ProductCreateMediaPayload?: ProductCreateMediaPayloadTypeResolver;
    MediaUserError?: MediaUserErrorTypeResolver;
    ProductDeletePayload?: ProductDeletePayloadTypeResolver;
    ProductDeleteAsyncPayload?: ProductDeleteAsyncPayloadTypeResolver;
    ProductDeleteUserError?: ProductDeleteUserErrorTypeResolver;
    ProductDeleteImagesPayload?: ProductDeleteImagesPayloadTypeResolver;
    ProductDeleteMediaPayload?: ProductDeleteMediaPayloadTypeResolver;
    ProductDuplicatePayload?: ProductDuplicatePayloadTypeResolver;
    ProductDuplicateAsyncPayload?: ProductDuplicateAsyncPayloadTypeResolver;
    ProductDuplicateUserError?: ProductDuplicateUserErrorTypeResolver;
    ProductDuplicateAsyncV2Payload?: ProductDuplicateAsyncV2PayloadTypeResolver;
    ProductFeedCreatePayload?: ProductFeedCreatePayloadTypeResolver;
    ProductFeedCreateUserError?: ProductFeedCreateUserErrorTypeResolver;
    ProductFeedDeletePayload?: ProductFeedDeletePayloadTypeResolver;
    ProductFeedDeleteUserError?: ProductFeedDeleteUserErrorTypeResolver;
    ProductFullSyncPayload?: ProductFullSyncPayloadTypeResolver;
    ProductFullSyncUserError?: ProductFullSyncUserErrorTypeResolver;
    ProductImageUpdatePayload?: ProductImageUpdatePayloadTypeResolver;
    ProductJoinSellingPlanGroupsPayload?: ProductJoinSellingPlanGroupsPayloadTypeResolver;
    SellingPlanGroupUserError?: SellingPlanGroupUserErrorTypeResolver;
    ProductLeaveSellingPlanGroupsPayload?: ProductLeaveSellingPlanGroupsPayloadTypeResolver;
    ProductPublishPayload?: ProductPublishPayloadTypeResolver;
    ProductReorderImagesPayload?: ProductReorderImagesPayloadTypeResolver;
    ProductReorderMediaPayload?: ProductReorderMediaPayloadTypeResolver;
    ProductUnpublishPayload?: ProductUnpublishPayloadTypeResolver;
    ProductUpdatePayload?: ProductUpdatePayloadTypeResolver;
    ProductUpdateMediaPayload?: ProductUpdateMediaPayloadTypeResolver;
    ProductVariantAppendMediaPayload?: ProductVariantAppendMediaPayloadTypeResolver;
    ProductVariantCreatePayload?: ProductVariantCreatePayloadTypeResolver;
    ProductVariantDeletePayload?: ProductVariantDeletePayloadTypeResolver;
    ProductVariantDetachMediaPayload?: ProductVariantDetachMediaPayloadTypeResolver;
    ProductVariantJoinSellingPlanGroupsPayload?: ProductVariantJoinSellingPlanGroupsPayloadTypeResolver;
    ProductVariantLeaveSellingPlanGroupsPayload?: ProductVariantLeaveSellingPlanGroupsPayloadTypeResolver;
    ProductVariantRelationshipBulkUpdatePayload?: ProductVariantRelationshipBulkUpdatePayloadTypeResolver;
    ProductVariantRelationshipBulkUpdateUserError?: ProductVariantRelationshipBulkUpdateUserErrorTypeResolver;
    ProductVariantUpdatePayload?: ProductVariantUpdatePayloadTypeResolver;
    ProductVariantsBulkCreatePayload?: ProductVariantsBulkCreatePayloadTypeResolver;
    ProductVariantsBulkCreateUserError?: ProductVariantsBulkCreateUserErrorTypeResolver;
    ProductVariantsBulkDeletePayload?: ProductVariantsBulkDeletePayloadTypeResolver;
    ProductVariantsBulkDeleteUserError?: ProductVariantsBulkDeleteUserErrorTypeResolver;
    ProductVariantsBulkReorderPayload?: ProductVariantsBulkReorderPayloadTypeResolver;
    ProductVariantsBulkReorderUserError?: ProductVariantsBulkReorderUserErrorTypeResolver;
    ProductVariantsBulkUpdatePayload?: ProductVariantsBulkUpdatePayloadTypeResolver;
    ProductVariantsBulkUpdateUserError?: ProductVariantsBulkUpdateUserErrorTypeResolver;
    PubSubServerPixelUpdatePayload?: PubSubServerPixelUpdatePayloadTypeResolver;
    PubSubWebhookSubscriptionCreatePayload?: PubSubWebhookSubscriptionCreatePayloadTypeResolver;
    PubSubWebhookSubscriptionCreateUserError?: PubSubWebhookSubscriptionCreateUserErrorTypeResolver;
    PubSubWebhookSubscriptionUpdatePayload?: PubSubWebhookSubscriptionUpdatePayloadTypeResolver;
    PubSubWebhookSubscriptionUpdateUserError?: PubSubWebhookSubscriptionUpdateUserErrorTypeResolver;
    PublicationCreatePayload?: PublicationCreatePayloadTypeResolver;
    PublicationUserError?: PublicationUserErrorTypeResolver;
    PublicationDeletePayload?: PublicationDeletePayloadTypeResolver;
    PublicationUpdatePayload?: PublicationUpdatePayloadTypeResolver;
    PublishablePublishPayload?: PublishablePublishPayloadTypeResolver;
    PublishablePublishToCurrentChannelPayload?: PublishablePublishToCurrentChannelPayloadTypeResolver;
    PublishableUnpublishPayload?: PublishableUnpublishPayloadTypeResolver;
    PublishableUnpublishToCurrentChannelPayload?: PublishableUnpublishToCurrentChannelPayloadTypeResolver;
    QuantityPricingByVariantUpdatePayload?: QuantityPricingByVariantUpdatePayloadTypeResolver;
    QuantityPricingByVariantUserError?: QuantityPricingByVariantUserErrorTypeResolver;
    QuantityRulesAddPayload?: QuantityRulesAddPayloadTypeResolver;
    QuantityRuleUserError?: QuantityRuleUserErrorTypeResolver;
    QuantityRulesDeletePayload?: QuantityRulesDeletePayloadTypeResolver;
    RefundCreatePayload?: RefundCreatePayloadTypeResolver;
    ReturnApproveRequestPayload?: ReturnApproveRequestPayloadTypeResolver;
    ReturnUserError?: ReturnUserErrorTypeResolver;
    ReturnCancelPayload?: ReturnCancelPayloadTypeResolver;
    ReturnClosePayload?: ReturnClosePayloadTypeResolver;
    ReturnCreatePayload?: ReturnCreatePayloadTypeResolver;
    ReturnDeclineRequestPayload?: ReturnDeclineRequestPayloadTypeResolver;
    ReturnRefundPayload?: ReturnRefundPayloadTypeResolver;
    ReturnReopenPayload?: ReturnReopenPayloadTypeResolver;
    ReturnRequestPayload?: ReturnRequestPayloadTypeResolver;
    ReverseDeliveryCreateWithShippingPayload?: ReverseDeliveryCreateWithShippingPayloadTypeResolver;
    ReverseDeliveryDisposePayload?: ReverseDeliveryDisposePayloadTypeResolver;
    ReverseDeliveryShippingUpdatePayload?: ReverseDeliveryShippingUpdatePayloadTypeResolver;
    ReverseFulfillmentOrderDisposePayload?: ReverseFulfillmentOrderDisposePayloadTypeResolver;
    SavedSearchCreatePayload?: SavedSearchCreatePayloadTypeResolver;
    SavedSearchDeletePayload?: SavedSearchDeletePayloadTypeResolver;
    SavedSearchUpdatePayload?: SavedSearchUpdatePayloadTypeResolver;
    ScriptTagCreatePayload?: ScriptTagCreatePayloadTypeResolver;
    ScriptTagDeletePayload?: ScriptTagDeletePayloadTypeResolver;
    ScriptTagUpdatePayload?: ScriptTagUpdatePayloadTypeResolver;
    SegmentCreatePayload?: SegmentCreatePayloadTypeResolver;
    SegmentDeletePayload?: SegmentDeletePayloadTypeResolver;
    SegmentUpdatePayload?: SegmentUpdatePayloadTypeResolver;
    SellingPlanGroupAddProductVariantsPayload?: SellingPlanGroupAddProductVariantsPayloadTypeResolver;
    SellingPlanGroupAddProductsPayload?: SellingPlanGroupAddProductsPayloadTypeResolver;
    SellingPlanGroupCreatePayload?: SellingPlanGroupCreatePayloadTypeResolver;
    SellingPlanGroupDeletePayload?: SellingPlanGroupDeletePayloadTypeResolver;
    SellingPlanGroupRemoveProductVariantsPayload?: SellingPlanGroupRemoveProductVariantsPayloadTypeResolver;
    SellingPlanGroupRemoveProductsPayload?: SellingPlanGroupRemoveProductsPayloadTypeResolver;
    SellingPlanGroupUpdatePayload?: SellingPlanGroupUpdatePayloadTypeResolver;
    ServerPixelCreatePayload?: ServerPixelCreatePayloadTypeResolver;
    ServerPixelDeletePayload?: ServerPixelDeletePayloadTypeResolver;
    ShippingPackageDeletePayload?: ShippingPackageDeletePayloadTypeResolver;
    ShippingPackageMakeDefaultPayload?: ShippingPackageMakeDefaultPayloadTypeResolver;
    ShippingPackageUpdatePayload?: ShippingPackageUpdatePayloadTypeResolver;
    ShopLocaleDisablePayload?: ShopLocaleDisablePayloadTypeResolver;
    ShopLocaleEnablePayload?: ShopLocaleEnablePayloadTypeResolver;
    ShopLocaleUpdatePayload?: ShopLocaleUpdatePayloadTypeResolver;
    ShopPolicyUpdatePayload?: ShopPolicyUpdatePayloadTypeResolver;
    ShopPolicyUserError?: ShopPolicyUserErrorTypeResolver;
    ShopResourceFeedbackCreatePayload?: ShopResourceFeedbackCreatePayloadTypeResolver;
    ShopResourceFeedbackCreateUserError?: ShopResourceFeedbackCreateUserErrorTypeResolver;
    StagedUploadTargetGeneratePayload?: StagedUploadTargetGeneratePayloadTypeResolver;
    MutationsStagedUploadTargetGenerateUploadParameter?: MutationsStagedUploadTargetGenerateUploadParameterTypeResolver;
    StagedUploadTargetsGeneratePayload?: StagedUploadTargetsGeneratePayloadTypeResolver;
    StagedUploadTarget?: StagedUploadTargetTypeResolver;
    ImageUploadParameter?: ImageUploadParameterTypeResolver;
    StagedUploadsCreatePayload?: StagedUploadsCreatePayloadTypeResolver;
    StagedMediaUploadTarget?: StagedMediaUploadTargetTypeResolver;
    StagedUploadParameter?: StagedUploadParameterTypeResolver;
    StandardMetafieldDefinitionEnablePayload?: StandardMetafieldDefinitionEnablePayloadTypeResolver;
    StandardMetafieldDefinitionEnableUserError?: StandardMetafieldDefinitionEnableUserErrorTypeResolver;
    StandardMetaobjectDefinitionEnablePayload?: StandardMetaobjectDefinitionEnablePayloadTypeResolver;
    StorefrontAccessTokenCreatePayload?: StorefrontAccessTokenCreatePayloadTypeResolver;
    StorefrontAccessTokenDeletePayload?: StorefrontAccessTokenDeletePayloadTypeResolver;
    SubscriptionBillingAttemptCreatePayload?: SubscriptionBillingAttemptCreatePayloadTypeResolver;
    BillingAttemptUserError?: BillingAttemptUserErrorTypeResolver;
    SubscriptionBillingCycleContractDraftCommitPayload?: SubscriptionBillingCycleContractDraftCommitPayloadTypeResolver;
    SubscriptionDraftUserError?: SubscriptionDraftUserErrorTypeResolver;
    SubscriptionBillingCycleContractDraftConcatenatePayload?: SubscriptionBillingCycleContractDraftConcatenatePayloadTypeResolver;
    SubscriptionBillingCycleContractEditPayload?: SubscriptionBillingCycleContractEditPayloadTypeResolver;
    SubscriptionBillingCycleEditDeletePayload?: SubscriptionBillingCycleEditDeletePayloadTypeResolver;
    SubscriptionBillingCycleUserError?: SubscriptionBillingCycleUserErrorTypeResolver;
    SubscriptionBillingCycleEditsDeletePayload?: SubscriptionBillingCycleEditsDeletePayloadTypeResolver;
    SubscriptionBillingCycleScheduleEditPayload?: SubscriptionBillingCycleScheduleEditPayloadTypeResolver;
    SubscriptionBillingCycleSkipPayload?: SubscriptionBillingCycleSkipPayloadTypeResolver;
    SubscriptionBillingCycleSkipUserError?: SubscriptionBillingCycleSkipUserErrorTypeResolver;
    SubscriptionBillingCycleUnskipPayload?: SubscriptionBillingCycleUnskipPayloadTypeResolver;
    SubscriptionBillingCycleUnskipUserError?: SubscriptionBillingCycleUnskipUserErrorTypeResolver;
    SubscriptionContractActivatePayload?: SubscriptionContractActivatePayloadTypeResolver;
    SubscriptionContractStatusUpdateUserError?: SubscriptionContractStatusUpdateUserErrorTypeResolver;
    SubscriptionContractAtomicCreatePayload?: SubscriptionContractAtomicCreatePayloadTypeResolver;
    SubscriptionContractCancelPayload?: SubscriptionContractCancelPayloadTypeResolver;
    SubscriptionContractCreatePayload?: SubscriptionContractCreatePayloadTypeResolver;
    SubscriptionContractExpirePayload?: SubscriptionContractExpirePayloadTypeResolver;
    SubscriptionContractFailPayload?: SubscriptionContractFailPayloadTypeResolver;
    SubscriptionContractPausePayload?: SubscriptionContractPausePayloadTypeResolver;
    SubscriptionContractProductChangePayload?: SubscriptionContractProductChangePayloadTypeResolver;
    SubscriptionContractSetNextBillingDatePayload?: SubscriptionContractSetNextBillingDatePayloadTypeResolver;
    SubscriptionContractUserError?: SubscriptionContractUserErrorTypeResolver;
    SubscriptionContractUpdatePayload?: SubscriptionContractUpdatePayloadTypeResolver;
    SubscriptionDraftCommitPayload?: SubscriptionDraftCommitPayloadTypeResolver;
    SubscriptionDraftDiscountAddPayload?: SubscriptionDraftDiscountAddPayloadTypeResolver;
    SubscriptionDraftDiscountCodeApplyPayload?: SubscriptionDraftDiscountCodeApplyPayloadTypeResolver;
    SubscriptionDraftDiscountRemovePayload?: SubscriptionDraftDiscountRemovePayloadTypeResolver;
    SubscriptionDraftDiscountUpdatePayload?: SubscriptionDraftDiscountUpdatePayloadTypeResolver;
    SubscriptionDraftFreeShippingDiscountAddPayload?: SubscriptionDraftFreeShippingDiscountAddPayloadTypeResolver;
    SubscriptionDraftFreeShippingDiscountUpdatePayload?: SubscriptionDraftFreeShippingDiscountUpdatePayloadTypeResolver;
    SubscriptionDraftLineAddPayload?: SubscriptionDraftLineAddPayloadTypeResolver;
    SubscriptionDraftLineRemovePayload?: SubscriptionDraftLineRemovePayloadTypeResolver;
    SubscriptionDraftLineUpdatePayload?: SubscriptionDraftLineUpdatePayloadTypeResolver;
    SubscriptionDraftUpdatePayload?: SubscriptionDraftUpdatePayloadTypeResolver;
    TagsAddPayload?: TagsAddPayloadTypeResolver;
    TagsRemovePayload?: TagsRemovePayloadTypeResolver;
    TaxAppConfigurePayload?: TaxAppConfigurePayloadTypeResolver;
    TaxAppConfiguration?: TaxAppConfigurationTypeResolver;
    TaxAppConfigureUserError?: TaxAppConfigureUserErrorTypeResolver;
    TranslationsRegisterPayload?: TranslationsRegisterPayloadTypeResolver;
    TranslationsRemovePayload?: TranslationsRemovePayloadTypeResolver;
    UrlRedirectBulkDeleteAllPayload?: UrlRedirectBulkDeleteAllPayloadTypeResolver;
    UrlRedirectBulkDeleteByIdsPayload?: UrlRedirectBulkDeleteByIdsPayloadTypeResolver;
    UrlRedirectBulkDeleteByIdsUserError?: UrlRedirectBulkDeleteByIdsUserErrorTypeResolver;
    UrlRedirectBulkDeleteBySavedSearchPayload?: UrlRedirectBulkDeleteBySavedSearchPayloadTypeResolver;
    UrlRedirectBulkDeleteBySavedSearchUserError?: UrlRedirectBulkDeleteBySavedSearchUserErrorTypeResolver;
    UrlRedirectBulkDeleteBySearchPayload?: UrlRedirectBulkDeleteBySearchPayloadTypeResolver;
    UrlRedirectBulkDeleteBySearchUserError?: UrlRedirectBulkDeleteBySearchUserErrorTypeResolver;
    UrlRedirectCreatePayload?: UrlRedirectCreatePayloadTypeResolver;
    UrlRedirectUserError?: UrlRedirectUserErrorTypeResolver;
    UrlRedirectDeletePayload?: UrlRedirectDeletePayloadTypeResolver;
    UrlRedirectImportCreatePayload?: UrlRedirectImportCreatePayloadTypeResolver;
    UrlRedirectImportUserError?: UrlRedirectImportUserErrorTypeResolver;
    UrlRedirectImportSubmitPayload?: UrlRedirectImportSubmitPayloadTypeResolver;
    UrlRedirectUpdatePayload?: UrlRedirectUpdatePayloadTypeResolver;
    ValidationCreatePayload?: ValidationCreatePayloadTypeResolver;
    ValidationUserError?: ValidationUserErrorTypeResolver;
    ValidationDeletePayload?: ValidationDeletePayloadTypeResolver;
    ValidationUpdatePayload?: ValidationUpdatePayloadTypeResolver;
    WebPixelCreatePayload?: WebPixelCreatePayloadTypeResolver;
    ErrorsWebPixelUserError?: ErrorsWebPixelUserErrorTypeResolver;
    WebPixelDeletePayload?: WebPixelDeletePayloadTypeResolver;
    WebPixelUpdatePayload?: WebPixelUpdatePayloadTypeResolver;
    WebhookSubscriptionCreatePayload?: WebhookSubscriptionCreatePayloadTypeResolver;
    WebhookSubscriptionDeletePayload?: WebhookSubscriptionDeletePayloadTypeResolver;
    WebhookSubscriptionUpdatePayload?: WebhookSubscriptionUpdatePayloadTypeResolver;
    AdditionalFeeSale?: AdditionalFeeSaleTypeResolver;
    SaleAdditionalFee?: SaleAdditionalFeeTypeResolver;
    AdjustmentSale?: AdjustmentSaleTypeResolver;
    AppCatalog?: AppCatalogTypeResolver;
    AutomaticDiscountApplication?: AutomaticDiscountApplicationTypeResolver;
    BasicEvent?: BasicEventTypeResolver;
    CalculatedAutomaticDiscountApplication?: CalculatedAutomaticDiscountApplicationTypeResolver;
    CalculatedDiscountCodeApplication?: CalculatedDiscountCodeApplicationTypeResolver;
    CalculatedManualDiscountApplication?: CalculatedManualDiscountApplicationTypeResolver;
    CalculatedScriptDiscountApplication?: CalculatedScriptDiscountApplicationTypeResolver;
    CheckoutBrandingCustomFont?: CheckoutBrandingCustomFontTypeResolver;
    CheckoutBrandingShopifyFont?: CheckoutBrandingShopifyFontTypeResolver;
    CommentEvent?: CommentEventTypeResolver;
    CommentEventAttachment?: CommentEventAttachmentTypeResolver;
    CommentEventEmbed?: {
      __resolveType: CommentEventEmbedTypeResolver
    };
    
    CompanyLocationCatalog?: CompanyLocationCatalogTypeResolver;
    DiscountCodeApplication?: DiscountCodeApplicationTypeResolver;
    DutySale?: DutySaleTypeResolver;
    ExternalVideo?: ExternalVideoTypeResolver;
    GiftCardSale?: GiftCardSaleTypeResolver;
    ManualDiscountApplication?: ManualDiscountApplicationTypeResolver;
    MarketRegionCountry?: MarketRegionCountryTypeResolver;
    Model3d?: Model3dTypeResolver;
    Model3dBoundingBox?: Model3dBoundingBoxTypeResolver;
    Vector3?: Vector3TypeResolver;
    Model3dSource?: Model3dSourceTypeResolver;
    OrderAgreement?: OrderAgreementTypeResolver;
    OrderEditAgreement?: OrderEditAgreementTypeResolver;
    PolarisVizDataPoint?: PolarisVizDataPointTypeResolver;
    PolarisVizDataSeries?: PolarisVizDataSeriesTypeResolver;
    PolarisVizResponse?: PolarisVizResponseTypeResolver;
    ProductSale?: ProductSaleTypeResolver;
    RefundAgreement?: RefundAgreementTypeResolver;
    ScriptDiscountApplication?: ScriptDiscountApplicationTypeResolver;
    SegmentAssociationFilter?: SegmentAssociationFilterTypeResolver;
    SegmentBooleanFilter?: SegmentBooleanFilterTypeResolver;
    SegmentDateFilter?: SegmentDateFilterTypeResolver;
    SegmentEnumFilter?: SegmentEnumFilterTypeResolver;
    SegmentEventFilter?: SegmentEventFilterTypeResolver;
    SegmentEventFilterParameter?: SegmentEventFilterParameterTypeResolver;
    SegmentFloatFilter?: SegmentFloatFilterTypeResolver;
    SegmentIntegerFilter?: SegmentIntegerFilterTypeResolver;
    SegmentStringFilter?: SegmentStringFilterTypeResolver;
    ShippingLineSale?: ShippingLineSaleTypeResolver;
    ShopifyPaymentsDefaultChargeStatementDescriptor?: ShopifyPaymentsDefaultChargeStatementDescriptorTypeResolver;
    ShopifyPaymentsJpChargeStatementDescriptor?: ShopifyPaymentsJpChargeStatementDescriptorTypeResolver;
    TableResponse?: TableResponseTypeResolver;
    TipSale?: TipSaleTypeResolver;
    UnknownSale?: UnknownSaleTypeResolver;
  }
  export interface QueryRootTypeResolver<TParent = any> {
    abandonment?: QueryRootToAbandonmentResolver<TParent>;
    abandonmentByAbandonedCheckoutId?: QueryRootToAbandonmentByAbandonedCheckoutIdResolver<TParent>;
    app?: QueryRootToAppResolver<TParent>;
    appByHandle?: QueryRootToAppByHandleResolver<TParent>;
    appByKey?: QueryRootToAppByKeyResolver<TParent>;
    appDiscountType?: QueryRootToAppDiscountTypeResolver<TParent>;
    appDiscountTypes?: QueryRootToAppDiscountTypesResolver<TParent>;
    appInstallation?: QueryRootToAppInstallationResolver<TParent>;
    appInstallations?: QueryRootToAppInstallationsResolver<TParent>;
    automaticDiscount?: QueryRootToAutomaticDiscountResolver<TParent>;
    automaticDiscountNode?: QueryRootToAutomaticDiscountNodeResolver<TParent>;
    automaticDiscountNodes?: QueryRootToAutomaticDiscountNodesResolver<TParent>;
    automaticDiscountSavedSearches?: QueryRootToAutomaticDiscountSavedSearchesResolver<TParent>;
    automaticDiscounts?: QueryRootToAutomaticDiscountsResolver<TParent>;
    availableCarrierServices?: QueryRootToAvailableCarrierServicesResolver<TParent>;
    availableLocales?: QueryRootToAvailableLocalesResolver<TParent>;
    carrierService?: QueryRootToCarrierServiceResolver<TParent>;
    cartTransforms?: QueryRootToCartTransformsResolver<TParent>;
    catalog?: QueryRootToCatalogResolver<TParent>;
    catalogOperations?: QueryRootToCatalogOperationsResolver<TParent>;
    catalogs?: QueryRootToCatalogsResolver<TParent>;
    channel?: QueryRootToChannelResolver<TParent>;
    channels?: QueryRootToChannelsResolver<TParent>;
    checkoutBranding?: QueryRootToCheckoutBrandingResolver<TParent>;
    checkoutProfile?: QueryRootToCheckoutProfileResolver<TParent>;
    checkoutProfiles?: QueryRootToCheckoutProfilesResolver<TParent>;
    codeDiscountNode?: QueryRootToCodeDiscountNodeResolver<TParent>;
    codeDiscountNodeByCode?: QueryRootToCodeDiscountNodeByCodeResolver<TParent>;
    codeDiscountNodes?: QueryRootToCodeDiscountNodesResolver<TParent>;
    codeDiscountSavedSearches?: QueryRootToCodeDiscountSavedSearchesResolver<TParent>;
    collection?: QueryRootToCollectionResolver<TParent>;
    collectionByHandle?: QueryRootToCollectionByHandleResolver<TParent>;
    collectionRulesConditions?: QueryRootToCollectionRulesConditionsResolver<TParent>;
    collectionSavedSearches?: QueryRootToCollectionSavedSearchesResolver<TParent>;
    collections?: QueryRootToCollectionsResolver<TParent>;
    companies?: QueryRootToCompaniesResolver<TParent>;
    company?: QueryRootToCompanyResolver<TParent>;
    companyContact?: QueryRootToCompanyContactResolver<TParent>;
    companyContactRole?: QueryRootToCompanyContactRoleResolver<TParent>;
    companyCount?: QueryRootToCompanyCountResolver<TParent>;
    companyLocation?: QueryRootToCompanyLocationResolver<TParent>;
    companyLocations?: QueryRootToCompanyLocationsResolver<TParent>;
    currentAppInstallation?: QueryRootToCurrentAppInstallationResolver<TParent>;
    currentBulkOperation?: QueryRootToCurrentBulkOperationResolver<TParent>;
    customer?: QueryRootToCustomerResolver<TParent>;
    customerMergeJobStatus?: QueryRootToCustomerMergeJobStatusResolver<TParent>;
    customerMergePreview?: QueryRootToCustomerMergePreviewResolver<TParent>;
    customerPaymentMethod?: QueryRootToCustomerPaymentMethodResolver<TParent>;
    customerSegmentMembers?: QueryRootToCustomerSegmentMembersResolver<TParent>;
    customerSegmentMembersQuery?: QueryRootToCustomerSegmentMembersQueryResolver<TParent>;
    customerSegmentMembership?: QueryRootToCustomerSegmentMembershipResolver<TParent>;
    customers?: QueryRootToCustomersResolver<TParent>;
    deletionEvents?: QueryRootToDeletionEventsResolver<TParent>;
    deliveryCustomization?: QueryRootToDeliveryCustomizationResolver<TParent>;
    deliveryCustomizations?: QueryRootToDeliveryCustomizationsResolver<TParent>;
    deliveryProfile?: QueryRootToDeliveryProfileResolver<TParent>;
    deliveryProfiles?: QueryRootToDeliveryProfilesResolver<TParent>;
    deliverySettings?: QueryRootToDeliverySettingsResolver<TParent>;
    discountCodeCount?: QueryRootToDiscountCodeCountResolver<TParent>;
    discountNode?: QueryRootToDiscountNodeResolver<TParent>;
    discountNodes?: QueryRootToDiscountNodesResolver<TParent>;
    discountRedeemCodeBulkCreation?: QueryRootToDiscountRedeemCodeBulkCreationResolver<TParent>;
    discountRedeemCodeSavedSearches?: QueryRootToDiscountRedeemCodeSavedSearchesResolver<TParent>;
    dispute?: QueryRootToDisputeResolver<TParent>;
    disputeEvidence?: QueryRootToDisputeEvidenceResolver<TParent>;
    domain?: QueryRootToDomainResolver<TParent>;
    draftOrder?: QueryRootToDraftOrderResolver<TParent>;
    draftOrderSavedSearches?: QueryRootToDraftOrderSavedSearchesResolver<TParent>;
    draftOrderTag?: QueryRootToDraftOrderTagResolver<TParent>;
    draftOrders?: QueryRootToDraftOrdersResolver<TParent>;
    fileSavedSearches?: QueryRootToFileSavedSearchesResolver<TParent>;
    files?: QueryRootToFilesResolver<TParent>;
    fulfillment?: QueryRootToFulfillmentResolver<TParent>;
    fulfillmentConstraintRules?: QueryRootToFulfillmentConstraintRulesResolver<TParent>;
    fulfillmentOrder?: QueryRootToFulfillmentOrderResolver<TParent>;
    fulfillmentOrders?: QueryRootToFulfillmentOrdersResolver<TParent>;
    fulfillmentService?: QueryRootToFulfillmentServiceResolver<TParent>;
    giftCard?: QueryRootToGiftCardResolver<TParent>;
    giftCards?: QueryRootToGiftCardsResolver<TParent>;
    giftCardsCount?: QueryRootToGiftCardsCountResolver<TParent>;
    inventoryItem?: QueryRootToInventoryItemResolver<TParent>;
    inventoryItems?: QueryRootToInventoryItemsResolver<TParent>;
    inventoryLevel?: QueryRootToInventoryLevelResolver<TParent>;
    inventoryProperties?: QueryRootToInventoryPropertiesResolver<TParent>;
    job?: QueryRootToJobResolver<TParent>;
    location?: QueryRootToLocationResolver<TParent>;
    locations?: QueryRootToLocationsResolver<TParent>;
    locationsAvailableForDeliveryProfiles?: QueryRootToLocationsAvailableForDeliveryProfilesResolver<TParent>;
    locationsAvailableForDeliveryProfilesConnection?: QueryRootToLocationsAvailableForDeliveryProfilesConnectionResolver<TParent>;
    manualHoldsFulfillmentOrders?: QueryRootToManualHoldsFulfillmentOrdersResolver<TParent>;
    market?: QueryRootToMarketResolver<TParent>;
    marketByGeography?: QueryRootToMarketByGeographyResolver<TParent>;
    marketLocalizableResource?: QueryRootToMarketLocalizableResourceResolver<TParent>;
    marketLocalizableResources?: QueryRootToMarketLocalizableResourcesResolver<TParent>;
    marketLocalizableResourcesByIds?: QueryRootToMarketLocalizableResourcesByIdsResolver<TParent>;
    marketingActivities?: QueryRootToMarketingActivitiesResolver<TParent>;
    marketingActivity?: QueryRootToMarketingActivityResolver<TParent>;
    marketingEvent?: QueryRootToMarketingEventResolver<TParent>;
    marketingEvents?: QueryRootToMarketingEventsResolver<TParent>;
    markets?: QueryRootToMarketsResolver<TParent>;
    metafieldDefinition?: QueryRootToMetafieldDefinitionResolver<TParent>;
    metafieldDefinitionTypes?: QueryRootToMetafieldDefinitionTypesResolver<TParent>;
    metafieldDefinitions?: QueryRootToMetafieldDefinitionsResolver<TParent>;
    metafieldStorefrontVisibilities?: QueryRootToMetafieldStorefrontVisibilitiesResolver<TParent>;
    metafieldStorefrontVisibility?: QueryRootToMetafieldStorefrontVisibilityResolver<TParent>;
    metaobject?: QueryRootToMetaobjectResolver<TParent>;
    metaobjectByHandle?: QueryRootToMetaobjectByHandleResolver<TParent>;
    metaobjectDefinition?: QueryRootToMetaobjectDefinitionResolver<TParent>;
    metaobjectDefinitionByType?: QueryRootToMetaobjectDefinitionByTypeResolver<TParent>;
    metaobjectDefinitions?: QueryRootToMetaobjectDefinitionsResolver<TParent>;
    metaobjects?: QueryRootToMetaobjectsResolver<TParent>;
    node?: QueryRootToNodeResolver<TParent>;
    nodes?: QueryRootToNodesResolver<TParent>;
    order?: QueryRootToOrderResolver<TParent>;
    orderPaymentStatus?: QueryRootToOrderPaymentStatusResolver<TParent>;
    orderSavedSearches?: QueryRootToOrderSavedSearchesResolver<TParent>;
    orders?: QueryRootToOrdersResolver<TParent>;
    paymentCustomization?: QueryRootToPaymentCustomizationResolver<TParent>;
    paymentCustomizations?: QueryRootToPaymentCustomizationsResolver<TParent>;
    paymentTermsTemplates?: QueryRootToPaymentTermsTemplatesResolver<TParent>;
    priceList?: QueryRootToPriceListResolver<TParent>;
    priceLists?: QueryRootToPriceListsResolver<TParent>;
    priceRule?: QueryRootToPriceRuleResolver<TParent>;
    priceRuleSavedSearches?: QueryRootToPriceRuleSavedSearchesResolver<TParent>;
    priceRules?: QueryRootToPriceRulesResolver<TParent>;
    primaryMarket?: QueryRootToPrimaryMarketResolver<TParent>;
    privateMetafield?: QueryRootToPrivateMetafieldResolver<TParent>;
    privateMetafields?: QueryRootToPrivateMetafieldsResolver<TParent>;
    product?: QueryRootToProductResolver<TParent>;
    productByHandle?: QueryRootToProductByHandleResolver<TParent>;
    productDuplicateJob?: QueryRootToProductDuplicateJobResolver<TParent>;
    productFeed?: QueryRootToProductFeedResolver<TParent>;
    productFeeds?: QueryRootToProductFeedsResolver<TParent>;
    productResourceFeedback?: QueryRootToProductResourceFeedbackResolver<TParent>;
    productSavedSearches?: QueryRootToProductSavedSearchesResolver<TParent>;
    productVariant?: QueryRootToProductVariantResolver<TParent>;
    productVariants?: QueryRootToProductVariantsResolver<TParent>;
    products?: QueryRootToProductsResolver<TParent>;
    publicApiVersions?: QueryRootToPublicApiVersionsResolver<TParent>;
    publication?: QueryRootToPublicationResolver<TParent>;
    publications?: QueryRootToPublicationsResolver<TParent>;
    refund?: QueryRootToRefundResolver<TParent>;
    return?: QueryRootToReturnResolver<TParent>;
    returnableFulfillment?: QueryRootToReturnableFulfillmentResolver<TParent>;
    returnableFulfillments?: QueryRootToReturnableFulfillmentsResolver<TParent>;
    reverseDelivery?: QueryRootToReverseDeliveryResolver<TParent>;
    reverseFulfillmentOrder?: QueryRootToReverseFulfillmentOrderResolver<TParent>;
    scriptTag?: QueryRootToScriptTagResolver<TParent>;
    scriptTags?: QueryRootToScriptTagsResolver<TParent>;
    segment?: QueryRootToSegmentResolver<TParent>;
    segmentCount?: QueryRootToSegmentCountResolver<TParent>;
    segmentFilterSuggestions?: QueryRootToSegmentFilterSuggestionsResolver<TParent>;
    segmentFilters?: QueryRootToSegmentFiltersResolver<TParent>;
    segmentMigrations?: QueryRootToSegmentMigrationsResolver<TParent>;
    segmentValueSuggestions?: QueryRootToSegmentValueSuggestionsResolver<TParent>;
    segments?: QueryRootToSegmentsResolver<TParent>;
    sellingPlanGroup?: QueryRootToSellingPlanGroupResolver<TParent>;
    sellingPlanGroups?: QueryRootToSellingPlanGroupsResolver<TParent>;
    serverPixel?: QueryRootToServerPixelResolver<TParent>;
    shop?: QueryRootToShopResolver<TParent>;
    shopBillingPreferences?: QueryRootToShopBillingPreferencesResolver<TParent>;
    shopLocales?: QueryRootToShopLocalesResolver<TParent>;
    shopifyFunction?: QueryRootToShopifyFunctionResolver<TParent>;
    shopifyFunctions?: QueryRootToShopifyFunctionsResolver<TParent>;
    shopifyPaymentsAccount?: QueryRootToShopifyPaymentsAccountResolver<TParent>;
    shopifyqlQuery?: QueryRootToShopifyqlQueryResolver<TParent>;
    staffMember?: QueryRootToStaffMemberResolver<TParent>;
    standardMetafieldDefinitionTemplates?: QueryRootToStandardMetafieldDefinitionTemplatesResolver<TParent>;
    subscriptionBillingAttempt?: QueryRootToSubscriptionBillingAttemptResolver<TParent>;
    subscriptionBillingAttempts?: QueryRootToSubscriptionBillingAttemptsResolver<TParent>;
    subscriptionBillingCycle?: QueryRootToSubscriptionBillingCycleResolver<TParent>;
    subscriptionBillingCycles?: QueryRootToSubscriptionBillingCyclesResolver<TParent>;
    subscriptionContract?: QueryRootToSubscriptionContractResolver<TParent>;
    subscriptionContracts?: QueryRootToSubscriptionContractsResolver<TParent>;
    subscriptionDraft?: QueryRootToSubscriptionDraftResolver<TParent>;
    tenderTransactions?: QueryRootToTenderTransactionsResolver<TParent>;
    translatableResource?: QueryRootToTranslatableResourceResolver<TParent>;
    translatableResources?: QueryRootToTranslatableResourcesResolver<TParent>;
    translatableResourcesByIds?: QueryRootToTranslatableResourcesByIdsResolver<TParent>;
    urlRedirect?: QueryRootToUrlRedirectResolver<TParent>;
    urlRedirectImport?: QueryRootToUrlRedirectImportResolver<TParent>;
    urlRedirectSavedSearches?: QueryRootToUrlRedirectSavedSearchesResolver<TParent>;
    urlRedirects?: QueryRootToUrlRedirectsResolver<TParent>;
    validation?: QueryRootToValidationResolver<TParent>;
    validations?: QueryRootToValidationsResolver<TParent>;
    webPixel?: QueryRootToWebPixelResolver<TParent>;
    webhookSubscription?: QueryRootToWebhookSubscriptionResolver<TParent>;
    webhookSubscriptions?: QueryRootToWebhookSubscriptionsResolver<TParent>;
  }
  
  export interface QueryRootToAbandonmentArgs {
    id: string;
  }
  export interface QueryRootToAbandonmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAbandonmentArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAbandonmentByAbandonedCheckoutIdArgs {
    abandonedCheckoutId: string;
  }
  export interface QueryRootToAbandonmentByAbandonedCheckoutIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAbandonmentByAbandonedCheckoutIdArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAppArgs {
    id?: string;
  }
  export interface QueryRootToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAppArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAppByHandleArgs {
    handle: string;
  }
  export interface QueryRootToAppByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAppByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAppByKeyArgs {
    apiKey: string;
  }
  export interface QueryRootToAppByKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAppByKeyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAppDiscountTypeArgs {
    functionId: string;
  }
  export interface QueryRootToAppDiscountTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAppDiscountTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAppDiscountTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAppInstallationArgs {
    id?: string;
  }
  export interface QueryRootToAppInstallationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAppInstallationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAppInstallationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: AppInstallationSortKeys;
    category?: AppInstallationCategory;
    privacy?: AppInstallationPrivacy;
  }
  export interface QueryRootToAppInstallationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAppInstallationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAutomaticDiscountArgs {
    id: string;
  }
  export interface QueryRootToAutomaticDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAutomaticDiscountArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAutomaticDiscountNodeArgs {
    id: string;
  }
  export interface QueryRootToAutomaticDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAutomaticDiscountNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAutomaticDiscountNodesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: AutomaticDiscountSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToAutomaticDiscountNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAutomaticDiscountNodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAutomaticDiscountSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToAutomaticDiscountSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAutomaticDiscountSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAutomaticDiscountsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: AutomaticDiscountSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToAutomaticDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToAutomaticDiscountsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAvailableCarrierServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToAvailableLocalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCarrierServiceArgs {
    id: string;
  }
  export interface QueryRootToCarrierServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCarrierServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCartTransformsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToCartTransformsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCartTransformsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCatalogArgs {
    id: string;
  }
  export interface QueryRootToCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCatalogArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCatalogOperationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCatalogsArgs {
    type?: CatalogType;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CatalogSortKeys;
    query?: string;
  }
  export interface QueryRootToCatalogsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCatalogsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToChannelArgs {
    id: string;
  }
  export interface QueryRootToChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToChannelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToChannelsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToChannelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToChannelsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCheckoutBrandingArgs {
    checkoutProfileId: string;
  }
  export interface QueryRootToCheckoutBrandingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCheckoutBrandingArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCheckoutProfileArgs {
    id: string;
  }
  export interface QueryRootToCheckoutProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCheckoutProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCheckoutProfilesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CheckoutProfileSortKeys;
    query?: string;
  }
  export interface QueryRootToCheckoutProfilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCheckoutProfilesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCodeDiscountNodeArgs {
    id: string;
  }
  export interface QueryRootToCodeDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCodeDiscountNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCodeDiscountNodeByCodeArgs {
    code: string;
  }
  export interface QueryRootToCodeDiscountNodeByCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCodeDiscountNodeByCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCodeDiscountNodesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CodeDiscountSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToCodeDiscountNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCodeDiscountNodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCodeDiscountSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToCodeDiscountSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCodeDiscountSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCollectionArgs {
    id: string;
  }
  export interface QueryRootToCollectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCollectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCollectionByHandleArgs {
    handle: string;
  }
  export interface QueryRootToCollectionByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCollectionByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCollectionRulesConditionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCollectionSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToCollectionSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCollectionSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCollectionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CollectionSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToCollectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCompaniesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CompanySortKeys;
    query?: string;
  }
  export interface QueryRootToCompaniesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCompaniesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCompanyArgs {
    id: string;
  }
  export interface QueryRootToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCompanyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCompanyContactArgs {
    id: string;
  }
  export interface QueryRootToCompanyContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCompanyContactArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCompanyContactRoleArgs {
    id: string;
  }
  export interface QueryRootToCompanyContactRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCompanyContactRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCompanyCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCompanyLocationArgs {
    id: string;
  }
  export interface QueryRootToCompanyLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCompanyLocationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCompanyLocationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CompanyLocationSortKeys;
    query?: string;
  }
  export interface QueryRootToCompanyLocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCompanyLocationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCurrentAppInstallationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCurrentBulkOperationArgs {
    type?: BulkOperationType;
  }
  export interface QueryRootToCurrentBulkOperationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCurrentBulkOperationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCustomerArgs {
    id: string;
  }
  export interface QueryRootToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCustomerArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCustomerMergeJobStatusArgs {
    jobId: string;
  }
  export interface QueryRootToCustomerMergeJobStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCustomerMergeJobStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCustomerMergePreviewArgs {
    customerOneId: string;
    customerTwoId: string;
    overrideFields?: CustomerMergeOverrideFields;
  }
  export interface QueryRootToCustomerMergePreviewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCustomerMergePreviewArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCustomerPaymentMethodArgs {
    id: string;
    showRevoked?: boolean;
  }
  export interface QueryRootToCustomerPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCustomerPaymentMethodArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCustomerSegmentMembersArgs {
    segmentId?: string;
    query?: string;
    queryId?: string;
    timezone?: string;
    reverse?: boolean;
    sortKey?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
  }
  export interface QueryRootToCustomerSegmentMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCustomerSegmentMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCustomerSegmentMembersQueryArgs {
    id: string;
  }
  export interface QueryRootToCustomerSegmentMembersQueryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCustomerSegmentMembersQueryArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCustomerSegmentMembershipArgs {
    segmentIds: Array<string>;
    customerId: string;
  }
  export interface QueryRootToCustomerSegmentMembershipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCustomerSegmentMembershipArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToCustomersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CustomerSortKeys;
    query?: string;
  }
  export interface QueryRootToCustomersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToCustomersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDeletionEventsArgs {
    subjectTypes?: Array<DeletionEventSubjectType>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DeletionEventSortKeys;
    query?: string;
  }
  export interface QueryRootToDeletionEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDeletionEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDeliveryCustomizationArgs {
    id: string;
  }
  export interface QueryRootToDeliveryCustomizationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDeliveryCustomizationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDeliveryCustomizationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface QueryRootToDeliveryCustomizationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDeliveryCustomizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDeliveryProfileArgs {
    id: string;
  }
  export interface QueryRootToDeliveryProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDeliveryProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDeliveryProfilesArgs {
    merchantOwnedOnly?: boolean;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToDeliveryProfilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDeliveryProfilesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDeliverySettingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDiscountCodeCountArgs {
    query?: string;
  }
  export interface QueryRootToDiscountCodeCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDiscountCodeCountArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDiscountNodeArgs {
    id: string;
  }
  export interface QueryRootToDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDiscountNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDiscountNodesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DiscountSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToDiscountNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDiscountNodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDiscountRedeemCodeBulkCreationArgs {
    id: string;
  }
  export interface QueryRootToDiscountRedeemCodeBulkCreationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDiscountRedeemCodeBulkCreationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDiscountRedeemCodeSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DiscountCodeSortKeys;
    query?: string;
  }
  export interface QueryRootToDiscountRedeemCodeSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDiscountRedeemCodeSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDisputeArgs {
    id: string;
  }
  export interface QueryRootToDisputeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDisputeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDisputeEvidenceArgs {
    id: string;
  }
  export interface QueryRootToDisputeEvidenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDisputeEvidenceArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDomainArgs {
    id: string;
  }
  export interface QueryRootToDomainResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDomainArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDraftOrderArgs {
    id: string;
  }
  export interface QueryRootToDraftOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDraftOrderArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDraftOrderSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToDraftOrderSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDraftOrderSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDraftOrderTagArgs {
    id: string;
  }
  export interface QueryRootToDraftOrderTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDraftOrderTagArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToDraftOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DraftOrderSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToDraftOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToDraftOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToFileSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToFileSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToFileSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToFilesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: FileSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToFilesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToFulfillmentArgs {
    id: string;
  }
  export interface QueryRootToFulfillmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToFulfillmentArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToFulfillmentConstraintRulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToFulfillmentOrderArgs {
    id: string;
  }
  export interface QueryRootToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToFulfillmentOrderArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToFulfillmentOrdersArgs {
    includeClosed?: boolean;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: FulfillmentOrderSortKeys;
    query?: string;
  }
  export interface QueryRootToFulfillmentOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToFulfillmentOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToFulfillmentServiceArgs {
    id: string;
  }
  export interface QueryRootToFulfillmentServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToFulfillmentServiceArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToGiftCardArgs {
    id: string;
  }
  export interface QueryRootToGiftCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToGiftCardArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToGiftCardsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: GiftCardSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToGiftCardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToGiftCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToGiftCardsCountArgs {
    enabled?: boolean;
  }
  export interface QueryRootToGiftCardsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToGiftCardsCountArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToInventoryItemArgs {
    id: string;
  }
  export interface QueryRootToInventoryItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToInventoryItemArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToInventoryItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface QueryRootToInventoryItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToInventoryItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToInventoryLevelArgs {
    id: string;
  }
  export interface QueryRootToInventoryLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToInventoryLevelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToInventoryPropertiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToJobArgs {
    id: string;
  }
  export interface QueryRootToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToJobArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToLocationArgs {
    id?: string;
  }
  export interface QueryRootToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToLocationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToLocationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: LocationSortKeys;
    query?: string;
    includeLegacy?: boolean;
    includeInactive?: boolean;
  }
  export interface QueryRootToLocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToLocationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToLocationsAvailableForDeliveryProfilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToLocationsAvailableForDeliveryProfilesConnectionArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToLocationsAvailableForDeliveryProfilesConnectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToLocationsAvailableForDeliveryProfilesConnectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToManualHoldsFulfillmentOrdersArgs {
    query?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToManualHoldsFulfillmentOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToManualHoldsFulfillmentOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMarketArgs {
    id: string;
  }
  export interface QueryRootToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMarketArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMarketByGeographyArgs {
    countryCode: CountryCode;
  }
  export interface QueryRootToMarketByGeographyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMarketByGeographyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMarketLocalizableResourceArgs {
    resourceId: string;
  }
  export interface QueryRootToMarketLocalizableResourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMarketLocalizableResourceArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMarketLocalizableResourcesArgs {
    resourceType: MarketLocalizableResourceType;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToMarketLocalizableResourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMarketLocalizableResourcesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMarketLocalizableResourcesByIdsArgs {
    resourceIds: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToMarketLocalizableResourcesByIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMarketLocalizableResourcesByIdsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMarketingActivitiesArgs {
    marketingActivityIds?: Array<string>;
    remoteIds?: Array<string>;
    utm?: UTMInput;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MarketingActivitySortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToMarketingActivitiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMarketingActivitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMarketingActivityArgs {
    id: string;
  }
  export interface QueryRootToMarketingActivityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMarketingActivityArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMarketingEventArgs {
    id: string;
  }
  export interface QueryRootToMarketingEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMarketingEventArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMarketingEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MarketingEventSortKeys;
    query?: string;
  }
  export interface QueryRootToMarketingEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMarketingEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMarketsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToMarketsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMarketsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMetafieldDefinitionArgs {
    id: string;
  }
  export interface QueryRootToMetafieldDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMetafieldDefinitionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMetafieldDefinitionTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMetafieldDefinitionsArgs {
    key?: string;
    namespace?: string;
    ownerType: MetafieldOwnerType;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface QueryRootToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMetafieldStorefrontVisibilitiesArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToMetafieldStorefrontVisibilitiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMetafieldStorefrontVisibilitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMetafieldStorefrontVisibilityArgs {
    id: string;
  }
  export interface QueryRootToMetafieldStorefrontVisibilityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMetafieldStorefrontVisibilityArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMetaobjectArgs {
    id: string;
  }
  export interface QueryRootToMetaobjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMetaobjectArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMetaobjectByHandleArgs {
    handle: MetaobjectHandleInput;
  }
  export interface QueryRootToMetaobjectByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMetaobjectByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMetaobjectDefinitionArgs {
    id: string;
  }
  export interface QueryRootToMetaobjectDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMetaobjectDefinitionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMetaobjectDefinitionByTypeArgs {
    type: string;
  }
  export interface QueryRootToMetaobjectDefinitionByTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMetaobjectDefinitionByTypeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMetaobjectDefinitionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToMetaobjectDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMetaobjectDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToMetaobjectsArgs {
    type: string;
    sortKey?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface QueryRootToMetaobjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToMetaobjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToNodeArgs {
    id: string;
  }
  export interface QueryRootToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToNodeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToNodesArgs {
    ids: Array<string>;
  }
  export interface QueryRootToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToNodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToOrderArgs {
    id: string;
  }
  export interface QueryRootToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToOrderArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToOrderPaymentStatusArgs {
    paymentReferenceId: string;
    orderId: string;
  }
  export interface QueryRootToOrderPaymentStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToOrderPaymentStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToOrderSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToOrderSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToOrderSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: OrderSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPaymentCustomizationArgs {
    id: string;
  }
  export interface QueryRootToPaymentCustomizationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPaymentCustomizationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPaymentCustomizationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface QueryRootToPaymentCustomizationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPaymentCustomizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPaymentTermsTemplatesArgs {
    paymentTermsType?: PaymentTermsType;
  }
  export interface QueryRootToPaymentTermsTemplatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPaymentTermsTemplatesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPriceListArgs {
    id: string;
  }
  export interface QueryRootToPriceListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPriceListArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPriceListsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: PriceListSortKeys;
  }
  export interface QueryRootToPriceListsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPriceListsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPriceRuleArgs {
    id: string;
  }
  export interface QueryRootToPriceRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPriceRuleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPriceRuleSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToPriceRuleSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPriceRuleSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPriceRulesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: PriceRuleSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToPriceRulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPriceRulesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPrimaryMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPrivateMetafieldArgs {
    id: string;
  }
  export interface QueryRootToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPrivateMetafieldsArgs {
    namespace?: string;
    owner: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductArgs {
    id: string;
  }
  export interface QueryRootToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductByHandleArgs {
    handle: string;
  }
  export interface QueryRootToProductByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductDuplicateJobArgs {
    id: string;
  }
  export interface QueryRootToProductDuplicateJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductDuplicateJobArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductFeedArgs {
    id: string;
  }
  export interface QueryRootToProductFeedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductFeedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductFeedsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToProductFeedsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductFeedsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductResourceFeedbackArgs {
    id: string;
  }
  export interface QueryRootToProductResourceFeedbackResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductResourceFeedbackArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToProductSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductVariantArgs {
    id: string;
  }
  export interface QueryRootToProductVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductVariantArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductVariantsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductVariantSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPublicApiVersionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPublicationArgs {
    id: string;
  }
  export interface QueryRootToPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPublicationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToPublicationsArgs {
    catalogType?: CatalogType;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToPublicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToPublicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToRefundArgs {
    id: string;
  }
  export interface QueryRootToRefundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToRefundArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToReturnArgs {
    id: string;
  }
  export interface QueryRootToReturnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToReturnArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToReturnableFulfillmentArgs {
    id: string;
  }
  export interface QueryRootToReturnableFulfillmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToReturnableFulfillmentArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToReturnableFulfillmentsArgs {
    orderId: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToReturnableFulfillmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToReturnableFulfillmentsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToReverseDeliveryArgs {
    id: string;
  }
  export interface QueryRootToReverseDeliveryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToReverseDeliveryArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToReverseFulfillmentOrderArgs {
    id: string;
  }
  export interface QueryRootToReverseFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToReverseFulfillmentOrderArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToScriptTagArgs {
    id: string;
  }
  export interface QueryRootToScriptTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToScriptTagArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToScriptTagsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    src?: URL;
  }
  export interface QueryRootToScriptTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToScriptTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSegmentArgs {
    id: string;
  }
  export interface QueryRootToSegmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSegmentArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSegmentCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSegmentFilterSuggestionsArgs {
    search: string;
    first: number;
    after?: string;
  }
  export interface QueryRootToSegmentFilterSuggestionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSegmentFilterSuggestionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSegmentFiltersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
  }
  export interface QueryRootToSegmentFiltersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSegmentFiltersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSegmentMigrationsArgs {
    savedSearchId?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
  }
  export interface QueryRootToSegmentMigrationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSegmentMigrationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSegmentValueSuggestionsArgs {
    search: string;
    filterQueryName?: string;
    functionParameterQueryName?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
  }
  export interface QueryRootToSegmentValueSuggestionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSegmentValueSuggestionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSegmentsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: SegmentSortKeys;
    query?: string;
  }
  export interface QueryRootToSegmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSegmentsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSellingPlanGroupArgs {
    id: string;
  }
  export interface QueryRootToSellingPlanGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSellingPlanGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSellingPlanGroupsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: SellingPlanGroupSortKeys;
    query?: string;
  }
  export interface QueryRootToSellingPlanGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSellingPlanGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToServerPixelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToShopBillingPreferencesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToShopLocalesArgs {
    published?: boolean;
  }
  export interface QueryRootToShopLocalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToShopLocalesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToShopifyFunctionArgs {
    id: string;
  }
  export interface QueryRootToShopifyFunctionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToShopifyFunctionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToShopifyFunctionsArgs {
    apiType?: string;
    useCreationUi?: boolean;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToShopifyFunctionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToShopifyFunctionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToShopifyPaymentsAccountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToShopifyqlQueryArgs {
    query: string;
  }
  export interface QueryRootToShopifyqlQueryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToShopifyqlQueryArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToStaffMemberArgs {
    id?: string;
  }
  export interface QueryRootToStaffMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToStaffMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToStandardMetafieldDefinitionTemplatesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToStandardMetafieldDefinitionTemplatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToStandardMetafieldDefinitionTemplatesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSubscriptionBillingAttemptArgs {
    id: string;
  }
  export interface QueryRootToSubscriptionBillingAttemptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSubscriptionBillingAttemptArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSubscriptionBillingAttemptsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: SubscriptionBillingAttemptsSortKeys;
    query?: string;
  }
  export interface QueryRootToSubscriptionBillingAttemptsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSubscriptionBillingAttemptsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSubscriptionBillingCycleArgs {
    billingCycleInput: SubscriptionBillingCycleInput;
  }
  export interface QueryRootToSubscriptionBillingCycleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSubscriptionBillingCycleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSubscriptionBillingCyclesArgs {
    contractId: string;
    billingCyclesDateRangeSelector?: SubscriptionBillingCyclesDateRangeSelector;
    billingCyclesIndexRangeSelector?: SubscriptionBillingCyclesIndexRangeSelector;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: SubscriptionBillingCyclesSortKeys;
  }
  export interface QueryRootToSubscriptionBillingCyclesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSubscriptionBillingCyclesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSubscriptionContractArgs {
    id: string;
  }
  export interface QueryRootToSubscriptionContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSubscriptionContractArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSubscriptionContractsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface QueryRootToSubscriptionContractsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSubscriptionContractsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToSubscriptionDraftArgs {
    id: string;
  }
  export interface QueryRootToSubscriptionDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToSubscriptionDraftArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToTenderTransactionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface QueryRootToTenderTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToTenderTransactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToTranslatableResourceArgs {
    resourceId: string;
  }
  export interface QueryRootToTranslatableResourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToTranslatableResourceArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToTranslatableResourcesArgs {
    resourceType: TranslatableResourceType;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToTranslatableResourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToTranslatableResourcesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToTranslatableResourcesByIdsArgs {
    resourceIds: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToTranslatableResourcesByIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToTranslatableResourcesByIdsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToUrlRedirectArgs {
    id: string;
  }
  export interface QueryRootToUrlRedirectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToUrlRedirectArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToUrlRedirectImportArgs {
    id: string;
  }
  export interface QueryRootToUrlRedirectImportResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToUrlRedirectImportArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToUrlRedirectSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface QueryRootToUrlRedirectSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToUrlRedirectSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToUrlRedirectsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: UrlRedirectSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface QueryRootToUrlRedirectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToUrlRedirectsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToValidationArgs {
    id: string;
  }
  export interface QueryRootToValidationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToValidationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToValidationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ValidationSortKeys;
  }
  export interface QueryRootToValidationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToValidationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToWebPixelArgs {
    id?: string;
  }
  export interface QueryRootToWebPixelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToWebPixelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToWebhookSubscriptionArgs {
    id: string;
  }
  export interface QueryRootToWebhookSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToWebhookSubscriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryRootToWebhookSubscriptionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: WebhookSubscriptionSortKeys;
    query?: string;
    callbackUrl?: URL;
    format?: WebhookSubscriptionFormat;
    topics?: Array<WebhookSubscriptionTopic>;
  }
  export interface QueryRootToWebhookSubscriptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryRootToWebhookSubscriptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentTypeResolver<TParent = any> {
    abandonedCheckoutPayload?: AbandonmentToAbandonedCheckoutPayloadResolver<TParent>;
    abandonmentType?: AbandonmentToAbandonmentTypeResolver<TParent>;
    app?: AbandonmentToAppResolver<TParent>;
    cartUrl?: AbandonmentToCartUrlResolver<TParent>;
    createdAt?: AbandonmentToCreatedAtResolver<TParent>;
    customer?: AbandonmentToCustomerResolver<TParent>;
    customerHasNoDraftOrderSinceAbandonment?: AbandonmentToCustomerHasNoDraftOrderSinceAbandonmentResolver<TParent>;
    customerHasNoOrderSinceAbandonment?: AbandonmentToCustomerHasNoOrderSinceAbandonmentResolver<TParent>;
    daysSinceLastAbandonmentEmail?: AbandonmentToDaysSinceLastAbandonmentEmailResolver<TParent>;
    emailSentAt?: AbandonmentToEmailSentAtResolver<TParent>;
    emailState?: AbandonmentToEmailStateResolver<TParent>;
    hoursSinceLastAbandonedCheckout?: AbandonmentToHoursSinceLastAbandonedCheckoutResolver<TParent>;
    id?: AbandonmentToIdResolver<TParent>;
    inventoryAvailable?: AbandonmentToInventoryAvailableResolver<TParent>;
    isFromOnlineStore?: AbandonmentToIsFromOnlineStoreResolver<TParent>;
    isFromShopApp?: AbandonmentToIsFromShopAppResolver<TParent>;
    isFromShopPay?: AbandonmentToIsFromShopPayResolver<TParent>;
    isMostSignificantAbandonment?: AbandonmentToIsMostSignificantAbandonmentResolver<TParent>;
    lastBrowseAbandonmentDate?: AbandonmentToLastBrowseAbandonmentDateResolver<TParent>;
    lastCartAbandonmentDate?: AbandonmentToLastCartAbandonmentDateResolver<TParent>;
    lastCheckoutAbandonmentDate?: AbandonmentToLastCheckoutAbandonmentDateResolver<TParent>;
    mostRecentStep?: AbandonmentToMostRecentStepResolver<TParent>;
    productsAddedToCart?: AbandonmentToProductsAddedToCartResolver<TParent>;
    productsViewed?: AbandonmentToProductsViewedResolver<TParent>;
    visitStartedAt?: AbandonmentToVisitStartedAtResolver<TParent>;
  }
  
  export interface AbandonmentToAbandonedCheckoutPayloadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToAbandonmentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToCartUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToCustomerHasNoDraftOrderSinceAbandonmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToCustomerHasNoOrderSinceAbandonmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToDaysSinceLastAbandonmentEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToEmailSentAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToEmailStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToHoursSinceLastAbandonedCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToInventoryAvailableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToIsFromOnlineStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToIsFromShopAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToIsFromShopPayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToIsMostSignificantAbandonmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToLastBrowseAbandonmentDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToLastCartAbandonmentDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToLastCheckoutAbandonmentDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToMostRecentStepResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToProductsAddedToCartArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface AbandonmentToProductsAddedToCartResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AbandonmentToProductsAddedToCartArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToProductsViewedArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface AbandonmentToProductsViewedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AbandonmentToProductsViewedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentToVisitStartedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface NodeTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Abandonment' | 'AbandonedCheckout' | 'AbandonedCheckoutLineItem' | 'Metafield' | 'MetafieldDefinition' | 'StandardMetafieldDefinitionTemplate' | 'Collection' | 'Market' | 'MarketCatalog' | 'PriceList' | 'QuantityPriceBreak' | 'ProductVariant' | 'DeliveryProfile' | 'DeliveryProfileItem' | 'Product' | 'Channel' | 'App' | 'AppInstallation' | 'AppSubscription' | 'AppUsageRecord' | 'AppCredit' | 'AppPurchaseOneTime' | 'PrivateMetafield' | 'Publication' | 'AddAllProductsOperation' | 'CatalogCsvOperation' | 'PublicationResourceOperation' | 'AppRevenueAttributionRecord' | 'ProductOption' | 'ProductTaxonomyNode' | 'SellingPlanGroup' | 'SellingPlan' | 'DeliveryCountry' | 'DeliveryProvince' | 'DeliveryLocationGroup' | 'Location' | 'InventoryLevel' | 'InventoryItem' | 'InventoryQuantity' | 'DeliveryMethodDefinition' | 'DeliveryCondition' | 'DeliveryParticipant' | 'DeliveryCarrierService' | 'DeliveryRateDefinition' | 'DeliveryZone' | 'ProductVariantComponent' | 'MarketWebPresence' | 'Domain' | 'GenericFile' | 'MediaImage' | 'Metaobject' | 'StaffMember' | 'MetaobjectDefinition' | 'Customer' | 'MailingAddress' | 'CompanyContact' | 'Company' | 'CompanyContactRole' | 'DraftOrder' | 'DraftOrderLineItem' | 'Order' | 'AdditionalFee' | 'ChannelInformation' | 'ChannelDefinition' | 'CustomerVisit' | 'MarketingEvent' | 'OrderDisputeSummary' | 'ExchangeV2' | 'GiftCard' | 'LineItem' | 'SubscriptionContract' | 'CustomerPaymentMethod' | 'SubscriptionBillingAttempt' | 'Duty' | 'Refund' | 'Return' | 'ReturnLineItem' | 'FulfillmentLineItem' | 'ReverseFulfillmentOrder' | 'ReverseFulfillmentOrderLineItem' | 'ReverseFulfillmentOrderDisposition' | 'ReverseDelivery' | 'ReverseDeliveryLineItem' | 'OrderTransaction' | 'TransactionFee' | 'FulfillmentOrder' | 'DeliveryMethod' | 'FulfillmentOrderDestination' | 'Fulfillment' | 'FulfillmentEvent' | 'FulfillmentOrderLineItem' | 'FulfillmentOrderMerchantRequest' | 'LineItemMutable' | 'PaymentMandate' | 'PaymentTerms' | 'PaymentSchedule' | 'CompanyLocation' | 'CompanyAddress' | 'PaymentTermsTemplate' | 'CompanyContactRoleAssignment' | 'DeliveryCustomization' | 'DiscountAutomaticNode' | 'DiscountAutomaticBxgy' | 'DiscountCodeNode' | 'Segment' | 'DiscountNode' | 'OnlineStoreArticle' | 'OnlineStoreBlog' | 'OnlineStorePage' | 'PaymentCustomization' | 'Shop' | 'ShopAddress' | 'SavedSearch' | 'PriceRule' | 'PriceRuleDiscountCode' | 'ShopPolicy' | 'StorefrontAccessToken' | 'Video' | 'CartTransform' | 'CheckoutProfile' | 'BulkOperation' | 'CustomerSegmentMembersQuery' | 'DiscountRedeemCodeBulkCreation' | 'ShopifyPaymentsDispute' | 'ShopifyPaymentsDisputeEvidence' | 'ShopifyPaymentsDisputeFileUpload' | 'ShopifyPaymentsDisputeFulfillment' | 'DraftOrderTag' | 'FulfillmentConstraintRule' | 'MarketingActivity' | 'MetafieldStorefrontVisibility' | 'ProductFeed' | 'ReturnableFulfillment' | 'ScriptTag' | 'ServerPixel' | 'ShopifyPaymentsAccount' | 'ShopifyPaymentsBalanceTransaction' | 'ShopifyPaymentsBankAccount' | 'ShopifyPaymentsPayout' | 'ShopifyPaymentsVerification' | 'SubscriptionDraft' | 'TenderTransaction' | 'UrlRedirect' | 'UrlRedirectImport' | 'Validation' | 'WebPixel' | 'WebhookSubscription' | 'InventoryAdjustmentGroup' | 'CalculatedOrder' | 'SaleAdditionalFee' | 'AppCatalog' | 'BasicEvent' | 'CommentEvent' | 'CompanyLocationCatalog' | 'ExternalVideo' | 'MarketRegionCountry' | 'Model3d';
  }
  export interface AbandonedCheckoutTypeResolver<TParent = any> {
    abandonedCheckoutUrl?: AbandonedCheckoutToAbandonedCheckoutUrlResolver<TParent>;
    defaultCursor?: AbandonedCheckoutToDefaultCursorResolver<TParent>;
    id?: AbandonedCheckoutToIdResolver<TParent>;
    lineItems?: AbandonedCheckoutToLineItemsResolver<TParent>;
    lineItemsQuantity?: AbandonedCheckoutToLineItemsQuantityResolver<TParent>;
    totalPriceSet?: AbandonedCheckoutToTotalPriceSetResolver<TParent>;
  }
  
  export interface AbandonedCheckoutToAbandonedCheckoutUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutToDefaultCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutToLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface AbandonedCheckoutToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AbandonedCheckoutToLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutToLineItemsQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutToTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface NavigableTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'AbandonedCheckout' | 'ProductVariant' | 'Product' | 'Company' | 'DraftOrder' | 'CompanyLocation' | 'OnlineStoreArticle' | 'OnlineStorePage';
  }
  export interface AbandonedCheckoutLineItemConnectionTypeResolver<TParent = any> {
    edges?: AbandonedCheckoutLineItemConnectionToEdgesResolver<TParent>;
    nodes?: AbandonedCheckoutLineItemConnectionToNodesResolver<TParent>;
    pageInfo?: AbandonedCheckoutLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface AbandonedCheckoutLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemEdgeTypeResolver<TParent = any> {
    cursor?: AbandonedCheckoutLineItemEdgeToCursorResolver<TParent>;
    node?: AbandonedCheckoutLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface AbandonedCheckoutLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemTypeResolver<TParent = any> {
    customAttributes?: AbandonedCheckoutLineItemToCustomAttributesResolver<TParent>;
    discountedTotalPriceSet?: AbandonedCheckoutLineItemToDiscountedTotalPriceSetResolver<TParent>;
    discountedTotalPriceWithCodeDiscount?: AbandonedCheckoutLineItemToDiscountedTotalPriceWithCodeDiscountResolver<TParent>;
    discountedUnitPriceSet?: AbandonedCheckoutLineItemToDiscountedUnitPriceSetResolver<TParent>;
    discountedUnitPriceWithCodeDiscount?: AbandonedCheckoutLineItemToDiscountedUnitPriceWithCodeDiscountResolver<TParent>;
    id?: AbandonedCheckoutLineItemToIdResolver<TParent>;
    image?: AbandonedCheckoutLineItemToImageResolver<TParent>;
    originalTotalPriceSet?: AbandonedCheckoutLineItemToOriginalTotalPriceSetResolver<TParent>;
    originalUnitPriceSet?: AbandonedCheckoutLineItemToOriginalUnitPriceSetResolver<TParent>;
    product?: AbandonedCheckoutLineItemToProductResolver<TParent>;
    quantity?: AbandonedCheckoutLineItemToQuantityResolver<TParent>;
    sku?: AbandonedCheckoutLineItemToSkuResolver<TParent>;
    title?: AbandonedCheckoutLineItemToTitleResolver<TParent>;
    variant?: AbandonedCheckoutLineItemToVariantResolver<TParent>;
    variantTitle?: AbandonedCheckoutLineItemToVariantTitleResolver<TParent>;
  }
  
  export interface AbandonedCheckoutLineItemToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToDiscountedTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToDiscountedTotalPriceWithCodeDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToDiscountedUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToDiscountedUnitPriceWithCodeDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToOriginalTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToOriginalUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonedCheckoutLineItemToVariantTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AttributeTypeResolver<TParent = any> {
    key?: AttributeToKeyResolver<TParent>;
    value?: AttributeToValueResolver<TParent>;
  }
  
  export interface AttributeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AttributeToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MoneyBagTypeResolver<TParent = any> {
    presentmentMoney?: MoneyBagToPresentmentMoneyResolver<TParent>;
    shopMoney?: MoneyBagToShopMoneyResolver<TParent>;
  }
  
  export interface MoneyBagToPresentmentMoneyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MoneyBagToShopMoneyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MoneyV2TypeResolver<TParent = any> {
    amount?: MoneyV2ToAmountResolver<TParent>;
    currencyCode?: MoneyV2ToCurrencyCodeResolver<TParent>;
  }
  
  export interface MoneyV2ToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MoneyV2ToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageTypeResolver<TParent = any> {
    altText?: ImageToAltTextResolver<TParent>;
    height?: ImageToHeightResolver<TParent>;
    id?: ImageToIdResolver<TParent>;
    metafield?: ImageToMetafieldResolver<TParent>;
    metafields?: ImageToMetafieldsResolver<TParent>;
    originalSrc?: ImageToOriginalSrcResolver<TParent>;
    privateMetafield?: ImageToPrivateMetafieldResolver<TParent>;
    privateMetafields?: ImageToPrivateMetafieldsResolver<TParent>;
    src?: ImageToSrcResolver<TParent>;
    transformedSrc?: ImageToTransformedSrcResolver<TParent>;
    url?: ImageToUrlResolver<TParent>;
    width?: ImageToWidthResolver<TParent>;
  }
  
  export interface ImageToAltTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface ImageToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ImageToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ImageToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ImageToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToOriginalSrcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface ImageToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ImageToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ImageToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ImageToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToSrcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToTransformedSrcArgs {
    maxWidth?: number;
    maxHeight?: number;
    crop?: CropRegion;
    scale?: number;
    preferredContentType?: ImageContentType;
  }
  export interface ImageToTransformedSrcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ImageToTransformedSrcArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToUrlArgs {
    transform?: ImageTransformInput;
  }
  export interface ImageToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ImageToUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface HasMetafieldsTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Image' | 'Collection' | 'Market' | 'ProductVariant' | 'Product' | 'AppInstallation' | 'Location' | 'MediaImage' | 'Customer' | 'Company' | 'DraftOrder' | 'Order' | 'CompanyLocation' | 'DeliveryCustomization' | 'DiscountAutomaticNode' | 'DiscountCodeNode' | 'DiscountNode' | 'PaymentCustomization' | 'Shop' | 'CartTransform' | 'CustomerSegmentMember' | 'FulfillmentConstraintRule' | 'Validation';
  }
  export interface MetafieldTypeResolver<TParent = any> {
    createdAt?: MetafieldToCreatedAtResolver<TParent>;
    definition?: MetafieldToDefinitionResolver<TParent>;
    description?: MetafieldToDescriptionResolver<TParent>;
    id?: MetafieldToIdResolver<TParent>;
    key?: MetafieldToKeyResolver<TParent>;
    legacyResourceId?: MetafieldToLegacyResourceIdResolver<TParent>;
    namespace?: MetafieldToNamespaceResolver<TParent>;
    owner?: MetafieldToOwnerResolver<TParent>;
    ownerType?: MetafieldToOwnerTypeResolver<TParent>;
    reference?: MetafieldToReferenceResolver<TParent>;
    references?: MetafieldToReferencesResolver<TParent>;
    type?: MetafieldToTypeResolver<TParent>;
    updatedAt?: MetafieldToUpdatedAtResolver<TParent>;
    value?: MetafieldToValueResolver<TParent>;
  }
  
  export interface MetafieldToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToNamespaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToOwnerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToOwnerTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToReferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToReferencesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
  }
  export interface MetafieldToReferencesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MetafieldToReferencesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LegacyInteroperabilityTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Metafield' | 'ProductVariant' | 'Product' | 'Location' | 'InventoryItem' | 'Customer' | 'DraftOrder' | 'Order' | 'MarketingEvent' | 'Refund' | 'Fulfillment' | 'SavedSearch' | 'PriceRule' | 'ShopifyPaymentsDispute' | 'MetafieldStorefrontVisibility' | 'ScriptTag' | 'ShopifyPaymentsPayout' | 'WebhookSubscription';
  }
  export interface MetafieldDefinitionTypeResolver<TParent = any> {
    access?: MetafieldDefinitionToAccessResolver<TParent>;
    description?: MetafieldDefinitionToDescriptionResolver<TParent>;
    id?: MetafieldDefinitionToIdResolver<TParent>;
    key?: MetafieldDefinitionToKeyResolver<TParent>;
    metafields?: MetafieldDefinitionToMetafieldsResolver<TParent>;
    metafieldsCount?: MetafieldDefinitionToMetafieldsCountResolver<TParent>;
    name?: MetafieldDefinitionToNameResolver<TParent>;
    namespace?: MetafieldDefinitionToNamespaceResolver<TParent>;
    ownerType?: MetafieldDefinitionToOwnerTypeResolver<TParent>;
    pinnedPosition?: MetafieldDefinitionToPinnedPositionResolver<TParent>;
    standardTemplate?: MetafieldDefinitionToStandardTemplateResolver<TParent>;
    type?: MetafieldDefinitionToTypeResolver<TParent>;
    useAsCollectionCondition?: MetafieldDefinitionToUseAsCollectionConditionResolver<TParent>;
    validationStatus?: MetafieldDefinitionToValidationStatusResolver<TParent>;
    validations?: MetafieldDefinitionToValidationsResolver<TParent>;
    visibleToStorefrontApi?: MetafieldDefinitionToVisibleToStorefrontApiResolver<TParent>;
  }
  
  export interface MetafieldDefinitionToAccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToMetafieldsArgs {
    validationStatus?: MetafieldValidationStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface MetafieldDefinitionToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MetafieldDefinitionToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToMetafieldsCountArgs {
    validationStatus?: MetafieldValidationStatus;
  }
  export interface MetafieldDefinitionToMetafieldsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MetafieldDefinitionToMetafieldsCountArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToNamespaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToOwnerTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToPinnedPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToStandardTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToUseAsCollectionConditionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToValidationStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToValidationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionToVisibleToStorefrontApiResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldAccessTypeResolver<TParent = any> {
    admin?: MetafieldAccessToAdminResolver<TParent>;
    grants?: MetafieldAccessToGrantsResolver<TParent>;
    storefront?: MetafieldAccessToStorefrontResolver<TParent>;
  }
  
  export interface MetafieldAccessToAdminResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldAccessToGrantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldAccessToStorefrontResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldAccessGrantTypeResolver<TParent = any> {
    access?: MetafieldAccessGrantToAccessResolver<TParent>;
    grantee?: MetafieldAccessGrantToGranteeResolver<TParent>;
  }
  
  export interface MetafieldAccessGrantToAccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldAccessGrantToGranteeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldConnectionTypeResolver<TParent = any> {
    edges?: MetafieldConnectionToEdgesResolver<TParent>;
    nodes?: MetafieldConnectionToNodesResolver<TParent>;
    pageInfo?: MetafieldConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MetafieldConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldEdgeTypeResolver<TParent = any> {
    cursor?: MetafieldEdgeToCursorResolver<TParent>;
    node?: MetafieldEdgeToNodeResolver<TParent>;
  }
  
  export interface MetafieldEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageInfoTypeResolver<TParent = any> {
    endCursor?: PageInfoToEndCursorResolver<TParent>;
    hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
    hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
    startCursor?: PageInfoToStartCursorResolver<TParent>;
  }
  
  export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateTypeResolver<TParent = any> {
    description?: StandardMetafieldDefinitionTemplateToDescriptionResolver<TParent>;
    id?: StandardMetafieldDefinitionTemplateToIdResolver<TParent>;
    key?: StandardMetafieldDefinitionTemplateToKeyResolver<TParent>;
    name?: StandardMetafieldDefinitionTemplateToNameResolver<TParent>;
    namespace?: StandardMetafieldDefinitionTemplateToNamespaceResolver<TParent>;
    ownerTypes?: StandardMetafieldDefinitionTemplateToOwnerTypesResolver<TParent>;
    type?: StandardMetafieldDefinitionTemplateToTypeResolver<TParent>;
    validations?: StandardMetafieldDefinitionTemplateToValidationsResolver<TParent>;
    visibleToStorefrontApi?: StandardMetafieldDefinitionTemplateToVisibleToStorefrontApiResolver<TParent>;
  }
  
  export interface StandardMetafieldDefinitionTemplateToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateToNamespaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateToOwnerTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateToValidationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateToVisibleToStorefrontApiResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionTypeTypeResolver<TParent = any> {
    category?: MetafieldDefinitionTypeToCategoryResolver<TParent>;
    name?: MetafieldDefinitionTypeToNameResolver<TParent>;
    supportedValidations?: MetafieldDefinitionTypeToSupportedValidationsResolver<TParent>;
    supportsDefinitionMigrations?: MetafieldDefinitionTypeToSupportsDefinitionMigrationsResolver<TParent>;
    valueType?: MetafieldDefinitionTypeToValueTypeResolver<TParent>;
  }
  
  export interface MetafieldDefinitionTypeToCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionTypeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionTypeToSupportedValidationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionTypeToSupportsDefinitionMigrationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionTypeToValueTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionSupportedValidationTypeResolver<TParent = any> {
    name?: MetafieldDefinitionSupportedValidationToNameResolver<TParent>;
    type?: MetafieldDefinitionSupportedValidationToTypeResolver<TParent>;
  }
  
  export interface MetafieldDefinitionSupportedValidationToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionSupportedValidationToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionValidationTypeResolver<TParent = any> {
    name?: MetafieldDefinitionValidationToNameResolver<TParent>;
    type?: MetafieldDefinitionValidationToTypeResolver<TParent>;
    value?: MetafieldDefinitionValidationToValueResolver<TParent>;
  }
  
  export interface MetafieldDefinitionValidationToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionValidationToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionValidationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldReferenceTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Collection' | 'GenericFile' | 'MediaImage' | 'Metaobject' | 'OnlineStorePage' | 'Product' | 'ProductVariant' | 'Video';
  }
  export interface CollectionTypeResolver<TParent = any> {
    availablePublicationCount?: CollectionToAvailablePublicationCountResolver<TParent>;
    description?: CollectionToDescriptionResolver<TParent>;
    descriptionHtml?: CollectionToDescriptionHtmlResolver<TParent>;
    feedback?: CollectionToFeedbackResolver<TParent>;
    handle?: CollectionToHandleResolver<TParent>;
    hasProduct?: CollectionToHasProductResolver<TParent>;
    id?: CollectionToIdResolver<TParent>;
    image?: CollectionToImageResolver<TParent>;
    legacyResourceId?: CollectionToLegacyResourceIdResolver<TParent>;
    metafield?: CollectionToMetafieldResolver<TParent>;
    metafieldDefinitions?: CollectionToMetafieldDefinitionsResolver<TParent>;
    metafields?: CollectionToMetafieldsResolver<TParent>;
    privateMetafield?: CollectionToPrivateMetafieldResolver<TParent>;
    privateMetafields?: CollectionToPrivateMetafieldsResolver<TParent>;
    products?: CollectionToProductsResolver<TParent>;
    productsCount?: CollectionToProductsCountResolver<TParent>;
    publicationCount?: CollectionToPublicationCountResolver<TParent>;
    publications?: CollectionToPublicationsResolver<TParent>;
    publishedOnChannel?: CollectionToPublishedOnChannelResolver<TParent>;
    publishedOnCurrentChannel?: CollectionToPublishedOnCurrentChannelResolver<TParent>;
    publishedOnCurrentPublication?: CollectionToPublishedOnCurrentPublicationResolver<TParent>;
    publishedOnPublication?: CollectionToPublishedOnPublicationResolver<TParent>;
    resourcePublications?: CollectionToResourcePublicationsResolver<TParent>;
    resourcePublicationsV2?: CollectionToResourcePublicationsV2Resolver<TParent>;
    ruleSet?: CollectionToRuleSetResolver<TParent>;
    seo?: CollectionToSeoResolver<TParent>;
    sortOrder?: CollectionToSortOrderResolver<TParent>;
    storefrontId?: CollectionToStorefrontIdResolver<TParent>;
    templateSuffix?: CollectionToTemplateSuffixResolver<TParent>;
    title?: CollectionToTitleResolver<TParent>;
    translations?: CollectionToTranslationsResolver<TParent>;
    unpublishedChannels?: CollectionToUnpublishedChannelsResolver<TParent>;
    unpublishedPublications?: CollectionToUnpublishedPublicationsResolver<TParent>;
    updatedAt?: CollectionToUpdatedAtResolver<TParent>;
  }
  
  export interface CollectionToAvailablePublicationCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToDescriptionArgs {
    truncateAt?: number;
  }
  export interface CollectionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToDescriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToDescriptionHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToFeedbackResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToHasProductArgs {
    id: string;
  }
  export interface CollectionToHasProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToHasProductArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface CollectionToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface CollectionToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CollectionToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface CollectionToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CollectionToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductCollectionSortKeys;
  }
  export interface CollectionToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToProductsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToPublicationCountArgs {
    onlyPublished?: boolean;
  }
  export interface CollectionToPublicationCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToPublicationCountArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToPublicationsArgs {
    onlyPublished?: boolean;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CollectionToPublicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToPublicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToPublishedOnChannelArgs {
    channelId: string;
  }
  export interface CollectionToPublishedOnChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToPublishedOnChannelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToPublishedOnCurrentChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToPublishedOnCurrentPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToPublishedOnPublicationArgs {
    publicationId: string;
  }
  export interface CollectionToPublishedOnPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToPublishedOnPublicationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToResourcePublicationsArgs {
    onlyPublished?: boolean;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CollectionToResourcePublicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToResourcePublicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToResourcePublicationsV2Args {
    onlyPublished?: boolean;
    catalogType?: CatalogType;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CollectionToResourcePublicationsV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToResourcePublicationsV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToRuleSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToSeoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToSortOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToStorefrontIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToTemplateSuffixResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface CollectionToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToUnpublishedChannelsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CollectionToUnpublishedChannelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToUnpublishedChannelsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToUnpublishedPublicationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CollectionToUnpublishedPublicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CollectionToUnpublishedPublicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface HasMetafieldDefinitionsTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Collection' | 'Market' | 'ProductVariant' | 'Product' | 'Location' | 'Customer' | 'Company' | 'Order' | 'CompanyLocation' | 'DeliveryCustomization' | 'DiscountAutomaticNode' | 'DiscountCodeNode' | 'DiscountNode' | 'PaymentCustomization' | 'Validation';
  }
  export interface MetafieldDefinitionConnectionTypeResolver<TParent = any> {
    edges?: MetafieldDefinitionConnectionToEdgesResolver<TParent>;
    nodes?: MetafieldDefinitionConnectionToNodesResolver<TParent>;
    pageInfo?: MetafieldDefinitionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MetafieldDefinitionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionEdgeTypeResolver<TParent = any> {
    cursor?: MetafieldDefinitionEdgeToCursorResolver<TParent>;
    node?: MetafieldDefinitionEdgeToNodeResolver<TParent>;
  }
  
  export interface MetafieldDefinitionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface HasPublishedTranslationsTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Collection' | 'ProductVariant' | 'Product' | 'Link' | 'ProductOption' | 'SellingPlanGroup' | 'SellingPlan' | 'OnlineStoreArticle' | 'OnlineStoreBlog' | 'OnlineStorePage' | 'Shop' | 'ShopPolicy';
  }
  export interface TranslationTypeResolver<TParent = any> {
    key?: TranslationToKeyResolver<TParent>;
    locale?: TranslationToLocaleResolver<TParent>;
    market?: TranslationToMarketResolver<TParent>;
    outdated?: TranslationToOutdatedResolver<TParent>;
    updatedAt?: TranslationToUpdatedAtResolver<TParent>;
    value?: TranslationToValueResolver<TParent>;
  }
  
  export interface TranslationToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationToLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationToOutdatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketTypeResolver<TParent = any> {
    catalogs?: MarketToCatalogsResolver<TParent>;
    currencySettings?: MarketToCurrencySettingsResolver<TParent>;
    enabled?: MarketToEnabledResolver<TParent>;
    handle?: MarketToHandleResolver<TParent>;
    id?: MarketToIdResolver<TParent>;
    metafield?: MarketToMetafieldResolver<TParent>;
    metafieldDefinitions?: MarketToMetafieldDefinitionsResolver<TParent>;
    metafields?: MarketToMetafieldsResolver<TParent>;
    name?: MarketToNameResolver<TParent>;
    priceList?: MarketToPriceListResolver<TParent>;
    primary?: MarketToPrimaryResolver<TParent>;
    privateMetafield?: MarketToPrivateMetafieldResolver<TParent>;
    privateMetafields?: MarketToPrivateMetafieldsResolver<TParent>;
    regions?: MarketToRegionsResolver<TParent>;
    webPresence?: MarketToWebPresenceResolver<TParent>;
    webPresences?: MarketToWebPresencesResolver<TParent>;
  }
  
  export interface MarketToCatalogsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface MarketToCatalogsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MarketToCatalogsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToCurrencySettingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface MarketToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MarketToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface MarketToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MarketToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface MarketToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MarketToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToPriceListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToPrimaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface MarketToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MarketToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface MarketToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MarketToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToRegionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface MarketToRegionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MarketToRegionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToWebPresenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketToWebPresencesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface MarketToWebPresencesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MarketToWebPresencesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogConnectionTypeResolver<TParent = any> {
    edges?: MarketCatalogConnectionToEdgesResolver<TParent>;
    nodes?: MarketCatalogConnectionToNodesResolver<TParent>;
    pageInfo?: MarketCatalogConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MarketCatalogConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogEdgeTypeResolver<TParent = any> {
    cursor?: MarketCatalogEdgeToCursorResolver<TParent>;
    node?: MarketCatalogEdgeToNodeResolver<TParent>;
  }
  
  export interface MarketCatalogEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogTypeResolver<TParent = any> {
    id?: MarketCatalogToIdResolver<TParent>;
    markets?: MarketCatalogToMarketsResolver<TParent>;
    operations?: MarketCatalogToOperationsResolver<TParent>;
    priceList?: MarketCatalogToPriceListResolver<TParent>;
    publication?: MarketCatalogToPublicationResolver<TParent>;
    status?: MarketCatalogToStatusResolver<TParent>;
    title?: MarketCatalogToTitleResolver<TParent>;
  }
  
  export interface MarketCatalogToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogToMarketsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface MarketCatalogToMarketsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MarketCatalogToMarketsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogToOperationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogToPriceListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogToPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCatalogToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'MarketCatalog' | 'AppCatalog' | 'CompanyLocationCatalog';
  }
  export interface ResourceOperationTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'AddAllProductsOperation' | 'CatalogCsvOperation' | 'PublicationResourceOperation';
  }
  export interface RowCountTypeResolver<TParent = any> {
    count?: RowCountToCountResolver<TParent>;
    exceedsMax?: RowCountToExceedsMaxResolver<TParent>;
  }
  
  export interface RowCountToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RowCountToExceedsMaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListTypeResolver<TParent = any> {
    catalog?: PriceListToCatalogResolver<TParent>;
    currency?: PriceListToCurrencyResolver<TParent>;
    fixedPricesCount?: PriceListToFixedPricesCountResolver<TParent>;
    id?: PriceListToIdResolver<TParent>;
    name?: PriceListToNameResolver<TParent>;
    parent?: PriceListToParentResolver<TParent>;
    prices?: PriceListToPricesResolver<TParent>;
    quantityRules?: PriceListToQuantityRulesResolver<TParent>;
  }
  
  export interface PriceListToCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListToFixedPricesCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListToPricesArgs {
    originType?: PriceListPriceOriginType;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface PriceListToPricesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceListToPricesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListToQuantityRulesArgs {
    originType?: QuantityRuleOriginType;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PriceListToQuantityRulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceListToQuantityRulesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListParentTypeResolver<TParent = any> {
    adjustment?: PriceListParentToAdjustmentResolver<TParent>;
    settings?: PriceListParentToSettingsResolver<TParent>;
  }
  
  export interface PriceListParentToAdjustmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListParentToSettingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListAdjustmentTypeResolver<TParent = any> {
    type?: PriceListAdjustmentToTypeResolver<TParent>;
    value?: PriceListAdjustmentToValueResolver<TParent>;
  }
  
  export interface PriceListAdjustmentToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListAdjustmentToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListAdjustmentSettingsTypeResolver<TParent = any> {
    compareAtMode?: PriceListAdjustmentSettingsToCompareAtModeResolver<TParent>;
  }
  
  export interface PriceListAdjustmentSettingsToCompareAtModeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceConnectionTypeResolver<TParent = any> {
    edges?: PriceListPriceConnectionToEdgesResolver<TParent>;
    nodes?: PriceListPriceConnectionToNodesResolver<TParent>;
    pageInfo?: PriceListPriceConnectionToPageInfoResolver<TParent>;
  }
  
  export interface PriceListPriceConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceEdgeTypeResolver<TParent = any> {
    cursor?: PriceListPriceEdgeToCursorResolver<TParent>;
    node?: PriceListPriceEdgeToNodeResolver<TParent>;
  }
  
  export interface PriceListPriceEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceTypeResolver<TParent = any> {
    compareAtPrice?: PriceListPriceToCompareAtPriceResolver<TParent>;
    originType?: PriceListPriceToOriginTypeResolver<TParent>;
    price?: PriceListPriceToPriceResolver<TParent>;
    quantityPriceBreaks?: PriceListPriceToQuantityPriceBreaksResolver<TParent>;
    variant?: PriceListPriceToVariantResolver<TParent>;
  }
  
  export interface PriceListPriceToCompareAtPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceToOriginTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceToQuantityPriceBreaksArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: QuantityPriceBreakSortKeys;
  }
  export interface PriceListPriceToQuantityPriceBreaksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceListPriceToQuantityPriceBreaksArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPriceBreakConnectionTypeResolver<TParent = any> {
    edges?: QuantityPriceBreakConnectionToEdgesResolver<TParent>;
    nodes?: QuantityPriceBreakConnectionToNodesResolver<TParent>;
    pageInfo?: QuantityPriceBreakConnectionToPageInfoResolver<TParent>;
  }
  
  export interface QuantityPriceBreakConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPriceBreakConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPriceBreakConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPriceBreakEdgeTypeResolver<TParent = any> {
    cursor?: QuantityPriceBreakEdgeToCursorResolver<TParent>;
    node?: QuantityPriceBreakEdgeToNodeResolver<TParent>;
  }
  
  export interface QuantityPriceBreakEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPriceBreakEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPriceBreakTypeResolver<TParent = any> {
    id?: QuantityPriceBreakToIdResolver<TParent>;
    minimumQuantity?: QuantityPriceBreakToMinimumQuantityResolver<TParent>;
    price?: QuantityPriceBreakToPriceResolver<TParent>;
    priceList?: QuantityPriceBreakToPriceListResolver<TParent>;
    variant?: QuantityPriceBreakToVariantResolver<TParent>;
  }
  
  export interface QuantityPriceBreakToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPriceBreakToMinimumQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPriceBreakToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPriceBreakToPriceListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPriceBreakToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantTypeResolver<TParent = any> {
    availableForSale?: ProductVariantToAvailableForSaleResolver<TParent>;
    barcode?: ProductVariantToBarcodeResolver<TParent>;
    compareAtPrice?: ProductVariantToCompareAtPriceResolver<TParent>;
    contextualPricing?: ProductVariantToContextualPricingResolver<TParent>;
    createdAt?: ProductVariantToCreatedAtResolver<TParent>;
    defaultCursor?: ProductVariantToDefaultCursorResolver<TParent>;
    deliveryProfile?: ProductVariantToDeliveryProfileResolver<TParent>;
    displayName?: ProductVariantToDisplayNameResolver<TParent>;
    fulfillmentService?: ProductVariantToFulfillmentServiceResolver<TParent>;
    fulfillmentServiceEditable?: ProductVariantToFulfillmentServiceEditableResolver<TParent>;
    harmonizedSystemCode?: ProductVariantToHarmonizedSystemCodeResolver<TParent>;
    id?: ProductVariantToIdResolver<TParent>;
    image?: ProductVariantToImageResolver<TParent>;
    inventoryItem?: ProductVariantToInventoryItemResolver<TParent>;
    inventoryManagement?: ProductVariantToInventoryManagementResolver<TParent>;
    inventoryPolicy?: ProductVariantToInventoryPolicyResolver<TParent>;
    inventoryQuantity?: ProductVariantToInventoryQuantityResolver<TParent>;
    legacyResourceId?: ProductVariantToLegacyResourceIdResolver<TParent>;
    media?: ProductVariantToMediaResolver<TParent>;
    metafield?: ProductVariantToMetafieldResolver<TParent>;
    metafieldDefinitions?: ProductVariantToMetafieldDefinitionsResolver<TParent>;
    metafields?: ProductVariantToMetafieldsResolver<TParent>;
    position?: ProductVariantToPositionResolver<TParent>;
    presentmentPrices?: ProductVariantToPresentmentPricesResolver<TParent>;
    price?: ProductVariantToPriceResolver<TParent>;
    privateMetafield?: ProductVariantToPrivateMetafieldResolver<TParent>;
    privateMetafields?: ProductVariantToPrivateMetafieldsResolver<TParent>;
    product?: ProductVariantToProductResolver<TParent>;
    productVariantComponents?: ProductVariantToProductVariantComponentsResolver<TParent>;
    requiresComponents?: ProductVariantToRequiresComponentsResolver<TParent>;
    requiresShipping?: ProductVariantToRequiresShippingResolver<TParent>;
    selectedOptions?: ProductVariantToSelectedOptionsResolver<TParent>;
    sellableOnlineQuantity?: ProductVariantToSellableOnlineQuantityResolver<TParent>;
    sellingPlanGroupCount?: ProductVariantToSellingPlanGroupCountResolver<TParent>;
    sellingPlanGroups?: ProductVariantToSellingPlanGroupsResolver<TParent>;
    sku?: ProductVariantToSkuResolver<TParent>;
    storefrontId?: ProductVariantToStorefrontIdResolver<TParent>;
    taxCode?: ProductVariantToTaxCodeResolver<TParent>;
    taxable?: ProductVariantToTaxableResolver<TParent>;
    title?: ProductVariantToTitleResolver<TParent>;
    translations?: ProductVariantToTranslationsResolver<TParent>;
    updatedAt?: ProductVariantToUpdatedAtResolver<TParent>;
    weight?: ProductVariantToWeightResolver<TParent>;
    weightUnit?: ProductVariantToWeightUnitResolver<TParent>;
  }
  
  export interface ProductVariantToAvailableForSaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToBarcodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToCompareAtPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToContextualPricingArgs {
    context: ContextualPricingContext;
  }
  export interface ProductVariantToContextualPricingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToContextualPricingArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToDefaultCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToDeliveryProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToDisplayNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToFulfillmentServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToFulfillmentServiceEditableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToHarmonizedSystemCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToInventoryItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToInventoryManagementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToInventoryPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToInventoryQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToMediaArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductVariantToMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToMediaArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface ProductVariantToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface ProductVariantToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductVariantToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToPresentmentPricesArgs {
    presentmentCurrencies?: Array<CurrencyCode>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductVariantToPresentmentPricesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToPresentmentPricesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface ProductVariantToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductVariantToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToProductVariantComponentsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductVariantToProductVariantComponentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToProductVariantComponentsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToRequiresComponentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToSelectedOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToSellableOnlineQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToSellingPlanGroupCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToSellingPlanGroupsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductVariantToSellingPlanGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToSellingPlanGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToStorefrontIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToTaxCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToTaxableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface ProductVariantToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantToWeightUnitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantContextualPricingTypeResolver<TParent = any> {
    compareAtPrice?: ProductVariantContextualPricingToCompareAtPriceResolver<TParent>;
    price?: ProductVariantContextualPricingToPriceResolver<TParent>;
    quantityPriceBreaks?: ProductVariantContextualPricingToQuantityPriceBreaksResolver<TParent>;
    quantityRule?: ProductVariantContextualPricingToQuantityRuleResolver<TParent>;
  }
  
  export interface ProductVariantContextualPricingToCompareAtPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantContextualPricingToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantContextualPricingToQuantityPriceBreaksArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: QuantityPriceBreakSortKeys;
  }
  export interface ProductVariantContextualPricingToQuantityPriceBreaksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductVariantContextualPricingToQuantityPriceBreaksArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantContextualPricingToQuantityRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleTypeResolver<TParent = any> {
    increment?: QuantityRuleToIncrementResolver<TParent>;
    isDefault?: QuantityRuleToIsDefaultResolver<TParent>;
    maximum?: QuantityRuleToMaximumResolver<TParent>;
    minimum?: QuantityRuleToMinimumResolver<TParent>;
    originType?: QuantityRuleToOriginTypeResolver<TParent>;
    productVariant?: QuantityRuleToProductVariantResolver<TParent>;
  }
  
  export interface QuantityRuleToIncrementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleToIsDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleToMaximumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleToMinimumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleToOriginTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleToProductVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileTypeResolver<TParent = any> {
    activeMethodDefinitionsCount?: DeliveryProfileToActiveMethodDefinitionsCountResolver<TParent>;
    default?: DeliveryProfileToDefaultResolver<TParent>;
    id?: DeliveryProfileToIdResolver<TParent>;
    legacyMode?: DeliveryProfileToLegacyModeResolver<TParent>;
    locationsWithoutRatesCount?: DeliveryProfileToLocationsWithoutRatesCountResolver<TParent>;
    name?: DeliveryProfileToNameResolver<TParent>;
    originLocationCount?: DeliveryProfileToOriginLocationCountResolver<TParent>;
    productVariantsCount?: DeliveryProfileToProductVariantsCountResolver<TParent>;
    productVariantsCountV2?: DeliveryProfileToProductVariantsCountV2Resolver<TParent>;
    profileItems?: DeliveryProfileToProfileItemsResolver<TParent>;
    profileLocationGroups?: DeliveryProfileToProfileLocationGroupsResolver<TParent>;
    sellingPlanGroups?: DeliveryProfileToSellingPlanGroupsResolver<TParent>;
    unassignedLocations?: DeliveryProfileToUnassignedLocationsResolver<TParent>;
    unassignedLocationsPaginated?: DeliveryProfileToUnassignedLocationsPaginatedResolver<TParent>;
    zoneCountryCount?: DeliveryProfileToZoneCountryCountResolver<TParent>;
  }
  
  export interface DeliveryProfileToActiveMethodDefinitionsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToLegacyModeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToLocationsWithoutRatesCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToOriginLocationCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToProductVariantsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToProductVariantsCountV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToProfileItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DeliveryProfileToProfileItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryProfileToProfileItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToProfileLocationGroupsArgs {
    locationGroupId?: string;
  }
  export interface DeliveryProfileToProfileLocationGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryProfileToProfileLocationGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToSellingPlanGroupsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DeliveryProfileToSellingPlanGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryProfileToSellingPlanGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToUnassignedLocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToUnassignedLocationsPaginatedArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DeliveryProfileToUnassignedLocationsPaginatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryProfileToUnassignedLocationsPaginatedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileToZoneCountryCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProductVariantsCountTypeResolver<TParent = any> {
    capped?: DeliveryProductVariantsCountToCappedResolver<TParent>;
    count?: DeliveryProductVariantsCountToCountResolver<TParent>;
  }
  
  export interface DeliveryProductVariantsCountToCappedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProductVariantsCountToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileItemConnectionTypeResolver<TParent = any> {
    edges?: DeliveryProfileItemConnectionToEdgesResolver<TParent>;
    nodes?: DeliveryProfileItemConnectionToNodesResolver<TParent>;
    pageInfo?: DeliveryProfileItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DeliveryProfileItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileItemEdgeTypeResolver<TParent = any> {
    cursor?: DeliveryProfileItemEdgeToCursorResolver<TParent>;
    node?: DeliveryProfileItemEdgeToNodeResolver<TParent>;
  }
  
  export interface DeliveryProfileItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileItemTypeResolver<TParent = any> {
    id?: DeliveryProfileItemToIdResolver<TParent>;
    product?: DeliveryProfileItemToProductResolver<TParent>;
    variants?: DeliveryProfileItemToVariantsResolver<TParent>;
  }
  
  export interface DeliveryProfileItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileItemToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileItemToVariantsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DeliveryProfileItemToVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryProfileItemToVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductTypeResolver<TParent = any> {
    availablePublicationCount?: ProductToAvailablePublicationCountResolver<TParent>;
    bodyHtml?: ProductToBodyHtmlResolver<TParent>;
    collections?: ProductToCollectionsResolver<TParent>;
    compareAtPriceRange?: ProductToCompareAtPriceRangeResolver<TParent>;
    contextualPricing?: ProductToContextualPricingResolver<TParent>;
    createdAt?: ProductToCreatedAtResolver<TParent>;
    customProductType?: ProductToCustomProductTypeResolver<TParent>;
    defaultCursor?: ProductToDefaultCursorResolver<TParent>;
    description?: ProductToDescriptionResolver<TParent>;
    descriptionHtml?: ProductToDescriptionHtmlResolver<TParent>;
    descriptionPlainSummary?: ProductToDescriptionPlainSummaryResolver<TParent>;
    featuredImage?: ProductToFeaturedImageResolver<TParent>;
    featuredMedia?: ProductToFeaturedMediaResolver<TParent>;
    feedback?: ProductToFeedbackResolver<TParent>;
    giftCardTemplateSuffix?: ProductToGiftCardTemplateSuffixResolver<TParent>;
    handle?: ProductToHandleResolver<TParent>;
    hasOnlyDefaultVariant?: ProductToHasOnlyDefaultVariantResolver<TParent>;
    hasOutOfStockVariants?: ProductToHasOutOfStockVariantsResolver<TParent>;
    hasVariantsThatRequiresComponents?: ProductToHasVariantsThatRequiresComponentsResolver<TParent>;
    id?: ProductToIdResolver<TParent>;
    images?: ProductToImagesResolver<TParent>;
    inCollection?: ProductToInCollectionResolver<TParent>;
    isGiftCard?: ProductToIsGiftCardResolver<TParent>;
    legacyResourceId?: ProductToLegacyResourceIdResolver<TParent>;
    media?: ProductToMediaResolver<TParent>;
    mediaCount?: ProductToMediaCountResolver<TParent>;
    metafield?: ProductToMetafieldResolver<TParent>;
    metafieldDefinitions?: ProductToMetafieldDefinitionsResolver<TParent>;
    metafields?: ProductToMetafieldsResolver<TParent>;
    onlineStorePreviewUrl?: ProductToOnlineStorePreviewUrlResolver<TParent>;
    onlineStoreUrl?: ProductToOnlineStoreUrlResolver<TParent>;
    options?: ProductToOptionsResolver<TParent>;
    priceRange?: ProductToPriceRangeResolver<TParent>;
    priceRangeV2?: ProductToPriceRangeV2Resolver<TParent>;
    privateMetafield?: ProductToPrivateMetafieldResolver<TParent>;
    privateMetafields?: ProductToPrivateMetafieldsResolver<TParent>;
    productCategory?: ProductToProductCategoryResolver<TParent>;
    productPublications?: ProductToProductPublicationsResolver<TParent>;
    productType?: ProductToProductTypeResolver<TParent>;
    publicationCount?: ProductToPublicationCountResolver<TParent>;
    publications?: ProductToPublicationsResolver<TParent>;
    publishedAt?: ProductToPublishedAtResolver<TParent>;
    publishedInContext?: ProductToPublishedInContextResolver<TParent>;
    publishedOnChannel?: ProductToPublishedOnChannelResolver<TParent>;
    publishedOnCurrentChannel?: ProductToPublishedOnCurrentChannelResolver<TParent>;
    publishedOnCurrentPublication?: ProductToPublishedOnCurrentPublicationResolver<TParent>;
    publishedOnPublication?: ProductToPublishedOnPublicationResolver<TParent>;
    requiresSellingPlan?: ProductToRequiresSellingPlanResolver<TParent>;
    resourcePublicationOnCurrentPublication?: ProductToResourcePublicationOnCurrentPublicationResolver<TParent>;
    resourcePublications?: ProductToResourcePublicationsResolver<TParent>;
    resourcePublicationsV2?: ProductToResourcePublicationsV2Resolver<TParent>;
    sellingPlanGroupCount?: ProductToSellingPlanGroupCountResolver<TParent>;
    sellingPlanGroups?: ProductToSellingPlanGroupsResolver<TParent>;
    seo?: ProductToSeoResolver<TParent>;
    standardizedProductType?: ProductToStandardizedProductTypeResolver<TParent>;
    status?: ProductToStatusResolver<TParent>;
    storefrontId?: ProductToStorefrontIdResolver<TParent>;
    tags?: ProductToTagsResolver<TParent>;
    templateSuffix?: ProductToTemplateSuffixResolver<TParent>;
    title?: ProductToTitleResolver<TParent>;
    totalInventory?: ProductToTotalInventoryResolver<TParent>;
    totalVariants?: ProductToTotalVariantsResolver<TParent>;
    tracksInventory?: ProductToTracksInventoryResolver<TParent>;
    translations?: ProductToTranslationsResolver<TParent>;
    unpublishedChannels?: ProductToUnpublishedChannelsResolver<TParent>;
    unpublishedPublications?: ProductToUnpublishedPublicationsResolver<TParent>;
    updatedAt?: ProductToUpdatedAtResolver<TParent>;
    variants?: ProductToVariantsResolver<TParent>;
    vendor?: ProductToVendorResolver<TParent>;
  }
  
  export interface ProductToAvailablePublicationCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToBodyHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToCollectionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CollectionSortKeys;
    query?: string;
  }
  export interface ProductToCollectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToCompareAtPriceRangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToContextualPricingArgs {
    context: ContextualPricingContext;
  }
  export interface ProductToContextualPricingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToContextualPricingArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToCustomProductTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToDefaultCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToDescriptionArgs {
    truncateAt?: number;
  }
  export interface ProductToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToDescriptionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToDescriptionHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToDescriptionPlainSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToFeaturedImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToFeaturedMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToFeedbackResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToGiftCardTemplateSuffixResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToHasOnlyDefaultVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToHasOutOfStockVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToHasVariantsThatRequiresComponentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToImagesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductImageSortKeys;
  }
  export interface ProductToImagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToImagesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToInCollectionArgs {
    id: string;
  }
  export interface ProductToInCollectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToInCollectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToIsGiftCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToMediaArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductMediaSortKeys;
  }
  export interface ProductToMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToMediaArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToMediaCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface ProductToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface ProductToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToOnlineStorePreviewUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToOnlineStoreUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToOptionsArgs {
    first?: number;
  }
  export interface ProductToOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToOptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPriceRangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPriceRangeV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface ProductToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToProductCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToProductPublicationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToProductPublicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToProductPublicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToProductTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPublicationCountArgs {
    onlyPublished?: boolean;
  }
  export interface ProductToPublicationCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToPublicationCountArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPublicationsArgs {
    onlyPublished?: boolean;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToPublicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToPublicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPublishedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPublishedInContextArgs {
    context: ContextualPublicationContext;
  }
  export interface ProductToPublishedInContextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToPublishedInContextArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPublishedOnChannelArgs {
    channelId: string;
  }
  export interface ProductToPublishedOnChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToPublishedOnChannelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPublishedOnCurrentChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPublishedOnCurrentPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToPublishedOnPublicationArgs {
    publicationId: string;
  }
  export interface ProductToPublishedOnPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToPublishedOnPublicationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToRequiresSellingPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToResourcePublicationOnCurrentPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToResourcePublicationsArgs {
    onlyPublished?: boolean;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToResourcePublicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToResourcePublicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToResourcePublicationsV2Args {
    onlyPublished?: boolean;
    catalogType?: CatalogType;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToResourcePublicationsV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToResourcePublicationsV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToSellingPlanGroupCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToSellingPlanGroupsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToSellingPlanGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToSellingPlanGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToSeoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToStandardizedProductTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToStorefrontIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTemplateSuffixResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTotalInventoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTotalVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTracksInventoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface ProductToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToUnpublishedChannelsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToUnpublishedChannelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToUnpublishedChannelsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToUnpublishedPublicationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ProductToUnpublishedPublicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToUnpublishedPublicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToVariantsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductVariantSortKeys;
  }
  export interface ProductToVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductToVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductToVendorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OnlineStorePreviewableTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Product';
  }
  export interface PublishableTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Collection' | 'Product';
  }
  export interface ResourcePublicationConnectionTypeResolver<TParent = any> {
    edges?: ResourcePublicationConnectionToEdgesResolver<TParent>;
    nodes?: ResourcePublicationConnectionToNodesResolver<TParent>;
    pageInfo?: ResourcePublicationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ResourcePublicationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationEdgeTypeResolver<TParent = any> {
    cursor?: ResourcePublicationEdgeToCursorResolver<TParent>;
    node?: ResourcePublicationEdgeToNodeResolver<TParent>;
  }
  
  export interface ResourcePublicationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationTypeResolver<TParent = any> {
    channel?: ResourcePublicationToChannelResolver<TParent>;
    isPublished?: ResourcePublicationToIsPublishedResolver<TParent>;
    publication?: ResourcePublicationToPublicationResolver<TParent>;
    publishDate?: ResourcePublicationToPublishDateResolver<TParent>;
    publishable?: ResourcePublicationToPublishableResolver<TParent>;
  }
  
  export interface ResourcePublicationToChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationToIsPublishedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationToPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationToPublishDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationToPublishableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelTypeResolver<TParent = any> {
    app?: ChannelToAppResolver<TParent>;
    collectionPublicationsV3?: ChannelToCollectionPublicationsV3Resolver<TParent>;
    collections?: ChannelToCollectionsResolver<TParent>;
    handle?: ChannelToHandleResolver<TParent>;
    hasCollection?: ChannelToHasCollectionResolver<TParent>;
    id?: ChannelToIdResolver<TParent>;
    name?: ChannelToNameResolver<TParent>;
    navigationItems?: ChannelToNavigationItemsResolver<TParent>;
    overviewPath?: ChannelToOverviewPathResolver<TParent>;
    productPublications?: ChannelToProductPublicationsResolver<TParent>;
    productPublicationsV3?: ChannelToProductPublicationsV3Resolver<TParent>;
    products?: ChannelToProductsResolver<TParent>;
    supportsFuturePublishing?: ChannelToSupportsFuturePublishingResolver<TParent>;
  }
  
  export interface ChannelToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToCollectionPublicationsV3Args {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ChannelToCollectionPublicationsV3Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: ChannelToCollectionPublicationsV3Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToCollectionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ChannelToCollectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ChannelToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToHasCollectionArgs {
    id: string;
  }
  export interface ChannelToHasCollectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ChannelToHasCollectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToNavigationItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToOverviewPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToProductPublicationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ChannelToProductPublicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ChannelToProductPublicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToProductPublicationsV3Args {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ChannelToProductPublicationsV3Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: ChannelToProductPublicationsV3Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ChannelToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ChannelToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelToSupportsFuturePublishingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppTypeResolver<TParent = any> {
    apiKey?: AppToApiKeyResolver<TParent>;
    appStoreAppUrl?: AppToAppStoreAppUrlResolver<TParent>;
    appStoreDeveloperUrl?: AppToAppStoreDeveloperUrlResolver<TParent>;
    availableAccessScopes?: AppToAvailableAccessScopesResolver<TParent>;
    banner?: AppToBannerResolver<TParent>;
    description?: AppToDescriptionResolver<TParent>;
    developerName?: AppToDeveloperNameResolver<TParent>;
    developerType?: AppToDeveloperTypeResolver<TParent>;
    developerUrl?: AppToDeveloperUrlResolver<TParent>;
    embedded?: AppToEmbeddedResolver<TParent>;
    failedRequirements?: AppToFailedRequirementsResolver<TParent>;
    features?: AppToFeaturesResolver<TParent>;
    feedback?: AppToFeedbackResolver<TParent>;
    handle?: AppToHandleResolver<TParent>;
    icon?: AppToIconResolver<TParent>;
    id?: AppToIdResolver<TParent>;
    installUrl?: AppToInstallUrlResolver<TParent>;
    installation?: AppToInstallationResolver<TParent>;
    isPostPurchaseAppInUse?: AppToIsPostPurchaseAppInUseResolver<TParent>;
    launchUrl?: AppToLaunchUrlResolver<TParent>;
    navigationItems?: AppToNavigationItemsResolver<TParent>;
    previouslyInstalled?: AppToPreviouslyInstalledResolver<TParent>;
    pricingDetails?: AppToPricingDetailsResolver<TParent>;
    pricingDetailsSummary?: AppToPricingDetailsSummaryResolver<TParent>;
    privacyPolicyUrl?: AppToPrivacyPolicyUrlResolver<TParent>;
    publicCategory?: AppToPublicCategoryResolver<TParent>;
    published?: AppToPublishedResolver<TParent>;
    requestedAccessScopes?: AppToRequestedAccessScopesResolver<TParent>;
    screenshots?: AppToScreenshotsResolver<TParent>;
    shopifyDeveloped?: AppToShopifyDevelopedResolver<TParent>;
    title?: AppToTitleResolver<TParent>;
    uninstallMessage?: AppToUninstallMessageResolver<TParent>;
    uninstallUrl?: AppToUninstallUrlResolver<TParent>;
    webhookApiVersion?: AppToWebhookApiVersionResolver<TParent>;
  }
  
  export interface AppToApiKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToAppStoreAppUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToAppStoreDeveloperUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToAvailableAccessScopesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToBannerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToDeveloperNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToDeveloperTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToDeveloperUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToEmbeddedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToFailedRequirementsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToFeaturesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToFeedbackResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToInstallUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToInstallationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToIsPostPurchaseAppInUseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToLaunchUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToNavigationItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToPreviouslyInstalledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToPricingDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToPricingDetailsSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToPrivacyPolicyUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToPublicCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToPublishedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToRequestedAccessScopesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToScreenshotsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToShopifyDevelopedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToUninstallMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToUninstallUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppToWebhookApiVersionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AccessScopeTypeResolver<TParent = any> {
    description?: AccessScopeToDescriptionResolver<TParent>;
    handle?: AccessScopeToHandleResolver<TParent>;
  }
  
  export interface AccessScopeToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AccessScopeToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FailedRequirementTypeResolver<TParent = any> {
    action?: FailedRequirementToActionResolver<TParent>;
    message?: FailedRequirementToMessageResolver<TParent>;
  }
  
  export interface FailedRequirementToActionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FailedRequirementToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface NavigationItemTypeResolver<TParent = any> {
    id?: NavigationItemToIdResolver<TParent>;
    title?: NavigationItemToTitleResolver<TParent>;
    url?: NavigationItemToUrlResolver<TParent>;
  }
  
  export interface NavigationItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface NavigationItemToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface NavigationItemToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppFeedbackTypeResolver<TParent = any> {
    app?: AppFeedbackToAppResolver<TParent>;
    link?: AppFeedbackToLinkResolver<TParent>;
    messages?: AppFeedbackToMessagesResolver<TParent>;
  }
  
  export interface AppFeedbackToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppFeedbackToLinkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppFeedbackToMessagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LinkTypeResolver<TParent = any> {
    label?: LinkToLabelResolver<TParent>;
    translations?: LinkToTranslationsResolver<TParent>;
    url?: LinkToUrlResolver<TParent>;
  }
  
  export interface LinkToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LinkToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface LinkToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: LinkToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LinkToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UserErrorTypeResolver<TParent = any> {
    field?: UserErrorToFieldResolver<TParent>;
    message?: UserErrorToMessageResolver<TParent>;
  }
  
  export interface UserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DisplayableErrorTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'UserError' | 'DiscountUserError' | 'AbandonmentEmailStateUpdateUserError' | 'AbandonmentUpdateActivitiesDeliveryStatusesUserError' | 'AppSubscriptionTrialExtendUserError' | 'BulkMutationUserError' | 'BulkProductResourceFeedbackCreateUserError' | 'CartTransformCreateUserError' | 'CartTransformDeleteUserError' | 'CatalogUserError' | 'CheckoutBrandingUpsertUserError' | 'CollectionAddProductsV2UserError' | 'BusinessCustomerUserError' | 'CustomerCancelDataErasureUserError' | 'CustomerEmailMarketingConsentUpdateUserError' | 'CustomerMergeUserError' | 'CustomerPaymentMethodCreateFromDuplicationDataUserError' | 'CustomerPaymentMethodGetDuplicationDataUserError' | 'CustomerPaymentMethodGetUpdateUrlUserError' | 'CustomerPaymentMethodUserError' | 'CustomerPaymentMethodRemoteUserError' | 'CustomerRequestDataErasureUserError' | 'CustomerSegmentMembersQueryUserError' | 'CustomerSmsMarketingConsentError' | 'DelegateAccessTokenCreateUserError' | 'DelegateAccessTokenDestroyUserError' | 'DeliveryCustomizationError' | 'DisputeEvidenceUpdateUserError' | 'ErrorsServerPixelUserError' | 'FilesUserError' | 'FulfillmentConstraintRuleCreateUserError' | 'FulfillmentConstraintRuleDeleteUserError' | 'FulfillmentOrderHoldUserError' | 'FulfillmentOrderLineItemsPreparedForPickupUserError' | 'FulfillmentOrderMergeUserError' | 'FulfillmentOrderReleaseHoldUserError' | 'FulfillmentOrderRescheduleUserError' | 'FulfillmentOrderSplitUserError' | 'FulfillmentOrdersReleaseHoldsUserError' | 'FulfillmentOrdersSetFulfillmentDeadlineUserError' | 'GiftCardUserError' | 'InventoryAdjustQuantitiesUserError' | 'InventoryBulkToggleActivationUserError' | 'InventoryMoveQuantitiesUserError' | 'InventorySetOnHandQuantitiesUserError' | 'InventorySetScheduledChangesUserError' | 'LocationActivateUserError' | 'LocationAddUserError' | 'LocationDeactivateUserError' | 'LocationDeleteUserError' | 'LocationEditUserError' | 'DeliveryLocationLocalPickupSettingsError' | 'MarketUserError' | 'MarketCurrencySettingsUserError' | 'TranslationUserError' | 'MarketingActivityUserError' | 'MetafieldDefinitionCreateUserError' | 'MetafieldDefinitionDeleteUserError' | 'MetafieldDefinitionPinUserError' | 'MetafieldDefinitionUnpinUserError' | 'MetafieldDefinitionUpdateUserError' | 'MetafieldsSetUserError' | 'MetaobjectUserError' | 'OrderCancelUserError' | 'OrderCreateMandatePaymentUserError' | 'OrderEditRemoveDiscountUserError' | 'OrderEditUpdateDiscountUserError' | 'OrderInvoiceSendUserError' | 'PaymentCustomizationError' | 'PaymentReminderSendUserError' | 'PaymentTermsCreateUserError' | 'PaymentTermsDeleteUserError' | 'PaymentTermsUpdateUserError' | 'PriceListUserError' | 'PriceListPriceUserError' | 'PriceListFixedPricesByProductBulkUpdateUserError' | 'PriceRuleUserError' | 'ProductChangeStatusUserError' | 'MediaUserError' | 'ProductDeleteUserError' | 'ProductDuplicateUserError' | 'ProductFeedCreateUserError' | 'ProductFeedDeleteUserError' | 'ProductFullSyncUserError' | 'SellingPlanGroupUserError' | 'ProductVariantRelationshipBulkUpdateUserError' | 'ProductVariantsBulkCreateUserError' | 'ProductVariantsBulkDeleteUserError' | 'ProductVariantsBulkReorderUserError' | 'ProductVariantsBulkUpdateUserError' | 'PubSubWebhookSubscriptionCreateUserError' | 'PubSubWebhookSubscriptionUpdateUserError' | 'PublicationUserError' | 'QuantityPricingByVariantUserError' | 'QuantityRuleUserError' | 'ReturnUserError' | 'ShopPolicyUserError' | 'ShopResourceFeedbackCreateUserError' | 'StandardMetafieldDefinitionEnableUserError' | 'BillingAttemptUserError' | 'SubscriptionDraftUserError' | 'SubscriptionBillingCycleUserError' | 'SubscriptionBillingCycleSkipUserError' | 'SubscriptionBillingCycleUnskipUserError' | 'SubscriptionContractStatusUpdateUserError' | 'SubscriptionContractUserError' | 'TaxAppConfigureUserError' | 'UrlRedirectBulkDeleteByIdsUserError' | 'UrlRedirectBulkDeleteBySavedSearchUserError' | 'UrlRedirectBulkDeleteBySearchUserError' | 'UrlRedirectUserError' | 'UrlRedirectImportUserError' | 'ValidationUserError' | 'ErrorsWebPixelUserError';
  }
  export interface AppInstallationTypeResolver<TParent = any> {
    accessScopes?: AppInstallationToAccessScopesResolver<TParent>;
    activeSubscriptions?: AppInstallationToActiveSubscriptionsResolver<TParent>;
    allSubscriptions?: AppInstallationToAllSubscriptionsResolver<TParent>;
    app?: AppInstallationToAppResolver<TParent>;
    channel?: AppInstallationToChannelResolver<TParent>;
    credits?: AppInstallationToCreditsResolver<TParent>;
    id?: AppInstallationToIdResolver<TParent>;
    launchUrl?: AppInstallationToLaunchUrlResolver<TParent>;
    metafield?: AppInstallationToMetafieldResolver<TParent>;
    metafields?: AppInstallationToMetafieldsResolver<TParent>;
    oneTimePurchases?: AppInstallationToOneTimePurchasesResolver<TParent>;
    privateMetafield?: AppInstallationToPrivateMetafieldResolver<TParent>;
    privateMetafields?: AppInstallationToPrivateMetafieldsResolver<TParent>;
    publication?: AppInstallationToPublicationResolver<TParent>;
    revenueAttributionRecords?: AppInstallationToRevenueAttributionRecordsResolver<TParent>;
    subscriptions?: AppInstallationToSubscriptionsResolver<TParent>;
    uninstallUrl?: AppInstallationToUninstallUrlResolver<TParent>;
  }
  
  export interface AppInstallationToAccessScopesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToActiveSubscriptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToAllSubscriptionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: AppSubscriptionSortKeys;
  }
  export interface AppInstallationToAllSubscriptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AppInstallationToAllSubscriptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToCreditsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: AppTransactionSortKeys;
  }
  export interface AppInstallationToCreditsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AppInstallationToCreditsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToLaunchUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface AppInstallationToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AppInstallationToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface AppInstallationToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AppInstallationToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToOneTimePurchasesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: AppTransactionSortKeys;
  }
  export interface AppInstallationToOneTimePurchasesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AppInstallationToOneTimePurchasesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface AppInstallationToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AppInstallationToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface AppInstallationToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AppInstallationToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToRevenueAttributionRecordsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: AppRevenueAttributionRecordSortKeys;
  }
  export interface AppInstallationToRevenueAttributionRecordsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AppInstallationToRevenueAttributionRecordsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToSubscriptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationToUninstallUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionTypeResolver<TParent = any> {
    createdAt?: AppSubscriptionToCreatedAtResolver<TParent>;
    currentPeriodEnd?: AppSubscriptionToCurrentPeriodEndResolver<TParent>;
    id?: AppSubscriptionToIdResolver<TParent>;
    lineItems?: AppSubscriptionToLineItemsResolver<TParent>;
    name?: AppSubscriptionToNameResolver<TParent>;
    returnUrl?: AppSubscriptionToReturnUrlResolver<TParent>;
    status?: AppSubscriptionToStatusResolver<TParent>;
    test?: AppSubscriptionToTestResolver<TParent>;
    trialDays?: AppSubscriptionToTrialDaysResolver<TParent>;
  }
  
  export interface AppSubscriptionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionToCurrentPeriodEndResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionToReturnUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionToTestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionToTrialDaysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionLineItemTypeResolver<TParent = any> {
    id?: AppSubscriptionLineItemToIdResolver<TParent>;
    plan?: AppSubscriptionLineItemToPlanResolver<TParent>;
    usageRecords?: AppSubscriptionLineItemToUsageRecordsResolver<TParent>;
  }
  
  export interface AppSubscriptionLineItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionLineItemToPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionLineItemToUsageRecordsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: AppUsageRecordSortKeys;
  }
  export interface AppSubscriptionLineItemToUsageRecordsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AppSubscriptionLineItemToUsageRecordsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPlanV2TypeResolver<TParent = any> {
    pricingDetails?: AppPlanV2ToPricingDetailsResolver<TParent>;
  }
  
  export interface AppPlanV2ToPricingDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPricingDetailsTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'AppRecurringPricing' | 'AppUsagePricing';
  }
  export interface AppRecurringPricingTypeResolver<TParent = any> {
    discount?: AppRecurringPricingToDiscountResolver<TParent>;
    interval?: AppRecurringPricingToIntervalResolver<TParent>;
    price?: AppRecurringPricingToPriceResolver<TParent>;
  }
  
  export interface AppRecurringPricingToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRecurringPricingToIntervalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRecurringPricingToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionDiscountTypeResolver<TParent = any> {
    durationLimitInIntervals?: AppSubscriptionDiscountToDurationLimitInIntervalsResolver<TParent>;
    priceAfterDiscount?: AppSubscriptionDiscountToPriceAfterDiscountResolver<TParent>;
    remainingDurationInIntervals?: AppSubscriptionDiscountToRemainingDurationInIntervalsResolver<TParent>;
    value?: AppSubscriptionDiscountToValueResolver<TParent>;
  }
  
  export interface AppSubscriptionDiscountToDurationLimitInIntervalsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionDiscountToPriceAfterDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionDiscountToRemainingDurationInIntervalsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionDiscountToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionDiscountValueTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'AppSubscriptionDiscountAmount' | 'AppSubscriptionDiscountPercentage';
  }
  export interface AppSubscriptionDiscountAmountTypeResolver<TParent = any> {
    amount?: AppSubscriptionDiscountAmountToAmountResolver<TParent>;
  }
  
  export interface AppSubscriptionDiscountAmountToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionDiscountPercentageTypeResolver<TParent = any> {
    percentage?: AppSubscriptionDiscountPercentageToPercentageResolver<TParent>;
  }
  
  export interface AppSubscriptionDiscountPercentageToPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsagePricingTypeResolver<TParent = any> {
    balanceUsed?: AppUsagePricingToBalanceUsedResolver<TParent>;
    cappedAmount?: AppUsagePricingToCappedAmountResolver<TParent>;
    interval?: AppUsagePricingToIntervalResolver<TParent>;
    terms?: AppUsagePricingToTermsResolver<TParent>;
  }
  
  export interface AppUsagePricingToBalanceUsedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsagePricingToCappedAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsagePricingToIntervalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsagePricingToTermsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordConnectionTypeResolver<TParent = any> {
    edges?: AppUsageRecordConnectionToEdgesResolver<TParent>;
    nodes?: AppUsageRecordConnectionToNodesResolver<TParent>;
    pageInfo?: AppUsageRecordConnectionToPageInfoResolver<TParent>;
  }
  
  export interface AppUsageRecordConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordEdgeTypeResolver<TParent = any> {
    cursor?: AppUsageRecordEdgeToCursorResolver<TParent>;
    node?: AppUsageRecordEdgeToNodeResolver<TParent>;
  }
  
  export interface AppUsageRecordEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordTypeResolver<TParent = any> {
    createdAt?: AppUsageRecordToCreatedAtResolver<TParent>;
    description?: AppUsageRecordToDescriptionResolver<TParent>;
    id?: AppUsageRecordToIdResolver<TParent>;
    idempotencyKey?: AppUsageRecordToIdempotencyKeyResolver<TParent>;
    price?: AppUsageRecordToPriceResolver<TParent>;
    subscriptionLineItem?: AppUsageRecordToSubscriptionLineItemResolver<TParent>;
  }
  
  export interface AppUsageRecordToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordToIdempotencyKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordToSubscriptionLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionConnectionTypeResolver<TParent = any> {
    edges?: AppSubscriptionConnectionToEdgesResolver<TParent>;
    nodes?: AppSubscriptionConnectionToNodesResolver<TParent>;
    pageInfo?: AppSubscriptionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface AppSubscriptionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionEdgeTypeResolver<TParent = any> {
    cursor?: AppSubscriptionEdgeToCursorResolver<TParent>;
    node?: AppSubscriptionEdgeToNodeResolver<TParent>;
  }
  
  export interface AppSubscriptionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCreditConnectionTypeResolver<TParent = any> {
    edges?: AppCreditConnectionToEdgesResolver<TParent>;
    nodes?: AppCreditConnectionToNodesResolver<TParent>;
    pageInfo?: AppCreditConnectionToPageInfoResolver<TParent>;
  }
  
  export interface AppCreditConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCreditConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCreditConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCreditEdgeTypeResolver<TParent = any> {
    cursor?: AppCreditEdgeToCursorResolver<TParent>;
    node?: AppCreditEdgeToNodeResolver<TParent>;
  }
  
  export interface AppCreditEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCreditEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCreditTypeResolver<TParent = any> {
    amount?: AppCreditToAmountResolver<TParent>;
    createdAt?: AppCreditToCreatedAtResolver<TParent>;
    description?: AppCreditToDescriptionResolver<TParent>;
    id?: AppCreditToIdResolver<TParent>;
    test?: AppCreditToTestResolver<TParent>;
  }
  
  export interface AppCreditToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCreditToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCreditToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCreditToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCreditToTestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeConnectionTypeResolver<TParent = any> {
    edges?: AppPurchaseOneTimeConnectionToEdgesResolver<TParent>;
    nodes?: AppPurchaseOneTimeConnectionToNodesResolver<TParent>;
    pageInfo?: AppPurchaseOneTimeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface AppPurchaseOneTimeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeEdgeTypeResolver<TParent = any> {
    cursor?: AppPurchaseOneTimeEdgeToCursorResolver<TParent>;
    node?: AppPurchaseOneTimeEdgeToNodeResolver<TParent>;
  }
  
  export interface AppPurchaseOneTimeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeTypeResolver<TParent = any> {
    createdAt?: AppPurchaseOneTimeToCreatedAtResolver<TParent>;
    id?: AppPurchaseOneTimeToIdResolver<TParent>;
    name?: AppPurchaseOneTimeToNameResolver<TParent>;
    price?: AppPurchaseOneTimeToPriceResolver<TParent>;
    status?: AppPurchaseOneTimeToStatusResolver<TParent>;
    test?: AppPurchaseOneTimeToTestResolver<TParent>;
  }
  
  export interface AppPurchaseOneTimeToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeToTestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'AppPurchaseOneTime';
  }
  export interface PrivateMetafieldTypeResolver<TParent = any> {
    createdAt?: PrivateMetafieldToCreatedAtResolver<TParent>;
    id?: PrivateMetafieldToIdResolver<TParent>;
    key?: PrivateMetafieldToKeyResolver<TParent>;
    namespace?: PrivateMetafieldToNamespaceResolver<TParent>;
    updatedAt?: PrivateMetafieldToUpdatedAtResolver<TParent>;
    value?: PrivateMetafieldToValueResolver<TParent>;
    valueType?: PrivateMetafieldToValueTypeResolver<TParent>;
  }
  
  export interface PrivateMetafieldToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldToNamespaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldToValueTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldConnectionTypeResolver<TParent = any> {
    edges?: PrivateMetafieldConnectionToEdgesResolver<TParent>;
    nodes?: PrivateMetafieldConnectionToNodesResolver<TParent>;
    pageInfo?: PrivateMetafieldConnectionToPageInfoResolver<TParent>;
  }
  
  export interface PrivateMetafieldConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldEdgeTypeResolver<TParent = any> {
    cursor?: PrivateMetafieldEdgeToCursorResolver<TParent>;
    node?: PrivateMetafieldEdgeToNodeResolver<TParent>;
  }
  
  export interface PrivateMetafieldEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationTypeResolver<TParent = any> {
    app?: PublicationToAppResolver<TParent>;
    autoPublish?: PublicationToAutoPublishResolver<TParent>;
    catalog?: PublicationToCatalogResolver<TParent>;
    collectionPublicationsV3?: PublicationToCollectionPublicationsV3Resolver<TParent>;
    collections?: PublicationToCollectionsResolver<TParent>;
    hasCollection?: PublicationToHasCollectionResolver<TParent>;
    id?: PublicationToIdResolver<TParent>;
    name?: PublicationToNameResolver<TParent>;
    operation?: PublicationToOperationResolver<TParent>;
    productPublicationsV3?: PublicationToProductPublicationsV3Resolver<TParent>;
    products?: PublicationToProductsResolver<TParent>;
    supportsFuturePublishing?: PublicationToSupportsFuturePublishingResolver<TParent>;
  }
  
  export interface PublicationToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationToAutoPublishResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationToCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationToCollectionPublicationsV3Args {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PublicationToCollectionPublicationsV3Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: PublicationToCollectionPublicationsV3Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationToCollectionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PublicationToCollectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PublicationToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationToHasCollectionArgs {
    id: string;
  }
  export interface PublicationToHasCollectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PublicationToHasCollectionArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationToOperationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationToProductPublicationsV3Args {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PublicationToProductPublicationsV3Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: PublicationToProductPublicationsV3Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PublicationToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PublicationToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationToSupportsFuturePublishingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionConnectionTypeResolver<TParent = any> {
    edges?: CollectionConnectionToEdgesResolver<TParent>;
    nodes?: CollectionConnectionToNodesResolver<TParent>;
    pageInfo?: CollectionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CollectionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionEdgeTypeResolver<TParent = any> {
    cursor?: CollectionEdgeToCursorResolver<TParent>;
    node?: CollectionEdgeToNodeResolver<TParent>;
  }
  
  export interface CollectionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationOperationTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'AddAllProductsOperation' | 'CatalogCsvOperation' | 'PublicationResourceOperation';
  }
  export interface AddAllProductsOperationTypeResolver<TParent = any> {
    id?: AddAllProductsOperationToIdResolver<TParent>;
    processedRowCount?: AddAllProductsOperationToProcessedRowCountResolver<TParent>;
    rowCount?: AddAllProductsOperationToRowCountResolver<TParent>;
    status?: AddAllProductsOperationToStatusResolver<TParent>;
  }
  
  export interface AddAllProductsOperationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AddAllProductsOperationToProcessedRowCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AddAllProductsOperationToRowCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AddAllProductsOperationToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogCsvOperationTypeResolver<TParent = any> {
    id?: CatalogCsvOperationToIdResolver<TParent>;
    processedRowCount?: CatalogCsvOperationToProcessedRowCountResolver<TParent>;
    rowCount?: CatalogCsvOperationToRowCountResolver<TParent>;
    status?: CatalogCsvOperationToStatusResolver<TParent>;
  }
  
  export interface CatalogCsvOperationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogCsvOperationToProcessedRowCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogCsvOperationToRowCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogCsvOperationToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationResourceOperationTypeResolver<TParent = any> {
    id?: PublicationResourceOperationToIdResolver<TParent>;
    processedRowCount?: PublicationResourceOperationToProcessedRowCountResolver<TParent>;
    rowCount?: PublicationResourceOperationToRowCountResolver<TParent>;
    status?: PublicationResourceOperationToStatusResolver<TParent>;
  }
  
  export interface PublicationResourceOperationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationResourceOperationToProcessedRowCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationResourceOperationToRowCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationResourceOperationToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionTypeResolver<TParent = any> {
    edges?: ProductConnectionToEdgesResolver<TParent>;
    nodes?: ProductConnectionToNodesResolver<TParent>;
    pageInfo?: ProductConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ProductConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductEdgeTypeResolver<TParent = any> {
    cursor?: ProductEdgeToCursorResolver<TParent>;
    node?: ProductEdgeToNodeResolver<TParent>;
  }
  
  export interface ProductEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordConnectionTypeResolver<TParent = any> {
    edges?: AppRevenueAttributionRecordConnectionToEdgesResolver<TParent>;
    nodes?: AppRevenueAttributionRecordConnectionToNodesResolver<TParent>;
    pageInfo?: AppRevenueAttributionRecordConnectionToPageInfoResolver<TParent>;
  }
  
  export interface AppRevenueAttributionRecordConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordEdgeTypeResolver<TParent = any> {
    cursor?: AppRevenueAttributionRecordEdgeToCursorResolver<TParent>;
    node?: AppRevenueAttributionRecordEdgeToNodeResolver<TParent>;
  }
  
  export interface AppRevenueAttributionRecordEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordTypeResolver<TParent = any> {
    amount?: AppRevenueAttributionRecordToAmountResolver<TParent>;
    capturedAt?: AppRevenueAttributionRecordToCapturedAtResolver<TParent>;
    createdAt?: AppRevenueAttributionRecordToCreatedAtResolver<TParent>;
    id?: AppRevenueAttributionRecordToIdResolver<TParent>;
    idempotencyKey?: AppRevenueAttributionRecordToIdempotencyKeyResolver<TParent>;
    test?: AppRevenueAttributionRecordToTestResolver<TParent>;
    type?: AppRevenueAttributionRecordToTypeResolver<TParent>;
  }
  
  export interface AppRevenueAttributionRecordToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordToCapturedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordToIdempotencyKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordToTestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppRevenueAttributionRecordToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublicationConnectionTypeResolver<TParent = any> {
    edges?: ProductPublicationConnectionToEdgesResolver<TParent>;
    nodes?: ProductPublicationConnectionToNodesResolver<TParent>;
    pageInfo?: ProductPublicationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ProductPublicationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublicationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublicationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublicationEdgeTypeResolver<TParent = any> {
    cursor?: ProductPublicationEdgeToCursorResolver<TParent>;
    node?: ProductPublicationEdgeToNodeResolver<TParent>;
  }
  
  export interface ProductPublicationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublicationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublicationTypeResolver<TParent = any> {
    channel?: ProductPublicationToChannelResolver<TParent>;
    isPublished?: ProductPublicationToIsPublishedResolver<TParent>;
    product?: ProductPublicationToProductResolver<TParent>;
    publishDate?: ProductPublicationToPublishDateResolver<TParent>;
  }
  
  export interface ProductPublicationToChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublicationToIsPublishedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublicationToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublicationToPublishDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationV2ConnectionTypeResolver<TParent = any> {
    edges?: ResourcePublicationV2ConnectionToEdgesResolver<TParent>;
    nodes?: ResourcePublicationV2ConnectionToNodesResolver<TParent>;
    pageInfo?: ResourcePublicationV2ConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ResourcePublicationV2ConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationV2ConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationV2ConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationV2EdgeTypeResolver<TParent = any> {
    cursor?: ResourcePublicationV2EdgeToCursorResolver<TParent>;
    node?: ResourcePublicationV2EdgeToNodeResolver<TParent>;
  }
  
  export interface ResourcePublicationV2EdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationV2EdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationV2TypeResolver<TParent = any> {
    isPublished?: ResourcePublicationV2ToIsPublishedResolver<TParent>;
    publication?: ResourcePublicationV2ToPublicationResolver<TParent>;
    publishDate?: ResourcePublicationV2ToPublishDateResolver<TParent>;
    publishable?: ResourcePublicationV2ToPublishableResolver<TParent>;
  }
  
  export interface ResourcePublicationV2ToIsPublishedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationV2ToPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationV2ToPublishDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourcePublicationV2ToPublishableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelConnectionTypeResolver<TParent = any> {
    edges?: ChannelConnectionToEdgesResolver<TParent>;
    nodes?: ChannelConnectionToNodesResolver<TParent>;
    pageInfo?: ChannelConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ChannelConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelEdgeTypeResolver<TParent = any> {
    cursor?: ChannelEdgeToCursorResolver<TParent>;
    node?: ChannelEdgeToNodeResolver<TParent>;
  }
  
  export interface ChannelEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationConnectionTypeResolver<TParent = any> {
    edges?: PublicationConnectionToEdgesResolver<TParent>;
    nodes?: PublicationConnectionToNodesResolver<TParent>;
    pageInfo?: PublicationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface PublicationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationEdgeTypeResolver<TParent = any> {
    cursor?: PublicationEdgeToCursorResolver<TParent>;
    node?: PublicationEdgeToNodeResolver<TParent>;
  }
  
  export interface PublicationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCompareAtPriceRangeTypeResolver<TParent = any> {
    maxVariantCompareAtPrice?: ProductCompareAtPriceRangeToMaxVariantCompareAtPriceResolver<TParent>;
    minVariantCompareAtPrice?: ProductCompareAtPriceRangeToMinVariantCompareAtPriceResolver<TParent>;
  }
  
  export interface ProductCompareAtPriceRangeToMaxVariantCompareAtPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCompareAtPriceRangeToMinVariantCompareAtPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductContextualPricingTypeResolver<TParent = any> {
    fixedQuantityRulesCount?: ProductContextualPricingToFixedQuantityRulesCountResolver<TParent>;
    maxVariantPricing?: ProductContextualPricingToMaxVariantPricingResolver<TParent>;
    minVariantPricing?: ProductContextualPricingToMinVariantPricingResolver<TParent>;
    priceRange?: ProductContextualPricingToPriceRangeResolver<TParent>;
  }
  
  export interface ProductContextualPricingToFixedQuantityRulesCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductContextualPricingToMaxVariantPricingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductContextualPricingToMinVariantPricingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductContextualPricingToPriceRangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPriceRangeV2TypeResolver<TParent = any> {
    maxVariantPrice?: ProductPriceRangeV2ToMaxVariantPriceResolver<TParent>;
    minVariantPrice?: ProductPriceRangeV2ToMinVariantPriceResolver<TParent>;
  }
  
  export interface ProductPriceRangeV2ToMaxVariantPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPriceRangeV2ToMinVariantPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'MediaImage' | 'Video' | 'ExternalVideo' | 'Model3d';
  }
  export interface MediaErrorTypeResolver<TParent = any> {
    code?: MediaErrorToCodeResolver<TParent>;
    details?: MediaErrorToDetailsResolver<TParent>;
    message?: MediaErrorToMessageResolver<TParent>;
  }
  
  export interface MediaErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaErrorToDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaWarningTypeResolver<TParent = any> {
    code?: MediaWarningToCodeResolver<TParent>;
    message?: MediaWarningToMessageResolver<TParent>;
  }
  
  export interface MediaWarningToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaWarningToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaPreviewImageTypeResolver<TParent = any> {
    image?: MediaPreviewImageToImageResolver<TParent>;
    status?: MediaPreviewImageToStatusResolver<TParent>;
  }
  
  export interface MediaPreviewImageToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaPreviewImageToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceFeedbackTypeResolver<TParent = any> {
    appFeedback?: ResourceFeedbackToAppFeedbackResolver<TParent>;
    details?: ResourceFeedbackToDetailsResolver<TParent>;
    summary?: ResourceFeedbackToSummaryResolver<TParent>;
  }
  
  export interface ResourceFeedbackToAppFeedbackResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceFeedbackToDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceFeedbackToSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageConnectionTypeResolver<TParent = any> {
    edges?: ImageConnectionToEdgesResolver<TParent>;
    nodes?: ImageConnectionToNodesResolver<TParent>;
    pageInfo?: ImageConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ImageConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageEdgeTypeResolver<TParent = any> {
    cursor?: ImageEdgeToCursorResolver<TParent>;
    node?: ImageEdgeToNodeResolver<TParent>;
  }
  
  export interface ImageEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaConnectionTypeResolver<TParent = any> {
    edges?: MediaConnectionToEdgesResolver<TParent>;
    nodes?: MediaConnectionToNodesResolver<TParent>;
    pageInfo?: MediaConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MediaConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaEdgeTypeResolver<TParent = any> {
    cursor?: MediaEdgeToCursorResolver<TParent>;
    node?: MediaEdgeToNodeResolver<TParent>;
  }
  
  export interface MediaEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductOptionTypeResolver<TParent = any> {
    id?: ProductOptionToIdResolver<TParent>;
    name?: ProductOptionToNameResolver<TParent>;
    position?: ProductOptionToPositionResolver<TParent>;
    translations?: ProductOptionToTranslationsResolver<TParent>;
    values?: ProductOptionToValuesResolver<TParent>;
  }
  
  export interface ProductOptionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductOptionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductOptionToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductOptionToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface ProductOptionToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ProductOptionToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductOptionToValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPriceRangeTypeResolver<TParent = any> {
    maxVariantPrice?: ProductPriceRangeToMaxVariantPriceResolver<TParent>;
    minVariantPrice?: ProductPriceRangeToMinVariantPriceResolver<TParent>;
  }
  
  export interface ProductPriceRangeToMaxVariantPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPriceRangeToMinVariantPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCategoryTypeResolver<TParent = any> {
    productTaxonomyNode?: ProductCategoryToProductTaxonomyNodeResolver<TParent>;
  }
  
  export interface ProductCategoryToProductTaxonomyNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductTaxonomyNodeTypeResolver<TParent = any> {
    fullName?: ProductTaxonomyNodeToFullNameResolver<TParent>;
    id?: ProductTaxonomyNodeToIdResolver<TParent>;
    isLeaf?: ProductTaxonomyNodeToIsLeafResolver<TParent>;
    isRoot?: ProductTaxonomyNodeToIsRootResolver<TParent>;
    name?: ProductTaxonomyNodeToNameResolver<TParent>;
  }
  
  export interface ProductTaxonomyNodeToFullNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductTaxonomyNodeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductTaxonomyNodeToIsLeafResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductTaxonomyNodeToIsRootResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductTaxonomyNodeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupConnectionTypeResolver<TParent = any> {
    edges?: SellingPlanGroupConnectionToEdgesResolver<TParent>;
    nodes?: SellingPlanGroupConnectionToNodesResolver<TParent>;
    pageInfo?: SellingPlanGroupConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SellingPlanGroupConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupEdgeTypeResolver<TParent = any> {
    cursor?: SellingPlanGroupEdgeToCursorResolver<TParent>;
    node?: SellingPlanGroupEdgeToNodeResolver<TParent>;
  }
  
  export interface SellingPlanGroupEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupTypeResolver<TParent = any> {
    appId?: SellingPlanGroupToAppIdResolver<TParent>;
    appliesToProduct?: SellingPlanGroupToAppliesToProductResolver<TParent>;
    appliesToProductVariant?: SellingPlanGroupToAppliesToProductVariantResolver<TParent>;
    appliesToProductVariants?: SellingPlanGroupToAppliesToProductVariantsResolver<TParent>;
    createdAt?: SellingPlanGroupToCreatedAtResolver<TParent>;
    description?: SellingPlanGroupToDescriptionResolver<TParent>;
    id?: SellingPlanGroupToIdResolver<TParent>;
    merchantCode?: SellingPlanGroupToMerchantCodeResolver<TParent>;
    name?: SellingPlanGroupToNameResolver<TParent>;
    options?: SellingPlanGroupToOptionsResolver<TParent>;
    position?: SellingPlanGroupToPositionResolver<TParent>;
    productCount?: SellingPlanGroupToProductCountResolver<TParent>;
    productVariantCount?: SellingPlanGroupToProductVariantCountResolver<TParent>;
    productVariants?: SellingPlanGroupToProductVariantsResolver<TParent>;
    products?: SellingPlanGroupToProductsResolver<TParent>;
    sellingPlans?: SellingPlanGroupToSellingPlansResolver<TParent>;
    summary?: SellingPlanGroupToSummaryResolver<TParent>;
    translations?: SellingPlanGroupToTranslationsResolver<TParent>;
  }
  
  export interface SellingPlanGroupToAppIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToAppliesToProductArgs {
    productId: string;
  }
  export interface SellingPlanGroupToAppliesToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SellingPlanGroupToAppliesToProductArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToAppliesToProductVariantArgs {
    productVariantId: string;
  }
  export interface SellingPlanGroupToAppliesToProductVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SellingPlanGroupToAppliesToProductVariantArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToAppliesToProductVariantsArgs {
    productId: string;
  }
  export interface SellingPlanGroupToAppliesToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SellingPlanGroupToAppliesToProductVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToMerchantCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToProductCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToProductVariantCountArgs {
    productId?: string;
  }
  export interface SellingPlanGroupToProductVariantCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SellingPlanGroupToProductVariantCountArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToProductVariantsArgs {
    productId?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SellingPlanGroupToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SellingPlanGroupToProductVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SellingPlanGroupToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SellingPlanGroupToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToSellingPlansArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SellingPlanGroupToSellingPlansResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SellingPlanGroupToSellingPlansArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface SellingPlanGroupToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SellingPlanGroupToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantConnectionTypeResolver<TParent = any> {
    edges?: ProductVariantConnectionToEdgesResolver<TParent>;
    nodes?: ProductVariantConnectionToNodesResolver<TParent>;
    pageInfo?: ProductVariantConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ProductVariantConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantEdgeTypeResolver<TParent = any> {
    cursor?: ProductVariantEdgeToCursorResolver<TParent>;
    node?: ProductVariantEdgeToNodeResolver<TParent>;
  }
  
  export interface ProductVariantEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanConnectionTypeResolver<TParent = any> {
    edges?: SellingPlanConnectionToEdgesResolver<TParent>;
    nodes?: SellingPlanConnectionToNodesResolver<TParent>;
    pageInfo?: SellingPlanConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SellingPlanConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanEdgeTypeResolver<TParent = any> {
    cursor?: SellingPlanEdgeToCursorResolver<TParent>;
    node?: SellingPlanEdgeToNodeResolver<TParent>;
  }
  
  export interface SellingPlanEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanTypeResolver<TParent = any> {
    billingPolicy?: SellingPlanToBillingPolicyResolver<TParent>;
    category?: SellingPlanToCategoryResolver<TParent>;
    createdAt?: SellingPlanToCreatedAtResolver<TParent>;
    deliveryPolicy?: SellingPlanToDeliveryPolicyResolver<TParent>;
    description?: SellingPlanToDescriptionResolver<TParent>;
    id?: SellingPlanToIdResolver<TParent>;
    inventoryPolicy?: SellingPlanToInventoryPolicyResolver<TParent>;
    name?: SellingPlanToNameResolver<TParent>;
    options?: SellingPlanToOptionsResolver<TParent>;
    position?: SellingPlanToPositionResolver<TParent>;
    pricingPolicies?: SellingPlanToPricingPoliciesResolver<TParent>;
    translations?: SellingPlanToTranslationsResolver<TParent>;
  }
  
  export interface SellingPlanToBillingPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanToCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanToDeliveryPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanToInventoryPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanToOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanToPricingPoliciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface SellingPlanToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SellingPlanToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanBillingPolicyTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SellingPlanFixedBillingPolicy' | 'SellingPlanRecurringBillingPolicy';
  }
  export interface SellingPlanFixedBillingPolicyTypeResolver<TParent = any> {
    checkoutCharge?: SellingPlanFixedBillingPolicyToCheckoutChargeResolver<TParent>;
    remainingBalanceChargeExactTime?: SellingPlanFixedBillingPolicyToRemainingBalanceChargeExactTimeResolver<TParent>;
    remainingBalanceChargeTimeAfterCheckout?: SellingPlanFixedBillingPolicyToRemainingBalanceChargeTimeAfterCheckoutResolver<TParent>;
    remainingBalanceChargeTrigger?: SellingPlanFixedBillingPolicyToRemainingBalanceChargeTriggerResolver<TParent>;
  }
  
  export interface SellingPlanFixedBillingPolicyToCheckoutChargeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanFixedBillingPolicyToRemainingBalanceChargeExactTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanFixedBillingPolicyToRemainingBalanceChargeTimeAfterCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanFixedBillingPolicyToRemainingBalanceChargeTriggerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanCheckoutChargeTypeResolver<TParent = any> {
    type?: SellingPlanCheckoutChargeToTypeResolver<TParent>;
    value?: SellingPlanCheckoutChargeToValueResolver<TParent>;
  }
  
  export interface SellingPlanCheckoutChargeToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanCheckoutChargeToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanCheckoutChargeValueTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'MoneyV2' | 'SellingPlanCheckoutChargePercentageValue';
  }
  export interface SellingPlanCheckoutChargePercentageValueTypeResolver<TParent = any> {
    percentage?: SellingPlanCheckoutChargePercentageValueToPercentageResolver<TParent>;
  }
  
  export interface SellingPlanCheckoutChargePercentageValueToPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringBillingPolicyTypeResolver<TParent = any> {
    anchors?: SellingPlanRecurringBillingPolicyToAnchorsResolver<TParent>;
    createdAt?: SellingPlanRecurringBillingPolicyToCreatedAtResolver<TParent>;
    interval?: SellingPlanRecurringBillingPolicyToIntervalResolver<TParent>;
    intervalCount?: SellingPlanRecurringBillingPolicyToIntervalCountResolver<TParent>;
    maxCycles?: SellingPlanRecurringBillingPolicyToMaxCyclesResolver<TParent>;
    minCycles?: SellingPlanRecurringBillingPolicyToMinCyclesResolver<TParent>;
  }
  
  export interface SellingPlanRecurringBillingPolicyToAnchorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringBillingPolicyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringBillingPolicyToIntervalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringBillingPolicyToIntervalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringBillingPolicyToMaxCyclesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringBillingPolicyToMinCyclesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanAnchorTypeResolver<TParent = any> {
    cutoffDay?: SellingPlanAnchorToCutoffDayResolver<TParent>;
    day?: SellingPlanAnchorToDayResolver<TParent>;
    month?: SellingPlanAnchorToMonthResolver<TParent>;
    type?: SellingPlanAnchorToTypeResolver<TParent>;
  }
  
  export interface SellingPlanAnchorToCutoffDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanAnchorToDayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanAnchorToMonthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanAnchorToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanDeliveryPolicyTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SellingPlanFixedDeliveryPolicy' | 'SellingPlanRecurringDeliveryPolicy';
  }
  export interface SellingPlanFixedDeliveryPolicyTypeResolver<TParent = any> {
    anchors?: SellingPlanFixedDeliveryPolicyToAnchorsResolver<TParent>;
    cutoff?: SellingPlanFixedDeliveryPolicyToCutoffResolver<TParent>;
    fulfillmentExactTime?: SellingPlanFixedDeliveryPolicyToFulfillmentExactTimeResolver<TParent>;
    fulfillmentTrigger?: SellingPlanFixedDeliveryPolicyToFulfillmentTriggerResolver<TParent>;
    intent?: SellingPlanFixedDeliveryPolicyToIntentResolver<TParent>;
    preAnchorBehavior?: SellingPlanFixedDeliveryPolicyToPreAnchorBehaviorResolver<TParent>;
  }
  
  export interface SellingPlanFixedDeliveryPolicyToAnchorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanFixedDeliveryPolicyToCutoffResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanFixedDeliveryPolicyToFulfillmentExactTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanFixedDeliveryPolicyToFulfillmentTriggerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanFixedDeliveryPolicyToIntentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanFixedDeliveryPolicyToPreAnchorBehaviorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringDeliveryPolicyTypeResolver<TParent = any> {
    anchors?: SellingPlanRecurringDeliveryPolicyToAnchorsResolver<TParent>;
    createdAt?: SellingPlanRecurringDeliveryPolicyToCreatedAtResolver<TParent>;
    cutoff?: SellingPlanRecurringDeliveryPolicyToCutoffResolver<TParent>;
    intent?: SellingPlanRecurringDeliveryPolicyToIntentResolver<TParent>;
    interval?: SellingPlanRecurringDeliveryPolicyToIntervalResolver<TParent>;
    intervalCount?: SellingPlanRecurringDeliveryPolicyToIntervalCountResolver<TParent>;
    preAnchorBehavior?: SellingPlanRecurringDeliveryPolicyToPreAnchorBehaviorResolver<TParent>;
  }
  
  export interface SellingPlanRecurringDeliveryPolicyToAnchorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringDeliveryPolicyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringDeliveryPolicyToCutoffResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringDeliveryPolicyToIntentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringDeliveryPolicyToIntervalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringDeliveryPolicyToIntervalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringDeliveryPolicyToPreAnchorBehaviorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanInventoryPolicyTypeResolver<TParent = any> {
    reserve?: SellingPlanInventoryPolicyToReserveResolver<TParent>;
  }
  
  export interface SellingPlanInventoryPolicyToReserveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanPricingPolicyTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SellingPlanFixedPricingPolicy' | 'SellingPlanRecurringPricingPolicy';
  }
  export interface SellingPlanFixedPricingPolicyTypeResolver<TParent = any> {
    adjustmentType?: SellingPlanFixedPricingPolicyToAdjustmentTypeResolver<TParent>;
    adjustmentValue?: SellingPlanFixedPricingPolicyToAdjustmentValueResolver<TParent>;
    createdAt?: SellingPlanFixedPricingPolicyToCreatedAtResolver<TParent>;
  }
  
  export interface SellingPlanFixedPricingPolicyToAdjustmentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanFixedPricingPolicyToAdjustmentValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanFixedPricingPolicyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanPricingPolicyBaseTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SellingPlanFixedPricingPolicy' | 'SellingPlanRecurringPricingPolicy';
  }
  export interface SellingPlanPricingPolicyAdjustmentValueTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'MoneyV2' | 'SellingPlanPricingPolicyPercentageValue';
  }
  export interface SellingPlanPricingPolicyPercentageValueTypeResolver<TParent = any> {
    percentage?: SellingPlanPricingPolicyPercentageValueToPercentageResolver<TParent>;
  }
  
  export interface SellingPlanPricingPolicyPercentageValueToPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringPricingPolicyTypeResolver<TParent = any> {
    adjustmentType?: SellingPlanRecurringPricingPolicyToAdjustmentTypeResolver<TParent>;
    adjustmentValue?: SellingPlanRecurringPricingPolicyToAdjustmentValueResolver<TParent>;
    afterCycle?: SellingPlanRecurringPricingPolicyToAfterCycleResolver<TParent>;
    createdAt?: SellingPlanRecurringPricingPolicyToCreatedAtResolver<TParent>;
  }
  
  export interface SellingPlanRecurringPricingPolicyToAdjustmentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringPricingPolicyToAdjustmentValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringPricingPolicyToAfterCycleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanRecurringPricingPolicyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SEOTypeResolver<TParent = any> {
    description?: SEOToDescriptionResolver<TParent>;
    title?: SEOToTitleResolver<TParent>;
  }
  
  export interface SEOToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SEOToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardizedProductTypeTypeResolver<TParent = any> {
    productTaxonomyNode?: StandardizedProductTypeToProductTaxonomyNodeResolver<TParent>;
  }
  
  export interface StandardizedProductTypeToProductTaxonomyNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileLocationGroupTypeResolver<TParent = any> {
    countriesInAnyZone?: DeliveryProfileLocationGroupToCountriesInAnyZoneResolver<TParent>;
    locationGroup?: DeliveryProfileLocationGroupToLocationGroupResolver<TParent>;
    locationGroupZones?: DeliveryProfileLocationGroupToLocationGroupZonesResolver<TParent>;
  }
  
  export interface DeliveryProfileLocationGroupToCountriesInAnyZoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileLocationGroupToLocationGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileLocationGroupToLocationGroupZonesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DeliveryProfileLocationGroupToLocationGroupZonesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryProfileLocationGroupToLocationGroupZonesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCountryAndZoneTypeResolver<TParent = any> {
    country?: DeliveryCountryAndZoneToCountryResolver<TParent>;
    zone?: DeliveryCountryAndZoneToZoneResolver<TParent>;
  }
  
  export interface DeliveryCountryAndZoneToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCountryAndZoneToZoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCountryTypeResolver<TParent = any> {
    code?: DeliveryCountryToCodeResolver<TParent>;
    id?: DeliveryCountryToIdResolver<TParent>;
    name?: DeliveryCountryToNameResolver<TParent>;
    provinces?: DeliveryCountryToProvincesResolver<TParent>;
    translatedName?: DeliveryCountryToTranslatedNameResolver<TParent>;
  }
  
  export interface DeliveryCountryToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCountryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCountryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCountryToProvincesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCountryToTranslatedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCountryCodeOrRestOfWorldTypeResolver<TParent = any> {
    countryCode?: DeliveryCountryCodeOrRestOfWorldToCountryCodeResolver<TParent>;
    restOfWorld?: DeliveryCountryCodeOrRestOfWorldToRestOfWorldResolver<TParent>;
  }
  
  export interface DeliveryCountryCodeOrRestOfWorldToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCountryCodeOrRestOfWorldToRestOfWorldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProvinceTypeResolver<TParent = any> {
    code?: DeliveryProvinceToCodeResolver<TParent>;
    id?: DeliveryProvinceToIdResolver<TParent>;
    name?: DeliveryProvinceToNameResolver<TParent>;
    translatedName?: DeliveryProvinceToTranslatedNameResolver<TParent>;
  }
  
  export interface DeliveryProvinceToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProvinceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProvinceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProvinceToTranslatedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationGroupTypeResolver<TParent = any> {
    id?: DeliveryLocationGroupToIdResolver<TParent>;
    locations?: DeliveryLocationGroupToLocationsResolver<TParent>;
    locationsCount?: DeliveryLocationGroupToLocationsCountResolver<TParent>;
  }
  
  export interface DeliveryLocationGroupToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationGroupToLocationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: LocationSortKeys;
    query?: string;
    includeLegacy?: boolean;
    includeInactive?: boolean;
  }
  export interface DeliveryLocationGroupToLocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryLocationGroupToLocationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationGroupToLocationsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationConnectionTypeResolver<TParent = any> {
    edges?: LocationConnectionToEdgesResolver<TParent>;
    nodes?: LocationConnectionToNodesResolver<TParent>;
    pageInfo?: LocationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface LocationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationEdgeTypeResolver<TParent = any> {
    cursor?: LocationEdgeToCursorResolver<TParent>;
    node?: LocationEdgeToNodeResolver<TParent>;
  }
  
  export interface LocationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationTypeResolver<TParent = any> {
    activatable?: LocationToActivatableResolver<TParent>;
    address?: LocationToAddressResolver<TParent>;
    addressVerified?: LocationToAddressVerifiedResolver<TParent>;
    deactivatable?: LocationToDeactivatableResolver<TParent>;
    deactivatedAt?: LocationToDeactivatedAtResolver<TParent>;
    deletable?: LocationToDeletableResolver<TParent>;
    fulfillmentService?: LocationToFulfillmentServiceResolver<TParent>;
    fulfillsOnlineOrders?: LocationToFulfillsOnlineOrdersResolver<TParent>;
    hasActiveInventory?: LocationToHasActiveInventoryResolver<TParent>;
    hasUnfulfilledOrders?: LocationToHasUnfulfilledOrdersResolver<TParent>;
    id?: LocationToIdResolver<TParent>;
    inventoryLevel?: LocationToInventoryLevelResolver<TParent>;
    inventoryLevels?: LocationToInventoryLevelsResolver<TParent>;
    isActive?: LocationToIsActiveResolver<TParent>;
    isPrimary?: LocationToIsPrimaryResolver<TParent>;
    legacyResourceId?: LocationToLegacyResourceIdResolver<TParent>;
    localPickupSettingsV2?: LocationToLocalPickupSettingsV2Resolver<TParent>;
    metafield?: LocationToMetafieldResolver<TParent>;
    metafieldDefinitions?: LocationToMetafieldDefinitionsResolver<TParent>;
    metafields?: LocationToMetafieldsResolver<TParent>;
    name?: LocationToNameResolver<TParent>;
    privateMetafield?: LocationToPrivateMetafieldResolver<TParent>;
    privateMetafields?: LocationToPrivateMetafieldsResolver<TParent>;
    shipsInventory?: LocationToShipsInventoryResolver<TParent>;
    suggestedAddresses?: LocationToSuggestedAddressesResolver<TParent>;
  }
  
  export interface LocationToActivatableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToAddressVerifiedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToDeactivatableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToDeactivatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToDeletableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToFulfillmentServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToFulfillsOnlineOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToHasActiveInventoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToHasUnfulfilledOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToInventoryLevelArgs {
    inventoryItemId: string;
  }
  export interface LocationToInventoryLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: LocationToInventoryLevelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToInventoryLevelsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface LocationToInventoryLevelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: LocationToInventoryLevelsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToIsActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToIsPrimaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToLocalPickupSettingsV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface LocationToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: LocationToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface LocationToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: LocationToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface LocationToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: LocationToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface LocationToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: LocationToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface LocationToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: LocationToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToShipsInventoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationToSuggestedAddressesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressTypeResolver<TParent = any> {
    address1?: LocationAddressToAddress1Resolver<TParent>;
    address2?: LocationAddressToAddress2Resolver<TParent>;
    city?: LocationAddressToCityResolver<TParent>;
    country?: LocationAddressToCountryResolver<TParent>;
    countryCode?: LocationAddressToCountryCodeResolver<TParent>;
    formatted?: LocationAddressToFormattedResolver<TParent>;
    latitude?: LocationAddressToLatitudeResolver<TParent>;
    longitude?: LocationAddressToLongitudeResolver<TParent>;
    phone?: LocationAddressToPhoneResolver<TParent>;
    province?: LocationAddressToProvinceResolver<TParent>;
    provinceCode?: LocationAddressToProvinceCodeResolver<TParent>;
    zip?: LocationAddressToZipResolver<TParent>;
  }
  
  export interface LocationAddressToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressToFormattedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressToLatitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressToLongitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressToProvinceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddressToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceTypeResolver<TParent = any> {
    callbackUrl?: FulfillmentServiceToCallbackUrlResolver<TParent>;
    fulfillmentOrdersOptIn?: FulfillmentServiceToFulfillmentOrdersOptInResolver<TParent>;
    handle?: FulfillmentServiceToHandleResolver<TParent>;
    id?: FulfillmentServiceToIdResolver<TParent>;
    inventoryManagement?: FulfillmentServiceToInventoryManagementResolver<TParent>;
    location?: FulfillmentServiceToLocationResolver<TParent>;
    permitsSkuSharing?: FulfillmentServiceToPermitsSkuSharingResolver<TParent>;
    productBased?: FulfillmentServiceToProductBasedResolver<TParent>;
    serviceName?: FulfillmentServiceToServiceNameResolver<TParent>;
    shippingMethods?: FulfillmentServiceToShippingMethodsResolver<TParent>;
    type?: FulfillmentServiceToTypeResolver<TParent>;
  }
  
  export interface FulfillmentServiceToCallbackUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceToFulfillmentOrdersOptInResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceToInventoryManagementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceToPermitsSkuSharingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceToProductBasedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceToServiceNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceToShippingMethodsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingMethodTypeResolver<TParent = any> {
    code?: ShippingMethodToCodeResolver<TParent>;
    label?: ShippingMethodToLabelResolver<TParent>;
  }
  
  export interface ShippingMethodToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingMethodToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelTypeResolver<TParent = any> {
    available?: InventoryLevelToAvailableResolver<TParent>;
    canDeactivate?: InventoryLevelToCanDeactivateResolver<TParent>;
    createdAt?: InventoryLevelToCreatedAtResolver<TParent>;
    deactivationAlert?: InventoryLevelToDeactivationAlertResolver<TParent>;
    deactivationAlertHtml?: InventoryLevelToDeactivationAlertHtmlResolver<TParent>;
    id?: InventoryLevelToIdResolver<TParent>;
    incoming?: InventoryLevelToIncomingResolver<TParent>;
    item?: InventoryLevelToItemResolver<TParent>;
    location?: InventoryLevelToLocationResolver<TParent>;
    quantities?: InventoryLevelToQuantitiesResolver<TParent>;
    scheduledChanges?: InventoryLevelToScheduledChangesResolver<TParent>;
    updatedAt?: InventoryLevelToUpdatedAtResolver<TParent>;
  }
  
  export interface InventoryLevelToAvailableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelToCanDeactivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelToDeactivationAlertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelToDeactivationAlertHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelToIncomingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelToItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelToQuantitiesArgs {
    names: Array<string>;
  }
  export interface InventoryLevelToQuantitiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: InventoryLevelToQuantitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelToScheduledChangesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ScheduledChangeSortKeys;
    query?: string;
  }
  export interface InventoryLevelToScheduledChangesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: InventoryLevelToScheduledChangesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemTypeResolver<TParent = any> {
    countryCodeOfOrigin?: InventoryItemToCountryCodeOfOriginResolver<TParent>;
    countryHarmonizedSystemCodes?: InventoryItemToCountryHarmonizedSystemCodesResolver<TParent>;
    createdAt?: InventoryItemToCreatedAtResolver<TParent>;
    duplicateSkuCount?: InventoryItemToDuplicateSkuCountResolver<TParent>;
    harmonizedSystemCode?: InventoryItemToHarmonizedSystemCodeResolver<TParent>;
    id?: InventoryItemToIdResolver<TParent>;
    inventoryHistoryUrl?: InventoryItemToInventoryHistoryUrlResolver<TParent>;
    inventoryLevel?: InventoryItemToInventoryLevelResolver<TParent>;
    inventoryLevels?: InventoryItemToInventoryLevelsResolver<TParent>;
    legacyResourceId?: InventoryItemToLegacyResourceIdResolver<TParent>;
    locationsCount?: InventoryItemToLocationsCountResolver<TParent>;
    provinceCodeOfOrigin?: InventoryItemToProvinceCodeOfOriginResolver<TParent>;
    requiresShipping?: InventoryItemToRequiresShippingResolver<TParent>;
    sku?: InventoryItemToSkuResolver<TParent>;
    tracked?: InventoryItemToTrackedResolver<TParent>;
    trackedEditable?: InventoryItemToTrackedEditableResolver<TParent>;
    unitCost?: InventoryItemToUnitCostResolver<TParent>;
    updatedAt?: InventoryItemToUpdatedAtResolver<TParent>;
    variant?: InventoryItemToVariantResolver<TParent>;
  }
  
  export interface InventoryItemToCountryCodeOfOriginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToCountryHarmonizedSystemCodesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface InventoryItemToCountryHarmonizedSystemCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: InventoryItemToCountryHarmonizedSystemCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToDuplicateSkuCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToHarmonizedSystemCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToInventoryHistoryUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToInventoryLevelArgs {
    locationId: string;
  }
  export interface InventoryItemToInventoryLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: InventoryItemToInventoryLevelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToInventoryLevelsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface InventoryItemToInventoryLevelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: InventoryItemToInventoryLevelsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToLocationsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToProvinceCodeOfOriginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToTrackedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToTrackedEditableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToUnitCostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CountryHarmonizedSystemCodeConnectionTypeResolver<TParent = any> {
    edges?: CountryHarmonizedSystemCodeConnectionToEdgesResolver<TParent>;
    nodes?: CountryHarmonizedSystemCodeConnectionToNodesResolver<TParent>;
    pageInfo?: CountryHarmonizedSystemCodeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CountryHarmonizedSystemCodeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CountryHarmonizedSystemCodeConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CountryHarmonizedSystemCodeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CountryHarmonizedSystemCodeEdgeTypeResolver<TParent = any> {
    cursor?: CountryHarmonizedSystemCodeEdgeToCursorResolver<TParent>;
    node?: CountryHarmonizedSystemCodeEdgeToNodeResolver<TParent>;
  }
  
  export interface CountryHarmonizedSystemCodeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CountryHarmonizedSystemCodeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CountryHarmonizedSystemCodeTypeResolver<TParent = any> {
    countryCode?: CountryHarmonizedSystemCodeToCountryCodeResolver<TParent>;
    harmonizedSystemCode?: CountryHarmonizedSystemCodeToHarmonizedSystemCodeResolver<TParent>;
  }
  
  export interface CountryHarmonizedSystemCodeToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CountryHarmonizedSystemCodeToHarmonizedSystemCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelConnectionTypeResolver<TParent = any> {
    edges?: InventoryLevelConnectionToEdgesResolver<TParent>;
    nodes?: InventoryLevelConnectionToNodesResolver<TParent>;
    pageInfo?: InventoryLevelConnectionToPageInfoResolver<TParent>;
  }
  
  export interface InventoryLevelConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelEdgeTypeResolver<TParent = any> {
    cursor?: InventoryLevelEdgeToCursorResolver<TParent>;
    node?: InventoryLevelEdgeToNodeResolver<TParent>;
  }
  
  export interface InventoryLevelEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryLevelEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EditablePropertyTypeResolver<TParent = any> {
    locked?: EditablePropertyToLockedResolver<TParent>;
    reason?: EditablePropertyToReasonResolver<TParent>;
  }
  
  export interface EditablePropertyToLockedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EditablePropertyToReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryQuantityTypeResolver<TParent = any> {
    id?: InventoryQuantityToIdResolver<TParent>;
    name?: InventoryQuantityToNameResolver<TParent>;
    quantity?: InventoryQuantityToQuantityResolver<TParent>;
    updatedAt?: InventoryQuantityToUpdatedAtResolver<TParent>;
  }
  
  export interface InventoryQuantityToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryQuantityToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryQuantityToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryQuantityToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryScheduledChangeConnectionTypeResolver<TParent = any> {
    edges?: InventoryScheduledChangeConnectionToEdgesResolver<TParent>;
    nodes?: InventoryScheduledChangeConnectionToNodesResolver<TParent>;
    pageInfo?: InventoryScheduledChangeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface InventoryScheduledChangeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryScheduledChangeConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryScheduledChangeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryScheduledChangeEdgeTypeResolver<TParent = any> {
    cursor?: InventoryScheduledChangeEdgeToCursorResolver<TParent>;
    node?: InventoryScheduledChangeEdgeToNodeResolver<TParent>;
  }
  
  export interface InventoryScheduledChangeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryScheduledChangeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryScheduledChangeTypeResolver<TParent = any> {
    expectedAt?: InventoryScheduledChangeToExpectedAtResolver<TParent>;
    fromName?: InventoryScheduledChangeToFromNameResolver<TParent>;
    inventoryLevel?: InventoryScheduledChangeToInventoryLevelResolver<TParent>;
    ledgerDocumentUri?: InventoryScheduledChangeToLedgerDocumentUriResolver<TParent>;
    quantity?: InventoryScheduledChangeToQuantityResolver<TParent>;
    toName?: InventoryScheduledChangeToToNameResolver<TParent>;
  }
  
  export interface InventoryScheduledChangeToExpectedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryScheduledChangeToFromNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryScheduledChangeToInventoryLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryScheduledChangeToLedgerDocumentUriResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryScheduledChangeToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryScheduledChangeToToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocalPickupSettingsTypeResolver<TParent = any> {
    instructions?: DeliveryLocalPickupSettingsToInstructionsResolver<TParent>;
    pickupTime?: DeliveryLocalPickupSettingsToPickupTimeResolver<TParent>;
  }
  
  export interface DeliveryLocalPickupSettingsToInstructionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocalPickupSettingsToPickupTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationSuggestedAddressTypeResolver<TParent = any> {
    address1?: LocationSuggestedAddressToAddress1Resolver<TParent>;
    address2?: LocationSuggestedAddressToAddress2Resolver<TParent>;
    city?: LocationSuggestedAddressToCityResolver<TParent>;
    country?: LocationSuggestedAddressToCountryResolver<TParent>;
    countryCode?: LocationSuggestedAddressToCountryCodeResolver<TParent>;
    formatted?: LocationSuggestedAddressToFormattedResolver<TParent>;
    province?: LocationSuggestedAddressToProvinceResolver<TParent>;
    provinceCode?: LocationSuggestedAddressToProvinceCodeResolver<TParent>;
    zip?: LocationSuggestedAddressToZipResolver<TParent>;
  }
  
  export interface LocationSuggestedAddressToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationSuggestedAddressToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationSuggestedAddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationSuggestedAddressToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationSuggestedAddressToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationSuggestedAddressToFormattedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationSuggestedAddressToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationSuggestedAddressToProvinceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationSuggestedAddressToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationGroupZoneConnectionTypeResolver<TParent = any> {
    edges?: DeliveryLocationGroupZoneConnectionToEdgesResolver<TParent>;
    nodes?: DeliveryLocationGroupZoneConnectionToNodesResolver<TParent>;
    pageInfo?: DeliveryLocationGroupZoneConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DeliveryLocationGroupZoneConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationGroupZoneConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationGroupZoneConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationGroupZoneEdgeTypeResolver<TParent = any> {
    cursor?: DeliveryLocationGroupZoneEdgeToCursorResolver<TParent>;
    node?: DeliveryLocationGroupZoneEdgeToNodeResolver<TParent>;
  }
  
  export interface DeliveryLocationGroupZoneEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationGroupZoneEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationGroupZoneTypeResolver<TParent = any> {
    methodDefinitionCounts?: DeliveryLocationGroupZoneToMethodDefinitionCountsResolver<TParent>;
    methodDefinitions?: DeliveryLocationGroupZoneToMethodDefinitionsResolver<TParent>;
    zone?: DeliveryLocationGroupZoneToZoneResolver<TParent>;
  }
  
  export interface DeliveryLocationGroupZoneToMethodDefinitionCountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationGroupZoneToMethodDefinitionsArgs {
    eligible?: boolean;
    type?: DeliveryMethodDefinitionType;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MethodDefinitionSortKeys;
  }
  export interface DeliveryLocationGroupZoneToMethodDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryLocationGroupZoneToMethodDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationGroupZoneToZoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionCountsTypeResolver<TParent = any> {
    participantDefinitionsCount?: DeliveryMethodDefinitionCountsToParticipantDefinitionsCountResolver<TParent>;
    rateDefinitionsCount?: DeliveryMethodDefinitionCountsToRateDefinitionsCountResolver<TParent>;
  }
  
  export interface DeliveryMethodDefinitionCountsToParticipantDefinitionsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionCountsToRateDefinitionsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionConnectionTypeResolver<TParent = any> {
    edges?: DeliveryMethodDefinitionConnectionToEdgesResolver<TParent>;
    nodes?: DeliveryMethodDefinitionConnectionToNodesResolver<TParent>;
    pageInfo?: DeliveryMethodDefinitionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DeliveryMethodDefinitionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionEdgeTypeResolver<TParent = any> {
    cursor?: DeliveryMethodDefinitionEdgeToCursorResolver<TParent>;
    node?: DeliveryMethodDefinitionEdgeToNodeResolver<TParent>;
  }
  
  export interface DeliveryMethodDefinitionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionTypeResolver<TParent = any> {
    active?: DeliveryMethodDefinitionToActiveResolver<TParent>;
    description?: DeliveryMethodDefinitionToDescriptionResolver<TParent>;
    id?: DeliveryMethodDefinitionToIdResolver<TParent>;
    methodConditions?: DeliveryMethodDefinitionToMethodConditionsResolver<TParent>;
    name?: DeliveryMethodDefinitionToNameResolver<TParent>;
    rateProvider?: DeliveryMethodDefinitionToRateProviderResolver<TParent>;
  }
  
  export interface DeliveryMethodDefinitionToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionToMethodConditionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodDefinitionToRateProviderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryConditionTypeResolver<TParent = any> {
    conditionCriteria?: DeliveryConditionToConditionCriteriaResolver<TParent>;
    field?: DeliveryConditionToFieldResolver<TParent>;
    id?: DeliveryConditionToIdResolver<TParent>;
    operator?: DeliveryConditionToOperatorResolver<TParent>;
  }
  
  export interface DeliveryConditionToConditionCriteriaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryConditionToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryConditionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryConditionToOperatorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryConditionCriteriaTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'MoneyV2' | 'Weight';
  }
  export interface WeightTypeResolver<TParent = any> {
    unit?: WeightToUnitResolver<TParent>;
    value?: WeightToValueResolver<TParent>;
  }
  
  export interface WeightToUnitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WeightToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryRateProviderTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'DeliveryParticipant' | 'DeliveryRateDefinition';
  }
  export interface DeliveryParticipantTypeResolver<TParent = any> {
    adaptToNewServicesFlag?: DeliveryParticipantToAdaptToNewServicesFlagResolver<TParent>;
    carrierService?: DeliveryParticipantToCarrierServiceResolver<TParent>;
    fixedFee?: DeliveryParticipantToFixedFeeResolver<TParent>;
    id?: DeliveryParticipantToIdResolver<TParent>;
    participantServices?: DeliveryParticipantToParticipantServicesResolver<TParent>;
    percentageOfRateFee?: DeliveryParticipantToPercentageOfRateFeeResolver<TParent>;
  }
  
  export interface DeliveryParticipantToAdaptToNewServicesFlagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryParticipantToCarrierServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryParticipantToFixedFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryParticipantToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryParticipantToParticipantServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryParticipantToPercentageOfRateFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCarrierServiceTypeResolver<TParent = any> {
    availableServicesForCountries?: DeliveryCarrierServiceToAvailableServicesForCountriesResolver<TParent>;
    formattedName?: DeliveryCarrierServiceToFormattedNameResolver<TParent>;
    icon?: DeliveryCarrierServiceToIconResolver<TParent>;
    id?: DeliveryCarrierServiceToIdResolver<TParent>;
    name?: DeliveryCarrierServiceToNameResolver<TParent>;
  }
  
  export interface DeliveryCarrierServiceToAvailableServicesForCountriesArgs {
    origins?: Array<string>;
    countryCodes?: Array<CountryCode>;
    restOfWorld: boolean;
  }
  export interface DeliveryCarrierServiceToAvailableServicesForCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryCarrierServiceToAvailableServicesForCountriesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCarrierServiceToFormattedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCarrierServiceToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCarrierServiceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCarrierServiceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryAvailableServiceTypeResolver<TParent = any> {
    countries?: DeliveryAvailableServiceToCountriesResolver<TParent>;
    name?: DeliveryAvailableServiceToNameResolver<TParent>;
  }
  
  export interface DeliveryAvailableServiceToCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryAvailableServiceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCountryCodesOrRestOfWorldTypeResolver<TParent = any> {
    countryCodes?: DeliveryCountryCodesOrRestOfWorldToCountryCodesResolver<TParent>;
    restOfWorld?: DeliveryCountryCodesOrRestOfWorldToRestOfWorldResolver<TParent>;
  }
  
  export interface DeliveryCountryCodesOrRestOfWorldToCountryCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCountryCodesOrRestOfWorldToRestOfWorldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryParticipantServiceTypeResolver<TParent = any> {
    active?: DeliveryParticipantServiceToActiveResolver<TParent>;
    name?: DeliveryParticipantServiceToNameResolver<TParent>;
  }
  
  export interface DeliveryParticipantServiceToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryParticipantServiceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryRateDefinitionTypeResolver<TParent = any> {
    id?: DeliveryRateDefinitionToIdResolver<TParent>;
    price?: DeliveryRateDefinitionToPriceResolver<TParent>;
  }
  
  export interface DeliveryRateDefinitionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryRateDefinitionToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryZoneTypeResolver<TParent = any> {
    countries?: DeliveryZoneToCountriesResolver<TParent>;
    id?: DeliveryZoneToIdResolver<TParent>;
    name?: DeliveryZoneToNameResolver<TParent>;
  }
  
  export interface DeliveryZoneToCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryZoneToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryZoneToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairConnectionTypeResolver<TParent = any> {
    edges?: ProductVariantPricePairConnectionToEdgesResolver<TParent>;
    nodes?: ProductVariantPricePairConnectionToNodesResolver<TParent>;
    pageInfo?: ProductVariantPricePairConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ProductVariantPricePairConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairEdgeTypeResolver<TParent = any> {
    cursor?: ProductVariantPricePairEdgeToCursorResolver<TParent>;
    node?: ProductVariantPricePairEdgeToNodeResolver<TParent>;
  }
  
  export interface ProductVariantPricePairEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairTypeResolver<TParent = any> {
    compareAtPrice?: ProductVariantPricePairToCompareAtPriceResolver<TParent>;
    price?: ProductVariantPricePairToPriceResolver<TParent>;
  }
  
  export interface ProductVariantPricePairToCompareAtPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantPricePairToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantComponentConnectionTypeResolver<TParent = any> {
    edges?: ProductVariantComponentConnectionToEdgesResolver<TParent>;
    nodes?: ProductVariantComponentConnectionToNodesResolver<TParent>;
    pageInfo?: ProductVariantComponentConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ProductVariantComponentConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantComponentConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantComponentConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantComponentEdgeTypeResolver<TParent = any> {
    cursor?: ProductVariantComponentEdgeToCursorResolver<TParent>;
    node?: ProductVariantComponentEdgeToNodeResolver<TParent>;
  }
  
  export interface ProductVariantComponentEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantComponentEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantComponentTypeResolver<TParent = any> {
    id?: ProductVariantComponentToIdResolver<TParent>;
    productVariant?: ProductVariantComponentToProductVariantResolver<TParent>;
    quantity?: ProductVariantComponentToQuantityResolver<TParent>;
  }
  
  export interface ProductVariantComponentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantComponentToProductVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantComponentToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SelectedOptionTypeResolver<TParent = any> {
    name?: SelectedOptionToNameResolver<TParent>;
    value?: SelectedOptionToValueResolver<TParent>;
  }
  
  export interface SelectedOptionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SelectedOptionToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleConnectionTypeResolver<TParent = any> {
    edges?: QuantityRuleConnectionToEdgesResolver<TParent>;
    nodes?: QuantityRuleConnectionToNodesResolver<TParent>;
    pageInfo?: QuantityRuleConnectionToPageInfoResolver<TParent>;
  }
  
  export interface QuantityRuleConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleEdgeTypeResolver<TParent = any> {
    cursor?: QuantityRuleEdgeToCursorResolver<TParent>;
    node?: QuantityRuleEdgeToNodeResolver<TParent>;
  }
  
  export interface QuantityRuleEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketConnectionTypeResolver<TParent = any> {
    edges?: MarketConnectionToEdgesResolver<TParent>;
    nodes?: MarketConnectionToNodesResolver<TParent>;
    pageInfo?: MarketConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MarketConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketEdgeTypeResolver<TParent = any> {
    cursor?: MarketEdgeToCursorResolver<TParent>;
    node?: MarketEdgeToNodeResolver<TParent>;
  }
  
  export interface MarketEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCurrencySettingsTypeResolver<TParent = any> {
    baseCurrency?: MarketCurrencySettingsToBaseCurrencyResolver<TParent>;
    localCurrencies?: MarketCurrencySettingsToLocalCurrenciesResolver<TParent>;
  }
  
  export interface MarketCurrencySettingsToBaseCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCurrencySettingsToLocalCurrenciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencySettingTypeResolver<TParent = any> {
    currencyCode?: CurrencySettingToCurrencyCodeResolver<TParent>;
    currencyName?: CurrencySettingToCurrencyNameResolver<TParent>;
    enabled?: CurrencySettingToEnabledResolver<TParent>;
    rateUpdatedAt?: CurrencySettingToRateUpdatedAtResolver<TParent>;
  }
  
  export interface CurrencySettingToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencySettingToCurrencyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencySettingToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencySettingToRateUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionConnectionTypeResolver<TParent = any> {
    edges?: MarketRegionConnectionToEdgesResolver<TParent>;
    nodes?: MarketRegionConnectionToNodesResolver<TParent>;
    pageInfo?: MarketRegionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MarketRegionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionEdgeTypeResolver<TParent = any> {
    cursor?: MarketRegionEdgeToCursorResolver<TParent>;
    node?: MarketRegionEdgeToNodeResolver<TParent>;
  }
  
  export interface MarketRegionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'MarketRegionCountry';
  }
  export interface MarketWebPresenceTypeResolver<TParent = any> {
    alternateLocales?: MarketWebPresenceToAlternateLocalesResolver<TParent>;
    defaultLocale?: MarketWebPresenceToDefaultLocaleResolver<TParent>;
    domain?: MarketWebPresenceToDomainResolver<TParent>;
    id?: MarketWebPresenceToIdResolver<TParent>;
    market?: MarketWebPresenceToMarketResolver<TParent>;
    rootUrls?: MarketWebPresenceToRootUrlsResolver<TParent>;
    subfolderSuffix?: MarketWebPresenceToSubfolderSuffixResolver<TParent>;
  }
  
  export interface MarketWebPresenceToAlternateLocalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceToDefaultLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceToDomainResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceToRootUrlsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceToSubfolderSuffixResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainTypeResolver<TParent = any> {
    host?: DomainToHostResolver<TParent>;
    id?: DomainToIdResolver<TParent>;
    localization?: DomainToLocalizationResolver<TParent>;
    marketWebPresence?: DomainToMarketWebPresenceResolver<TParent>;
    sslEnabled?: DomainToSslEnabledResolver<TParent>;
    url?: DomainToUrlResolver<TParent>;
  }
  
  export interface DomainToHostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainToLocalizationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainToMarketWebPresenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainToSslEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainLocalizationTypeResolver<TParent = any> {
    alternateLocales?: DomainLocalizationToAlternateLocalesResolver<TParent>;
    country?: DomainLocalizationToCountryResolver<TParent>;
    defaultLocale?: DomainLocalizationToDefaultLocaleResolver<TParent>;
  }
  
  export interface DomainLocalizationToAlternateLocalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainLocalizationToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DomainLocalizationToDefaultLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceRootUrlTypeResolver<TParent = any> {
    locale?: MarketWebPresenceRootUrlToLocaleResolver<TParent>;
    url?: MarketWebPresenceRootUrlToUrlResolver<TParent>;
  }
  
  export interface MarketWebPresenceRootUrlToLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceRootUrlToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceConnectionTypeResolver<TParent = any> {
    edges?: MarketWebPresenceConnectionToEdgesResolver<TParent>;
    nodes?: MarketWebPresenceConnectionToNodesResolver<TParent>;
    pageInfo?: MarketWebPresenceConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MarketWebPresenceConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceEdgeTypeResolver<TParent = any> {
    cursor?: MarketWebPresenceEdgeToCursorResolver<TParent>;
    node?: MarketWebPresenceEdgeToNodeResolver<TParent>;
  }
  
  export interface MarketWebPresenceEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublicationConnectionTypeResolver<TParent = any> {
    edges?: CollectionPublicationConnectionToEdgesResolver<TParent>;
    nodes?: CollectionPublicationConnectionToNodesResolver<TParent>;
    pageInfo?: CollectionPublicationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CollectionPublicationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublicationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublicationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublicationEdgeTypeResolver<TParent = any> {
    cursor?: CollectionPublicationEdgeToCursorResolver<TParent>;
    node?: CollectionPublicationEdgeToNodeResolver<TParent>;
  }
  
  export interface CollectionPublicationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublicationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublicationTypeResolver<TParent = any> {
    channel?: CollectionPublicationToChannelResolver<TParent>;
    collection?: CollectionPublicationToCollectionResolver<TParent>;
    isPublished?: CollectionPublicationToIsPublishedResolver<TParent>;
    publication?: CollectionPublicationToPublicationResolver<TParent>;
    publishDate?: CollectionPublicationToPublishDateResolver<TParent>;
  }
  
  export interface CollectionPublicationToChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublicationToCollectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublicationToIsPublishedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublicationToPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublicationToPublishDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleSetTypeResolver<TParent = any> {
    appliedDisjunctively?: CollectionRuleSetToAppliedDisjunctivelyResolver<TParent>;
    rules?: CollectionRuleSetToRulesResolver<TParent>;
  }
  
  export interface CollectionRuleSetToAppliedDisjunctivelyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleSetToRulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleTypeResolver<TParent = any> {
    column?: CollectionRuleToColumnResolver<TParent>;
    condition?: CollectionRuleToConditionResolver<TParent>;
    conditionObject?: CollectionRuleToConditionObjectResolver<TParent>;
    relation?: CollectionRuleToRelationResolver<TParent>;
  }
  
  export interface CollectionRuleToColumnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleToConditionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleToConditionObjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleToRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleConditionObjectTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'CollectionRuleMetafieldCondition' | 'CollectionRuleProductCategoryCondition' | 'CollectionRuleTextCondition';
  }
  export interface CollectionRuleMetafieldConditionTypeResolver<TParent = any> {
    metafieldDefinition?: CollectionRuleMetafieldConditionToMetafieldDefinitionResolver<TParent>;
  }
  
  export interface CollectionRuleMetafieldConditionToMetafieldDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleProductCategoryConditionTypeResolver<TParent = any> {
    value?: CollectionRuleProductCategoryConditionToValueResolver<TParent>;
  }
  
  export interface CollectionRuleProductCategoryConditionToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleTextConditionTypeResolver<TParent = any> {
    value?: CollectionRuleTextConditionToValueResolver<TParent>;
  }
  
  export interface CollectionRuleTextConditionToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GenericFileTypeResolver<TParent = any> {
    alt?: GenericFileToAltResolver<TParent>;
    createdAt?: GenericFileToCreatedAtResolver<TParent>;
    fileErrors?: GenericFileToFileErrorsResolver<TParent>;
    fileStatus?: GenericFileToFileStatusResolver<TParent>;
    id?: GenericFileToIdResolver<TParent>;
    mimeType?: GenericFileToMimeTypeResolver<TParent>;
    originalFileSize?: GenericFileToOriginalFileSizeResolver<TParent>;
    preview?: GenericFileToPreviewResolver<TParent>;
    updatedAt?: GenericFileToUpdatedAtResolver<TParent>;
    url?: GenericFileToUrlResolver<TParent>;
  }
  
  export interface GenericFileToAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GenericFileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GenericFileToFileErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GenericFileToFileStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GenericFileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GenericFileToMimeTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GenericFileToOriginalFileSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GenericFileToPreviewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GenericFileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GenericFileToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'GenericFile' | 'MediaImage' | 'Video';
  }
  export interface FileErrorTypeResolver<TParent = any> {
    code?: FileErrorToCodeResolver<TParent>;
    details?: FileErrorToDetailsResolver<TParent>;
    message?: FileErrorToMessageResolver<TParent>;
  }
  
  export interface FileErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileErrorToDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageTypeResolver<TParent = any> {
    alt?: MediaImageToAltResolver<TParent>;
    createdAt?: MediaImageToCreatedAtResolver<TParent>;
    fileErrors?: MediaImageToFileErrorsResolver<TParent>;
    fileStatus?: MediaImageToFileStatusResolver<TParent>;
    id?: MediaImageToIdResolver<TParent>;
    image?: MediaImageToImageResolver<TParent>;
    mediaContentType?: MediaImageToMediaContentTypeResolver<TParent>;
    mediaErrors?: MediaImageToMediaErrorsResolver<TParent>;
    mediaWarnings?: MediaImageToMediaWarningsResolver<TParent>;
    metafield?: MediaImageToMetafieldResolver<TParent>;
    metafields?: MediaImageToMetafieldsResolver<TParent>;
    mimeType?: MediaImageToMimeTypeResolver<TParent>;
    originalSource?: MediaImageToOriginalSourceResolver<TParent>;
    preview?: MediaImageToPreviewResolver<TParent>;
    privateMetafield?: MediaImageToPrivateMetafieldResolver<TParent>;
    privateMetafields?: MediaImageToPrivateMetafieldsResolver<TParent>;
    status?: MediaImageToStatusResolver<TParent>;
    updatedAt?: MediaImageToUpdatedAtResolver<TParent>;
  }
  
  export interface MediaImageToAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToFileErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToFileStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToMediaContentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToMediaErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToMediaWarningsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface MediaImageToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MediaImageToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface MediaImageToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MediaImageToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToMimeTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToOriginalSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToPreviewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface MediaImageToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MediaImageToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface MediaImageToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MediaImageToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageOriginalSourceTypeResolver<TParent = any> {
    fileSize?: MediaImageOriginalSourceToFileSizeResolver<TParent>;
    url?: MediaImageOriginalSourceToUrlResolver<TParent>;
  }
  
  export interface MediaImageOriginalSourceToFileSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaImageOriginalSourceToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectTypeResolver<TParent = any> {
    capabilities?: MetaobjectToCapabilitiesResolver<TParent>;
    createdBy?: MetaobjectToCreatedByResolver<TParent>;
    createdByApp?: MetaobjectToCreatedByAppResolver<TParent>;
    createdByStaff?: MetaobjectToCreatedByStaffResolver<TParent>;
    definition?: MetaobjectToDefinitionResolver<TParent>;
    displayName?: MetaobjectToDisplayNameResolver<TParent>;
    field?: MetaobjectToFieldResolver<TParent>;
    fields?: MetaobjectToFieldsResolver<TParent>;
    handle?: MetaobjectToHandleResolver<TParent>;
    id?: MetaobjectToIdResolver<TParent>;
    referencedBy?: MetaobjectToReferencedByResolver<TParent>;
    staffMember?: MetaobjectToStaffMemberResolver<TParent>;
    thumbnailField?: MetaobjectToThumbnailFieldResolver<TParent>;
    type?: MetaobjectToTypeResolver<TParent>;
    updatedAt?: MetaobjectToUpdatedAtResolver<TParent>;
  }
  
  export interface MetaobjectToCapabilitiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToCreatedByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToCreatedByAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToCreatedByStaffResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToDisplayNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToFieldArgs {
    key: string;
  }
  export interface MetaobjectToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MetaobjectToFieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToFieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToReferencedByArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface MetaobjectToReferencedByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MetaobjectToReferencedByArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToStaffMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToThumbnailFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilityDataTypeResolver<TParent = any> {
    onlineStore?: MetaobjectCapabilityDataToOnlineStoreResolver<TParent>;
    publishable?: MetaobjectCapabilityDataToPublishableResolver<TParent>;
  }
  
  export interface MetaobjectCapabilityDataToOnlineStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilityDataToPublishableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilityDataOnlineStoreTypeResolver<TParent = any> {
    templateSuffix?: MetaobjectCapabilityDataOnlineStoreToTemplateSuffixResolver<TParent>;
  }
  
  export interface MetaobjectCapabilityDataOnlineStoreToTemplateSuffixResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilityDataPublishableTypeResolver<TParent = any> {
    status?: MetaobjectCapabilityDataPublishableToStatusResolver<TParent>;
  }
  
  export interface MetaobjectCapabilityDataPublishableToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberTypeResolver<TParent = any> {
    active?: StaffMemberToActiveResolver<TParent>;
    avatar?: StaffMemberToAvatarResolver<TParent>;
    email?: StaffMemberToEmailResolver<TParent>;
    exists?: StaffMemberToExistsResolver<TParent>;
    firstName?: StaffMemberToFirstNameResolver<TParent>;
    id?: StaffMemberToIdResolver<TParent>;
    initials?: StaffMemberToInitialsResolver<TParent>;
    isShopOwner?: StaffMemberToIsShopOwnerResolver<TParent>;
    lastName?: StaffMemberToLastNameResolver<TParent>;
    locale?: StaffMemberToLocaleResolver<TParent>;
    name?: StaffMemberToNameResolver<TParent>;
    phone?: StaffMemberToPhoneResolver<TParent>;
    privateData?: StaffMemberToPrivateDataResolver<TParent>;
  }
  
  export interface StaffMemberToActiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToAvatarArgs {
    fallback?: StaffMemberDefaultImage;
  }
  export interface StaffMemberToAvatarResolver<TParent = any, TResult = any> {
    (parent: TParent, args: StaffMemberToAvatarArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToExistsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToInitialsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToIsShopOwnerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberToPrivateDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberPrivateDataTypeResolver<TParent = any> {
    accountSettingsUrl?: StaffMemberPrivateDataToAccountSettingsUrlResolver<TParent>;
    createdAt?: StaffMemberPrivateDataToCreatedAtResolver<TParent>;
    permissions?: StaffMemberPrivateDataToPermissionsResolver<TParent>;
  }
  
  export interface StaffMemberPrivateDataToAccountSettingsUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberPrivateDataToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberPrivateDataToPermissionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionTypeResolver<TParent = any> {
    access?: MetaobjectDefinitionToAccessResolver<TParent>;
    capabilities?: MetaobjectDefinitionToCapabilitiesResolver<TParent>;
    createdByApp?: MetaobjectDefinitionToCreatedByAppResolver<TParent>;
    createdByStaff?: MetaobjectDefinitionToCreatedByStaffResolver<TParent>;
    description?: MetaobjectDefinitionToDescriptionResolver<TParent>;
    displayNameKey?: MetaobjectDefinitionToDisplayNameKeyResolver<TParent>;
    fieldDefinitions?: MetaobjectDefinitionToFieldDefinitionsResolver<TParent>;
    hasThumbnailField?: MetaobjectDefinitionToHasThumbnailFieldResolver<TParent>;
    id?: MetaobjectDefinitionToIdResolver<TParent>;
    metaobjects?: MetaobjectDefinitionToMetaobjectsResolver<TParent>;
    metaobjectsCount?: MetaobjectDefinitionToMetaobjectsCountResolver<TParent>;
    name?: MetaobjectDefinitionToNameResolver<TParent>;
    type?: MetaobjectDefinitionToTypeResolver<TParent>;
  }
  
  export interface MetaobjectDefinitionToAccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToCapabilitiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToCreatedByAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToCreatedByStaffResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToDisplayNameKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToFieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToHasThumbnailFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToMetaobjectsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface MetaobjectDefinitionToMetaobjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MetaobjectDefinitionToMetaobjectsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToMetaobjectsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectAccessTypeResolver<TParent = any> {
    admin?: MetaobjectAccessToAdminResolver<TParent>;
    storefront?: MetaobjectAccessToStorefrontResolver<TParent>;
  }
  
  export interface MetaobjectAccessToAdminResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectAccessToStorefrontResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilitiesTypeResolver<TParent = any> {
    onlineStore?: MetaobjectCapabilitiesToOnlineStoreResolver<TParent>;
    publishable?: MetaobjectCapabilitiesToPublishableResolver<TParent>;
    renderable?: MetaobjectCapabilitiesToRenderableResolver<TParent>;
    translatable?: MetaobjectCapabilitiesToTranslatableResolver<TParent>;
  }
  
  export interface MetaobjectCapabilitiesToOnlineStoreResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilitiesToPublishableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilitiesToRenderableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilitiesToTranslatableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilitiesOnlineStoreTypeResolver<TParent = any> {
    data?: MetaobjectCapabilitiesOnlineStoreToDataResolver<TParent>;
    enabled?: MetaobjectCapabilitiesOnlineStoreToEnabledResolver<TParent>;
  }
  
  export interface MetaobjectCapabilitiesOnlineStoreToDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilitiesOnlineStoreToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilityDefinitionDataOnlineStoreTypeResolver<TParent = any> {
    canCreateRedirects?: MetaobjectCapabilityDefinitionDataOnlineStoreToCanCreateRedirectsResolver<TParent>;
    urlHandle?: MetaobjectCapabilityDefinitionDataOnlineStoreToUrlHandleResolver<TParent>;
  }
  
  export interface MetaobjectCapabilityDefinitionDataOnlineStoreToCanCreateRedirectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilityDefinitionDataOnlineStoreToUrlHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilitiesPublishableTypeResolver<TParent = any> {
    enabled?: MetaobjectCapabilitiesPublishableToEnabledResolver<TParent>;
  }
  
  export interface MetaobjectCapabilitiesPublishableToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilitiesRenderableTypeResolver<TParent = any> {
    data?: MetaobjectCapabilitiesRenderableToDataResolver<TParent>;
    enabled?: MetaobjectCapabilitiesRenderableToEnabledResolver<TParent>;
  }
  
  export interface MetaobjectCapabilitiesRenderableToDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilitiesRenderableToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilityDefinitionDataRenderableTypeResolver<TParent = any> {
    metaDescriptionKey?: MetaobjectCapabilityDefinitionDataRenderableToMetaDescriptionKeyResolver<TParent>;
    metaTitleKey?: MetaobjectCapabilityDefinitionDataRenderableToMetaTitleKeyResolver<TParent>;
  }
  
  export interface MetaobjectCapabilityDefinitionDataRenderableToMetaDescriptionKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilityDefinitionDataRenderableToMetaTitleKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCapabilitiesTranslatableTypeResolver<TParent = any> {
    enabled?: MetaobjectCapabilitiesTranslatableToEnabledResolver<TParent>;
  }
  
  export interface MetaobjectCapabilitiesTranslatableToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldDefinitionTypeResolver<TParent = any> {
    description?: MetaobjectFieldDefinitionToDescriptionResolver<TParent>;
    key?: MetaobjectFieldDefinitionToKeyResolver<TParent>;
    name?: MetaobjectFieldDefinitionToNameResolver<TParent>;
    required?: MetaobjectFieldDefinitionToRequiredResolver<TParent>;
    type?: MetaobjectFieldDefinitionToTypeResolver<TParent>;
    validations?: MetaobjectFieldDefinitionToValidationsResolver<TParent>;
  }
  
  export interface MetaobjectFieldDefinitionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldDefinitionToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldDefinitionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldDefinitionToRequiredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldDefinitionToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldDefinitionToValidationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectConnectionTypeResolver<TParent = any> {
    edges?: MetaobjectConnectionToEdgesResolver<TParent>;
    nodes?: MetaobjectConnectionToNodesResolver<TParent>;
    pageInfo?: MetaobjectConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MetaobjectConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectEdgeTypeResolver<TParent = any> {
    cursor?: MetaobjectEdgeToCursorResolver<TParent>;
    node?: MetaobjectEdgeToNodeResolver<TParent>;
  }
  
  export interface MetaobjectEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldTypeResolver<TParent = any> {
    definition?: MetaobjectFieldToDefinitionResolver<TParent>;
    key?: MetaobjectFieldToKeyResolver<TParent>;
    reference?: MetaobjectFieldToReferenceResolver<TParent>;
    references?: MetaobjectFieldToReferencesResolver<TParent>;
    thumbnail?: MetaobjectFieldToThumbnailResolver<TParent>;
    type?: MetaobjectFieldToTypeResolver<TParent>;
    value?: MetaobjectFieldToValueResolver<TParent>;
  }
  
  export interface MetaobjectFieldToDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldToReferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldToReferencesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
  }
  export interface MetaobjectFieldToReferencesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MetaobjectFieldToReferencesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldToThumbnailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectFieldToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldReferenceConnectionTypeResolver<TParent = any> {
    edges?: MetafieldReferenceConnectionToEdgesResolver<TParent>;
    nodes?: MetafieldReferenceConnectionToNodesResolver<TParent>;
    pageInfo?: MetafieldReferenceConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MetafieldReferenceConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldReferenceConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldReferenceConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldReferenceEdgeTypeResolver<TParent = any> {
    cursor?: MetafieldReferenceEdgeToCursorResolver<TParent>;
    node?: MetafieldReferenceEdgeToNodeResolver<TParent>;
  }
  
  export interface MetafieldReferenceEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldReferenceEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectThumbnailTypeResolver<TParent = any> {
    file?: MetaobjectThumbnailToFileResolver<TParent>;
    hex?: MetaobjectThumbnailToHexResolver<TParent>;
  }
  
  export interface MetaobjectThumbnailToFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectThumbnailToHexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldRelationConnectionTypeResolver<TParent = any> {
    edges?: MetafieldRelationConnectionToEdgesResolver<TParent>;
    nodes?: MetafieldRelationConnectionToNodesResolver<TParent>;
    pageInfo?: MetafieldRelationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MetafieldRelationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldRelationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldRelationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldRelationEdgeTypeResolver<TParent = any> {
    cursor?: MetafieldRelationEdgeToCursorResolver<TParent>;
    node?: MetafieldRelationEdgeToNodeResolver<TParent>;
  }
  
  export interface MetafieldRelationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldRelationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldRelationTypeResolver<TParent = any> {
    key?: MetafieldRelationToKeyResolver<TParent>;
    name?: MetafieldRelationToNameResolver<TParent>;
    namespace?: MetafieldRelationToNamespaceResolver<TParent>;
    referencer?: MetafieldRelationToReferencerResolver<TParent>;
    target?: MetafieldRelationToTargetResolver<TParent>;
  }
  
  export interface MetafieldRelationToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldRelationToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldRelationToNamespaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldRelationToReferencerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldRelationToTargetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldReferencerTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'AppInstallation' | 'Collection' | 'Customer' | 'DeliveryCustomization' | 'DiscountAutomaticNode' | 'DiscountCodeNode' | 'DiscountNode' | 'DraftOrder' | 'FulfillmentOrder' | 'Location' | 'Market' | 'Metaobject' | 'OnlineStoreArticle' | 'OnlineStoreBlog' | 'OnlineStorePage' | 'Order' | 'PaymentCustomization' | 'Product' | 'ProductVariant' | 'Shop';
  }
  export interface CustomerTypeResolver<TParent = any> {
    addresses?: CustomerToAddressesResolver<TParent>;
    amountSpent?: CustomerToAmountSpentResolver<TParent>;
    canDelete?: CustomerToCanDeleteResolver<TParent>;
    companyContactProfiles?: CustomerToCompanyContactProfilesResolver<TParent>;
    createdAt?: CustomerToCreatedAtResolver<TParent>;
    defaultAddress?: CustomerToDefaultAddressResolver<TParent>;
    displayName?: CustomerToDisplayNameResolver<TParent>;
    email?: CustomerToEmailResolver<TParent>;
    emailMarketingConsent?: CustomerToEmailMarketingConsentResolver<TParent>;
    events?: CustomerToEventsResolver<TParent>;
    firstName?: CustomerToFirstNameResolver<TParent>;
    hasTimelineComment?: CustomerToHasTimelineCommentResolver<TParent>;
    id?: CustomerToIdResolver<TParent>;
    image?: CustomerToImageResolver<TParent>;
    lastName?: CustomerToLastNameResolver<TParent>;
    lastOrder?: CustomerToLastOrderResolver<TParent>;
    legacyResourceId?: CustomerToLegacyResourceIdResolver<TParent>;
    lifetimeDuration?: CustomerToLifetimeDurationResolver<TParent>;
    locale?: CustomerToLocaleResolver<TParent>;
    market?: CustomerToMarketResolver<TParent>;
    mergeable?: CustomerToMergeableResolver<TParent>;
    metafield?: CustomerToMetafieldResolver<TParent>;
    metafieldDefinitions?: CustomerToMetafieldDefinitionsResolver<TParent>;
    metafields?: CustomerToMetafieldsResolver<TParent>;
    multipassIdentifier?: CustomerToMultipassIdentifierResolver<TParent>;
    note?: CustomerToNoteResolver<TParent>;
    numberOfOrders?: CustomerToNumberOfOrdersResolver<TParent>;
    orders?: CustomerToOrdersResolver<TParent>;
    paymentMethods?: CustomerToPaymentMethodsResolver<TParent>;
    phone?: CustomerToPhoneResolver<TParent>;
    privateMetafield?: CustomerToPrivateMetafieldResolver<TParent>;
    privateMetafields?: CustomerToPrivateMetafieldsResolver<TParent>;
    productSubscriberStatus?: CustomerToProductSubscriberStatusResolver<TParent>;
    smsMarketingConsent?: CustomerToSmsMarketingConsentResolver<TParent>;
    state?: CustomerToStateResolver<TParent>;
    statistics?: CustomerToStatisticsResolver<TParent>;
    subscriptionContracts?: CustomerToSubscriptionContractsResolver<TParent>;
    tags?: CustomerToTagsResolver<TParent>;
    taxExempt?: CustomerToTaxExemptResolver<TParent>;
    taxExemptions?: CustomerToTaxExemptionsResolver<TParent>;
    unsubscribeUrl?: CustomerToUnsubscribeUrlResolver<TParent>;
    updatedAt?: CustomerToUpdatedAtResolver<TParent>;
    validEmailAddress?: CustomerToValidEmailAddressResolver<TParent>;
    verifiedEmail?: CustomerToVerifiedEmailResolver<TParent>;
  }
  
  export interface CustomerToAddressesArgs {
    first?: number;
  }
  export interface CustomerToAddressesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToAddressesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToAmountSpentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToCanDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToCompanyContactProfilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToDefaultAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToDisplayNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToEmailMarketingConsentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: EventSortKeys;
    query?: string;
  }
  export interface CustomerToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToHasTimelineCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToLastOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToLifetimeDurationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToMergeableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface CustomerToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface CustomerToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CustomerToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToMultipassIdentifierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToNumberOfOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: OrderSortKeys;
    query?: string;
  }
  export interface CustomerToOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToPaymentMethodsArgs {
    showRevoked?: boolean;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CustomerToPaymentMethodsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToPaymentMethodsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface CustomerToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CustomerToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToProductSubscriberStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToSmsMarketingConsentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToStatisticsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToSubscriptionContractsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CustomerToSubscriptionContractsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerToSubscriptionContractsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToTaxExemptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToTaxExemptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToUnsubscribeUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToValidEmailAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerToVerifiedEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventSubjectTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Customer' | 'Company' | 'DraftOrder' | 'Order' | 'CompanyLocation' | 'PriceRule';
  }
  export interface HasEventsTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Customer' | 'Company' | 'DraftOrder' | 'Order' | 'CompanyLocation' | 'DiscountAutomaticNode' | 'DiscountAutomaticBxgy' | 'DiscountCodeNode' | 'DiscountNode' | 'PriceRule';
  }
  export interface EventConnectionTypeResolver<TParent = any> {
    edges?: EventConnectionToEdgesResolver<TParent>;
    nodes?: EventConnectionToNodesResolver<TParent>;
    pageInfo?: EventConnectionToPageInfoResolver<TParent>;
  }
  
  export interface EventConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EventConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EventConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EventEdgeTypeResolver<TParent = any> {
    cursor?: EventEdgeToCursorResolver<TParent>;
    node?: EventEdgeToNodeResolver<TParent>;
  }
  
  export interface EventEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EventEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EventTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'BasicEvent' | 'CommentEvent';
  }
  export interface MailingAddressTypeResolver<TParent = any> {
    address1?: MailingAddressToAddress1Resolver<TParent>;
    address2?: MailingAddressToAddress2Resolver<TParent>;
    city?: MailingAddressToCityResolver<TParent>;
    company?: MailingAddressToCompanyResolver<TParent>;
    coordinatesValidated?: MailingAddressToCoordinatesValidatedResolver<TParent>;
    country?: MailingAddressToCountryResolver<TParent>;
    countryCode?: MailingAddressToCountryCodeResolver<TParent>;
    countryCodeV2?: MailingAddressToCountryCodeV2Resolver<TParent>;
    firstName?: MailingAddressToFirstNameResolver<TParent>;
    formatted?: MailingAddressToFormattedResolver<TParent>;
    formattedArea?: MailingAddressToFormattedAreaResolver<TParent>;
    id?: MailingAddressToIdResolver<TParent>;
    lastName?: MailingAddressToLastNameResolver<TParent>;
    latitude?: MailingAddressToLatitudeResolver<TParent>;
    longitude?: MailingAddressToLongitudeResolver<TParent>;
    name?: MailingAddressToNameResolver<TParent>;
    phone?: MailingAddressToPhoneResolver<TParent>;
    province?: MailingAddressToProvinceResolver<TParent>;
    provinceCode?: MailingAddressToProvinceCodeResolver<TParent>;
    timeZone?: MailingAddressToTimeZoneResolver<TParent>;
    zip?: MailingAddressToZipResolver<TParent>;
  }
  
  export interface MailingAddressToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToCoordinatesValidatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToCountryCodeV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToFormattedArgs {
    withName?: boolean;
    withCompany?: boolean;
  }
  export interface MailingAddressToFormattedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MailingAddressToFormattedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToFormattedAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToLatitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToLongitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToProvinceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToTimeZoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactTypeResolver<TParent = any> {
    company?: CompanyContactToCompanyResolver<TParent>;
    createdAt?: CompanyContactToCreatedAtResolver<TParent>;
    customer?: CompanyContactToCustomerResolver<TParent>;
    draftOrders?: CompanyContactToDraftOrdersResolver<TParent>;
    id?: CompanyContactToIdResolver<TParent>;
    isMainContact?: CompanyContactToIsMainContactResolver<TParent>;
    lifetimeDuration?: CompanyContactToLifetimeDurationResolver<TParent>;
    locale?: CompanyContactToLocaleResolver<TParent>;
    orders?: CompanyContactToOrdersResolver<TParent>;
    roleAssignments?: CompanyContactToRoleAssignmentsResolver<TParent>;
    title?: CompanyContactToTitleResolver<TParent>;
    updatedAt?: CompanyContactToUpdatedAtResolver<TParent>;
  }
  
  export interface CompanyContactToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactToDraftOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DraftOrderSortKeys;
    query?: string;
  }
  export interface CompanyContactToDraftOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyContactToDraftOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactToIsMainContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactToLifetimeDurationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactToLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactToOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: OrderSortKeys;
  }
  export interface CompanyContactToOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyContactToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactToRoleAssignmentsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CompanyContactRoleAssignmentSortKeys;
    query?: string;
  }
  export interface CompanyContactToRoleAssignmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyContactToRoleAssignmentsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyTypeResolver<TParent = any> {
    contactCount?: CompanyToContactCountResolver<TParent>;
    contactRoles?: CompanyToContactRolesResolver<TParent>;
    contacts?: CompanyToContactsResolver<TParent>;
    createdAt?: CompanyToCreatedAtResolver<TParent>;
    customerSince?: CompanyToCustomerSinceResolver<TParent>;
    defaultCursor?: CompanyToDefaultCursorResolver<TParent>;
    defaultRole?: CompanyToDefaultRoleResolver<TParent>;
    draftOrders?: CompanyToDraftOrdersResolver<TParent>;
    events?: CompanyToEventsResolver<TParent>;
    externalId?: CompanyToExternalIdResolver<TParent>;
    hasTimelineComment?: CompanyToHasTimelineCommentResolver<TParent>;
    id?: CompanyToIdResolver<TParent>;
    lifetimeDuration?: CompanyToLifetimeDurationResolver<TParent>;
    locationCount?: CompanyToLocationCountResolver<TParent>;
    locations?: CompanyToLocationsResolver<TParent>;
    mainContact?: CompanyToMainContactResolver<TParent>;
    metafield?: CompanyToMetafieldResolver<TParent>;
    metafieldDefinitions?: CompanyToMetafieldDefinitionsResolver<TParent>;
    metafields?: CompanyToMetafieldsResolver<TParent>;
    name?: CompanyToNameResolver<TParent>;
    note?: CompanyToNoteResolver<TParent>;
    orderCount?: CompanyToOrderCountResolver<TParent>;
    orders?: CompanyToOrdersResolver<TParent>;
    privateMetafield?: CompanyToPrivateMetafieldResolver<TParent>;
    privateMetafields?: CompanyToPrivateMetafieldsResolver<TParent>;
    totalSpent?: CompanyToTotalSpentResolver<TParent>;
    updatedAt?: CompanyToUpdatedAtResolver<TParent>;
  }
  
  export interface CompanyToContactCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToContactRolesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CompanyContactRoleSortKeys;
  }
  export interface CompanyToContactRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyToContactRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToContactsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CompanyContactSortKeys;
    query?: string;
  }
  export interface CompanyToContactsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyToContactsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToCustomerSinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToDefaultCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToDefaultRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToDraftOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DraftOrderSortKeys;
    query?: string;
  }
  export interface CompanyToDraftOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyToDraftOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: EventSortKeys;
    query?: string;
  }
  export interface CompanyToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToExternalIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToHasTimelineCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToLifetimeDurationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToLocationCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToLocationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CompanyLocationSortKeys;
    query?: string;
  }
  export interface CompanyToLocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyToLocationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToMainContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface CompanyToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface CompanyToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CompanyToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToOrderCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: OrderSortKeys;
  }
  export interface CompanyToOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface CompanyToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CompanyToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToTotalSpentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleConnectionTypeResolver<TParent = any> {
    edges?: CompanyContactRoleConnectionToEdgesResolver<TParent>;
    nodes?: CompanyContactRoleConnectionToNodesResolver<TParent>;
    pageInfo?: CompanyContactRoleConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CompanyContactRoleConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleEdgeTypeResolver<TParent = any> {
    cursor?: CompanyContactRoleEdgeToCursorResolver<TParent>;
    node?: CompanyContactRoleEdgeToNodeResolver<TParent>;
  }
  
  export interface CompanyContactRoleEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleTypeResolver<TParent = any> {
    id?: CompanyContactRoleToIdResolver<TParent>;
    name?: CompanyContactRoleToNameResolver<TParent>;
    note?: CompanyContactRoleToNoteResolver<TParent>;
  }
  
  export interface CompanyContactRoleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactConnectionTypeResolver<TParent = any> {
    edges?: CompanyContactConnectionToEdgesResolver<TParent>;
    nodes?: CompanyContactConnectionToNodesResolver<TParent>;
    pageInfo?: CompanyContactConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CompanyContactConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactEdgeTypeResolver<TParent = any> {
    cursor?: CompanyContactEdgeToCursorResolver<TParent>;
    node?: CompanyContactEdgeToNodeResolver<TParent>;
  }
  
  export interface CompanyContactEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderConnectionTypeResolver<TParent = any> {
    edges?: DraftOrderConnectionToEdgesResolver<TParent>;
    nodes?: DraftOrderConnectionToNodesResolver<TParent>;
    pageInfo?: DraftOrderConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DraftOrderConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderEdgeTypeResolver<TParent = any> {
    cursor?: DraftOrderEdgeToCursorResolver<TParent>;
    node?: DraftOrderEdgeToNodeResolver<TParent>;
  }
  
  export interface DraftOrderEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderTypeResolver<TParent = any> {
    appliedDiscount?: DraftOrderToAppliedDiscountResolver<TParent>;
    billingAddress?: DraftOrderToBillingAddressResolver<TParent>;
    billingAddressMatchesShippingAddress?: DraftOrderToBillingAddressMatchesShippingAddressResolver<TParent>;
    completedAt?: DraftOrderToCompletedAtResolver<TParent>;
    createdAt?: DraftOrderToCreatedAtResolver<TParent>;
    currencyCode?: DraftOrderToCurrencyCodeResolver<TParent>;
    customAttributes?: DraftOrderToCustomAttributesResolver<TParent>;
    customer?: DraftOrderToCustomerResolver<TParent>;
    defaultCursor?: DraftOrderToDefaultCursorResolver<TParent>;
    email?: DraftOrderToEmailResolver<TParent>;
    events?: DraftOrderToEventsResolver<TParent>;
    hasTimelineComment?: DraftOrderToHasTimelineCommentResolver<TParent>;
    id?: DraftOrderToIdResolver<TParent>;
    invoiceEmailTemplateSubject?: DraftOrderToInvoiceEmailTemplateSubjectResolver<TParent>;
    invoiceSentAt?: DraftOrderToInvoiceSentAtResolver<TParent>;
    invoiceUrl?: DraftOrderToInvoiceUrlResolver<TParent>;
    legacyResourceId?: DraftOrderToLegacyResourceIdResolver<TParent>;
    lineItems?: DraftOrderToLineItemsResolver<TParent>;
    lineItemsSubtotalPrice?: DraftOrderToLineItemsSubtotalPriceResolver<TParent>;
    localizationExtensions?: DraftOrderToLocalizationExtensionsResolver<TParent>;
    marketName?: DraftOrderToMarketNameResolver<TParent>;
    marketRegionCountryCode?: DraftOrderToMarketRegionCountryCodeResolver<TParent>;
    metafield?: DraftOrderToMetafieldResolver<TParent>;
    metafields?: DraftOrderToMetafieldsResolver<TParent>;
    name?: DraftOrderToNameResolver<TParent>;
    note2?: DraftOrderToNote2Resolver<TParent>;
    order?: DraftOrderToOrderResolver<TParent>;
    paymentTerms?: DraftOrderToPaymentTermsResolver<TParent>;
    phone?: DraftOrderToPhoneResolver<TParent>;
    poNumber?: DraftOrderToPoNumberResolver<TParent>;
    presentmentCurrencyCode?: DraftOrderToPresentmentCurrencyCodeResolver<TParent>;
    privateMetafield?: DraftOrderToPrivateMetafieldResolver<TParent>;
    privateMetafields?: DraftOrderToPrivateMetafieldsResolver<TParent>;
    purchasingEntity?: DraftOrderToPurchasingEntityResolver<TParent>;
    ready?: DraftOrderToReadyResolver<TParent>;
    reserveInventoryUntil?: DraftOrderToReserveInventoryUntilResolver<TParent>;
    shippingAddress?: DraftOrderToShippingAddressResolver<TParent>;
    shippingLine?: DraftOrderToShippingLineResolver<TParent>;
    status?: DraftOrderToStatusResolver<TParent>;
    subtotalPrice?: DraftOrderToSubtotalPriceResolver<TParent>;
    subtotalPriceSet?: DraftOrderToSubtotalPriceSetResolver<TParent>;
    tags?: DraftOrderToTagsResolver<TParent>;
    taxExempt?: DraftOrderToTaxExemptResolver<TParent>;
    taxLines?: DraftOrderToTaxLinesResolver<TParent>;
    taxesIncluded?: DraftOrderToTaxesIncludedResolver<TParent>;
    totalDiscountsSet?: DraftOrderToTotalDiscountsSetResolver<TParent>;
    totalLineItemsPriceSet?: DraftOrderToTotalLineItemsPriceSetResolver<TParent>;
    totalPrice?: DraftOrderToTotalPriceResolver<TParent>;
    totalPriceSet?: DraftOrderToTotalPriceSetResolver<TParent>;
    totalShippingPrice?: DraftOrderToTotalShippingPriceResolver<TParent>;
    totalShippingPriceSet?: DraftOrderToTotalShippingPriceSetResolver<TParent>;
    totalTax?: DraftOrderToTotalTaxResolver<TParent>;
    totalTaxSet?: DraftOrderToTotalTaxSetResolver<TParent>;
    totalWeight?: DraftOrderToTotalWeightResolver<TParent>;
    updatedAt?: DraftOrderToUpdatedAtResolver<TParent>;
    visibleToCustomer?: DraftOrderToVisibleToCustomerResolver<TParent>;
  }
  
  export interface DraftOrderToAppliedDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToBillingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToBillingAddressMatchesShippingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToCompletedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToDefaultCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: EventSortKeys;
    query?: string;
  }
  export interface DraftOrderToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DraftOrderToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToHasTimelineCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToInvoiceEmailTemplateSubjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToInvoiceSentAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToInvoiceUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DraftOrderToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DraftOrderToLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToLineItemsSubtotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToLocalizationExtensionsArgs {
    countryCodes?: Array<CountryCode>;
    purposes?: Array<LocalizationExtensionPurpose>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DraftOrderToLocalizationExtensionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DraftOrderToLocalizationExtensionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToMarketNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToMarketRegionCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface DraftOrderToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DraftOrderToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DraftOrderToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DraftOrderToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToNote2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToPaymentTermsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToPoNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToPresentmentCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface DraftOrderToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DraftOrderToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DraftOrderToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DraftOrderToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToPurchasingEntityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToReadyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToReserveInventoryUntilResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToShippingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToShippingLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToSubtotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToSubtotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTaxExemptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTaxesIncludedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTotalDiscountsSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTotalLineItemsPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTotalShippingPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTotalShippingPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTotalTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTotalTaxSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToTotalWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderToVisibleToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface HasLocalizationExtensionsTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'DraftOrder' | 'Order';
  }
  export interface LocalizationExtensionConnectionTypeResolver<TParent = any> {
    edges?: LocalizationExtensionConnectionToEdgesResolver<TParent>;
    nodes?: LocalizationExtensionConnectionToNodesResolver<TParent>;
    pageInfo?: LocalizationExtensionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface LocalizationExtensionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocalizationExtensionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocalizationExtensionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocalizationExtensionEdgeTypeResolver<TParent = any> {
    cursor?: LocalizationExtensionEdgeToCursorResolver<TParent>;
    node?: LocalizationExtensionEdgeToNodeResolver<TParent>;
  }
  
  export interface LocalizationExtensionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocalizationExtensionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocalizationExtensionTypeResolver<TParent = any> {
    countryCode?: LocalizationExtensionToCountryCodeResolver<TParent>;
    key?: LocalizationExtensionToKeyResolver<TParent>;
    purpose?: LocalizationExtensionToPurposeResolver<TParent>;
    title?: LocalizationExtensionToTitleResolver<TParent>;
    value?: LocalizationExtensionToValueResolver<TParent>;
  }
  
  export interface LocalizationExtensionToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocalizationExtensionToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocalizationExtensionToPurposeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocalizationExtensionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocalizationExtensionToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderAppliedDiscountTypeResolver<TParent = any> {
    amount?: DraftOrderAppliedDiscountToAmountResolver<TParent>;
    amountSet?: DraftOrderAppliedDiscountToAmountSetResolver<TParent>;
    amountV2?: DraftOrderAppliedDiscountToAmountV2Resolver<TParent>;
    description?: DraftOrderAppliedDiscountToDescriptionResolver<TParent>;
    title?: DraftOrderAppliedDiscountToTitleResolver<TParent>;
    value?: DraftOrderAppliedDiscountToValueResolver<TParent>;
    valueType?: DraftOrderAppliedDiscountToValueTypeResolver<TParent>;
  }
  
  export interface DraftOrderAppliedDiscountToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderAppliedDiscountToAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderAppliedDiscountToAmountV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderAppliedDiscountToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderAppliedDiscountToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderAppliedDiscountToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderAppliedDiscountToValueTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemConnectionTypeResolver<TParent = any> {
    edges?: DraftOrderLineItemConnectionToEdgesResolver<TParent>;
    nodes?: DraftOrderLineItemConnectionToNodesResolver<TParent>;
    pageInfo?: DraftOrderLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DraftOrderLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemEdgeTypeResolver<TParent = any> {
    cursor?: DraftOrderLineItemEdgeToCursorResolver<TParent>;
    node?: DraftOrderLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface DraftOrderLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemTypeResolver<TParent = any> {
    appliedDiscount?: DraftOrderLineItemToAppliedDiscountResolver<TParent>;
    custom?: DraftOrderLineItemToCustomResolver<TParent>;
    customAttributes?: DraftOrderLineItemToCustomAttributesResolver<TParent>;
    customAttributesV2?: DraftOrderLineItemToCustomAttributesV2Resolver<TParent>;
    discountedTotal?: DraftOrderLineItemToDiscountedTotalResolver<TParent>;
    discountedTotalSet?: DraftOrderLineItemToDiscountedTotalSetResolver<TParent>;
    discountedUnitPrice?: DraftOrderLineItemToDiscountedUnitPriceResolver<TParent>;
    discountedUnitPriceSet?: DraftOrderLineItemToDiscountedUnitPriceSetResolver<TParent>;
    fulfillmentService?: DraftOrderLineItemToFulfillmentServiceResolver<TParent>;
    grams?: DraftOrderLineItemToGramsResolver<TParent>;
    id?: DraftOrderLineItemToIdResolver<TParent>;
    image?: DraftOrderLineItemToImageResolver<TParent>;
    isGiftCard?: DraftOrderLineItemToIsGiftCardResolver<TParent>;
    name?: DraftOrderLineItemToNameResolver<TParent>;
    originalTotal?: DraftOrderLineItemToOriginalTotalResolver<TParent>;
    originalTotalSet?: DraftOrderLineItemToOriginalTotalSetResolver<TParent>;
    originalUnitPrice?: DraftOrderLineItemToOriginalUnitPriceResolver<TParent>;
    originalUnitPriceSet?: DraftOrderLineItemToOriginalUnitPriceSetResolver<TParent>;
    product?: DraftOrderLineItemToProductResolver<TParent>;
    quantity?: DraftOrderLineItemToQuantityResolver<TParent>;
    requiresShipping?: DraftOrderLineItemToRequiresShippingResolver<TParent>;
    sku?: DraftOrderLineItemToSkuResolver<TParent>;
    taxLines?: DraftOrderLineItemToTaxLinesResolver<TParent>;
    taxable?: DraftOrderLineItemToTaxableResolver<TParent>;
    title?: DraftOrderLineItemToTitleResolver<TParent>;
    totalDiscount?: DraftOrderLineItemToTotalDiscountResolver<TParent>;
    totalDiscountSet?: DraftOrderLineItemToTotalDiscountSetResolver<TParent>;
    variant?: DraftOrderLineItemToVariantResolver<TParent>;
    variantTitle?: DraftOrderLineItemToVariantTitleResolver<TParent>;
    vendor?: DraftOrderLineItemToVendorResolver<TParent>;
    weight?: DraftOrderLineItemToWeightResolver<TParent>;
  }
  
  export interface DraftOrderLineItemToAppliedDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToCustomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToCustomAttributesV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToDiscountedTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToDiscountedTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToDiscountedUnitPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToDiscountedUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToFulfillmentServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToGramsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToIsGiftCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToOriginalTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToOriginalTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToOriginalUnitPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToOriginalUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToTaxableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToTotalDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToTotalDiscountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToVariantTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToVendorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderLineItemToWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TypedAttributeTypeResolver<TParent = any> {
    key?: TypedAttributeToKeyResolver<TParent>;
    value?: TypedAttributeToValueResolver<TParent>;
  }
  
  export interface TypedAttributeToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TypedAttributeToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxLineTypeResolver<TParent = any> {
    channelLiable?: TaxLineToChannelLiableResolver<TParent>;
    price?: TaxLineToPriceResolver<TParent>;
    priceSet?: TaxLineToPriceSetResolver<TParent>;
    rate?: TaxLineToRateResolver<TParent>;
    ratePercentage?: TaxLineToRatePercentageResolver<TParent>;
    title?: TaxLineToTitleResolver<TParent>;
  }
  
  export interface TaxLineToChannelLiableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxLineToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxLineToPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxLineToRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxLineToRatePercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxLineToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTypeResolver<TParent = any> {
    additionalFees?: OrderToAdditionalFeesResolver<TParent>;
    agreements?: OrderToAgreementsResolver<TParent>;
    alerts?: OrderToAlertsResolver<TParent>;
    app?: OrderToAppResolver<TParent>;
    billingAddress?: OrderToBillingAddressResolver<TParent>;
    billingAddressMatchesShippingAddress?: OrderToBillingAddressMatchesShippingAddressResolver<TParent>;
    canMarkAsPaid?: OrderToCanMarkAsPaidResolver<TParent>;
    canNotifyCustomer?: OrderToCanNotifyCustomerResolver<TParent>;
    cancelReason?: OrderToCancelReasonResolver<TParent>;
    cancellation?: OrderToCancellationResolver<TParent>;
    cancelledAt?: OrderToCancelledAtResolver<TParent>;
    capturable?: OrderToCapturableResolver<TParent>;
    cartDiscountAmount?: OrderToCartDiscountAmountResolver<TParent>;
    cartDiscountAmountSet?: OrderToCartDiscountAmountSetResolver<TParent>;
    channel?: OrderToChannelResolver<TParent>;
    channelInformation?: OrderToChannelInformationResolver<TParent>;
    clientIp?: OrderToClientIpResolver<TParent>;
    closed?: OrderToClosedResolver<TParent>;
    closedAt?: OrderToClosedAtResolver<TParent>;
    confirmationNumber?: OrderToConfirmationNumberResolver<TParent>;
    confirmed?: OrderToConfirmedResolver<TParent>;
    createdAt?: OrderToCreatedAtResolver<TParent>;
    currencyCode?: OrderToCurrencyCodeResolver<TParent>;
    currentCartDiscountAmountSet?: OrderToCurrentCartDiscountAmountSetResolver<TParent>;
    currentSubtotalLineItemsQuantity?: OrderToCurrentSubtotalLineItemsQuantityResolver<TParent>;
    currentSubtotalPriceSet?: OrderToCurrentSubtotalPriceSetResolver<TParent>;
    currentTaxLines?: OrderToCurrentTaxLinesResolver<TParent>;
    currentTotalAdditionalFeesSet?: OrderToCurrentTotalAdditionalFeesSetResolver<TParent>;
    currentTotalDiscountsSet?: OrderToCurrentTotalDiscountsSetResolver<TParent>;
    currentTotalDutiesSet?: OrderToCurrentTotalDutiesSetResolver<TParent>;
    currentTotalPriceSet?: OrderToCurrentTotalPriceSetResolver<TParent>;
    currentTotalTaxSet?: OrderToCurrentTotalTaxSetResolver<TParent>;
    currentTotalWeight?: OrderToCurrentTotalWeightResolver<TParent>;
    customAttributes?: OrderToCustomAttributesResolver<TParent>;
    customer?: OrderToCustomerResolver<TParent>;
    customerAcceptsMarketing?: OrderToCustomerAcceptsMarketingResolver<TParent>;
    customerJourney?: OrderToCustomerJourneyResolver<TParent>;
    customerJourneySummary?: OrderToCustomerJourneySummaryResolver<TParent>;
    customerLocale?: OrderToCustomerLocaleResolver<TParent>;
    discountApplications?: OrderToDiscountApplicationsResolver<TParent>;
    discountCode?: OrderToDiscountCodeResolver<TParent>;
    discountCodes?: OrderToDiscountCodesResolver<TParent>;
    displayAddress?: OrderToDisplayAddressResolver<TParent>;
    displayFinancialStatus?: OrderToDisplayFinancialStatusResolver<TParent>;
    displayFulfillmentStatus?: OrderToDisplayFulfillmentStatusResolver<TParent>;
    disputes?: OrderToDisputesResolver<TParent>;
    edited?: OrderToEditedResolver<TParent>;
    email?: OrderToEmailResolver<TParent>;
    estimatedTaxes?: OrderToEstimatedTaxesResolver<TParent>;
    events?: OrderToEventsResolver<TParent>;
    exchangeV2s?: OrderToExchangeV2sResolver<TParent>;
    fulfillable?: OrderToFulfillableResolver<TParent>;
    fulfillmentOrders?: OrderToFulfillmentOrdersResolver<TParent>;
    fulfillments?: OrderToFulfillmentsResolver<TParent>;
    fullyPaid?: OrderToFullyPaidResolver<TParent>;
    hasTimelineComment?: OrderToHasTimelineCommentResolver<TParent>;
    id?: OrderToIdResolver<TParent>;
    landingPageDisplayText?: OrderToLandingPageDisplayTextResolver<TParent>;
    landingPageUrl?: OrderToLandingPageUrlResolver<TParent>;
    legacyResourceId?: OrderToLegacyResourceIdResolver<TParent>;
    lineItems?: OrderToLineItemsResolver<TParent>;
    lineItemsMutable?: OrderToLineItemsMutableResolver<TParent>;
    localizationExtensions?: OrderToLocalizationExtensionsResolver<TParent>;
    location?: OrderToLocationResolver<TParent>;
    merchantEditable?: OrderToMerchantEditableResolver<TParent>;
    merchantEditableErrors?: OrderToMerchantEditableErrorsResolver<TParent>;
    merchantOfRecordApp?: OrderToMerchantOfRecordAppResolver<TParent>;
    metafield?: OrderToMetafieldResolver<TParent>;
    metafieldDefinitions?: OrderToMetafieldDefinitionsResolver<TParent>;
    metafields?: OrderToMetafieldsResolver<TParent>;
    name?: OrderToNameResolver<TParent>;
    netPayment?: OrderToNetPaymentResolver<TParent>;
    netPaymentSet?: OrderToNetPaymentSetResolver<TParent>;
    nonFulfillableLineItems?: OrderToNonFulfillableLineItemsResolver<TParent>;
    note?: OrderToNoteResolver<TParent>;
    originalTotalAdditionalFeesSet?: OrderToOriginalTotalAdditionalFeesSetResolver<TParent>;
    originalTotalDutiesSet?: OrderToOriginalTotalDutiesSetResolver<TParent>;
    originalTotalPriceSet?: OrderToOriginalTotalPriceSetResolver<TParent>;
    paymentCollectionDetails?: OrderToPaymentCollectionDetailsResolver<TParent>;
    paymentGatewayNames?: OrderToPaymentGatewayNamesResolver<TParent>;
    paymentTerms?: OrderToPaymentTermsResolver<TParent>;
    phone?: OrderToPhoneResolver<TParent>;
    physicalLocation?: OrderToPhysicalLocationResolver<TParent>;
    poNumber?: OrderToPoNumberResolver<TParent>;
    presentmentCurrencyCode?: OrderToPresentmentCurrencyCodeResolver<TParent>;
    privateMetafield?: OrderToPrivateMetafieldResolver<TParent>;
    privateMetafields?: OrderToPrivateMetafieldsResolver<TParent>;
    processedAt?: OrderToProcessedAtResolver<TParent>;
    publication?: OrderToPublicationResolver<TParent>;
    purchasingEntity?: OrderToPurchasingEntityResolver<TParent>;
    referralCode?: OrderToReferralCodeResolver<TParent>;
    referrerDisplayText?: OrderToReferrerDisplayTextResolver<TParent>;
    referrerUrl?: OrderToReferrerUrlResolver<TParent>;
    refundDiscrepancySet?: OrderToRefundDiscrepancySetResolver<TParent>;
    refundable?: OrderToRefundableResolver<TParent>;
    refunds?: OrderToRefundsResolver<TParent>;
    registeredSourceUrl?: OrderToRegisteredSourceUrlResolver<TParent>;
    requiresShipping?: OrderToRequiresShippingResolver<TParent>;
    restockable?: OrderToRestockableResolver<TParent>;
    returnStatus?: OrderToReturnStatusResolver<TParent>;
    returns?: OrderToReturnsResolver<TParent>;
    riskLevel?: OrderToRiskLevelResolver<TParent>;
    risks?: OrderToRisksResolver<TParent>;
    shippingAddress?: OrderToShippingAddressResolver<TParent>;
    shippingLine?: OrderToShippingLineResolver<TParent>;
    shippingLines?: OrderToShippingLinesResolver<TParent>;
    shopifyProtect?: OrderToShopifyProtectResolver<TParent>;
    sourceIdentifier?: OrderToSourceIdentifierResolver<TParent>;
    subtotalLineItemsQuantity?: OrderToSubtotalLineItemsQuantityResolver<TParent>;
    subtotalPrice?: OrderToSubtotalPriceResolver<TParent>;
    subtotalPriceSet?: OrderToSubtotalPriceSetResolver<TParent>;
    suggestedRefund?: OrderToSuggestedRefundResolver<TParent>;
    tags?: OrderToTagsResolver<TParent>;
    taxExempt?: OrderToTaxExemptResolver<TParent>;
    taxLines?: OrderToTaxLinesResolver<TParent>;
    taxesIncluded?: OrderToTaxesIncludedResolver<TParent>;
    test?: OrderToTestResolver<TParent>;
    totalCapturable?: OrderToTotalCapturableResolver<TParent>;
    totalCapturableSet?: OrderToTotalCapturableSetResolver<TParent>;
    totalDiscounts?: OrderToTotalDiscountsResolver<TParent>;
    totalDiscountsSet?: OrderToTotalDiscountsSetResolver<TParent>;
    totalOutstandingSet?: OrderToTotalOutstandingSetResolver<TParent>;
    totalPrice?: OrderToTotalPriceResolver<TParent>;
    totalPriceSet?: OrderToTotalPriceSetResolver<TParent>;
    totalReceived?: OrderToTotalReceivedResolver<TParent>;
    totalReceivedSet?: OrderToTotalReceivedSetResolver<TParent>;
    totalRefunded?: OrderToTotalRefundedResolver<TParent>;
    totalRefundedSet?: OrderToTotalRefundedSetResolver<TParent>;
    totalRefundedShippingSet?: OrderToTotalRefundedShippingSetResolver<TParent>;
    totalShippingPrice?: OrderToTotalShippingPriceResolver<TParent>;
    totalShippingPriceSet?: OrderToTotalShippingPriceSetResolver<TParent>;
    totalTax?: OrderToTotalTaxResolver<TParent>;
    totalTaxSet?: OrderToTotalTaxSetResolver<TParent>;
    totalTipReceived?: OrderToTotalTipReceivedResolver<TParent>;
    totalTipReceivedSet?: OrderToTotalTipReceivedSetResolver<TParent>;
    totalWeight?: OrderToTotalWeightResolver<TParent>;
    transactions?: OrderToTransactionsResolver<TParent>;
    unpaid?: OrderToUnpaidResolver<TParent>;
    updatedAt?: OrderToUpdatedAtResolver<TParent>;
  }
  
  export interface OrderToAdditionalFeesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToAgreementsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface OrderToAgreementsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToAgreementsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToAlertsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToBillingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToBillingAddressMatchesShippingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCanMarkAsPaidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCanNotifyCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCancelReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCancellationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCancelledAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCapturableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCartDiscountAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCartDiscountAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToChannelInformationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToClientIpResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToClosedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToClosedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToConfirmationNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToConfirmedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentCartDiscountAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentSubtotalLineItemsQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentSubtotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentTotalAdditionalFeesSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentTotalDiscountsSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentTotalDutiesSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentTotalTaxSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCurrentTotalWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCustomerAcceptsMarketingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCustomerJourneyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCustomerJourneySummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToCustomerLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToDiscountApplicationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderToDiscountApplicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToDiscountApplicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToDiscountCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToDiscountCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToDisplayAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToDisplayFinancialStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToDisplayFulfillmentStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToDisputesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToEditedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToEstimatedTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: EventSortKeys;
    query?: string;
  }
  export interface OrderToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToExchangeV2sArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface OrderToExchangeV2sResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToExchangeV2sArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToFulfillableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToFulfillmentOrdersArgs {
    displayable?: boolean;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface OrderToFulfillmentOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToFulfillmentOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToFulfillmentsArgs {
    first?: number;
  }
  export interface OrderToFulfillmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToFulfillmentsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToFullyPaidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToHasTimelineCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToLandingPageDisplayTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToLandingPageUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToLineItemsMutableArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderToLineItemsMutableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToLineItemsMutableArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToLocalizationExtensionsArgs {
    countryCodes?: Array<CountryCode>;
    purposes?: Array<LocalizationExtensionPurpose>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderToLocalizationExtensionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToLocalizationExtensionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToMerchantEditableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToMerchantEditableErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToMerchantOfRecordAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface OrderToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface OrderToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToNetPaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToNetPaymentSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToNonFulfillableLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderToNonFulfillableLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToNonFulfillableLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToOriginalTotalAdditionalFeesSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToOriginalTotalDutiesSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToOriginalTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPaymentCollectionDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPaymentGatewayNamesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPaymentTermsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPhysicalLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPoNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPresentmentCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface OrderToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToProcessedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToPurchasingEntityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToReferralCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToReferrerDisplayTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToReferrerUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToRefundDiscrepancySetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToRefundableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToRefundsArgs {
    first?: number;
  }
  export interface OrderToRefundsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToRefundsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToRegisteredSourceUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToRestockableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToReturnStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToReturnsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface OrderToReturnsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToReturnsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToRiskLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToRisksArgs {
    first?: number;
  }
  export interface OrderToRisksResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToRisksArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToShippingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToShippingLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToShippingLinesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderToShippingLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToShippingLinesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToShopifyProtectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToSourceIdentifierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToSubtotalLineItemsQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToSubtotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToSubtotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToSuggestedRefundArgs {
    shippingAmount?: Money;
    refundShipping?: boolean;
    refundLineItems?: Array<RefundLineItemInput>;
    refundDuties?: Array<RefundDutyInput>;
    suggestFullRefund?: boolean;
  }
  export interface OrderToSuggestedRefundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToSuggestedRefundArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTaxExemptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTaxesIncludedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalCapturableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalCapturableSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalDiscountsSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalOutstandingSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalReceivedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalReceivedSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalRefundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalRefundedSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalRefundedShippingSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalShippingPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalShippingPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalTaxSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalTipReceivedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalTipReceivedSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTotalWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToTransactionsArgs {
    first?: number;
    capturable?: boolean;
    manuallyResolvable?: boolean;
  }
  export interface OrderToTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderToTransactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToUnpaidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeTypeResolver<TParent = any> {
    id?: AdditionalFeeToIdResolver<TParent>;
    name?: AdditionalFeeToNameResolver<TParent>;
    price?: AdditionalFeeToPriceResolver<TParent>;
    taxLines?: AdditionalFeeToTaxLinesResolver<TParent>;
  }
  
  export interface AdditionalFeeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SalesAgreementConnectionTypeResolver<TParent = any> {
    edges?: SalesAgreementConnectionToEdgesResolver<TParent>;
    nodes?: SalesAgreementConnectionToNodesResolver<TParent>;
    pageInfo?: SalesAgreementConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SalesAgreementConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SalesAgreementConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SalesAgreementConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SalesAgreementEdgeTypeResolver<TParent = any> {
    cursor?: SalesAgreementEdgeToCursorResolver<TParent>;
    node?: SalesAgreementEdgeToNodeResolver<TParent>;
  }
  
  export interface SalesAgreementEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SalesAgreementEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SalesAgreementTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'OrderAgreement' | 'OrderEditAgreement' | 'RefundAgreement';
  }
  export interface SaleConnectionTypeResolver<TParent = any> {
    edges?: SaleConnectionToEdgesResolver<TParent>;
    nodes?: SaleConnectionToNodesResolver<TParent>;
    pageInfo?: SaleConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SaleConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SaleConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SaleConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SaleEdgeTypeResolver<TParent = any> {
    cursor?: SaleEdgeToCursorResolver<TParent>;
    node?: SaleEdgeToNodeResolver<TParent>;
  }
  
  export interface SaleEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SaleEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SaleTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'AdditionalFeeSale' | 'AdjustmentSale' | 'DutySale' | 'GiftCardSale' | 'ProductSale' | 'ShippingLineSale' | 'TipSale' | 'UnknownSale';
  }
  export interface SaleTaxTypeResolver<TParent = any> {
    amount?: SaleTaxToAmountResolver<TParent>;
    id?: SaleTaxToIdResolver<TParent>;
    taxLine?: SaleTaxToTaxLineResolver<TParent>;
  }
  
  export interface SaleTaxToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SaleTaxToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SaleTaxToTaxLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceAlertTypeResolver<TParent = any> {
    actions?: ResourceAlertToActionsResolver<TParent>;
    content?: ResourceAlertToContentResolver<TParent>;
    dismissibleHandle?: ResourceAlertToDismissibleHandleResolver<TParent>;
    icon?: ResourceAlertToIconResolver<TParent>;
    severity?: ResourceAlertToSeverityResolver<TParent>;
    title?: ResourceAlertToTitleResolver<TParent>;
  }
  
  export interface ResourceAlertToActionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceAlertToContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceAlertToDismissibleHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceAlertToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceAlertToSeverityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceAlertToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceAlertActionTypeResolver<TParent = any> {
    primary?: ResourceAlertActionToPrimaryResolver<TParent>;
    show?: ResourceAlertActionToShowResolver<TParent>;
    title?: ResourceAlertActionToTitleResolver<TParent>;
    url?: ResourceAlertActionToUrlResolver<TParent>;
  }
  
  export interface ResourceAlertActionToPrimaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceAlertActionToShowResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceAlertActionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceAlertActionToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderAppTypeResolver<TParent = any> {
    icon?: OrderAppToIconResolver<TParent>;
    id?: OrderAppToIdResolver<TParent>;
    name?: OrderAppToNameResolver<TParent>;
  }
  
  export interface OrderAppToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderAppToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderAppToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCancellationTypeResolver<TParent = any> {
    staffNote?: OrderCancellationToStaffNoteResolver<TParent>;
  }
  
  export interface OrderCancellationToStaffNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelInformationTypeResolver<TParent = any> {
    app?: ChannelInformationToAppResolver<TParent>;
    channelDefinition?: ChannelInformationToChannelDefinitionResolver<TParent>;
    channelId?: ChannelInformationToChannelIdResolver<TParent>;
    id?: ChannelInformationToIdResolver<TParent>;
  }
  
  export interface ChannelInformationToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelInformationToChannelDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelInformationToChannelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelInformationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelDefinitionTypeResolver<TParent = any> {
    channelName?: ChannelDefinitionToChannelNameResolver<TParent>;
    handle?: ChannelDefinitionToHandleResolver<TParent>;
    id?: ChannelDefinitionToIdResolver<TParent>;
    isMarketplace?: ChannelDefinitionToIsMarketplaceResolver<TParent>;
    subChannelName?: ChannelDefinitionToSubChannelNameResolver<TParent>;
    svgIcon?: ChannelDefinitionToSvgIconResolver<TParent>;
  }
  
  export interface ChannelDefinitionToChannelNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelDefinitionToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelDefinitionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelDefinitionToIsMarketplaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelDefinitionToSubChannelNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ChannelDefinitionToSvgIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneyTypeResolver<TParent = any> {
    customerOrderIndex?: CustomerJourneyToCustomerOrderIndexResolver<TParent>;
    daysToConversion?: CustomerJourneyToDaysToConversionResolver<TParent>;
    firstVisit?: CustomerJourneyToFirstVisitResolver<TParent>;
    lastVisit?: CustomerJourneyToLastVisitResolver<TParent>;
    moments?: CustomerJourneyToMomentsResolver<TParent>;
  }
  
  export interface CustomerJourneyToCustomerOrderIndexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneyToDaysToConversionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneyToFirstVisitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneyToLastVisitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneyToMomentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitTypeResolver<TParent = any> {
    id?: CustomerVisitToIdResolver<TParent>;
    landingPage?: CustomerVisitToLandingPageResolver<TParent>;
    landingPageHtml?: CustomerVisitToLandingPageHtmlResolver<TParent>;
    marketingEvent?: CustomerVisitToMarketingEventResolver<TParent>;
    occurredAt?: CustomerVisitToOccurredAtResolver<TParent>;
    referralCode?: CustomerVisitToReferralCodeResolver<TParent>;
    referralInfoHtml?: CustomerVisitToReferralInfoHtmlResolver<TParent>;
    referrerUrl?: CustomerVisitToReferrerUrlResolver<TParent>;
    source?: CustomerVisitToSourceResolver<TParent>;
    sourceDescription?: CustomerVisitToSourceDescriptionResolver<TParent>;
    sourceType?: CustomerVisitToSourceTypeResolver<TParent>;
    utmParameters?: CustomerVisitToUtmParametersResolver<TParent>;
  }
  
  export interface CustomerVisitToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitToLandingPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitToLandingPageHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitToMarketingEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitToOccurredAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitToReferralCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitToReferralInfoHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitToReferrerUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitToSourceDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitToSourceTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitToUtmParametersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMomentTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'CustomerVisit';
  }
  export interface MarketingEventTypeResolver<TParent = any> {
    app?: MarketingEventToAppResolver<TParent>;
    channel?: MarketingEventToChannelResolver<TParent>;
    channelHandle?: MarketingEventToChannelHandleResolver<TParent>;
    description?: MarketingEventToDescriptionResolver<TParent>;
    endedAt?: MarketingEventToEndedAtResolver<TParent>;
    id?: MarketingEventToIdResolver<TParent>;
    legacyResourceId?: MarketingEventToLegacyResourceIdResolver<TParent>;
    manageUrl?: MarketingEventToManageUrlResolver<TParent>;
    marketingChannelType?: MarketingEventToMarketingChannelTypeResolver<TParent>;
    previewUrl?: MarketingEventToPreviewUrlResolver<TParent>;
    remoteId?: MarketingEventToRemoteIdResolver<TParent>;
    scheduledToEndAt?: MarketingEventToScheduledToEndAtResolver<TParent>;
    sourceAndMedium?: MarketingEventToSourceAndMediumResolver<TParent>;
    startedAt?: MarketingEventToStartedAtResolver<TParent>;
    targetTypeDisplayText?: MarketingEventToTargetTypeDisplayTextResolver<TParent>;
    type?: MarketingEventToTypeResolver<TParent>;
    utmCampaign?: MarketingEventToUtmCampaignResolver<TParent>;
    utmMedium?: MarketingEventToUtmMediumResolver<TParent>;
    utmSource?: MarketingEventToUtmSourceResolver<TParent>;
  }
  
  export interface MarketingEventToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToChannelHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToEndedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToManageUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToMarketingChannelTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToPreviewUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToRemoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToScheduledToEndAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToSourceAndMediumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToStartedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToTargetTypeDisplayTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToUtmCampaignResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToUtmMediumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventToUtmSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UTMParametersTypeResolver<TParent = any> {
    campaign?: UTMParametersToCampaignResolver<TParent>;
    content?: UTMParametersToContentResolver<TParent>;
    medium?: UTMParametersToMediumResolver<TParent>;
    source?: UTMParametersToSourceResolver<TParent>;
    term?: UTMParametersToTermResolver<TParent>;
  }
  
  export interface UTMParametersToCampaignResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UTMParametersToContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UTMParametersToMediumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UTMParametersToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UTMParametersToTermResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneySummaryTypeResolver<TParent = any> {
    customerOrderIndex?: CustomerJourneySummaryToCustomerOrderIndexResolver<TParent>;
    daysToConversion?: CustomerJourneySummaryToDaysToConversionResolver<TParent>;
    firstVisit?: CustomerJourneySummaryToFirstVisitResolver<TParent>;
    lastVisit?: CustomerJourneySummaryToLastVisitResolver<TParent>;
    moments?: CustomerJourneySummaryToMomentsResolver<TParent>;
    momentsCount?: CustomerJourneySummaryToMomentsCountResolver<TParent>;
    ready?: CustomerJourneySummaryToReadyResolver<TParent>;
  }
  
  export interface CustomerJourneySummaryToCustomerOrderIndexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneySummaryToDaysToConversionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneySummaryToFirstVisitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneySummaryToLastVisitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneySummaryToMomentsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CustomerJourneySummaryToMomentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerJourneySummaryToMomentsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneySummaryToMomentsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerJourneySummaryToReadyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMomentConnectionTypeResolver<TParent = any> {
    edges?: CustomerMomentConnectionToEdgesResolver<TParent>;
    nodes?: CustomerMomentConnectionToNodesResolver<TParent>;
    pageInfo?: CustomerMomentConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CustomerMomentConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMomentConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMomentConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMomentEdgeTypeResolver<TParent = any> {
    cursor?: CustomerMomentEdgeToCursorResolver<TParent>;
    node?: CustomerMomentEdgeToNodeResolver<TParent>;
  }
  
  export interface CustomerMomentEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMomentEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountApplicationConnectionTypeResolver<TParent = any> {
    edges?: DiscountApplicationConnectionToEdgesResolver<TParent>;
    nodes?: DiscountApplicationConnectionToNodesResolver<TParent>;
    pageInfo?: DiscountApplicationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DiscountApplicationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountApplicationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountApplicationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountApplicationEdgeTypeResolver<TParent = any> {
    cursor?: DiscountApplicationEdgeToCursorResolver<TParent>;
    node?: DiscountApplicationEdgeToNodeResolver<TParent>;
  }
  
  export interface DiscountApplicationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountApplicationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountApplicationTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'AutomaticDiscountApplication' | 'DiscountCodeApplication' | 'ManualDiscountApplication' | 'ScriptDiscountApplication';
  }
  export interface PricingValueTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'MoneyV2' | 'PricingPercentageValue';
  }
  export interface PricingPercentageValueTypeResolver<TParent = any> {
    percentage?: PricingPercentageValueToPercentageResolver<TParent>;
  }
  
  export interface PricingPercentageValueToPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderDisputeSummaryTypeResolver<TParent = any> {
    id?: OrderDisputeSummaryToIdResolver<TParent>;
    initiatedAs?: OrderDisputeSummaryToInitiatedAsResolver<TParent>;
    status?: OrderDisputeSummaryToStatusResolver<TParent>;
  }
  
  export interface OrderDisputeSummaryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderDisputeSummaryToInitiatedAsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderDisputeSummaryToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ConnectionTypeResolver<TParent = any> {
    edges?: ExchangeV2ConnectionToEdgesResolver<TParent>;
    nodes?: ExchangeV2ConnectionToNodesResolver<TParent>;
    pageInfo?: ExchangeV2ConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ExchangeV2ConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2EdgeTypeResolver<TParent = any> {
    cursor?: ExchangeV2EdgeToCursorResolver<TParent>;
    node?: ExchangeV2EdgeToNodeResolver<TParent>;
  }
  
  export interface ExchangeV2EdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2EdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2TypeResolver<TParent = any> {
    additions?: ExchangeV2ToAdditionsResolver<TParent>;
    completedAt?: ExchangeV2ToCompletedAtResolver<TParent>;
    createdAt?: ExchangeV2ToCreatedAtResolver<TParent>;
    id?: ExchangeV2ToIdResolver<TParent>;
    location?: ExchangeV2ToLocationResolver<TParent>;
    note?: ExchangeV2ToNoteResolver<TParent>;
    refunds?: ExchangeV2ToRefundsResolver<TParent>;
    returns?: ExchangeV2ToReturnsResolver<TParent>;
    staffMember?: ExchangeV2ToStaffMemberResolver<TParent>;
    totalAmountProcessedSet?: ExchangeV2ToTotalAmountProcessedSetResolver<TParent>;
    totalPriceSet?: ExchangeV2ToTotalPriceSetResolver<TParent>;
    transactions?: ExchangeV2ToTransactionsResolver<TParent>;
  }
  
  export interface ExchangeV2ToAdditionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ToCompletedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ToRefundsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ToReturnsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ToStaffMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ToTotalAmountProcessedSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ToTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ToTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2AdditionsTypeResolver<TParent = any> {
    lineItems?: ExchangeV2AdditionsToLineItemsResolver<TParent>;
    subtotalPriceSet?: ExchangeV2AdditionsToSubtotalPriceSetResolver<TParent>;
    taxLines?: ExchangeV2AdditionsToTaxLinesResolver<TParent>;
    totalPriceSet?: ExchangeV2AdditionsToTotalPriceSetResolver<TParent>;
  }
  
  export interface ExchangeV2AdditionsToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2AdditionsToSubtotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2AdditionsToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2AdditionsToTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemTypeResolver<TParent = any> {
    customAttributes?: ExchangeV2LineItemToCustomAttributesResolver<TParent>;
    discountedTotalSet?: ExchangeV2LineItemToDiscountedTotalSetResolver<TParent>;
    discountedUnitPriceSet?: ExchangeV2LineItemToDiscountedUnitPriceSetResolver<TParent>;
    fulfillmentService?: ExchangeV2LineItemToFulfillmentServiceResolver<TParent>;
    giftCard?: ExchangeV2LineItemToGiftCardResolver<TParent>;
    giftCards?: ExchangeV2LineItemToGiftCardsResolver<TParent>;
    lineItem?: ExchangeV2LineItemToLineItemResolver<TParent>;
    name?: ExchangeV2LineItemToNameResolver<TParent>;
    originalTotalSet?: ExchangeV2LineItemToOriginalTotalSetResolver<TParent>;
    originalUnitPriceSet?: ExchangeV2LineItemToOriginalUnitPriceSetResolver<TParent>;
    quantity?: ExchangeV2LineItemToQuantityResolver<TParent>;
    requiresShipping?: ExchangeV2LineItemToRequiresShippingResolver<TParent>;
    sku?: ExchangeV2LineItemToSkuResolver<TParent>;
    taxLines?: ExchangeV2LineItemToTaxLinesResolver<TParent>;
    taxable?: ExchangeV2LineItemToTaxableResolver<TParent>;
    title?: ExchangeV2LineItemToTitleResolver<TParent>;
    variant?: ExchangeV2LineItemToVariantResolver<TParent>;
    variantTitle?: ExchangeV2LineItemToVariantTitleResolver<TParent>;
    vendor?: ExchangeV2LineItemToVendorResolver<TParent>;
  }
  
  export interface ExchangeV2LineItemToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToDiscountedTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToDiscountedUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToFulfillmentServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToGiftCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToGiftCardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToOriginalTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToOriginalUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToTaxableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToVariantTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2LineItemToVendorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardTypeResolver<TParent = any> {
    balance?: GiftCardToBalanceResolver<TParent>;
    createdAt?: GiftCardToCreatedAtResolver<TParent>;
    customer?: GiftCardToCustomerResolver<TParent>;
    disabledAt?: GiftCardToDisabledAtResolver<TParent>;
    enabled?: GiftCardToEnabledResolver<TParent>;
    expiresOn?: GiftCardToExpiresOnResolver<TParent>;
    id?: GiftCardToIdResolver<TParent>;
    initialValue?: GiftCardToInitialValueResolver<TParent>;
    lastCharacters?: GiftCardToLastCharactersResolver<TParent>;
    maskedCode?: GiftCardToMaskedCodeResolver<TParent>;
    note?: GiftCardToNoteResolver<TParent>;
    order?: GiftCardToOrderResolver<TParent>;
  }
  
  export interface GiftCardToBalanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardToDisabledAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardToExpiresOnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardToInitialValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardToLastCharactersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardToMaskedCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemTypeResolver<TParent = any> {
    canRestock?: LineItemToCanRestockResolver<TParent>;
    contract?: LineItemToContractResolver<TParent>;
    currentQuantity?: LineItemToCurrentQuantityResolver<TParent>;
    customAttributes?: LineItemToCustomAttributesResolver<TParent>;
    discountAllocations?: LineItemToDiscountAllocationsResolver<TParent>;
    discountedTotal?: LineItemToDiscountedTotalResolver<TParent>;
    discountedTotalSet?: LineItemToDiscountedTotalSetResolver<TParent>;
    discountedUnitPrice?: LineItemToDiscountedUnitPriceResolver<TParent>;
    discountedUnitPriceAfterAllDiscountsSet?: LineItemToDiscountedUnitPriceAfterAllDiscountsSetResolver<TParent>;
    discountedUnitPriceSet?: LineItemToDiscountedUnitPriceSetResolver<TParent>;
    duties?: LineItemToDutiesResolver<TParent>;
    fulfillableQuantity?: LineItemToFulfillableQuantityResolver<TParent>;
    fulfillmentService?: LineItemToFulfillmentServiceResolver<TParent>;
    fulfillmentStatus?: LineItemToFulfillmentStatusResolver<TParent>;
    id?: LineItemToIdResolver<TParent>;
    image?: LineItemToImageResolver<TParent>;
    lineItemGroup?: LineItemToLineItemGroupResolver<TParent>;
    merchantEditable?: LineItemToMerchantEditableResolver<TParent>;
    name?: LineItemToNameResolver<TParent>;
    nonFulfillableQuantity?: LineItemToNonFulfillableQuantityResolver<TParent>;
    originalTotal?: LineItemToOriginalTotalResolver<TParent>;
    originalTotalSet?: LineItemToOriginalTotalSetResolver<TParent>;
    originalUnitPrice?: LineItemToOriginalUnitPriceResolver<TParent>;
    originalUnitPriceSet?: LineItemToOriginalUnitPriceSetResolver<TParent>;
    product?: LineItemToProductResolver<TParent>;
    quantity?: LineItemToQuantityResolver<TParent>;
    refundableQuantity?: LineItemToRefundableQuantityResolver<TParent>;
    requiresShipping?: LineItemToRequiresShippingResolver<TParent>;
    restockable?: LineItemToRestockableResolver<TParent>;
    sellingPlan?: LineItemToSellingPlanResolver<TParent>;
    sku?: LineItemToSkuResolver<TParent>;
    staffMember?: LineItemToStaffMemberResolver<TParent>;
    taxLines?: LineItemToTaxLinesResolver<TParent>;
    taxable?: LineItemToTaxableResolver<TParent>;
    title?: LineItemToTitleResolver<TParent>;
    totalDiscount?: LineItemToTotalDiscountResolver<TParent>;
    totalDiscountSet?: LineItemToTotalDiscountSetResolver<TParent>;
    unfulfilledDiscountedTotal?: LineItemToUnfulfilledDiscountedTotalResolver<TParent>;
    unfulfilledDiscountedTotalSet?: LineItemToUnfulfilledDiscountedTotalSetResolver<TParent>;
    unfulfilledOriginalTotal?: LineItemToUnfulfilledOriginalTotalResolver<TParent>;
    unfulfilledOriginalTotalSet?: LineItemToUnfulfilledOriginalTotalSetResolver<TParent>;
    unfulfilledQuantity?: LineItemToUnfulfilledQuantityResolver<TParent>;
    variant?: LineItemToVariantResolver<TParent>;
    variantTitle?: LineItemToVariantTitleResolver<TParent>;
    vendor?: LineItemToVendorResolver<TParent>;
  }
  
  export interface LineItemToCanRestockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToCurrentQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToDiscountAllocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToDiscountedTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToDiscountedTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToDiscountedUnitPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToDiscountedUnitPriceAfterAllDiscountsSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToDiscountedUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToDutiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToFulfillableQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToFulfillmentServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToFulfillmentStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToLineItemGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToMerchantEditableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToNonFulfillableQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToOriginalTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToOriginalTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToOriginalUnitPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToOriginalUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToRefundableQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToRestockableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToSellingPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToStaffMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToTaxLinesArgs {
    first?: number;
  }
  export interface LineItemToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: LineItemToTaxLinesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToTaxableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToTotalDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToTotalDiscountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToUnfulfilledDiscountedTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToUnfulfilledDiscountedTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToUnfulfilledOriginalTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToUnfulfilledOriginalTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToUnfulfilledQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToVariantTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemToVendorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractTypeResolver<TParent = any> {
    app?: SubscriptionContractToAppResolver<TParent>;
    appAdminUrl?: SubscriptionContractToAppAdminUrlResolver<TParent>;
    billingAttempts?: SubscriptionContractToBillingAttemptsResolver<TParent>;
    billingPolicy?: SubscriptionContractToBillingPolicyResolver<TParent>;
    createdAt?: SubscriptionContractToCreatedAtResolver<TParent>;
    currencyCode?: SubscriptionContractToCurrencyCodeResolver<TParent>;
    customAttributes?: SubscriptionContractToCustomAttributesResolver<TParent>;
    customer?: SubscriptionContractToCustomerResolver<TParent>;
    customerPaymentMethod?: SubscriptionContractToCustomerPaymentMethodResolver<TParent>;
    deliveryMethod?: SubscriptionContractToDeliveryMethodResolver<TParent>;
    deliveryPolicy?: SubscriptionContractToDeliveryPolicyResolver<TParent>;
    deliveryPrice?: SubscriptionContractToDeliveryPriceResolver<TParent>;
    discounts?: SubscriptionContractToDiscountsResolver<TParent>;
    id?: SubscriptionContractToIdResolver<TParent>;
    lastPaymentStatus?: SubscriptionContractToLastPaymentStatusResolver<TParent>;
    lineCount?: SubscriptionContractToLineCountResolver<TParent>;
    lines?: SubscriptionContractToLinesResolver<TParent>;
    nextBillingDate?: SubscriptionContractToNextBillingDateResolver<TParent>;
    note?: SubscriptionContractToNoteResolver<TParent>;
    orders?: SubscriptionContractToOrdersResolver<TParent>;
    originOrder?: SubscriptionContractToOriginOrderResolver<TParent>;
    revisionId?: SubscriptionContractToRevisionIdResolver<TParent>;
    status?: SubscriptionContractToStatusResolver<TParent>;
    updatedAt?: SubscriptionContractToUpdatedAtResolver<TParent>;
  }
  
  export interface SubscriptionContractToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToAppAdminUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToBillingAttemptsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionContractToBillingAttemptsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionContractToBillingAttemptsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToBillingPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToCustomerPaymentMethodArgs {
    showRevoked?: boolean;
  }
  export interface SubscriptionContractToCustomerPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionContractToCustomerPaymentMethodArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToDeliveryMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToDeliveryPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToDeliveryPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToDiscountsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionContractToDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionContractToDiscountsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToLastPaymentStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToLineCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToLinesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionContractToLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionContractToLinesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToNextBillingDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionContractToOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionContractToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToOriginOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToRevisionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractBaseTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SubscriptionContract' | 'SubscriptionBillingCycleEditedContract';
  }
  export interface CustomerPaymentMethodTypeResolver<TParent = any> {
    customer?: CustomerPaymentMethodToCustomerResolver<TParent>;
    id?: CustomerPaymentMethodToIdResolver<TParent>;
    instrument?: CustomerPaymentMethodToInstrumentResolver<TParent>;
    revokedAt?: CustomerPaymentMethodToRevokedAtResolver<TParent>;
    revokedReason?: CustomerPaymentMethodToRevokedReasonResolver<TParent>;
    subscriptionContracts?: CustomerPaymentMethodToSubscriptionContractsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodToInstrumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodToRevokedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodToRevokedReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodToSubscriptionContractsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CustomerPaymentMethodToSubscriptionContractsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerPaymentMethodToSubscriptionContractsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentInstrumentTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'CustomerCreditCard' | 'CustomerPaypalBillingAgreement' | 'CustomerShopPayAgreement';
  }
  export interface CustomerCreditCardTypeResolver<TParent = any> {
    billingAddress?: CustomerCreditCardToBillingAddressResolver<TParent>;
    brand?: CustomerCreditCardToBrandResolver<TParent>;
    expiresSoon?: CustomerCreditCardToExpiresSoonResolver<TParent>;
    expiryMonth?: CustomerCreditCardToExpiryMonthResolver<TParent>;
    expiryYear?: CustomerCreditCardToExpiryYearResolver<TParent>;
    firstDigits?: CustomerCreditCardToFirstDigitsResolver<TParent>;
    isRevocable?: CustomerCreditCardToIsRevocableResolver<TParent>;
    lastDigits?: CustomerCreditCardToLastDigitsResolver<TParent>;
    maskedNumber?: CustomerCreditCardToMaskedNumberResolver<TParent>;
    name?: CustomerCreditCardToNameResolver<TParent>;
    source?: CustomerCreditCardToSourceResolver<TParent>;
    virtualLastDigits?: CustomerCreditCardToVirtualLastDigitsResolver<TParent>;
  }
  
  export interface CustomerCreditCardToBillingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardToExpiresSoonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardToExpiryMonthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardToExpiryYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardToFirstDigitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardToIsRevocableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardToLastDigitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardToMaskedNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardToVirtualLastDigitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardBillingAddressTypeResolver<TParent = any> {
    address1?: CustomerCreditCardBillingAddressToAddress1Resolver<TParent>;
    city?: CustomerCreditCardBillingAddressToCityResolver<TParent>;
    country?: CustomerCreditCardBillingAddressToCountryResolver<TParent>;
    countryCode?: CustomerCreditCardBillingAddressToCountryCodeResolver<TParent>;
    firstName?: CustomerCreditCardBillingAddressToFirstNameResolver<TParent>;
    lastName?: CustomerCreditCardBillingAddressToLastNameResolver<TParent>;
    province?: CustomerCreditCardBillingAddressToProvinceResolver<TParent>;
    provinceCode?: CustomerCreditCardBillingAddressToProvinceCodeResolver<TParent>;
    zip?: CustomerCreditCardBillingAddressToZipResolver<TParent>;
  }
  
  export interface CustomerCreditCardBillingAddressToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardBillingAddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardBillingAddressToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardBillingAddressToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardBillingAddressToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardBillingAddressToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardBillingAddressToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardBillingAddressToProvinceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreditCardBillingAddressToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaypalBillingAgreementTypeResolver<TParent = any> {
    billingAddress?: CustomerPaypalBillingAgreementToBillingAddressResolver<TParent>;
    inactive?: CustomerPaypalBillingAgreementToInactiveResolver<TParent>;
    isRevocable?: CustomerPaypalBillingAgreementToIsRevocableResolver<TParent>;
    paypalAccountEmail?: CustomerPaypalBillingAgreementToPaypalAccountEmailResolver<TParent>;
  }
  
  export interface CustomerPaypalBillingAgreementToBillingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaypalBillingAgreementToInactiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaypalBillingAgreementToIsRevocableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaypalBillingAgreementToPaypalAccountEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentInstrumentBillingAddressTypeResolver<TParent = any> {
    address1?: CustomerPaymentInstrumentBillingAddressToAddress1Resolver<TParent>;
    city?: CustomerPaymentInstrumentBillingAddressToCityResolver<TParent>;
    country?: CustomerPaymentInstrumentBillingAddressToCountryResolver<TParent>;
    countryCode?: CustomerPaymentInstrumentBillingAddressToCountryCodeResolver<TParent>;
    name?: CustomerPaymentInstrumentBillingAddressToNameResolver<TParent>;
    province?: CustomerPaymentInstrumentBillingAddressToProvinceResolver<TParent>;
    provinceCode?: CustomerPaymentInstrumentBillingAddressToProvinceCodeResolver<TParent>;
    zip?: CustomerPaymentInstrumentBillingAddressToZipResolver<TParent>;
  }
  
  export interface CustomerPaymentInstrumentBillingAddressToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentInstrumentBillingAddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentInstrumentBillingAddressToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentInstrumentBillingAddressToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentInstrumentBillingAddressToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentInstrumentBillingAddressToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentInstrumentBillingAddressToProvinceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentInstrumentBillingAddressToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerShopPayAgreementTypeResolver<TParent = any> {
    billingAddress?: CustomerShopPayAgreementToBillingAddressResolver<TParent>;
    expiresSoon?: CustomerShopPayAgreementToExpiresSoonResolver<TParent>;
    expiryMonth?: CustomerShopPayAgreementToExpiryMonthResolver<TParent>;
    expiryYear?: CustomerShopPayAgreementToExpiryYearResolver<TParent>;
    inactive?: CustomerShopPayAgreementToInactiveResolver<TParent>;
    isRevocable?: CustomerShopPayAgreementToIsRevocableResolver<TParent>;
    lastDigits?: CustomerShopPayAgreementToLastDigitsResolver<TParent>;
    maskedNumber?: CustomerShopPayAgreementToMaskedNumberResolver<TParent>;
    name?: CustomerShopPayAgreementToNameResolver<TParent>;
  }
  
  export interface CustomerShopPayAgreementToBillingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerShopPayAgreementToExpiresSoonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerShopPayAgreementToExpiryMonthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerShopPayAgreementToExpiryYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerShopPayAgreementToInactiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerShopPayAgreementToIsRevocableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerShopPayAgreementToLastDigitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerShopPayAgreementToMaskedNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerShopPayAgreementToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractConnectionTypeResolver<TParent = any> {
    edges?: SubscriptionContractConnectionToEdgesResolver<TParent>;
    nodes?: SubscriptionContractConnectionToNodesResolver<TParent>;
    pageInfo?: SubscriptionContractConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SubscriptionContractConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractEdgeTypeResolver<TParent = any> {
    cursor?: SubscriptionContractEdgeToCursorResolver<TParent>;
    node?: SubscriptionContractEdgeToNodeResolver<TParent>;
  }
  
  export interface SubscriptionContractEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SubscriptionDeliveryMethodLocalDelivery' | 'SubscriptionDeliveryMethodPickup' | 'SubscriptionDeliveryMethodShipping';
  }
  export interface SubscriptionDeliveryMethodLocalDeliveryTypeResolver<TParent = any> {
    address?: SubscriptionDeliveryMethodLocalDeliveryToAddressResolver<TParent>;
    localDeliveryOption?: SubscriptionDeliveryMethodLocalDeliveryToLocalDeliveryOptionResolver<TParent>;
  }
  
  export interface SubscriptionDeliveryMethodLocalDeliveryToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodLocalDeliveryToLocalDeliveryOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressTypeResolver<TParent = any> {
    address1?: SubscriptionMailingAddressToAddress1Resolver<TParent>;
    address2?: SubscriptionMailingAddressToAddress2Resolver<TParent>;
    city?: SubscriptionMailingAddressToCityResolver<TParent>;
    company?: SubscriptionMailingAddressToCompanyResolver<TParent>;
    country?: SubscriptionMailingAddressToCountryResolver<TParent>;
    countryCode?: SubscriptionMailingAddressToCountryCodeResolver<TParent>;
    firstName?: SubscriptionMailingAddressToFirstNameResolver<TParent>;
    lastName?: SubscriptionMailingAddressToLastNameResolver<TParent>;
    name?: SubscriptionMailingAddressToNameResolver<TParent>;
    phone?: SubscriptionMailingAddressToPhoneResolver<TParent>;
    province?: SubscriptionMailingAddressToProvinceResolver<TParent>;
    provinceCode?: SubscriptionMailingAddressToProvinceCodeResolver<TParent>;
    zip?: SubscriptionMailingAddressToZipResolver<TParent>;
  }
  
  export interface SubscriptionMailingAddressToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToProvinceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionMailingAddressToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodLocalDeliveryOptionTypeResolver<TParent = any> {
    code?: SubscriptionDeliveryMethodLocalDeliveryOptionToCodeResolver<TParent>;
    description?: SubscriptionDeliveryMethodLocalDeliveryOptionToDescriptionResolver<TParent>;
    instructions?: SubscriptionDeliveryMethodLocalDeliveryOptionToInstructionsResolver<TParent>;
    phone?: SubscriptionDeliveryMethodLocalDeliveryOptionToPhoneResolver<TParent>;
    presentmentTitle?: SubscriptionDeliveryMethodLocalDeliveryOptionToPresentmentTitleResolver<TParent>;
    title?: SubscriptionDeliveryMethodLocalDeliveryOptionToTitleResolver<TParent>;
  }
  
  export interface SubscriptionDeliveryMethodLocalDeliveryOptionToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodLocalDeliveryOptionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodLocalDeliveryOptionToInstructionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodLocalDeliveryOptionToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodLocalDeliveryOptionToPresentmentTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodLocalDeliveryOptionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodPickupTypeResolver<TParent = any> {
    pickupOption?: SubscriptionDeliveryMethodPickupToPickupOptionResolver<TParent>;
  }
  
  export interface SubscriptionDeliveryMethodPickupToPickupOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodPickupOptionTypeResolver<TParent = any> {
    code?: SubscriptionDeliveryMethodPickupOptionToCodeResolver<TParent>;
    description?: SubscriptionDeliveryMethodPickupOptionToDescriptionResolver<TParent>;
    location?: SubscriptionDeliveryMethodPickupOptionToLocationResolver<TParent>;
    presentmentTitle?: SubscriptionDeliveryMethodPickupOptionToPresentmentTitleResolver<TParent>;
    title?: SubscriptionDeliveryMethodPickupOptionToTitleResolver<TParent>;
  }
  
  export interface SubscriptionDeliveryMethodPickupOptionToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodPickupOptionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodPickupOptionToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodPickupOptionToPresentmentTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodPickupOptionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodShippingTypeResolver<TParent = any> {
    address?: SubscriptionDeliveryMethodShippingToAddressResolver<TParent>;
    shippingOption?: SubscriptionDeliveryMethodShippingToShippingOptionResolver<TParent>;
  }
  
  export interface SubscriptionDeliveryMethodShippingToAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodShippingToShippingOptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodShippingOptionTypeResolver<TParent = any> {
    carrierService?: SubscriptionDeliveryMethodShippingOptionToCarrierServiceResolver<TParent>;
    code?: SubscriptionDeliveryMethodShippingOptionToCodeResolver<TParent>;
    description?: SubscriptionDeliveryMethodShippingOptionToDescriptionResolver<TParent>;
    presentmentTitle?: SubscriptionDeliveryMethodShippingOptionToPresentmentTitleResolver<TParent>;
    title?: SubscriptionDeliveryMethodShippingOptionToTitleResolver<TParent>;
  }
  
  export interface SubscriptionDeliveryMethodShippingOptionToCarrierServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodShippingOptionToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodShippingOptionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodShippingOptionToPresentmentTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryMethodShippingOptionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountConnectionTypeResolver<TParent = any> {
    edges?: SubscriptionManualDiscountConnectionToEdgesResolver<TParent>;
    nodes?: SubscriptionManualDiscountConnectionToNodesResolver<TParent>;
    pageInfo?: SubscriptionManualDiscountConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SubscriptionManualDiscountConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountEdgeTypeResolver<TParent = any> {
    cursor?: SubscriptionManualDiscountEdgeToCursorResolver<TParent>;
    node?: SubscriptionManualDiscountEdgeToNodeResolver<TParent>;
  }
  
  export interface SubscriptionManualDiscountEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountTypeResolver<TParent = any> {
    entitledLines?: SubscriptionManualDiscountToEntitledLinesResolver<TParent>;
    id?: SubscriptionManualDiscountToIdResolver<TParent>;
    recurringCycleLimit?: SubscriptionManualDiscountToRecurringCycleLimitResolver<TParent>;
    rejectionReason?: SubscriptionManualDiscountToRejectionReasonResolver<TParent>;
    targetType?: SubscriptionManualDiscountToTargetTypeResolver<TParent>;
    title?: SubscriptionManualDiscountToTitleResolver<TParent>;
    type?: SubscriptionManualDiscountToTypeResolver<TParent>;
    usageCount?: SubscriptionManualDiscountToUsageCountResolver<TParent>;
    value?: SubscriptionManualDiscountToValueResolver<TParent>;
  }
  
  export interface SubscriptionManualDiscountToEntitledLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountToRecurringCycleLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountToRejectionReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountToUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionManualDiscountToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountEntitledLinesTypeResolver<TParent = any> {
    all?: SubscriptionDiscountEntitledLinesToAllResolver<TParent>;
    lines?: SubscriptionDiscountEntitledLinesToLinesResolver<TParent>;
  }
  
  export interface SubscriptionDiscountEntitledLinesToAllResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountEntitledLinesToLinesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionDiscountEntitledLinesToLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDiscountEntitledLinesToLinesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineConnectionTypeResolver<TParent = any> {
    edges?: SubscriptionLineConnectionToEdgesResolver<TParent>;
    nodes?: SubscriptionLineConnectionToNodesResolver<TParent>;
    pageInfo?: SubscriptionLineConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SubscriptionLineConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineEdgeTypeResolver<TParent = any> {
    cursor?: SubscriptionLineEdgeToCursorResolver<TParent>;
    node?: SubscriptionLineEdgeToNodeResolver<TParent>;
  }
  
  export interface SubscriptionLineEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineTypeResolver<TParent = any> {
    currentPrice?: SubscriptionLineToCurrentPriceResolver<TParent>;
    customAttributes?: SubscriptionLineToCustomAttributesResolver<TParent>;
    discountAllocations?: SubscriptionLineToDiscountAllocationsResolver<TParent>;
    id?: SubscriptionLineToIdResolver<TParent>;
    lineDiscountedPrice?: SubscriptionLineToLineDiscountedPriceResolver<TParent>;
    pricingPolicy?: SubscriptionLineToPricingPolicyResolver<TParent>;
    productId?: SubscriptionLineToProductIdResolver<TParent>;
    quantity?: SubscriptionLineToQuantityResolver<TParent>;
    requiresShipping?: SubscriptionLineToRequiresShippingResolver<TParent>;
    sellingPlanId?: SubscriptionLineToSellingPlanIdResolver<TParent>;
    sellingPlanName?: SubscriptionLineToSellingPlanNameResolver<TParent>;
    sku?: SubscriptionLineToSkuResolver<TParent>;
    taxable?: SubscriptionLineToTaxableResolver<TParent>;
    title?: SubscriptionLineToTitleResolver<TParent>;
    variantId?: SubscriptionLineToVariantIdResolver<TParent>;
    variantImage?: SubscriptionLineToVariantImageResolver<TParent>;
    variantTitle?: SubscriptionLineToVariantTitleResolver<TParent>;
  }
  
  export interface SubscriptionLineToCurrentPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToDiscountAllocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToLineDiscountedPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToPricingPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToSellingPlanIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToSellingPlanNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToTaxableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToVariantIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToVariantImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLineToVariantTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountAllocationTypeResolver<TParent = any> {
    amount?: SubscriptionDiscountAllocationToAmountResolver<TParent>;
    discount?: SubscriptionDiscountAllocationToDiscountResolver<TParent>;
  }
  
  export interface SubscriptionDiscountAllocationToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountAllocationToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SubscriptionAppliedCodeDiscount' | 'SubscriptionManualDiscount';
  }
  export interface SubscriptionAppliedCodeDiscountTypeResolver<TParent = any> {
    id?: SubscriptionAppliedCodeDiscountToIdResolver<TParent>;
    redeemCode?: SubscriptionAppliedCodeDiscountToRedeemCodeResolver<TParent>;
    rejectionReason?: SubscriptionAppliedCodeDiscountToRejectionReasonResolver<TParent>;
  }
  
  export interface SubscriptionAppliedCodeDiscountToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionAppliedCodeDiscountToRedeemCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionAppliedCodeDiscountToRejectionReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionPricingPolicyTypeResolver<TParent = any> {
    basePrice?: SubscriptionPricingPolicyToBasePriceResolver<TParent>;
    cycleDiscounts?: SubscriptionPricingPolicyToCycleDiscountsResolver<TParent>;
  }
  
  export interface SubscriptionPricingPolicyToBasePriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionPricingPolicyToCycleDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionCyclePriceAdjustmentTypeResolver<TParent = any> {
    adjustmentType?: SubscriptionCyclePriceAdjustmentToAdjustmentTypeResolver<TParent>;
    adjustmentValue?: SubscriptionCyclePriceAdjustmentToAdjustmentValueResolver<TParent>;
    afterCycle?: SubscriptionCyclePriceAdjustmentToAfterCycleResolver<TParent>;
    computedPrice?: SubscriptionCyclePriceAdjustmentToComputedPriceResolver<TParent>;
  }
  
  export interface SubscriptionCyclePriceAdjustmentToAdjustmentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionCyclePriceAdjustmentToAdjustmentValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionCyclePriceAdjustmentToAfterCycleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionCyclePriceAdjustmentToComputedPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountValueTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SubscriptionDiscountFixedAmountValue' | 'SubscriptionDiscountPercentageValue';
  }
  export interface SubscriptionDiscountFixedAmountValueTypeResolver<TParent = any> {
    amount?: SubscriptionDiscountFixedAmountValueToAmountResolver<TParent>;
    appliesOnEachItem?: SubscriptionDiscountFixedAmountValueToAppliesOnEachItemResolver<TParent>;
  }
  
  export interface SubscriptionDiscountFixedAmountValueToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountFixedAmountValueToAppliesOnEachItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountPercentageValueTypeResolver<TParent = any> {
    percentage?: SubscriptionDiscountPercentageValueToPercentageResolver<TParent>;
  }
  
  export interface SubscriptionDiscountPercentageValueToPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderConnectionTypeResolver<TParent = any> {
    edges?: OrderConnectionToEdgesResolver<TParent>;
    nodes?: OrderConnectionToNodesResolver<TParent>;
    pageInfo?: OrderConnectionToPageInfoResolver<TParent>;
  }
  
  export interface OrderConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEdgeTypeResolver<TParent = any> {
    cursor?: OrderEdgeToCursorResolver<TParent>;
    node?: OrderEdgeToNodeResolver<TParent>;
  }
  
  export interface OrderEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptConnectionTypeResolver<TParent = any> {
    edges?: SubscriptionBillingAttemptConnectionToEdgesResolver<TParent>;
    nodes?: SubscriptionBillingAttemptConnectionToNodesResolver<TParent>;
    pageInfo?: SubscriptionBillingAttemptConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SubscriptionBillingAttemptConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptEdgeTypeResolver<TParent = any> {
    cursor?: SubscriptionBillingAttemptEdgeToCursorResolver<TParent>;
    node?: SubscriptionBillingAttemptEdgeToNodeResolver<TParent>;
  }
  
  export interface SubscriptionBillingAttemptEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptTypeResolver<TParent = any> {
    completedAt?: SubscriptionBillingAttemptToCompletedAtResolver<TParent>;
    createdAt?: SubscriptionBillingAttemptToCreatedAtResolver<TParent>;
    errorCode?: SubscriptionBillingAttemptToErrorCodeResolver<TParent>;
    errorMessage?: SubscriptionBillingAttemptToErrorMessageResolver<TParent>;
    id?: SubscriptionBillingAttemptToIdResolver<TParent>;
    idempotencyKey?: SubscriptionBillingAttemptToIdempotencyKeyResolver<TParent>;
    nextActionUrl?: SubscriptionBillingAttemptToNextActionUrlResolver<TParent>;
    order?: SubscriptionBillingAttemptToOrderResolver<TParent>;
    originTime?: SubscriptionBillingAttemptToOriginTimeResolver<TParent>;
    ready?: SubscriptionBillingAttemptToReadyResolver<TParent>;
    subscriptionContract?: SubscriptionBillingAttemptToSubscriptionContractResolver<TParent>;
  }
  
  export interface SubscriptionBillingAttemptToCompletedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptToErrorCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptToErrorMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptToIdempotencyKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptToNextActionUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptToOriginTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptToReadyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptToSubscriptionContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingPolicyTypeResolver<TParent = any> {
    anchors?: SubscriptionBillingPolicyToAnchorsResolver<TParent>;
    interval?: SubscriptionBillingPolicyToIntervalResolver<TParent>;
    intervalCount?: SubscriptionBillingPolicyToIntervalCountResolver<TParent>;
    maxCycles?: SubscriptionBillingPolicyToMaxCyclesResolver<TParent>;
    minCycles?: SubscriptionBillingPolicyToMinCyclesResolver<TParent>;
  }
  
  export interface SubscriptionBillingPolicyToAnchorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingPolicyToIntervalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingPolicyToIntervalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingPolicyToMaxCyclesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingPolicyToMinCyclesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryPolicyTypeResolver<TParent = any> {
    anchors?: SubscriptionDeliveryPolicyToAnchorsResolver<TParent>;
    interval?: SubscriptionDeliveryPolicyToIntervalResolver<TParent>;
    intervalCount?: SubscriptionDeliveryPolicyToIntervalCountResolver<TParent>;
  }
  
  export interface SubscriptionDeliveryPolicyToAnchorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryPolicyToIntervalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryPolicyToIntervalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAllocationTypeResolver<TParent = any> {
    allocatedAmount?: DiscountAllocationToAllocatedAmountResolver<TParent>;
    allocatedAmountSet?: DiscountAllocationToAllocatedAmountSetResolver<TParent>;
    discountApplication?: DiscountAllocationToDiscountApplicationResolver<TParent>;
  }
  
  export interface DiscountAllocationToAllocatedAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAllocationToAllocatedAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAllocationToDiscountApplicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutyTypeResolver<TParent = any> {
    countryCodeOfOrigin?: DutyToCountryCodeOfOriginResolver<TParent>;
    harmonizedSystemCode?: DutyToHarmonizedSystemCodeResolver<TParent>;
    id?: DutyToIdResolver<TParent>;
    price?: DutyToPriceResolver<TParent>;
    taxLines?: DutyToTaxLinesResolver<TParent>;
  }
  
  export interface DutyToCountryCodeOfOriginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutyToHarmonizedSystemCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutyToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutyToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemGroupTypeResolver<TParent = any> {
    id?: LineItemGroupToIdResolver<TParent>;
    quantity?: LineItemGroupToQuantityResolver<TParent>;
    title?: LineItemGroupToTitleResolver<TParent>;
    variantId?: LineItemGroupToVariantIdResolver<TParent>;
    variantSku?: LineItemGroupToVariantSkuResolver<TParent>;
  }
  
  export interface LineItemGroupToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemGroupToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemGroupToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemGroupToVariantIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemGroupToVariantSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemSellingPlanTypeResolver<TParent = any> {
    name?: LineItemSellingPlanToNameResolver<TParent>;
    sellingPlanId?: LineItemSellingPlanToSellingPlanIdResolver<TParent>;
  }
  
  export interface LineItemSellingPlanToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemSellingPlanToSellingPlanIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundTypeResolver<TParent = any> {
    createdAt?: RefundToCreatedAtResolver<TParent>;
    duties?: RefundToDutiesResolver<TParent>;
    id?: RefundToIdResolver<TParent>;
    legacyResourceId?: RefundToLegacyResourceIdResolver<TParent>;
    note?: RefundToNoteResolver<TParent>;
    order?: RefundToOrderResolver<TParent>;
    refundLineItems?: RefundToRefundLineItemsResolver<TParent>;
    return?: RefundToReturnResolver<TParent>;
    staffMember?: RefundToStaffMemberResolver<TParent>;
    totalRefunded?: RefundToTotalRefundedResolver<TParent>;
    totalRefundedSet?: RefundToTotalRefundedSetResolver<TParent>;
    transactions?: RefundToTransactionsResolver<TParent>;
    updatedAt?: RefundToUpdatedAtResolver<TParent>;
  }
  
  export interface RefundToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToDutiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToRefundLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface RefundToRefundLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: RefundToRefundLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToReturnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToStaffMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToTotalRefundedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToTotalRefundedSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToTransactionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface RefundToTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: RefundToTransactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundDutyTypeResolver<TParent = any> {
    amountSet?: RefundDutyToAmountSetResolver<TParent>;
    originalDuty?: RefundDutyToOriginalDutyResolver<TParent>;
  }
  
  export interface RefundDutyToAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundDutyToOriginalDutyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemConnectionTypeResolver<TParent = any> {
    edges?: RefundLineItemConnectionToEdgesResolver<TParent>;
    nodes?: RefundLineItemConnectionToNodesResolver<TParent>;
    pageInfo?: RefundLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface RefundLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemEdgeTypeResolver<TParent = any> {
    cursor?: RefundLineItemEdgeToCursorResolver<TParent>;
    node?: RefundLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface RefundLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemTypeResolver<TParent = any> {
    lineItem?: RefundLineItemToLineItemResolver<TParent>;
    location?: RefundLineItemToLocationResolver<TParent>;
    price?: RefundLineItemToPriceResolver<TParent>;
    priceSet?: RefundLineItemToPriceSetResolver<TParent>;
    quantity?: RefundLineItemToQuantityResolver<TParent>;
    restockType?: RefundLineItemToRestockTypeResolver<TParent>;
    restocked?: RefundLineItemToRestockedResolver<TParent>;
    subtotal?: RefundLineItemToSubtotalResolver<TParent>;
    subtotalSet?: RefundLineItemToSubtotalSetResolver<TParent>;
    totalTax?: RefundLineItemToTotalTaxResolver<TParent>;
    totalTaxSet?: RefundLineItemToTotalTaxSetResolver<TParent>;
  }
  
  export interface RefundLineItemToLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemToPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemToRestockTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemToRestockedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemToSubtotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemToSubtotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemToTotalTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundLineItemToTotalTaxSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnTypeResolver<TParent = any> {
    decline?: ReturnToDeclineResolver<TParent>;
    id?: ReturnToIdResolver<TParent>;
    name?: ReturnToNameResolver<TParent>;
    order?: ReturnToOrderResolver<TParent>;
    refunds?: ReturnToRefundsResolver<TParent>;
    returnLineItems?: ReturnToReturnLineItemsResolver<TParent>;
    reverseFulfillmentOrders?: ReturnToReverseFulfillmentOrdersResolver<TParent>;
    status?: ReturnToStatusResolver<TParent>;
    suggestedRefund?: ReturnToSuggestedRefundResolver<TParent>;
    totalQuantity?: ReturnToTotalQuantityResolver<TParent>;
  }
  
  export interface ReturnToDeclineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnToRefundsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ReturnToRefundsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ReturnToRefundsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnToReturnLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ReturnToReturnLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ReturnToReturnLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnToReverseFulfillmentOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ReturnToReverseFulfillmentOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ReturnToReverseFulfillmentOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnToSuggestedRefundArgs {
    returnRefundLineItems: Array<ReturnRefundLineItemInput>;
    refundShipping?: RefundShippingInput;
    refundDuties?: Array<RefundDutyInput>;
  }
  export interface ReturnToSuggestedRefundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ReturnToSuggestedRefundArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnToTotalQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnDeclineTypeResolver<TParent = any> {
    note?: ReturnDeclineToNoteResolver<TParent>;
    reason?: ReturnDeclineToReasonResolver<TParent>;
  }
  
  export interface ReturnDeclineToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnDeclineToReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundConnectionTypeResolver<TParent = any> {
    edges?: RefundConnectionToEdgesResolver<TParent>;
    nodes?: RefundConnectionToNodesResolver<TParent>;
    pageInfo?: RefundConnectionToPageInfoResolver<TParent>;
  }
  
  export interface RefundConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundEdgeTypeResolver<TParent = any> {
    cursor?: RefundEdgeToCursorResolver<TParent>;
    node?: RefundEdgeToNodeResolver<TParent>;
  }
  
  export interface RefundEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemConnectionTypeResolver<TParent = any> {
    edges?: ReturnLineItemConnectionToEdgesResolver<TParent>;
    nodes?: ReturnLineItemConnectionToNodesResolver<TParent>;
    pageInfo?: ReturnLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ReturnLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemEdgeTypeResolver<TParent = any> {
    cursor?: ReturnLineItemEdgeToCursorResolver<TParent>;
    node?: ReturnLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface ReturnLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemTypeResolver<TParent = any> {
    customerNote?: ReturnLineItemToCustomerNoteResolver<TParent>;
    fulfillmentLineItem?: ReturnLineItemToFulfillmentLineItemResolver<TParent>;
    id?: ReturnLineItemToIdResolver<TParent>;
    quantity?: ReturnLineItemToQuantityResolver<TParent>;
    refundableQuantity?: ReturnLineItemToRefundableQuantityResolver<TParent>;
    refundedQuantity?: ReturnLineItemToRefundedQuantityResolver<TParent>;
    returnReason?: ReturnLineItemToReturnReasonResolver<TParent>;
    returnReasonNote?: ReturnLineItemToReturnReasonNoteResolver<TParent>;
    totalWeight?: ReturnLineItemToTotalWeightResolver<TParent>;
    withCodeDiscountedTotalPriceSet?: ReturnLineItemToWithCodeDiscountedTotalPriceSetResolver<TParent>;
  }
  
  export interface ReturnLineItemToCustomerNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemToFulfillmentLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemToRefundableQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemToRefundedQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemToReturnReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemToReturnReasonNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemToTotalWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnLineItemToWithCodeDiscountedTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemTypeResolver<TParent = any> {
    discountedTotal?: FulfillmentLineItemToDiscountedTotalResolver<TParent>;
    discountedTotalSet?: FulfillmentLineItemToDiscountedTotalSetResolver<TParent>;
    id?: FulfillmentLineItemToIdResolver<TParent>;
    lineItem?: FulfillmentLineItemToLineItemResolver<TParent>;
    originalTotal?: FulfillmentLineItemToOriginalTotalResolver<TParent>;
    originalTotalSet?: FulfillmentLineItemToOriginalTotalSetResolver<TParent>;
    quantity?: FulfillmentLineItemToQuantityResolver<TParent>;
  }
  
  export interface FulfillmentLineItemToDiscountedTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemToDiscountedTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemToLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemToOriginalTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemToOriginalTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderConnectionTypeResolver<TParent = any> {
    edges?: ReverseFulfillmentOrderConnectionToEdgesResolver<TParent>;
    nodes?: ReverseFulfillmentOrderConnectionToNodesResolver<TParent>;
    pageInfo?: ReverseFulfillmentOrderConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ReverseFulfillmentOrderConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderEdgeTypeResolver<TParent = any> {
    cursor?: ReverseFulfillmentOrderEdgeToCursorResolver<TParent>;
    node?: ReverseFulfillmentOrderEdgeToNodeResolver<TParent>;
  }
  
  export interface ReverseFulfillmentOrderEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderTypeResolver<TParent = any> {
    id?: ReverseFulfillmentOrderToIdResolver<TParent>;
    lineItems?: ReverseFulfillmentOrderToLineItemsResolver<TParent>;
    order?: ReverseFulfillmentOrderToOrderResolver<TParent>;
    reverseDeliveries?: ReverseFulfillmentOrderToReverseDeliveriesResolver<TParent>;
    status?: ReverseFulfillmentOrderToStatusResolver<TParent>;
    thirdPartyConfirmation?: ReverseFulfillmentOrderToThirdPartyConfirmationResolver<TParent>;
  }
  
  export interface ReverseFulfillmentOrderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderToLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ReverseFulfillmentOrderToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ReverseFulfillmentOrderToLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderToReverseDeliveriesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ReverseFulfillmentOrderToReverseDeliveriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ReverseFulfillmentOrderToReverseDeliveriesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderToThirdPartyConfirmationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderLineItemConnectionTypeResolver<TParent = any> {
    edges?: ReverseFulfillmentOrderLineItemConnectionToEdgesResolver<TParent>;
    nodes?: ReverseFulfillmentOrderLineItemConnectionToNodesResolver<TParent>;
    pageInfo?: ReverseFulfillmentOrderLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ReverseFulfillmentOrderLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderLineItemEdgeTypeResolver<TParent = any> {
    cursor?: ReverseFulfillmentOrderLineItemEdgeToCursorResolver<TParent>;
    node?: ReverseFulfillmentOrderLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface ReverseFulfillmentOrderLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderLineItemTypeResolver<TParent = any> {
    dispositions?: ReverseFulfillmentOrderLineItemToDispositionsResolver<TParent>;
    fulfillmentLineItem?: ReverseFulfillmentOrderLineItemToFulfillmentLineItemResolver<TParent>;
    id?: ReverseFulfillmentOrderLineItemToIdResolver<TParent>;
    totalQuantity?: ReverseFulfillmentOrderLineItemToTotalQuantityResolver<TParent>;
  }
  
  export interface ReverseFulfillmentOrderLineItemToDispositionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderLineItemToFulfillmentLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderLineItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderLineItemToTotalQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderDispositionTypeResolver<TParent = any> {
    id?: ReverseFulfillmentOrderDispositionToIdResolver<TParent>;
    location?: ReverseFulfillmentOrderDispositionToLocationResolver<TParent>;
    quantity?: ReverseFulfillmentOrderDispositionToQuantityResolver<TParent>;
    type?: ReverseFulfillmentOrderDispositionToTypeResolver<TParent>;
  }
  
  export interface ReverseFulfillmentOrderDispositionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderDispositionToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderDispositionToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderDispositionToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryConnectionTypeResolver<TParent = any> {
    edges?: ReverseDeliveryConnectionToEdgesResolver<TParent>;
    nodes?: ReverseDeliveryConnectionToNodesResolver<TParent>;
    pageInfo?: ReverseDeliveryConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ReverseDeliveryConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryEdgeTypeResolver<TParent = any> {
    cursor?: ReverseDeliveryEdgeToCursorResolver<TParent>;
    node?: ReverseDeliveryEdgeToNodeResolver<TParent>;
  }
  
  export interface ReverseDeliveryEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryTypeResolver<TParent = any> {
    deliverable?: ReverseDeliveryToDeliverableResolver<TParent>;
    id?: ReverseDeliveryToIdResolver<TParent>;
    reverseDeliveryLineItems?: ReverseDeliveryToReverseDeliveryLineItemsResolver<TParent>;
    reverseFulfillmentOrder?: ReverseDeliveryToReverseFulfillmentOrderResolver<TParent>;
  }
  
  export interface ReverseDeliveryToDeliverableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryToReverseDeliveryLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ReverseDeliveryToReverseDeliveryLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ReverseDeliveryToReverseDeliveryLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryToReverseFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryDeliverableTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'ReverseDeliveryShippingDeliverable';
  }
  export interface ReverseDeliveryShippingDeliverableTypeResolver<TParent = any> {
    label?: ReverseDeliveryShippingDeliverableToLabelResolver<TParent>;
    tracking?: ReverseDeliveryShippingDeliverableToTrackingResolver<TParent>;
  }
  
  export interface ReverseDeliveryShippingDeliverableToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryShippingDeliverableToTrackingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLabelV2TypeResolver<TParent = any> {
    createdAt?: ReverseDeliveryLabelV2ToCreatedAtResolver<TParent>;
    publicFileUrl?: ReverseDeliveryLabelV2ToPublicFileUrlResolver<TParent>;
    updatedAt?: ReverseDeliveryLabelV2ToUpdatedAtResolver<TParent>;
  }
  
  export interface ReverseDeliveryLabelV2ToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLabelV2ToPublicFileUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLabelV2ToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryTrackingV2TypeResolver<TParent = any> {
    carrierName?: ReverseDeliveryTrackingV2ToCarrierNameResolver<TParent>;
    number?: ReverseDeliveryTrackingV2ToNumberResolver<TParent>;
    url?: ReverseDeliveryTrackingV2ToUrlResolver<TParent>;
  }
  
  export interface ReverseDeliveryTrackingV2ToCarrierNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryTrackingV2ToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryTrackingV2ToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLineItemConnectionTypeResolver<TParent = any> {
    edges?: ReverseDeliveryLineItemConnectionToEdgesResolver<TParent>;
    nodes?: ReverseDeliveryLineItemConnectionToNodesResolver<TParent>;
    pageInfo?: ReverseDeliveryLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ReverseDeliveryLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLineItemEdgeTypeResolver<TParent = any> {
    cursor?: ReverseDeliveryLineItemEdgeToCursorResolver<TParent>;
    node?: ReverseDeliveryLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface ReverseDeliveryLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLineItemTypeResolver<TParent = any> {
    dispositions?: ReverseDeliveryLineItemToDispositionsResolver<TParent>;
    id?: ReverseDeliveryLineItemToIdResolver<TParent>;
    quantity?: ReverseDeliveryLineItemToQuantityResolver<TParent>;
    reverseFulfillmentOrderLineItem?: ReverseDeliveryLineItemToReverseFulfillmentOrderLineItemResolver<TParent>;
  }
  
  export interface ReverseDeliveryLineItemToDispositionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLineItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryLineItemToReverseFulfillmentOrderLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderThirdPartyConfirmationTypeResolver<TParent = any> {
    status?: ReverseFulfillmentOrderThirdPartyConfirmationToStatusResolver<TParent>;
  }
  
  export interface ReverseFulfillmentOrderThirdPartyConfirmationToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedReturnRefundTypeResolver<TParent = any> {
    amount?: SuggestedReturnRefundToAmountResolver<TParent>;
    discountedSubtotal?: SuggestedReturnRefundToDiscountedSubtotalResolver<TParent>;
    maximumRefundable?: SuggestedReturnRefundToMaximumRefundableResolver<TParent>;
    refundDuties?: SuggestedReturnRefundToRefundDutiesResolver<TParent>;
    shipping?: SuggestedReturnRefundToShippingResolver<TParent>;
    subtotal?: SuggestedReturnRefundToSubtotalResolver<TParent>;
    suggestedTransactions?: SuggestedReturnRefundToSuggestedTransactionsResolver<TParent>;
    totalCartDiscountAmount?: SuggestedReturnRefundToTotalCartDiscountAmountResolver<TParent>;
    totalDuties?: SuggestedReturnRefundToTotalDutiesResolver<TParent>;
    totalTax?: SuggestedReturnRefundToTotalTaxResolver<TParent>;
  }
  
  export interface SuggestedReturnRefundToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedReturnRefundToDiscountedSubtotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedReturnRefundToMaximumRefundableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedReturnRefundToRefundDutiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedReturnRefundToShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedReturnRefundToSubtotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedReturnRefundToSuggestedTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedReturnRefundToTotalCartDiscountAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedReturnRefundToTotalDutiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedReturnRefundToTotalTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRefundTypeResolver<TParent = any> {
    amount?: ShippingRefundToAmountResolver<TParent>;
    amountSet?: ShippingRefundToAmountSetResolver<TParent>;
    maximumRefundable?: ShippingRefundToMaximumRefundableResolver<TParent>;
    maximumRefundableSet?: ShippingRefundToMaximumRefundableSetResolver<TParent>;
    tax?: ShippingRefundToTaxResolver<TParent>;
    taxSet?: ShippingRefundToTaxSetResolver<TParent>;
  }
  
  export interface ShippingRefundToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRefundToAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRefundToMaximumRefundableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRefundToMaximumRefundableSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRefundToTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRefundToTaxSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedOrderTransactionTypeResolver<TParent = any> {
    accountNumber?: SuggestedOrderTransactionToAccountNumberResolver<TParent>;
    amount?: SuggestedOrderTransactionToAmountResolver<TParent>;
    amountSet?: SuggestedOrderTransactionToAmountSetResolver<TParent>;
    formattedGateway?: SuggestedOrderTransactionToFormattedGatewayResolver<TParent>;
    gateway?: SuggestedOrderTransactionToGatewayResolver<TParent>;
    kind?: SuggestedOrderTransactionToKindResolver<TParent>;
    maximumRefundable?: SuggestedOrderTransactionToMaximumRefundableResolver<TParent>;
    maximumRefundableSet?: SuggestedOrderTransactionToMaximumRefundableSetResolver<TParent>;
    parentTransaction?: SuggestedOrderTransactionToParentTransactionResolver<TParent>;
    paymentDetails?: SuggestedOrderTransactionToPaymentDetailsResolver<TParent>;
  }
  
  export interface SuggestedOrderTransactionToAccountNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedOrderTransactionToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedOrderTransactionToAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedOrderTransactionToFormattedGatewayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedOrderTransactionToGatewayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedOrderTransactionToKindResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedOrderTransactionToMaximumRefundableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedOrderTransactionToMaximumRefundableSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedOrderTransactionToParentTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedOrderTransactionToPaymentDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionTypeResolver<TParent = any> {
    accountNumber?: OrderTransactionToAccountNumberResolver<TParent>;
    amount?: OrderTransactionToAmountResolver<TParent>;
    amountSet?: OrderTransactionToAmountSetResolver<TParent>;
    amountV2?: OrderTransactionToAmountV2Resolver<TParent>;
    authorizationCode?: OrderTransactionToAuthorizationCodeResolver<TParent>;
    authorizationExpiresAt?: OrderTransactionToAuthorizationExpiresAtResolver<TParent>;
    createdAt?: OrderTransactionToCreatedAtResolver<TParent>;
    errorCode?: OrderTransactionToErrorCodeResolver<TParent>;
    fees?: OrderTransactionToFeesResolver<TParent>;
    formattedGateway?: OrderTransactionToFormattedGatewayResolver<TParent>;
    gateway?: OrderTransactionToGatewayResolver<TParent>;
    id?: OrderTransactionToIdResolver<TParent>;
    kind?: OrderTransactionToKindResolver<TParent>;
    manuallyCapturable?: OrderTransactionToManuallyCapturableResolver<TParent>;
    maximumRefundable?: OrderTransactionToMaximumRefundableResolver<TParent>;
    maximumRefundableV2?: OrderTransactionToMaximumRefundableV2Resolver<TParent>;
    multiCapturable?: OrderTransactionToMultiCapturableResolver<TParent>;
    order?: OrderTransactionToOrderResolver<TParent>;
    parentTransaction?: OrderTransactionToParentTransactionResolver<TParent>;
    paymentDetails?: OrderTransactionToPaymentDetailsResolver<TParent>;
    paymentIcon?: OrderTransactionToPaymentIconResolver<TParent>;
    paymentId?: OrderTransactionToPaymentIdResolver<TParent>;
    paymentMethod?: OrderTransactionToPaymentMethodResolver<TParent>;
    processedAt?: OrderTransactionToProcessedAtResolver<TParent>;
    receipt?: OrderTransactionToReceiptResolver<TParent>;
    receiptJson?: OrderTransactionToReceiptJsonResolver<TParent>;
    settlementCurrency?: OrderTransactionToSettlementCurrencyResolver<TParent>;
    settlementCurrencyRate?: OrderTransactionToSettlementCurrencyRateResolver<TParent>;
    shopifyPaymentsSet?: OrderTransactionToShopifyPaymentsSetResolver<TParent>;
    status?: OrderTransactionToStatusResolver<TParent>;
    test?: OrderTransactionToTestResolver<TParent>;
    totalUnsettled?: OrderTransactionToTotalUnsettledResolver<TParent>;
    totalUnsettledSet?: OrderTransactionToTotalUnsettledSetResolver<TParent>;
    totalUnsettledV2?: OrderTransactionToTotalUnsettledV2Resolver<TParent>;
    user?: OrderTransactionToUserResolver<TParent>;
  }
  
  export interface OrderTransactionToAccountNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToAmountV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToAuthorizationCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToAuthorizationExpiresAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToErrorCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToFeesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToFormattedGatewayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToGatewayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToKindResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToManuallyCapturableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToMaximumRefundableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToMaximumRefundableV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToMultiCapturableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToParentTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToPaymentDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToPaymentIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToPaymentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToProcessedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToReceiptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToReceiptJsonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToSettlementCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToSettlementCurrencyRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToShopifyPaymentsSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToTestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToTotalUnsettledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToTotalUnsettledSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToTotalUnsettledV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionFeeTypeResolver<TParent = any> {
    amount?: TransactionFeeToAmountResolver<TParent>;
    flatFee?: TransactionFeeToFlatFeeResolver<TParent>;
    flatFeeName?: TransactionFeeToFlatFeeNameResolver<TParent>;
    id?: TransactionFeeToIdResolver<TParent>;
    rate?: TransactionFeeToRateResolver<TParent>;
    rateName?: TransactionFeeToRateNameResolver<TParent>;
    taxAmount?: TransactionFeeToTaxAmountResolver<TParent>;
    type?: TransactionFeeToTypeResolver<TParent>;
  }
  
  export interface TransactionFeeToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionFeeToFlatFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionFeeToFlatFeeNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionFeeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionFeeToRateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionFeeToRateNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionFeeToTaxAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TransactionFeeToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentDetailsTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'CardPaymentDetails' | 'ShopPayInstallmentsPaymentDetails';
  }
  export interface CardPaymentDetailsTypeResolver<TParent = any> {
    avsResultCode?: CardPaymentDetailsToAvsResultCodeResolver<TParent>;
    bin?: CardPaymentDetailsToBinResolver<TParent>;
    company?: CardPaymentDetailsToCompanyResolver<TParent>;
    cvvResultCode?: CardPaymentDetailsToCvvResultCodeResolver<TParent>;
    expirationMonth?: CardPaymentDetailsToExpirationMonthResolver<TParent>;
    expirationYear?: CardPaymentDetailsToExpirationYearResolver<TParent>;
    name?: CardPaymentDetailsToNameResolver<TParent>;
    number?: CardPaymentDetailsToNumberResolver<TParent>;
    paymentMethodName?: CardPaymentDetailsToPaymentMethodNameResolver<TParent>;
    wallet?: CardPaymentDetailsToWalletResolver<TParent>;
  }
  
  export interface CardPaymentDetailsToAvsResultCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CardPaymentDetailsToBinResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CardPaymentDetailsToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CardPaymentDetailsToCvvResultCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CardPaymentDetailsToExpirationMonthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CardPaymentDetailsToExpirationYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CardPaymentDetailsToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CardPaymentDetailsToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CardPaymentDetailsToPaymentMethodNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CardPaymentDetailsToWalletResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BasePaymentDetailsTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'CardPaymentDetails' | 'ShopPayInstallmentsPaymentDetails';
  }
  export interface ShopPayInstallmentsPaymentDetailsTypeResolver<TParent = any> {
    paymentMethodName?: ShopPayInstallmentsPaymentDetailsToPaymentMethodNameResolver<TParent>;
  }
  
  export interface ShopPayInstallmentsPaymentDetailsToPaymentMethodNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsTransactionSetTypeResolver<TParent = any> {
    extendedAuthorizationSet?: ShopifyPaymentsTransactionSetToExtendedAuthorizationSetResolver<TParent>;
    refundSet?: ShopifyPaymentsTransactionSetToRefundSetResolver<TParent>;
  }
  
  export interface ShopifyPaymentsTransactionSetToExtendedAuthorizationSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsTransactionSetToRefundSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsExtendedAuthorizationTypeResolver<TParent = any> {
    extendedAuthorizationExpiresAt?: ShopifyPaymentsExtendedAuthorizationToExtendedAuthorizationExpiresAtResolver<TParent>;
    standardAuthorizationExpiresAt?: ShopifyPaymentsExtendedAuthorizationToStandardAuthorizationExpiresAtResolver<TParent>;
  }
  
  export interface ShopifyPaymentsExtendedAuthorizationToExtendedAuthorizationExpiresAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsExtendedAuthorizationToStandardAuthorizationExpiresAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsRefundSetTypeResolver<TParent = any> {
    acquirerReferenceNumber?: ShopifyPaymentsRefundSetToAcquirerReferenceNumberResolver<TParent>;
  }
  
  export interface ShopifyPaymentsRefundSetToAcquirerReferenceNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionConnectionTypeResolver<TParent = any> {
    edges?: OrderTransactionConnectionToEdgesResolver<TParent>;
    nodes?: OrderTransactionConnectionToNodesResolver<TParent>;
    pageInfo?: OrderTransactionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface OrderTransactionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionEdgeTypeResolver<TParent = any> {
    cursor?: OrderTransactionEdgeToCursorResolver<TParent>;
    node?: OrderTransactionEdgeToNodeResolver<TParent>;
  }
  
  export interface OrderTransactionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderTransactionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ReturnsTypeResolver<TParent = any> {
    lineItems?: ExchangeV2ReturnsToLineItemsResolver<TParent>;
    orderDiscountAmountSet?: ExchangeV2ReturnsToOrderDiscountAmountSetResolver<TParent>;
    shippingRefundAmountSet?: ExchangeV2ReturnsToShippingRefundAmountSetResolver<TParent>;
    subtotalPriceSet?: ExchangeV2ReturnsToSubtotalPriceSetResolver<TParent>;
    taxLines?: ExchangeV2ReturnsToTaxLinesResolver<TParent>;
    tipRefundAmountSet?: ExchangeV2ReturnsToTipRefundAmountSetResolver<TParent>;
    totalPriceSet?: ExchangeV2ReturnsToTotalPriceSetResolver<TParent>;
  }
  
  export interface ExchangeV2ReturnsToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ReturnsToOrderDiscountAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ReturnsToShippingRefundAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ReturnsToSubtotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ReturnsToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ReturnsToTipRefundAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExchangeV2ReturnsToTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderConnectionTypeResolver<TParent = any> {
    edges?: FulfillmentOrderConnectionToEdgesResolver<TParent>;
    nodes?: FulfillmentOrderConnectionToNodesResolver<TParent>;
    pageInfo?: FulfillmentOrderConnectionToPageInfoResolver<TParent>;
  }
  
  export interface FulfillmentOrderConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderEdgeTypeResolver<TParent = any> {
    cursor?: FulfillmentOrderEdgeToCursorResolver<TParent>;
    node?: FulfillmentOrderEdgeToNodeResolver<TParent>;
  }
  
  export interface FulfillmentOrderEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderTypeResolver<TParent = any> {
    assignedLocation?: FulfillmentOrderToAssignedLocationResolver<TParent>;
    channelId?: FulfillmentOrderToChannelIdResolver<TParent>;
    createdAt?: FulfillmentOrderToCreatedAtResolver<TParent>;
    deliveryMethod?: FulfillmentOrderToDeliveryMethodResolver<TParent>;
    destination?: FulfillmentOrderToDestinationResolver<TParent>;
    fulfillAt?: FulfillmentOrderToFulfillAtResolver<TParent>;
    fulfillBy?: FulfillmentOrderToFulfillByResolver<TParent>;
    fulfillmentHolds?: FulfillmentOrderToFulfillmentHoldsResolver<TParent>;
    fulfillmentOrdersForMerge?: FulfillmentOrderToFulfillmentOrdersForMergeResolver<TParent>;
    fulfillments?: FulfillmentOrderToFulfillmentsResolver<TParent>;
    id?: FulfillmentOrderToIdResolver<TParent>;
    internationalDuties?: FulfillmentOrderToInternationalDutiesResolver<TParent>;
    lineItems?: FulfillmentOrderToLineItemsResolver<TParent>;
    locationsForMove?: FulfillmentOrderToLocationsForMoveResolver<TParent>;
    merchantRequests?: FulfillmentOrderToMerchantRequestsResolver<TParent>;
    order?: FulfillmentOrderToOrderResolver<TParent>;
    orderId?: FulfillmentOrderToOrderIdResolver<TParent>;
    orderName?: FulfillmentOrderToOrderNameResolver<TParent>;
    orderProcessedAt?: FulfillmentOrderToOrderProcessedAtResolver<TParent>;
    requestStatus?: FulfillmentOrderToRequestStatusResolver<TParent>;
    status?: FulfillmentOrderToStatusResolver<TParent>;
    supportedActions?: FulfillmentOrderToSupportedActionsResolver<TParent>;
    updatedAt?: FulfillmentOrderToUpdatedAtResolver<TParent>;
  }
  
  export interface FulfillmentOrderToAssignedLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToChannelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToDeliveryMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToDestinationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToFulfillAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToFulfillByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToFulfillmentHoldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToFulfillmentOrdersForMergeArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentOrderToFulfillmentOrdersForMergeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentOrderToFulfillmentOrdersForMergeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToFulfillmentsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentOrderToFulfillmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentOrderToFulfillmentsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToInternationalDutiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentOrderToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentOrderToLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToLocationsForMoveArgs {
    lineItemIds?: Array<string>;
    query?: string;
    locationIds?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentOrderToLocationsForMoveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentOrderToLocationsForMoveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToMerchantRequestsArgs {
    kind?: FulfillmentOrderMerchantRequestKind;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentOrderToMerchantRequestsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentOrderToMerchantRequestsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToOrderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToOrderNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToOrderProcessedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToRequestStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToSupportedActionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAssignedLocationTypeResolver<TParent = any> {
    address1?: FulfillmentOrderAssignedLocationToAddress1Resolver<TParent>;
    address2?: FulfillmentOrderAssignedLocationToAddress2Resolver<TParent>;
    city?: FulfillmentOrderAssignedLocationToCityResolver<TParent>;
    countryCode?: FulfillmentOrderAssignedLocationToCountryCodeResolver<TParent>;
    location?: FulfillmentOrderAssignedLocationToLocationResolver<TParent>;
    name?: FulfillmentOrderAssignedLocationToNameResolver<TParent>;
    phone?: FulfillmentOrderAssignedLocationToPhoneResolver<TParent>;
    province?: FulfillmentOrderAssignedLocationToProvinceResolver<TParent>;
    zip?: FulfillmentOrderAssignedLocationToZipResolver<TParent>;
  }
  
  export interface FulfillmentOrderAssignedLocationToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAssignedLocationToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAssignedLocationToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAssignedLocationToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAssignedLocationToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAssignedLocationToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAssignedLocationToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAssignedLocationToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAssignedLocationToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodTypeResolver<TParent = any> {
    brandedPromise?: DeliveryMethodToBrandedPromiseResolver<TParent>;
    id?: DeliveryMethodToIdResolver<TParent>;
    maxDeliveryDateTime?: DeliveryMethodToMaxDeliveryDateTimeResolver<TParent>;
    methodType?: DeliveryMethodToMethodTypeResolver<TParent>;
    minDeliveryDateTime?: DeliveryMethodToMinDeliveryDateTimeResolver<TParent>;
    serviceCode?: DeliveryMethodToServiceCodeResolver<TParent>;
  }
  
  export interface DeliveryMethodToBrandedPromiseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodToMaxDeliveryDateTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodToMethodTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodToMinDeliveryDateTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryMethodToServiceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryBrandedPromiseTypeResolver<TParent = any> {
    handle?: DeliveryBrandedPromiseToHandleResolver<TParent>;
    name?: DeliveryBrandedPromiseToNameResolver<TParent>;
  }
  
  export interface DeliveryBrandedPromiseToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryBrandedPromiseToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationTypeResolver<TParent = any> {
    address1?: FulfillmentOrderDestinationToAddress1Resolver<TParent>;
    address2?: FulfillmentOrderDestinationToAddress2Resolver<TParent>;
    city?: FulfillmentOrderDestinationToCityResolver<TParent>;
    company?: FulfillmentOrderDestinationToCompanyResolver<TParent>;
    countryCode?: FulfillmentOrderDestinationToCountryCodeResolver<TParent>;
    email?: FulfillmentOrderDestinationToEmailResolver<TParent>;
    firstName?: FulfillmentOrderDestinationToFirstNameResolver<TParent>;
    id?: FulfillmentOrderDestinationToIdResolver<TParent>;
    lastName?: FulfillmentOrderDestinationToLastNameResolver<TParent>;
    phone?: FulfillmentOrderDestinationToPhoneResolver<TParent>;
    province?: FulfillmentOrderDestinationToProvinceResolver<TParent>;
    zip?: FulfillmentOrderDestinationToZipResolver<TParent>;
  }
  
  export interface FulfillmentOrderDestinationToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderDestinationToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentHoldTypeResolver<TParent = any> {
    heldBy?: FulfillmentHoldToHeldByResolver<TParent>;
    reason?: FulfillmentHoldToReasonResolver<TParent>;
    reasonNotes?: FulfillmentHoldToReasonNotesResolver<TParent>;
  }
  
  export interface FulfillmentHoldToHeldByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentHoldToReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentHoldToReasonNotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConnectionTypeResolver<TParent = any> {
    edges?: FulfillmentConnectionToEdgesResolver<TParent>;
    nodes?: FulfillmentConnectionToNodesResolver<TParent>;
    pageInfo?: FulfillmentConnectionToPageInfoResolver<TParent>;
  }
  
  export interface FulfillmentConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEdgeTypeResolver<TParent = any> {
    cursor?: FulfillmentEdgeToCursorResolver<TParent>;
    node?: FulfillmentEdgeToNodeResolver<TParent>;
  }
  
  export interface FulfillmentEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentTypeResolver<TParent = any> {
    createdAt?: FulfillmentToCreatedAtResolver<TParent>;
    deliveredAt?: FulfillmentToDeliveredAtResolver<TParent>;
    displayStatus?: FulfillmentToDisplayStatusResolver<TParent>;
    estimatedDeliveryAt?: FulfillmentToEstimatedDeliveryAtResolver<TParent>;
    events?: FulfillmentToEventsResolver<TParent>;
    fulfillmentLineItems?: FulfillmentToFulfillmentLineItemsResolver<TParent>;
    fulfillmentOrders?: FulfillmentToFulfillmentOrdersResolver<TParent>;
    id?: FulfillmentToIdResolver<TParent>;
    inTransitAt?: FulfillmentToInTransitAtResolver<TParent>;
    legacyResourceId?: FulfillmentToLegacyResourceIdResolver<TParent>;
    location?: FulfillmentToLocationResolver<TParent>;
    name?: FulfillmentToNameResolver<TParent>;
    order?: FulfillmentToOrderResolver<TParent>;
    originAddress?: FulfillmentToOriginAddressResolver<TParent>;
    requiresShipping?: FulfillmentToRequiresShippingResolver<TParent>;
    service?: FulfillmentToServiceResolver<TParent>;
    status?: FulfillmentToStatusResolver<TParent>;
    totalQuantity?: FulfillmentToTotalQuantityResolver<TParent>;
    trackingInfo?: FulfillmentToTrackingInfoResolver<TParent>;
    updatedAt?: FulfillmentToUpdatedAtResolver<TParent>;
  }
  
  export interface FulfillmentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToDeliveredAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToDisplayStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToEstimatedDeliveryAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: FulfillmentEventSortKeys;
  }
  export interface FulfillmentToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToFulfillmentLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentToFulfillmentLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentToFulfillmentLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToFulfillmentOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentToFulfillmentOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentToFulfillmentOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToInTransitAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToOriginAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToTotalQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToTrackingInfoArgs {
    first?: number;
  }
  export interface FulfillmentToTrackingInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentToTrackingInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventConnectionTypeResolver<TParent = any> {
    edges?: FulfillmentEventConnectionToEdgesResolver<TParent>;
    nodes?: FulfillmentEventConnectionToNodesResolver<TParent>;
    pageInfo?: FulfillmentEventConnectionToPageInfoResolver<TParent>;
  }
  
  export interface FulfillmentEventConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventEdgeTypeResolver<TParent = any> {
    cursor?: FulfillmentEventEdgeToCursorResolver<TParent>;
    node?: FulfillmentEventEdgeToNodeResolver<TParent>;
  }
  
  export interface FulfillmentEventEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventTypeResolver<TParent = any> {
    address1?: FulfillmentEventToAddress1Resolver<TParent>;
    city?: FulfillmentEventToCityResolver<TParent>;
    country?: FulfillmentEventToCountryResolver<TParent>;
    estimatedDeliveryAt?: FulfillmentEventToEstimatedDeliveryAtResolver<TParent>;
    happenedAt?: FulfillmentEventToHappenedAtResolver<TParent>;
    id?: FulfillmentEventToIdResolver<TParent>;
    latitude?: FulfillmentEventToLatitudeResolver<TParent>;
    longitude?: FulfillmentEventToLongitudeResolver<TParent>;
    message?: FulfillmentEventToMessageResolver<TParent>;
    province?: FulfillmentEventToProvinceResolver<TParent>;
    status?: FulfillmentEventToStatusResolver<TParent>;
    zip?: FulfillmentEventToZipResolver<TParent>;
  }
  
  export interface FulfillmentEventToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventToEstimatedDeliveryAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventToHappenedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventToLatitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventToLongitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemConnectionTypeResolver<TParent = any> {
    edges?: FulfillmentLineItemConnectionToEdgesResolver<TParent>;
    nodes?: FulfillmentLineItemConnectionToNodesResolver<TParent>;
    pageInfo?: FulfillmentLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface FulfillmentLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemEdgeTypeResolver<TParent = any> {
    cursor?: FulfillmentLineItemEdgeToCursorResolver<TParent>;
    node?: FulfillmentLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface FulfillmentLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOriginAddressTypeResolver<TParent = any> {
    address1?: FulfillmentOriginAddressToAddress1Resolver<TParent>;
    address2?: FulfillmentOriginAddressToAddress2Resolver<TParent>;
    city?: FulfillmentOriginAddressToCityResolver<TParent>;
    countryCode?: FulfillmentOriginAddressToCountryCodeResolver<TParent>;
    provinceCode?: FulfillmentOriginAddressToProvinceCodeResolver<TParent>;
    zip?: FulfillmentOriginAddressToZipResolver<TParent>;
  }
  
  export interface FulfillmentOriginAddressToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOriginAddressToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOriginAddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOriginAddressToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOriginAddressToProvinceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOriginAddressToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentTrackingInfoTypeResolver<TParent = any> {
    company?: FulfillmentTrackingInfoToCompanyResolver<TParent>;
    number?: FulfillmentTrackingInfoToNumberResolver<TParent>;
    url?: FulfillmentTrackingInfoToUrlResolver<TParent>;
  }
  
  export interface FulfillmentTrackingInfoToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentTrackingInfoToNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentTrackingInfoToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderInternationalDutiesTypeResolver<TParent = any> {
    incoterm?: FulfillmentOrderInternationalDutiesToIncotermResolver<TParent>;
  }
  
  export interface FulfillmentOrderInternationalDutiesToIncotermResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemConnectionTypeResolver<TParent = any> {
    edges?: FulfillmentOrderLineItemConnectionToEdgesResolver<TParent>;
    nodes?: FulfillmentOrderLineItemConnectionToNodesResolver<TParent>;
    pageInfo?: FulfillmentOrderLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface FulfillmentOrderLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemEdgeTypeResolver<TParent = any> {
    cursor?: FulfillmentOrderLineItemEdgeToCursorResolver<TParent>;
    node?: FulfillmentOrderLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface FulfillmentOrderLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemTypeResolver<TParent = any> {
    financialSummaries?: FulfillmentOrderLineItemToFinancialSummariesResolver<TParent>;
    id?: FulfillmentOrderLineItemToIdResolver<TParent>;
    image?: FulfillmentOrderLineItemToImageResolver<TParent>;
    inventoryItemId?: FulfillmentOrderLineItemToInventoryItemIdResolver<TParent>;
    lineItem?: FulfillmentOrderLineItemToLineItemResolver<TParent>;
    originalUnitPriceSet?: FulfillmentOrderLineItemToOriginalUnitPriceSetResolver<TParent>;
    productTitle?: FulfillmentOrderLineItemToProductTitleResolver<TParent>;
    remainingQuantity?: FulfillmentOrderLineItemToRemainingQuantityResolver<TParent>;
    requiresShipping?: FulfillmentOrderLineItemToRequiresShippingResolver<TParent>;
    sku?: FulfillmentOrderLineItemToSkuResolver<TParent>;
    totalQuantity?: FulfillmentOrderLineItemToTotalQuantityResolver<TParent>;
    variantTitle?: FulfillmentOrderLineItemToVariantTitleResolver<TParent>;
    vendor?: FulfillmentOrderLineItemToVendorResolver<TParent>;
    warnings?: FulfillmentOrderLineItemToWarningsResolver<TParent>;
    weight?: FulfillmentOrderLineItemToWeightResolver<TParent>;
  }
  
  export interface FulfillmentOrderLineItemToFinancialSummariesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToInventoryItemIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToOriginalUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToProductTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToRemainingQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToTotalQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToVariantTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToVendorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToWarningsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemToWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemFinancialSummaryTypeResolver<TParent = any> {
    approximateDiscountedUnitPriceSet?: FulfillmentOrderLineItemFinancialSummaryToApproximateDiscountedUnitPriceSetResolver<TParent>;
    discountAllocations?: FulfillmentOrderLineItemFinancialSummaryToDiscountAllocationsResolver<TParent>;
    originalUnitPriceSet?: FulfillmentOrderLineItemFinancialSummaryToOriginalUnitPriceSetResolver<TParent>;
    quantity?: FulfillmentOrderLineItemFinancialSummaryToQuantityResolver<TParent>;
  }
  
  export interface FulfillmentOrderLineItemFinancialSummaryToApproximateDiscountedUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemFinancialSummaryToDiscountAllocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemFinancialSummaryToOriginalUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemFinancialSummaryToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FinancialSummaryDiscountAllocationTypeResolver<TParent = any> {
    approximateAllocatedAmountPerItem?: FinancialSummaryDiscountAllocationToApproximateAllocatedAmountPerItemResolver<TParent>;
    discountApplication?: FinancialSummaryDiscountAllocationToDiscountApplicationResolver<TParent>;
  }
  
  export interface FinancialSummaryDiscountAllocationToApproximateAllocatedAmountPerItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FinancialSummaryDiscountAllocationToDiscountApplicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FinancialSummaryDiscountApplicationTypeResolver<TParent = any> {
    allocationMethod?: FinancialSummaryDiscountApplicationToAllocationMethodResolver<TParent>;
    targetSelection?: FinancialSummaryDiscountApplicationToTargetSelectionResolver<TParent>;
    targetType?: FinancialSummaryDiscountApplicationToTargetTypeResolver<TParent>;
  }
  
  export interface FinancialSummaryDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FinancialSummaryDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FinancialSummaryDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemWarningTypeResolver<TParent = any> {
    description?: FulfillmentOrderLineItemWarningToDescriptionResolver<TParent>;
    title?: FulfillmentOrderLineItemWarningToTitleResolver<TParent>;
  }
  
  export interface FulfillmentOrderLineItemWarningToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemWarningToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveConnectionTypeResolver<TParent = any> {
    edges?: FulfillmentOrderLocationForMoveConnectionToEdgesResolver<TParent>;
    nodes?: FulfillmentOrderLocationForMoveConnectionToNodesResolver<TParent>;
    pageInfo?: FulfillmentOrderLocationForMoveConnectionToPageInfoResolver<TParent>;
  }
  
  export interface FulfillmentOrderLocationForMoveConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveEdgeTypeResolver<TParent = any> {
    cursor?: FulfillmentOrderLocationForMoveEdgeToCursorResolver<TParent>;
    node?: FulfillmentOrderLocationForMoveEdgeToNodeResolver<TParent>;
  }
  
  export interface FulfillmentOrderLocationForMoveEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveTypeResolver<TParent = any> {
    availableLineItems?: FulfillmentOrderLocationForMoveToAvailableLineItemsResolver<TParent>;
    availableLineItemsCount?: FulfillmentOrderLocationForMoveToAvailableLineItemsCountResolver<TParent>;
    location?: FulfillmentOrderLocationForMoveToLocationResolver<TParent>;
    message?: FulfillmentOrderLocationForMoveToMessageResolver<TParent>;
    movable?: FulfillmentOrderLocationForMoveToMovableResolver<TParent>;
    unavailableLineItems?: FulfillmentOrderLocationForMoveToUnavailableLineItemsResolver<TParent>;
    unavailableLineItemsCount?: FulfillmentOrderLocationForMoveToUnavailableLineItemsCountResolver<TParent>;
  }
  
  export interface FulfillmentOrderLocationForMoveToAvailableLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentOrderLocationForMoveToAvailableLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentOrderLocationForMoveToAvailableLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveToAvailableLineItemsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveToMovableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveToUnavailableLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentOrderLocationForMoveToUnavailableLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentOrderLocationForMoveToUnavailableLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLocationForMoveToUnavailableLineItemsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestConnectionTypeResolver<TParent = any> {
    edges?: FulfillmentOrderMerchantRequestConnectionToEdgesResolver<TParent>;
    nodes?: FulfillmentOrderMerchantRequestConnectionToNodesResolver<TParent>;
    pageInfo?: FulfillmentOrderMerchantRequestConnectionToPageInfoResolver<TParent>;
  }
  
  export interface FulfillmentOrderMerchantRequestConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestEdgeTypeResolver<TParent = any> {
    cursor?: FulfillmentOrderMerchantRequestEdgeToCursorResolver<TParent>;
    node?: FulfillmentOrderMerchantRequestEdgeToNodeResolver<TParent>;
  }
  
  export interface FulfillmentOrderMerchantRequestEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderMerchantRequestToFulfillmentOrderResolver<TParent>;
    id?: FulfillmentOrderMerchantRequestToIdResolver<TParent>;
    kind?: FulfillmentOrderMerchantRequestToKindResolver<TParent>;
    message?: FulfillmentOrderMerchantRequestToMessageResolver<TParent>;
    requestOptions?: FulfillmentOrderMerchantRequestToRequestOptionsResolver<TParent>;
    responseData?: FulfillmentOrderMerchantRequestToResponseDataResolver<TParent>;
    sentAt?: FulfillmentOrderMerchantRequestToSentAtResolver<TParent>;
  }
  
  export interface FulfillmentOrderMerchantRequestToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestToKindResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestToRequestOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestToResponseDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMerchantRequestToSentAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSupportedActionTypeResolver<TParent = any> {
    action?: FulfillmentOrderSupportedActionToActionResolver<TParent>;
    externalUrl?: FulfillmentOrderSupportedActionToExternalUrlResolver<TParent>;
  }
  
  export interface FulfillmentOrderSupportedActionToActionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSupportedActionToExternalUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemConnectionTypeResolver<TParent = any> {
    edges?: LineItemConnectionToEdgesResolver<TParent>;
    nodes?: LineItemConnectionToNodesResolver<TParent>;
    pageInfo?: LineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface LineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemEdgeTypeResolver<TParent = any> {
    cursor?: LineItemEdgeToCursorResolver<TParent>;
    node?: LineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface LineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableConnectionTypeResolver<TParent = any> {
    edges?: LineItemMutableConnectionToEdgesResolver<TParent>;
    nodes?: LineItemMutableConnectionToNodesResolver<TParent>;
    pageInfo?: LineItemMutableConnectionToPageInfoResolver<TParent>;
  }
  
  export interface LineItemMutableConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableEdgeTypeResolver<TParent = any> {
    cursor?: LineItemMutableEdgeToCursorResolver<TParent>;
    node?: LineItemMutableEdgeToNodeResolver<TParent>;
  }
  
  export interface LineItemMutableEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableTypeResolver<TParent = any> {
    canRestock?: LineItemMutableToCanRestockResolver<TParent>;
    customAttributes?: LineItemMutableToCustomAttributesResolver<TParent>;
    discountAllocations?: LineItemMutableToDiscountAllocationsResolver<TParent>;
    discountedTotal?: LineItemMutableToDiscountedTotalResolver<TParent>;
    discountedTotalSet?: LineItemMutableToDiscountedTotalSetResolver<TParent>;
    discountedUnitPrice?: LineItemMutableToDiscountedUnitPriceResolver<TParent>;
    discountedUnitPriceSet?: LineItemMutableToDiscountedUnitPriceSetResolver<TParent>;
    fulfillableQuantity?: LineItemMutableToFulfillableQuantityResolver<TParent>;
    fulfillmentService?: LineItemMutableToFulfillmentServiceResolver<TParent>;
    fulfillmentStatus?: LineItemMutableToFulfillmentStatusResolver<TParent>;
    id?: LineItemMutableToIdResolver<TParent>;
    image?: LineItemMutableToImageResolver<TParent>;
    merchantEditable?: LineItemMutableToMerchantEditableResolver<TParent>;
    name?: LineItemMutableToNameResolver<TParent>;
    nonFulfillableQuantity?: LineItemMutableToNonFulfillableQuantityResolver<TParent>;
    originalTotal?: LineItemMutableToOriginalTotalResolver<TParent>;
    originalTotalSet?: LineItemMutableToOriginalTotalSetResolver<TParent>;
    originalUnitPrice?: LineItemMutableToOriginalUnitPriceResolver<TParent>;
    originalUnitPriceSet?: LineItemMutableToOriginalUnitPriceSetResolver<TParent>;
    product?: LineItemMutableToProductResolver<TParent>;
    quantity?: LineItemMutableToQuantityResolver<TParent>;
    refundableQuantity?: LineItemMutableToRefundableQuantityResolver<TParent>;
    requiresShipping?: LineItemMutableToRequiresShippingResolver<TParent>;
    restockable?: LineItemMutableToRestockableResolver<TParent>;
    sku?: LineItemMutableToSkuResolver<TParent>;
    staffMember?: LineItemMutableToStaffMemberResolver<TParent>;
    taxLines?: LineItemMutableToTaxLinesResolver<TParent>;
    taxable?: LineItemMutableToTaxableResolver<TParent>;
    title?: LineItemMutableToTitleResolver<TParent>;
    totalDiscount?: LineItemMutableToTotalDiscountResolver<TParent>;
    totalDiscountSet?: LineItemMutableToTotalDiscountSetResolver<TParent>;
    unfulfilledDiscountedTotal?: LineItemMutableToUnfulfilledDiscountedTotalResolver<TParent>;
    unfulfilledDiscountedTotalSet?: LineItemMutableToUnfulfilledDiscountedTotalSetResolver<TParent>;
    unfulfilledOriginalTotal?: LineItemMutableToUnfulfilledOriginalTotalResolver<TParent>;
    unfulfilledOriginalTotalSet?: LineItemMutableToUnfulfilledOriginalTotalSetResolver<TParent>;
    unfulfilledQuantity?: LineItemMutableToUnfulfilledQuantityResolver<TParent>;
    variant?: LineItemMutableToVariantResolver<TParent>;
    variantTitle?: LineItemMutableToVariantTitleResolver<TParent>;
    vendor?: LineItemMutableToVendorResolver<TParent>;
  }
  
  export interface LineItemMutableToCanRestockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToDiscountAllocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToDiscountedTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToDiscountedTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToDiscountedUnitPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToDiscountedUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToFulfillableQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToFulfillmentServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToFulfillmentStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToMerchantEditableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToNonFulfillableQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToOriginalTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToOriginalTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToOriginalUnitPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToOriginalUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToRefundableQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToRestockableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToStaffMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToTaxLinesArgs {
    first?: number;
  }
  export interface LineItemMutableToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: LineItemMutableToTaxLinesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToTaxableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToTotalDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToTotalDiscountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToUnfulfilledDiscountedTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToUnfulfilledDiscountedTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToUnfulfilledOriginalTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToUnfulfilledOriginalTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToUnfulfilledQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToVariantTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LineItemMutableToVendorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderPaymentCollectionDetailsTypeResolver<TParent = any> {
    additionalPaymentCollectionUrl?: OrderPaymentCollectionDetailsToAdditionalPaymentCollectionUrlResolver<TParent>;
    vaultedPaymentMethods?: OrderPaymentCollectionDetailsToVaultedPaymentMethodsResolver<TParent>;
  }
  
  export interface OrderPaymentCollectionDetailsToAdditionalPaymentCollectionUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderPaymentCollectionDetailsToVaultedPaymentMethodsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentMandateTypeResolver<TParent = any> {
    id?: PaymentMandateToIdResolver<TParent>;
    paymentInstrument?: PaymentMandateToPaymentInstrumentResolver<TParent>;
  }
  
  export interface PaymentMandateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentMandateToPaymentInstrumentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentInstrumentTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'VaultCreditCard' | 'VaultPaypalBillingAgreement';
  }
  export interface VaultCreditCardTypeResolver<TParent = any> {
    billingAddress?: VaultCreditCardToBillingAddressResolver<TParent>;
    brand?: VaultCreditCardToBrandResolver<TParent>;
    expired?: VaultCreditCardToExpiredResolver<TParent>;
    expiryMonth?: VaultCreditCardToExpiryMonthResolver<TParent>;
    expiryYear?: VaultCreditCardToExpiryYearResolver<TParent>;
    lastDigits?: VaultCreditCardToLastDigitsResolver<TParent>;
    name?: VaultCreditCardToNameResolver<TParent>;
  }
  
  export interface VaultCreditCardToBillingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VaultCreditCardToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VaultCreditCardToExpiredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VaultCreditCardToExpiryMonthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VaultCreditCardToExpiryYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VaultCreditCardToLastDigitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VaultCreditCardToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VaultPaypalBillingAgreementTypeResolver<TParent = any> {
    inactive?: VaultPaypalBillingAgreementToInactiveResolver<TParent>;
    name?: VaultPaypalBillingAgreementToNameResolver<TParent>;
    paypalAccountEmail?: VaultPaypalBillingAgreementToPaypalAccountEmailResolver<TParent>;
  }
  
  export interface VaultPaypalBillingAgreementToInactiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VaultPaypalBillingAgreementToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VaultPaypalBillingAgreementToPaypalAccountEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsTypeResolver<TParent = any> {
    draftOrder?: PaymentTermsToDraftOrderResolver<TParent>;
    dueInDays?: PaymentTermsToDueInDaysResolver<TParent>;
    id?: PaymentTermsToIdResolver<TParent>;
    order?: PaymentTermsToOrderResolver<TParent>;
    overdue?: PaymentTermsToOverdueResolver<TParent>;
    paymentSchedules?: PaymentTermsToPaymentSchedulesResolver<TParent>;
    paymentTermsName?: PaymentTermsToPaymentTermsNameResolver<TParent>;
    paymentTermsType?: PaymentTermsToPaymentTermsTypeResolver<TParent>;
    translatedName?: PaymentTermsToTranslatedNameResolver<TParent>;
  }
  
  export interface PaymentTermsToDraftOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsToDueInDaysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsToOverdueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsToPaymentSchedulesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PaymentTermsToPaymentSchedulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PaymentTermsToPaymentSchedulesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsToPaymentTermsNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsToPaymentTermsTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsToTranslatedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentScheduleConnectionTypeResolver<TParent = any> {
    edges?: PaymentScheduleConnectionToEdgesResolver<TParent>;
    nodes?: PaymentScheduleConnectionToNodesResolver<TParent>;
    pageInfo?: PaymentScheduleConnectionToPageInfoResolver<TParent>;
  }
  
  export interface PaymentScheduleConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentScheduleConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentScheduleConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentScheduleEdgeTypeResolver<TParent = any> {
    cursor?: PaymentScheduleEdgeToCursorResolver<TParent>;
    node?: PaymentScheduleEdgeToNodeResolver<TParent>;
  }
  
  export interface PaymentScheduleEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentScheduleEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentScheduleTypeResolver<TParent = any> {
    amount?: PaymentScheduleToAmountResolver<TParent>;
    completedAt?: PaymentScheduleToCompletedAtResolver<TParent>;
    dueAt?: PaymentScheduleToDueAtResolver<TParent>;
    id?: PaymentScheduleToIdResolver<TParent>;
    issuedAt?: PaymentScheduleToIssuedAtResolver<TParent>;
    paymentTerms?: PaymentScheduleToPaymentTermsResolver<TParent>;
  }
  
  export interface PaymentScheduleToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentScheduleToCompletedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentScheduleToDueAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentScheduleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentScheduleToIssuedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentScheduleToPaymentTermsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PurchasingEntityTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Customer' | 'PurchasingCompany';
  }
  export interface PurchasingCompanyTypeResolver<TParent = any> {
    company?: PurchasingCompanyToCompanyResolver<TParent>;
    contact?: PurchasingCompanyToContactResolver<TParent>;
    location?: PurchasingCompanyToLocationResolver<TParent>;
  }
  
  export interface PurchasingCompanyToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PurchasingCompanyToContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PurchasingCompanyToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationTypeResolver<TParent = any> {
    billingAddress?: CompanyLocationToBillingAddressResolver<TParent>;
    buyerExperienceConfiguration?: CompanyLocationToBuyerExperienceConfigurationResolver<TParent>;
    catalogs?: CompanyLocationToCatalogsResolver<TParent>;
    company?: CompanyLocationToCompanyResolver<TParent>;
    createdAt?: CompanyLocationToCreatedAtResolver<TParent>;
    currency?: CompanyLocationToCurrencyResolver<TParent>;
    defaultCursor?: CompanyLocationToDefaultCursorResolver<TParent>;
    draftOrders?: CompanyLocationToDraftOrdersResolver<TParent>;
    events?: CompanyLocationToEventsResolver<TParent>;
    externalId?: CompanyLocationToExternalIdResolver<TParent>;
    hasTimelineComment?: CompanyLocationToHasTimelineCommentResolver<TParent>;
    id?: CompanyLocationToIdResolver<TParent>;
    inCatalog?: CompanyLocationToInCatalogResolver<TParent>;
    locale?: CompanyLocationToLocaleResolver<TParent>;
    market?: CompanyLocationToMarketResolver<TParent>;
    metafield?: CompanyLocationToMetafieldResolver<TParent>;
    metafieldDefinitions?: CompanyLocationToMetafieldDefinitionsResolver<TParent>;
    metafields?: CompanyLocationToMetafieldsResolver<TParent>;
    name?: CompanyLocationToNameResolver<TParent>;
    note?: CompanyLocationToNoteResolver<TParent>;
    orderCount?: CompanyLocationToOrderCountResolver<TParent>;
    orders?: CompanyLocationToOrdersResolver<TParent>;
    phone?: CompanyLocationToPhoneResolver<TParent>;
    privateMetafield?: CompanyLocationToPrivateMetafieldResolver<TParent>;
    privateMetafields?: CompanyLocationToPrivateMetafieldsResolver<TParent>;
    roleAssignments?: CompanyLocationToRoleAssignmentsResolver<TParent>;
    shippingAddress?: CompanyLocationToShippingAddressResolver<TParent>;
    taxExemptions?: CompanyLocationToTaxExemptionsResolver<TParent>;
    taxRegistrationId?: CompanyLocationToTaxRegistrationIdResolver<TParent>;
    totalSpent?: CompanyLocationToTotalSpentResolver<TParent>;
    updatedAt?: CompanyLocationToUpdatedAtResolver<TParent>;
  }
  
  export interface CompanyLocationToBillingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToBuyerExperienceConfigurationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToCatalogsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CompanyLocationToCatalogsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationToCatalogsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToDefaultCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToDraftOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DraftOrderSortKeys;
    query?: string;
  }
  export interface CompanyLocationToDraftOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationToDraftOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: EventSortKeys;
    query?: string;
  }
  export interface CompanyLocationToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToExternalIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToHasTimelineCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToInCatalogArgs {
    catalogId: string;
  }
  export interface CompanyLocationToInCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationToInCatalogArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface CompanyLocationToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface CompanyLocationToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CompanyLocationToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToOrderCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: OrderSortKeys;
  }
  export interface CompanyLocationToOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface CompanyLocationToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CompanyLocationToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToRoleAssignmentsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CompanyContactRoleAssignmentSortKeys;
    query?: string;
  }
  export interface CompanyLocationToRoleAssignmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationToRoleAssignmentsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToShippingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToTaxExemptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToTaxRegistrationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToTotalSpentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressTypeResolver<TParent = any> {
    address1?: CompanyAddressToAddress1Resolver<TParent>;
    address2?: CompanyAddressToAddress2Resolver<TParent>;
    city?: CompanyAddressToCityResolver<TParent>;
    companyName?: CompanyAddressToCompanyNameResolver<TParent>;
    country?: CompanyAddressToCountryResolver<TParent>;
    countryCode?: CompanyAddressToCountryCodeResolver<TParent>;
    createdAt?: CompanyAddressToCreatedAtResolver<TParent>;
    firstName?: CompanyAddressToFirstNameResolver<TParent>;
    formattedAddress?: CompanyAddressToFormattedAddressResolver<TParent>;
    formattedArea?: CompanyAddressToFormattedAreaResolver<TParent>;
    id?: CompanyAddressToIdResolver<TParent>;
    lastName?: CompanyAddressToLastNameResolver<TParent>;
    phone?: CompanyAddressToPhoneResolver<TParent>;
    province?: CompanyAddressToProvinceResolver<TParent>;
    recipient?: CompanyAddressToRecipientResolver<TParent>;
    updatedAt?: CompanyAddressToUpdatedAtResolver<TParent>;
    zip?: CompanyAddressToZipResolver<TParent>;
    zoneCode?: CompanyAddressToZoneCodeResolver<TParent>;
  }
  
  export interface CompanyAddressToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToCompanyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToFormattedAddressArgs {
    withName?: boolean;
    withCompanyName?: boolean;
  }
  export interface CompanyAddressToFormattedAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyAddressToFormattedAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToFormattedAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToRecipientResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressToZoneCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BuyerExperienceConfigurationTypeResolver<TParent = any> {
    checkoutToDraft?: BuyerExperienceConfigurationToCheckoutToDraftResolver<TParent>;
    editableShippingAddress?: BuyerExperienceConfigurationToEditableShippingAddressResolver<TParent>;
    payNowOnly?: BuyerExperienceConfigurationToPayNowOnlyResolver<TParent>;
    paymentTermsTemplate?: BuyerExperienceConfigurationToPaymentTermsTemplateResolver<TParent>;
  }
  
  export interface BuyerExperienceConfigurationToCheckoutToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BuyerExperienceConfigurationToEditableShippingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BuyerExperienceConfigurationToPayNowOnlyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BuyerExperienceConfigurationToPaymentTermsTemplateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsTemplateTypeResolver<TParent = any> {
    description?: PaymentTermsTemplateToDescriptionResolver<TParent>;
    dueInDays?: PaymentTermsTemplateToDueInDaysResolver<TParent>;
    id?: PaymentTermsTemplateToIdResolver<TParent>;
    name?: PaymentTermsTemplateToNameResolver<TParent>;
    paymentTermsType?: PaymentTermsTemplateToPaymentTermsTypeResolver<TParent>;
    translatedName?: PaymentTermsTemplateToTranslatedNameResolver<TParent>;
  }
  
  export interface PaymentTermsTemplateToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsTemplateToDueInDaysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsTemplateToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsTemplateToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsTemplateToPaymentTermsTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsTemplateToTranslatedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogConnectionTypeResolver<TParent = any> {
    edges?: CatalogConnectionToEdgesResolver<TParent>;
    nodes?: CatalogConnectionToNodesResolver<TParent>;
    pageInfo?: CatalogConnectionToPageInfoResolver<TParent>;
    totalCount?: CatalogConnectionToTotalCountResolver<TParent>;
  }
  
  export interface CatalogConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogEdgeTypeResolver<TParent = any> {
    cursor?: CatalogEdgeToCursorResolver<TParent>;
    node?: CatalogEdgeToNodeResolver<TParent>;
  }
  
  export interface CatalogEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentConnectionTypeResolver<TParent = any> {
    edges?: CompanyContactRoleAssignmentConnectionToEdgesResolver<TParent>;
    nodes?: CompanyContactRoleAssignmentConnectionToNodesResolver<TParent>;
    pageInfo?: CompanyContactRoleAssignmentConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CompanyContactRoleAssignmentConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentEdgeTypeResolver<TParent = any> {
    cursor?: CompanyContactRoleAssignmentEdgeToCursorResolver<TParent>;
    node?: CompanyContactRoleAssignmentEdgeToNodeResolver<TParent>;
  }
  
  export interface CompanyContactRoleAssignmentEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentTypeResolver<TParent = any> {
    company?: CompanyContactRoleAssignmentToCompanyResolver<TParent>;
    companyContact?: CompanyContactRoleAssignmentToCompanyContactResolver<TParent>;
    companyLocation?: CompanyContactRoleAssignmentToCompanyLocationResolver<TParent>;
    createdAt?: CompanyContactRoleAssignmentToCreatedAtResolver<TParent>;
    id?: CompanyContactRoleAssignmentToIdResolver<TParent>;
    role?: CompanyContactRoleAssignmentToRoleResolver<TParent>;
    updatedAt?: CompanyContactRoleAssignmentToUpdatedAtResolver<TParent>;
  }
  
  export interface CompanyContactRoleAssignmentToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentToCompanyContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentToCompanyLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentToRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRoleAssignmentToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnConnectionTypeResolver<TParent = any> {
    edges?: ReturnConnectionToEdgesResolver<TParent>;
    nodes?: ReturnConnectionToNodesResolver<TParent>;
    pageInfo?: ReturnConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ReturnConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnEdgeTypeResolver<TParent = any> {
    cursor?: ReturnEdgeToCursorResolver<TParent>;
    node?: ReturnEdgeToNodeResolver<TParent>;
  }
  
  export interface ReturnEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderRiskTypeResolver<TParent = any> {
    display?: OrderRiskToDisplayResolver<TParent>;
    level?: OrderRiskToLevelResolver<TParent>;
    message?: OrderRiskToMessageResolver<TParent>;
  }
  
  export interface OrderRiskToDisplayResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderRiskToLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderRiskToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineTypeResolver<TParent = any> {
    carrierIdentifier?: ShippingLineToCarrierIdentifierResolver<TParent>;
    code?: ShippingLineToCodeResolver<TParent>;
    custom?: ShippingLineToCustomResolver<TParent>;
    deliveryCategory?: ShippingLineToDeliveryCategoryResolver<TParent>;
    discountAllocations?: ShippingLineToDiscountAllocationsResolver<TParent>;
    discountedPrice?: ShippingLineToDiscountedPriceResolver<TParent>;
    discountedPriceSet?: ShippingLineToDiscountedPriceSetResolver<TParent>;
    id?: ShippingLineToIdResolver<TParent>;
    originalPrice?: ShippingLineToOriginalPriceResolver<TParent>;
    originalPriceSet?: ShippingLineToOriginalPriceSetResolver<TParent>;
    phone?: ShippingLineToPhoneResolver<TParent>;
    price?: ShippingLineToPriceResolver<TParent>;
    requestedFulfillmentService?: ShippingLineToRequestedFulfillmentServiceResolver<TParent>;
    shippingRateHandle?: ShippingLineToShippingRateHandleResolver<TParent>;
    source?: ShippingLineToSourceResolver<TParent>;
    taxLines?: ShippingLineToTaxLinesResolver<TParent>;
    title?: ShippingLineToTitleResolver<TParent>;
  }
  
  export interface ShippingLineToCarrierIdentifierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToCustomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToDeliveryCategoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToDiscountAllocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToDiscountedPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToDiscountedPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToOriginalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToOriginalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToRequestedFulfillmentServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToShippingRateHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineConnectionTypeResolver<TParent = any> {
    edges?: ShippingLineConnectionToEdgesResolver<TParent>;
    nodes?: ShippingLineConnectionToNodesResolver<TParent>;
    pageInfo?: ShippingLineConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ShippingLineConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineEdgeTypeResolver<TParent = any> {
    cursor?: ShippingLineEdgeToCursorResolver<TParent>;
    node?: ShippingLineEdgeToNodeResolver<TParent>;
  }
  
  export interface ShippingLineEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyProtectOrderSummaryTypeResolver<TParent = any> {
    eligibility?: ShopifyProtectOrderSummaryToEligibilityResolver<TParent>;
    status?: ShopifyProtectOrderSummaryToStatusResolver<TParent>;
  }
  
  export interface ShopifyProtectOrderSummaryToEligibilityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyProtectOrderSummaryToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyProtectOrderEligibilityTypeResolver<TParent = any> {
    status?: ShopifyProtectOrderEligibilityToStatusResolver<TParent>;
  }
  
  export interface ShopifyProtectOrderEligibilityToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundTypeResolver<TParent = any> {
    amount?: SuggestedRefundToAmountResolver<TParent>;
    amountSet?: SuggestedRefundToAmountSetResolver<TParent>;
    discountedSubtotalSet?: SuggestedRefundToDiscountedSubtotalSetResolver<TParent>;
    maximumRefundable?: SuggestedRefundToMaximumRefundableResolver<TParent>;
    maximumRefundableSet?: SuggestedRefundToMaximumRefundableSetResolver<TParent>;
    refundDuties?: SuggestedRefundToRefundDutiesResolver<TParent>;
    refundLineItems?: SuggestedRefundToRefundLineItemsResolver<TParent>;
    shipping?: SuggestedRefundToShippingResolver<TParent>;
    subtotal?: SuggestedRefundToSubtotalResolver<TParent>;
    subtotalSet?: SuggestedRefundToSubtotalSetResolver<TParent>;
    suggestedTransactions?: SuggestedRefundToSuggestedTransactionsResolver<TParent>;
    totalCartDiscountAmountSet?: SuggestedRefundToTotalCartDiscountAmountSetResolver<TParent>;
    totalDutiesSet?: SuggestedRefundToTotalDutiesSetResolver<TParent>;
    totalTaxSet?: SuggestedRefundToTotalTaxSetResolver<TParent>;
    totalTaxes?: SuggestedRefundToTotalTaxesResolver<TParent>;
  }
  
  export interface SuggestedRefundToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToDiscountedSubtotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToMaximumRefundableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToMaximumRefundableSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToRefundDutiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToRefundLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToSubtotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToSubtotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToSuggestedTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToTotalCartDiscountAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToTotalDutiesSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToTotalTaxSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SuggestedRefundToTotalTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationConnectionTypeResolver<TParent = any> {
    edges?: CompanyLocationConnectionToEdgesResolver<TParent>;
    nodes?: CompanyLocationConnectionToNodesResolver<TParent>;
    pageInfo?: CompanyLocationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CompanyLocationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationEdgeTypeResolver<TParent = any> {
    cursor?: CompanyLocationEdgeToCursorResolver<TParent>;
    node?: CompanyLocationEdgeToNodeResolver<TParent>;
  }
  
  export interface CompanyLocationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailMarketingConsentStateTypeResolver<TParent = any> {
    consentUpdatedAt?: CustomerEmailMarketingConsentStateToConsentUpdatedAtResolver<TParent>;
    marketingOptInLevel?: CustomerEmailMarketingConsentStateToMarketingOptInLevelResolver<TParent>;
    marketingState?: CustomerEmailMarketingConsentStateToMarketingStateResolver<TParent>;
  }
  
  export interface CustomerEmailMarketingConsentStateToConsentUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailMarketingConsentStateToMarketingOptInLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailMarketingConsentStateToMarketingStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeableTypeResolver<TParent = any> {
    errorFields?: CustomerMergeableToErrorFieldsResolver<TParent>;
    isMergeable?: CustomerMergeableToIsMergeableResolver<TParent>;
    mergeInProgress?: CustomerMergeableToMergeInProgressResolver<TParent>;
    reason?: CustomerMergeableToReasonResolver<TParent>;
  }
  
  export interface CustomerMergeableToErrorFieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeableToIsMergeableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeableToMergeInProgressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeableToReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeRequestTypeResolver<TParent = any> {
    customerMergeErrors?: CustomerMergeRequestToCustomerMergeErrorsResolver<TParent>;
    jobId?: CustomerMergeRequestToJobIdResolver<TParent>;
    resultingCustomerId?: CustomerMergeRequestToResultingCustomerIdResolver<TParent>;
    status?: CustomerMergeRequestToStatusResolver<TParent>;
  }
  
  export interface CustomerMergeRequestToCustomerMergeErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeRequestToJobIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeRequestToResultingCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeRequestToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeErrorTypeResolver<TParent = any> {
    errorFields?: CustomerMergeErrorToErrorFieldsResolver<TParent>;
    message?: CustomerMergeErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerMergeErrorToErrorFieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodConnectionTypeResolver<TParent = any> {
    edges?: CustomerPaymentMethodConnectionToEdgesResolver<TParent>;
    nodes?: CustomerPaymentMethodConnectionToNodesResolver<TParent>;
    pageInfo?: CustomerPaymentMethodConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodEdgeTypeResolver<TParent = any> {
    cursor?: CustomerPaymentMethodEdgeToCursorResolver<TParent>;
    node?: CustomerPaymentMethodEdgeToNodeResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSmsMarketingConsentStateTypeResolver<TParent = any> {
    consentCollectedFrom?: CustomerSmsMarketingConsentStateToConsentCollectedFromResolver<TParent>;
    consentUpdatedAt?: CustomerSmsMarketingConsentStateToConsentUpdatedAtResolver<TParent>;
    marketingOptInLevel?: CustomerSmsMarketingConsentStateToMarketingOptInLevelResolver<TParent>;
    marketingState?: CustomerSmsMarketingConsentStateToMarketingStateResolver<TParent>;
  }
  
  export interface CustomerSmsMarketingConsentStateToConsentCollectedFromResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSmsMarketingConsentStateToConsentUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSmsMarketingConsentStateToMarketingOptInLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSmsMarketingConsentStateToMarketingStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerStatisticsTypeResolver<TParent = any> {
    predictedSpendTier?: CustomerStatisticsToPredictedSpendTierResolver<TParent>;
  }
  
  export interface CustomerStatisticsToPredictedSpendTierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationTypeResolver<TParent = any> {
    enabled?: DeliveryCustomizationToEnabledResolver<TParent>;
    errorHistory?: DeliveryCustomizationToErrorHistoryResolver<TParent>;
    functionId?: DeliveryCustomizationToFunctionIdResolver<TParent>;
    id?: DeliveryCustomizationToIdResolver<TParent>;
    metafield?: DeliveryCustomizationToMetafieldResolver<TParent>;
    metafieldDefinitions?: DeliveryCustomizationToMetafieldDefinitionsResolver<TParent>;
    metafields?: DeliveryCustomizationToMetafieldsResolver<TParent>;
    privateMetafield?: DeliveryCustomizationToPrivateMetafieldResolver<TParent>;
    privateMetafields?: DeliveryCustomizationToPrivateMetafieldsResolver<TParent>;
    shopifyFunction?: DeliveryCustomizationToShopifyFunctionResolver<TParent>;
    title?: DeliveryCustomizationToTitleResolver<TParent>;
  }
  
  export interface DeliveryCustomizationToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationToErrorHistoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationToFunctionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface DeliveryCustomizationToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryCustomizationToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface DeliveryCustomizationToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryCustomizationToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DeliveryCustomizationToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryCustomizationToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface DeliveryCustomizationToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryCustomizationToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DeliveryCustomizationToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DeliveryCustomizationToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationToShopifyFunctionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FunctionsErrorHistoryTypeResolver<TParent = any> {
    errorsFirstOccurredAt?: FunctionsErrorHistoryToErrorsFirstOccurredAtResolver<TParent>;
    firstOccurredAt?: FunctionsErrorHistoryToFirstOccurredAtResolver<TParent>;
    hasBeenSharedSinceLastError?: FunctionsErrorHistoryToHasBeenSharedSinceLastErrorResolver<TParent>;
    hasSharedRecentErrors?: FunctionsErrorHistoryToHasSharedRecentErrorsResolver<TParent>;
  }
  
  export interface FunctionsErrorHistoryToErrorsFirstOccurredAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FunctionsErrorHistoryToFirstOccurredAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FunctionsErrorHistoryToHasBeenSharedSinceLastErrorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FunctionsErrorHistoryToHasSharedRecentErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionTypeResolver<TParent = any> {
    apiType?: ShopifyFunctionToApiTypeResolver<TParent>;
    apiVersion?: ShopifyFunctionToApiVersionResolver<TParent>;
    app?: ShopifyFunctionToAppResolver<TParent>;
    appBridge?: ShopifyFunctionToAppBridgeResolver<TParent>;
    appKey?: ShopifyFunctionToAppKeyResolver<TParent>;
    description?: ShopifyFunctionToDescriptionResolver<TParent>;
    id?: ShopifyFunctionToIdResolver<TParent>;
    inputQuery?: ShopifyFunctionToInputQueryResolver<TParent>;
    title?: ShopifyFunctionToTitleResolver<TParent>;
    useCreationUi?: ShopifyFunctionToUseCreationUiResolver<TParent>;
  }
  
  export interface ShopifyFunctionToApiTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionToApiVersionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionToAppBridgeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionToAppKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionToInputQueryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionToUseCreationUiResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FunctionsAppBridgeTypeResolver<TParent = any> {
    createPath?: FunctionsAppBridgeToCreatePathResolver<TParent>;
    detailsPath?: FunctionsAppBridgeToDetailsPathResolver<TParent>;
  }
  
  export interface FunctionsAppBridgeToCreatePathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FunctionsAppBridgeToDetailsPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeTypeResolver<TParent = any> {
    automaticDiscount?: DiscountAutomaticNodeToAutomaticDiscountResolver<TParent>;
    events?: DiscountAutomaticNodeToEventsResolver<TParent>;
    id?: DiscountAutomaticNodeToIdResolver<TParent>;
    metafield?: DiscountAutomaticNodeToMetafieldResolver<TParent>;
    metafieldDefinitions?: DiscountAutomaticNodeToMetafieldDefinitionsResolver<TParent>;
    metafields?: DiscountAutomaticNodeToMetafieldsResolver<TParent>;
    privateMetafield?: DiscountAutomaticNodeToPrivateMetafieldResolver<TParent>;
    privateMetafields?: DiscountAutomaticNodeToPrivateMetafieldsResolver<TParent>;
  }
  
  export interface DiscountAutomaticNodeToAutomaticDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeToEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: EventSortKeys;
    query?: string;
  }
  export interface DiscountAutomaticNodeToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountAutomaticNodeToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface DiscountAutomaticNodeToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountAutomaticNodeToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface DiscountAutomaticNodeToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountAutomaticNodeToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DiscountAutomaticNodeToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountAutomaticNodeToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface DiscountAutomaticNodeToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountAutomaticNodeToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DiscountAutomaticNodeToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountAutomaticNodeToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'DiscountAutomaticApp' | 'DiscountAutomaticBasic' | 'DiscountAutomaticBxgy' | 'DiscountAutomaticFreeShipping';
  }
  export interface DiscountAutomaticAppTypeResolver<TParent = any> {
    appDiscountType?: DiscountAutomaticAppToAppDiscountTypeResolver<TParent>;
    asyncUsageCount?: DiscountAutomaticAppToAsyncUsageCountResolver<TParent>;
    combinesWith?: DiscountAutomaticAppToCombinesWithResolver<TParent>;
    createdAt?: DiscountAutomaticAppToCreatedAtResolver<TParent>;
    discountClass?: DiscountAutomaticAppToDiscountClassResolver<TParent>;
    discountId?: DiscountAutomaticAppToDiscountIdResolver<TParent>;
    endsAt?: DiscountAutomaticAppToEndsAtResolver<TParent>;
    errorHistory?: DiscountAutomaticAppToErrorHistoryResolver<TParent>;
    startsAt?: DiscountAutomaticAppToStartsAtResolver<TParent>;
    status?: DiscountAutomaticAppToStatusResolver<TParent>;
    title?: DiscountAutomaticAppToTitleResolver<TParent>;
    updatedAt?: DiscountAutomaticAppToUpdatedAtResolver<TParent>;
  }
  
  export interface DiscountAutomaticAppToAppDiscountTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppToAsyncUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppToCombinesWithResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppToDiscountClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppToDiscountIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppToEndsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppToErrorHistoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppToStartsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppDiscountTypeTypeResolver<TParent = any> {
    app?: AppDiscountTypeToAppResolver<TParent>;
    appBridge?: AppDiscountTypeToAppBridgeResolver<TParent>;
    appKey?: AppDiscountTypeToAppKeyResolver<TParent>;
    description?: AppDiscountTypeToDescriptionResolver<TParent>;
    discountClass?: AppDiscountTypeToDiscountClassResolver<TParent>;
    functionId?: AppDiscountTypeToFunctionIdResolver<TParent>;
    targetType?: AppDiscountTypeToTargetTypeResolver<TParent>;
    title?: AppDiscountTypeToTitleResolver<TParent>;
  }
  
  export interface AppDiscountTypeToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppDiscountTypeToAppBridgeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppDiscountTypeToAppKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppDiscountTypeToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppDiscountTypeToDiscountClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppDiscountTypeToFunctionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppDiscountTypeToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppDiscountTypeToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCombinesWithTypeResolver<TParent = any> {
    orderDiscounts?: DiscountCombinesWithToOrderDiscountsResolver<TParent>;
    productDiscounts?: DiscountCombinesWithToProductDiscountsResolver<TParent>;
    shippingDiscounts?: DiscountCombinesWithToShippingDiscountsResolver<TParent>;
  }
  
  export interface DiscountCombinesWithToOrderDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCombinesWithToProductDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCombinesWithToShippingDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicTypeResolver<TParent = any> {
    asyncUsageCount?: DiscountAutomaticBasicToAsyncUsageCountResolver<TParent>;
    combinesWith?: DiscountAutomaticBasicToCombinesWithResolver<TParent>;
    createdAt?: DiscountAutomaticBasicToCreatedAtResolver<TParent>;
    customerGets?: DiscountAutomaticBasicToCustomerGetsResolver<TParent>;
    discountClass?: DiscountAutomaticBasicToDiscountClassResolver<TParent>;
    endsAt?: DiscountAutomaticBasicToEndsAtResolver<TParent>;
    minimumRequirement?: DiscountAutomaticBasicToMinimumRequirementResolver<TParent>;
    recurringCycleLimit?: DiscountAutomaticBasicToRecurringCycleLimitResolver<TParent>;
    shortSummary?: DiscountAutomaticBasicToShortSummaryResolver<TParent>;
    startsAt?: DiscountAutomaticBasicToStartsAtResolver<TParent>;
    status?: DiscountAutomaticBasicToStatusResolver<TParent>;
    summary?: DiscountAutomaticBasicToSummaryResolver<TParent>;
    title?: DiscountAutomaticBasicToTitleResolver<TParent>;
    updatedAt?: DiscountAutomaticBasicToUpdatedAtResolver<TParent>;
    usageCount?: DiscountAutomaticBasicToUsageCountResolver<TParent>;
  }
  
  export interface DiscountAutomaticBasicToAsyncUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToCombinesWithResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToCustomerGetsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToDiscountClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToEndsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToMinimumRequirementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToRecurringCycleLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToShortSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToStartsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicToUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCustomerGetsTypeResolver<TParent = any> {
    appliesOnOneTimePurchase?: DiscountCustomerGetsToAppliesOnOneTimePurchaseResolver<TParent>;
    appliesOnSubscription?: DiscountCustomerGetsToAppliesOnSubscriptionResolver<TParent>;
    items?: DiscountCustomerGetsToItemsResolver<TParent>;
    value?: DiscountCustomerGetsToValueResolver<TParent>;
  }
  
  export interface DiscountCustomerGetsToAppliesOnOneTimePurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCustomerGetsToAppliesOnSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCustomerGetsToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCustomerGetsToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountItemsTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'AllDiscountItems' | 'DiscountCollections' | 'DiscountProducts';
  }
  export interface AllDiscountItemsTypeResolver<TParent = any> {
    allItems?: AllDiscountItemsToAllItemsResolver<TParent>;
  }
  
  export interface AllDiscountItemsToAllItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCollectionsTypeResolver<TParent = any> {
    collections?: DiscountCollectionsToCollectionsResolver<TParent>;
  }
  
  export interface DiscountCollectionsToCollectionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DiscountCollectionsToCollectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountCollectionsToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountProductsTypeResolver<TParent = any> {
    productVariants?: DiscountProductsToProductVariantsResolver<TParent>;
    products?: DiscountProductsToProductsResolver<TParent>;
  }
  
  export interface DiscountProductsToProductVariantsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DiscountProductsToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountProductsToProductVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountProductsToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DiscountProductsToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountProductsToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCustomerGetsValueTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'DiscountAmount' | 'DiscountOnQuantity' | 'DiscountPercentage';
  }
  export interface DiscountAmountTypeResolver<TParent = any> {
    amount?: DiscountAmountToAmountResolver<TParent>;
    appliesOnEachItem?: DiscountAmountToAppliesOnEachItemResolver<TParent>;
  }
  
  export interface DiscountAmountToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAmountToAppliesOnEachItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountOnQuantityTypeResolver<TParent = any> {
    effect?: DiscountOnQuantityToEffectResolver<TParent>;
    quantity?: DiscountOnQuantityToQuantityResolver<TParent>;
  }
  
  export interface DiscountOnQuantityToEffectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountOnQuantityToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountEffectTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'DiscountAmount' | 'DiscountPercentage';
  }
  export interface DiscountPercentageTypeResolver<TParent = any> {
    percentage?: DiscountPercentageToPercentageResolver<TParent>;
  }
  
  export interface DiscountPercentageToPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountQuantityTypeResolver<TParent = any> {
    quantity?: DiscountQuantityToQuantityResolver<TParent>;
  }
  
  export interface DiscountQuantityToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountMinimumRequirementTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'DiscountMinimumQuantity' | 'DiscountMinimumSubtotal';
  }
  export interface DiscountMinimumQuantityTypeResolver<TParent = any> {
    greaterThanOrEqualToQuantity?: DiscountMinimumQuantityToGreaterThanOrEqualToQuantityResolver<TParent>;
  }
  
  export interface DiscountMinimumQuantityToGreaterThanOrEqualToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountMinimumSubtotalTypeResolver<TParent = any> {
    greaterThanOrEqualToSubtotal?: DiscountMinimumSubtotalToGreaterThanOrEqualToSubtotalResolver<TParent>;
  }
  
  export interface DiscountMinimumSubtotalToGreaterThanOrEqualToSubtotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyTypeResolver<TParent = any> {
    asyncUsageCount?: DiscountAutomaticBxgyToAsyncUsageCountResolver<TParent>;
    combinesWith?: DiscountAutomaticBxgyToCombinesWithResolver<TParent>;
    createdAt?: DiscountAutomaticBxgyToCreatedAtResolver<TParent>;
    customerBuys?: DiscountAutomaticBxgyToCustomerBuysResolver<TParent>;
    customerGets?: DiscountAutomaticBxgyToCustomerGetsResolver<TParent>;
    discountClass?: DiscountAutomaticBxgyToDiscountClassResolver<TParent>;
    endsAt?: DiscountAutomaticBxgyToEndsAtResolver<TParent>;
    events?: DiscountAutomaticBxgyToEventsResolver<TParent>;
    id?: DiscountAutomaticBxgyToIdResolver<TParent>;
    startsAt?: DiscountAutomaticBxgyToStartsAtResolver<TParent>;
    status?: DiscountAutomaticBxgyToStatusResolver<TParent>;
    summary?: DiscountAutomaticBxgyToSummaryResolver<TParent>;
    title?: DiscountAutomaticBxgyToTitleResolver<TParent>;
    updatedAt?: DiscountAutomaticBxgyToUpdatedAtResolver<TParent>;
    usageCount?: DiscountAutomaticBxgyToUsageCountResolver<TParent>;
    usesPerOrderLimit?: DiscountAutomaticBxgyToUsesPerOrderLimitResolver<TParent>;
  }
  
  export interface DiscountAutomaticBxgyToAsyncUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToCombinesWithResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToCustomerBuysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToCustomerGetsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToDiscountClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToEndsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: EventSortKeys;
    query?: string;
  }
  export interface DiscountAutomaticBxgyToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountAutomaticBxgyToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToStartsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyToUsesPerOrderLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCustomerBuysTypeResolver<TParent = any> {
    items?: DiscountCustomerBuysToItemsResolver<TParent>;
    value?: DiscountCustomerBuysToValueResolver<TParent>;
  }
  
  export interface DiscountCustomerBuysToItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCustomerBuysToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCustomerBuysValueTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'DiscountPurchaseAmount' | 'DiscountQuantity';
  }
  export interface DiscountPurchaseAmountTypeResolver<TParent = any> {
    amount?: DiscountPurchaseAmountToAmountResolver<TParent>;
  }
  
  export interface DiscountPurchaseAmountToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingTypeResolver<TParent = any> {
    appliesOnOneTimePurchase?: DiscountAutomaticFreeShippingToAppliesOnOneTimePurchaseResolver<TParent>;
    appliesOnSubscription?: DiscountAutomaticFreeShippingToAppliesOnSubscriptionResolver<TParent>;
    asyncUsageCount?: DiscountAutomaticFreeShippingToAsyncUsageCountResolver<TParent>;
    combinesWith?: DiscountAutomaticFreeShippingToCombinesWithResolver<TParent>;
    createdAt?: DiscountAutomaticFreeShippingToCreatedAtResolver<TParent>;
    destinationSelection?: DiscountAutomaticFreeShippingToDestinationSelectionResolver<TParent>;
    discountClass?: DiscountAutomaticFreeShippingToDiscountClassResolver<TParent>;
    endsAt?: DiscountAutomaticFreeShippingToEndsAtResolver<TParent>;
    hasTimelineComment?: DiscountAutomaticFreeShippingToHasTimelineCommentResolver<TParent>;
    maximumShippingPrice?: DiscountAutomaticFreeShippingToMaximumShippingPriceResolver<TParent>;
    minimumRequirement?: DiscountAutomaticFreeShippingToMinimumRequirementResolver<TParent>;
    recurringCycleLimit?: DiscountAutomaticFreeShippingToRecurringCycleLimitResolver<TParent>;
    shortSummary?: DiscountAutomaticFreeShippingToShortSummaryResolver<TParent>;
    startsAt?: DiscountAutomaticFreeShippingToStartsAtResolver<TParent>;
    status?: DiscountAutomaticFreeShippingToStatusResolver<TParent>;
    summary?: DiscountAutomaticFreeShippingToSummaryResolver<TParent>;
    title?: DiscountAutomaticFreeShippingToTitleResolver<TParent>;
    totalSales?: DiscountAutomaticFreeShippingToTotalSalesResolver<TParent>;
    updatedAt?: DiscountAutomaticFreeShippingToUpdatedAtResolver<TParent>;
  }
  
  export interface DiscountAutomaticFreeShippingToAppliesOnOneTimePurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToAppliesOnSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToAsyncUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToCombinesWithResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToDestinationSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToDiscountClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToEndsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToHasTimelineCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToMaximumShippingPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToMinimumRequirementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToRecurringCycleLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToShortSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToStartsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToTotalSalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountShippingDestinationSelectionTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'DiscountCountries' | 'DiscountCountryAll';
  }
  export interface DiscountCountriesTypeResolver<TParent = any> {
    countries?: DiscountCountriesToCountriesResolver<TParent>;
    includeRestOfWorld?: DiscountCountriesToIncludeRestOfWorldResolver<TParent>;
  }
  
  export interface DiscountCountriesToCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCountriesToIncludeRestOfWorldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCountryAllTypeResolver<TParent = any> {
    allCountries?: DiscountCountryAllToAllCountriesResolver<TParent>;
  }
  
  export interface DiscountCountryAllToAllCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeTypeResolver<TParent = any> {
    codeDiscount?: DiscountCodeNodeToCodeDiscountResolver<TParent>;
    events?: DiscountCodeNodeToEventsResolver<TParent>;
    id?: DiscountCodeNodeToIdResolver<TParent>;
    metafield?: DiscountCodeNodeToMetafieldResolver<TParent>;
    metafieldDefinitions?: DiscountCodeNodeToMetafieldDefinitionsResolver<TParent>;
    metafields?: DiscountCodeNodeToMetafieldsResolver<TParent>;
    privateMetafield?: DiscountCodeNodeToPrivateMetafieldResolver<TParent>;
    privateMetafields?: DiscountCodeNodeToPrivateMetafieldsResolver<TParent>;
  }
  
  export interface DiscountCodeNodeToCodeDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeToEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: EventSortKeys;
    query?: string;
  }
  export interface DiscountCodeNodeToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountCodeNodeToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface DiscountCodeNodeToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountCodeNodeToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface DiscountCodeNodeToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountCodeNodeToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DiscountCodeNodeToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountCodeNodeToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface DiscountCodeNodeToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountCodeNodeToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DiscountCodeNodeToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountCodeNodeToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'DiscountCodeApp' | 'DiscountCodeBasic' | 'DiscountCodeBxgy' | 'DiscountCodeFreeShipping';
  }
  export interface DiscountCodeAppTypeResolver<TParent = any> {
    appDiscountType?: DiscountCodeAppToAppDiscountTypeResolver<TParent>;
    appliesOncePerCustomer?: DiscountCodeAppToAppliesOncePerCustomerResolver<TParent>;
    asyncUsageCount?: DiscountCodeAppToAsyncUsageCountResolver<TParent>;
    codeCount?: DiscountCodeAppToCodeCountResolver<TParent>;
    codes?: DiscountCodeAppToCodesResolver<TParent>;
    combinesWith?: DiscountCodeAppToCombinesWithResolver<TParent>;
    createdAt?: DiscountCodeAppToCreatedAtResolver<TParent>;
    customerSelection?: DiscountCodeAppToCustomerSelectionResolver<TParent>;
    discountClass?: DiscountCodeAppToDiscountClassResolver<TParent>;
    discountId?: DiscountCodeAppToDiscountIdResolver<TParent>;
    endsAt?: DiscountCodeAppToEndsAtResolver<TParent>;
    errorHistory?: DiscountCodeAppToErrorHistoryResolver<TParent>;
    hasTimelineComment?: DiscountCodeAppToHasTimelineCommentResolver<TParent>;
    recurringCycleLimit?: DiscountCodeAppToRecurringCycleLimitResolver<TParent>;
    shareableUrls?: DiscountCodeAppToShareableUrlsResolver<TParent>;
    startsAt?: DiscountCodeAppToStartsAtResolver<TParent>;
    status?: DiscountCodeAppToStatusResolver<TParent>;
    title?: DiscountCodeAppToTitleResolver<TParent>;
    totalSales?: DiscountCodeAppToTotalSalesResolver<TParent>;
    updatedAt?: DiscountCodeAppToUpdatedAtResolver<TParent>;
    usageLimit?: DiscountCodeAppToUsageLimitResolver<TParent>;
  }
  
  export interface DiscountCodeAppToAppDiscountTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToAppliesOncePerCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToAsyncUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToCodeCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToCodesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DiscountCodeSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface DiscountCodeAppToCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountCodeAppToCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToCombinesWithResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToCustomerSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToDiscountClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToDiscountIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToEndsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToErrorHistoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToHasTimelineCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToRecurringCycleLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToShareableUrlsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToStartsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToTotalSalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppToUsageLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeConnectionTypeResolver<TParent = any> {
    edges?: DiscountRedeemCodeConnectionToEdgesResolver<TParent>;
    nodes?: DiscountRedeemCodeConnectionToNodesResolver<TParent>;
    pageInfo?: DiscountRedeemCodeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DiscountRedeemCodeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeEdgeTypeResolver<TParent = any> {
    cursor?: DiscountRedeemCodeEdgeToCursorResolver<TParent>;
    node?: DiscountRedeemCodeEdgeToNodeResolver<TParent>;
  }
  
  export interface DiscountRedeemCodeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeTypeResolver<TParent = any> {
    asyncUsageCount?: DiscountRedeemCodeToAsyncUsageCountResolver<TParent>;
    code?: DiscountRedeemCodeToCodeResolver<TParent>;
    createdBy?: DiscountRedeemCodeToCreatedByResolver<TParent>;
    id?: DiscountRedeemCodeToIdResolver<TParent>;
  }
  
  export interface DiscountRedeemCodeToAsyncUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeToCreatedByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCustomerSelectionTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'DiscountCustomerAll' | 'DiscountCustomerSegments' | 'DiscountCustomers';
  }
  export interface DiscountCustomerAllTypeResolver<TParent = any> {
    allCustomers?: DiscountCustomerAllToAllCustomersResolver<TParent>;
  }
  
  export interface DiscountCustomerAllToAllCustomersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCustomerSegmentsTypeResolver<TParent = any> {
    segments?: DiscountCustomerSegmentsToSegmentsResolver<TParent>;
  }
  
  export interface DiscountCustomerSegmentsToSegmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentTypeResolver<TParent = any> {
    creationDate?: SegmentToCreationDateResolver<TParent>;
    id?: SegmentToIdResolver<TParent>;
    lastEditDate?: SegmentToLastEditDateResolver<TParent>;
    name?: SegmentToNameResolver<TParent>;
    query?: SegmentToQueryResolver<TParent>;
  }
  
  export interface SegmentToCreationDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentToLastEditDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentToQueryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCustomersTypeResolver<TParent = any> {
    customers?: DiscountCustomersToCustomersResolver<TParent>;
  }
  
  export interface DiscountCustomersToCustomersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountShareableUrlTypeResolver<TParent = any> {
    targetItemImage?: DiscountShareableUrlToTargetItemImageResolver<TParent>;
    targetType?: DiscountShareableUrlToTargetTypeResolver<TParent>;
    title?: DiscountShareableUrlToTitleResolver<TParent>;
    url?: DiscountShareableUrlToUrlResolver<TParent>;
  }
  
  export interface DiscountShareableUrlToTargetItemImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountShareableUrlToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountShareableUrlToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountShareableUrlToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicTypeResolver<TParent = any> {
    appliesOncePerCustomer?: DiscountCodeBasicToAppliesOncePerCustomerResolver<TParent>;
    asyncUsageCount?: DiscountCodeBasicToAsyncUsageCountResolver<TParent>;
    codeCount?: DiscountCodeBasicToCodeCountResolver<TParent>;
    codes?: DiscountCodeBasicToCodesResolver<TParent>;
    combinesWith?: DiscountCodeBasicToCombinesWithResolver<TParent>;
    createdAt?: DiscountCodeBasicToCreatedAtResolver<TParent>;
    customerGets?: DiscountCodeBasicToCustomerGetsResolver<TParent>;
    customerSelection?: DiscountCodeBasicToCustomerSelectionResolver<TParent>;
    discountClass?: DiscountCodeBasicToDiscountClassResolver<TParent>;
    endsAt?: DiscountCodeBasicToEndsAtResolver<TParent>;
    hasTimelineComment?: DiscountCodeBasicToHasTimelineCommentResolver<TParent>;
    minimumRequirement?: DiscountCodeBasicToMinimumRequirementResolver<TParent>;
    recurringCycleLimit?: DiscountCodeBasicToRecurringCycleLimitResolver<TParent>;
    shareableUrls?: DiscountCodeBasicToShareableUrlsResolver<TParent>;
    shortSummary?: DiscountCodeBasicToShortSummaryResolver<TParent>;
    startsAt?: DiscountCodeBasicToStartsAtResolver<TParent>;
    status?: DiscountCodeBasicToStatusResolver<TParent>;
    summary?: DiscountCodeBasicToSummaryResolver<TParent>;
    title?: DiscountCodeBasicToTitleResolver<TParent>;
    totalSales?: DiscountCodeBasicToTotalSalesResolver<TParent>;
    updatedAt?: DiscountCodeBasicToUpdatedAtResolver<TParent>;
    usageLimit?: DiscountCodeBasicToUsageLimitResolver<TParent>;
  }
  
  export interface DiscountCodeBasicToAppliesOncePerCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToAsyncUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToCodeCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToCodesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DiscountCodeSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface DiscountCodeBasicToCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountCodeBasicToCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToCombinesWithResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToCustomerGetsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToCustomerSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToDiscountClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToEndsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToHasTimelineCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToMinimumRequirementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToRecurringCycleLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToShareableUrlsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToShortSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToStartsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToTotalSalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicToUsageLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyTypeResolver<TParent = any> {
    appliesOncePerCustomer?: DiscountCodeBxgyToAppliesOncePerCustomerResolver<TParent>;
    asyncUsageCount?: DiscountCodeBxgyToAsyncUsageCountResolver<TParent>;
    codeCount?: DiscountCodeBxgyToCodeCountResolver<TParent>;
    codes?: DiscountCodeBxgyToCodesResolver<TParent>;
    combinesWith?: DiscountCodeBxgyToCombinesWithResolver<TParent>;
    createdAt?: DiscountCodeBxgyToCreatedAtResolver<TParent>;
    customerBuys?: DiscountCodeBxgyToCustomerBuysResolver<TParent>;
    customerGets?: DiscountCodeBxgyToCustomerGetsResolver<TParent>;
    customerSelection?: DiscountCodeBxgyToCustomerSelectionResolver<TParent>;
    discountClass?: DiscountCodeBxgyToDiscountClassResolver<TParent>;
    endsAt?: DiscountCodeBxgyToEndsAtResolver<TParent>;
    hasTimelineComment?: DiscountCodeBxgyToHasTimelineCommentResolver<TParent>;
    shareableUrls?: DiscountCodeBxgyToShareableUrlsResolver<TParent>;
    startsAt?: DiscountCodeBxgyToStartsAtResolver<TParent>;
    status?: DiscountCodeBxgyToStatusResolver<TParent>;
    summary?: DiscountCodeBxgyToSummaryResolver<TParent>;
    title?: DiscountCodeBxgyToTitleResolver<TParent>;
    totalSales?: DiscountCodeBxgyToTotalSalesResolver<TParent>;
    updatedAt?: DiscountCodeBxgyToUpdatedAtResolver<TParent>;
    usageLimit?: DiscountCodeBxgyToUsageLimitResolver<TParent>;
    usesPerOrderLimit?: DiscountCodeBxgyToUsesPerOrderLimitResolver<TParent>;
  }
  
  export interface DiscountCodeBxgyToAppliesOncePerCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToAsyncUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToCodeCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToCodesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DiscountCodeSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface DiscountCodeBxgyToCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountCodeBxgyToCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToCombinesWithResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToCustomerBuysResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToCustomerGetsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToCustomerSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToDiscountClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToEndsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToHasTimelineCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToShareableUrlsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToStartsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToTotalSalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToUsageLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyToUsesPerOrderLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingTypeResolver<TParent = any> {
    appliesOnOneTimePurchase?: DiscountCodeFreeShippingToAppliesOnOneTimePurchaseResolver<TParent>;
    appliesOnSubscription?: DiscountCodeFreeShippingToAppliesOnSubscriptionResolver<TParent>;
    appliesOncePerCustomer?: DiscountCodeFreeShippingToAppliesOncePerCustomerResolver<TParent>;
    asyncUsageCount?: DiscountCodeFreeShippingToAsyncUsageCountResolver<TParent>;
    codeCount?: DiscountCodeFreeShippingToCodeCountResolver<TParent>;
    codes?: DiscountCodeFreeShippingToCodesResolver<TParent>;
    combinesWith?: DiscountCodeFreeShippingToCombinesWithResolver<TParent>;
    createdAt?: DiscountCodeFreeShippingToCreatedAtResolver<TParent>;
    customerSelection?: DiscountCodeFreeShippingToCustomerSelectionResolver<TParent>;
    destinationSelection?: DiscountCodeFreeShippingToDestinationSelectionResolver<TParent>;
    discountClass?: DiscountCodeFreeShippingToDiscountClassResolver<TParent>;
    endsAt?: DiscountCodeFreeShippingToEndsAtResolver<TParent>;
    hasTimelineComment?: DiscountCodeFreeShippingToHasTimelineCommentResolver<TParent>;
    maximumShippingPrice?: DiscountCodeFreeShippingToMaximumShippingPriceResolver<TParent>;
    minimumRequirement?: DiscountCodeFreeShippingToMinimumRequirementResolver<TParent>;
    recurringCycleLimit?: DiscountCodeFreeShippingToRecurringCycleLimitResolver<TParent>;
    shareableUrls?: DiscountCodeFreeShippingToShareableUrlsResolver<TParent>;
    shortSummary?: DiscountCodeFreeShippingToShortSummaryResolver<TParent>;
    startsAt?: DiscountCodeFreeShippingToStartsAtResolver<TParent>;
    status?: DiscountCodeFreeShippingToStatusResolver<TParent>;
    summary?: DiscountCodeFreeShippingToSummaryResolver<TParent>;
    title?: DiscountCodeFreeShippingToTitleResolver<TParent>;
    totalSales?: DiscountCodeFreeShippingToTotalSalesResolver<TParent>;
    updatedAt?: DiscountCodeFreeShippingToUpdatedAtResolver<TParent>;
    usageLimit?: DiscountCodeFreeShippingToUsageLimitResolver<TParent>;
  }
  
  export interface DiscountCodeFreeShippingToAppliesOnOneTimePurchaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToAppliesOnSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToAppliesOncePerCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToAsyncUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToCodeCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToCodesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DiscountCodeSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface DiscountCodeFreeShippingToCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountCodeFreeShippingToCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToCombinesWithResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToCustomerSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToDestinationSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToDiscountClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToEndsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToHasTimelineCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToMaximumShippingPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToMinimumRequirementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToRecurringCycleLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToShareableUrlsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToShortSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToStartsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToTotalSalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingToUsageLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeTypeResolver<TParent = any> {
    discount?: DiscountNodeToDiscountResolver<TParent>;
    events?: DiscountNodeToEventsResolver<TParent>;
    id?: DiscountNodeToIdResolver<TParent>;
    metafield?: DiscountNodeToMetafieldResolver<TParent>;
    metafieldDefinitions?: DiscountNodeToMetafieldDefinitionsResolver<TParent>;
    metafields?: DiscountNodeToMetafieldsResolver<TParent>;
    privateMetafield?: DiscountNodeToPrivateMetafieldResolver<TParent>;
    privateMetafields?: DiscountNodeToPrivateMetafieldsResolver<TParent>;
  }
  
  export interface DiscountNodeToDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeToEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: EventSortKeys;
    query?: string;
  }
  export interface DiscountNodeToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountNodeToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface DiscountNodeToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountNodeToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface DiscountNodeToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountNodeToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DiscountNodeToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountNodeToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface DiscountNodeToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountNodeToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DiscountNodeToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountNodeToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'DiscountAutomaticApp' | 'DiscountAutomaticBasic' | 'DiscountAutomaticBxgy' | 'DiscountAutomaticFreeShipping' | 'DiscountCodeApp' | 'DiscountCodeBasic' | 'DiscountCodeBxgy' | 'DiscountCodeFreeShipping';
  }
  export interface OnlineStoreArticleTypeResolver<TParent = any> {
    defaultCursor?: OnlineStoreArticleToDefaultCursorResolver<TParent>;
    id?: OnlineStoreArticleToIdResolver<TParent>;
    translations?: OnlineStoreArticleToTranslationsResolver<TParent>;
  }
  
  export interface OnlineStoreArticleToDefaultCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OnlineStoreArticleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OnlineStoreArticleToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface OnlineStoreArticleToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OnlineStoreArticleToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OnlineStoreBlogTypeResolver<TParent = any> {
    id?: OnlineStoreBlogToIdResolver<TParent>;
    translations?: OnlineStoreBlogToTranslationsResolver<TParent>;
  }
  
  export interface OnlineStoreBlogToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OnlineStoreBlogToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface OnlineStoreBlogToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OnlineStoreBlogToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OnlineStorePageTypeResolver<TParent = any> {
    defaultCursor?: OnlineStorePageToDefaultCursorResolver<TParent>;
    id?: OnlineStorePageToIdResolver<TParent>;
    translations?: OnlineStorePageToTranslationsResolver<TParent>;
  }
  
  export interface OnlineStorePageToDefaultCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OnlineStorePageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OnlineStorePageToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface OnlineStorePageToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OnlineStorePageToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationTypeResolver<TParent = any> {
    enabled?: PaymentCustomizationToEnabledResolver<TParent>;
    errorHistory?: PaymentCustomizationToErrorHistoryResolver<TParent>;
    functionId?: PaymentCustomizationToFunctionIdResolver<TParent>;
    id?: PaymentCustomizationToIdResolver<TParent>;
    metafield?: PaymentCustomizationToMetafieldResolver<TParent>;
    metafieldDefinitions?: PaymentCustomizationToMetafieldDefinitionsResolver<TParent>;
    metafields?: PaymentCustomizationToMetafieldsResolver<TParent>;
    privateMetafield?: PaymentCustomizationToPrivateMetafieldResolver<TParent>;
    privateMetafields?: PaymentCustomizationToPrivateMetafieldsResolver<TParent>;
    shopifyFunction?: PaymentCustomizationToShopifyFunctionResolver<TParent>;
    title?: PaymentCustomizationToTitleResolver<TParent>;
  }
  
  export interface PaymentCustomizationToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationToErrorHistoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationToFunctionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface PaymentCustomizationToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PaymentCustomizationToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface PaymentCustomizationToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PaymentCustomizationToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PaymentCustomizationToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PaymentCustomizationToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface PaymentCustomizationToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PaymentCustomizationToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PaymentCustomizationToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PaymentCustomizationToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationToShopifyFunctionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopTypeResolver<TParent = any> {
    alerts?: ShopToAlertsResolver<TParent>;
    allProductCategories?: ShopToAllProductCategoriesResolver<TParent>;
    analyticsToken?: ShopToAnalyticsTokenResolver<TParent>;
    assignedFulfillmentOrders?: ShopToAssignedFulfillmentOrdersResolver<TParent>;
    availableChannelApps?: ShopToAvailableChannelAppsResolver<TParent>;
    billingAddress?: ShopToBillingAddressResolver<TParent>;
    channelCount?: ShopToChannelCountResolver<TParent>;
    channelDefinitionsForInstalledChannels?: ShopToChannelDefinitionsForInstalledChannelsResolver<TParent>;
    channels?: ShopToChannelsResolver<TParent>;
    checkoutApiSupported?: ShopToCheckoutApiSupportedResolver<TParent>;
    collectionByHandle?: ShopToCollectionByHandleResolver<TParent>;
    collectionSavedSearches?: ShopToCollectionSavedSearchesResolver<TParent>;
    collections?: ShopToCollectionsResolver<TParent>;
    contactEmail?: ShopToContactEmailResolver<TParent>;
    countriesInShippingZones?: ShopToCountriesInShippingZonesResolver<TParent>;
    currencyCode?: ShopToCurrencyCodeResolver<TParent>;
    currencyFormats?: ShopToCurrencyFormatsResolver<TParent>;
    currencySettings?: ShopToCurrencySettingsResolver<TParent>;
    customerAccounts?: ShopToCustomerAccountsResolver<TParent>;
    customerAccountsV2?: ShopToCustomerAccountsV2Resolver<TParent>;
    customerSavedSearches?: ShopToCustomerSavedSearchesResolver<TParent>;
    customerTags?: ShopToCustomerTagsResolver<TParent>;
    customers?: ShopToCustomersResolver<TParent>;
    description?: ShopToDescriptionResolver<TParent>;
    domains?: ShopToDomainsResolver<TParent>;
    draftOrderSavedSearches?: ShopToDraftOrderSavedSearchesResolver<TParent>;
    draftOrderTags?: ShopToDraftOrderTagsResolver<TParent>;
    draftOrders?: ShopToDraftOrdersResolver<TParent>;
    email?: ShopToEmailResolver<TParent>;
    enabledPresentmentCurrencies?: ShopToEnabledPresentmentCurrenciesResolver<TParent>;
    features?: ShopToFeaturesResolver<TParent>;
    fulfillmentOrders?: ShopToFulfillmentOrdersResolver<TParent>;
    fulfillmentServices?: ShopToFulfillmentServicesResolver<TParent>;
    ianaTimezone?: ShopToIanaTimezoneResolver<TParent>;
    id?: ShopToIdResolver<TParent>;
    inventoryItems?: ShopToInventoryItemsResolver<TParent>;
    limitedPendingOrderCount?: ShopToLimitedPendingOrderCountResolver<TParent>;
    locations?: ShopToLocationsResolver<TParent>;
    marketingEvents?: ShopToMarketingEventsResolver<TParent>;
    merchantApprovalSignals?: ShopToMerchantApprovalSignalsResolver<TParent>;
    metafield?: ShopToMetafieldResolver<TParent>;
    metafields?: ShopToMetafieldsResolver<TParent>;
    myshopifyDomain?: ShopToMyshopifyDomainResolver<TParent>;
    name?: ShopToNameResolver<TParent>;
    navigationSettings?: ShopToNavigationSettingsResolver<TParent>;
    orderNumberFormatPrefix?: ShopToOrderNumberFormatPrefixResolver<TParent>;
    orderNumberFormatSuffix?: ShopToOrderNumberFormatSuffixResolver<TParent>;
    orderSavedSearches?: ShopToOrderSavedSearchesResolver<TParent>;
    orderTags?: ShopToOrderTagsResolver<TParent>;
    orders?: ShopToOrdersResolver<TParent>;
    paymentSettings?: ShopToPaymentSettingsResolver<TParent>;
    pendingOrderCount?: ShopToPendingOrderCountResolver<TParent>;
    plan?: ShopToPlanResolver<TParent>;
    priceRuleSavedSearches?: ShopToPriceRuleSavedSearchesResolver<TParent>;
    priceRules?: ShopToPriceRulesResolver<TParent>;
    primaryDomain?: ShopToPrimaryDomainResolver<TParent>;
    privateMetafield?: ShopToPrivateMetafieldResolver<TParent>;
    privateMetafields?: ShopToPrivateMetafieldsResolver<TParent>;
    productByHandle?: ShopToProductByHandleResolver<TParent>;
    productImages?: ShopToProductImagesResolver<TParent>;
    productSavedSearches?: ShopToProductSavedSearchesResolver<TParent>;
    productTags?: ShopToProductTagsResolver<TParent>;
    productTypes?: ShopToProductTypesResolver<TParent>;
    productVariants?: ShopToProductVariantsResolver<TParent>;
    productVendors?: ShopToProductVendorsResolver<TParent>;
    products?: ShopToProductsResolver<TParent>;
    publicationCount?: ShopToPublicationCountResolver<TParent>;
    resourceLimits?: ShopToResourceLimitsResolver<TParent>;
    richTextEditorUrl?: ShopToRichTextEditorUrlResolver<TParent>;
    search?: ShopToSearchResolver<TParent>;
    searchFilters?: ShopToSearchFiltersResolver<TParent>;
    setupRequired?: ShopToSetupRequiredResolver<TParent>;
    shipsToCountries?: ShopToShipsToCountriesResolver<TParent>;
    shopPolicies?: ShopToShopPoliciesResolver<TParent>;
    staffMembers?: ShopToStaffMembersResolver<TParent>;
    storefrontAccessTokens?: ShopToStorefrontAccessTokensResolver<TParent>;
    storefrontUrl?: ShopToStorefrontUrlResolver<TParent>;
    taxShipping?: ShopToTaxShippingResolver<TParent>;
    taxesIncluded?: ShopToTaxesIncludedResolver<TParent>;
    timezoneAbbreviation?: ShopToTimezoneAbbreviationResolver<TParent>;
    timezoneOffset?: ShopToTimezoneOffsetResolver<TParent>;
    timezoneOffsetMinutes?: ShopToTimezoneOffsetMinutesResolver<TParent>;
    transactionalSmsDisabled?: ShopToTransactionalSmsDisabledResolver<TParent>;
    translations?: ShopToTranslationsResolver<TParent>;
    unitSystem?: ShopToUnitSystemResolver<TParent>;
    uploadedImagesByIds?: ShopToUploadedImagesByIdsResolver<TParent>;
    url?: ShopToUrlResolver<TParent>;
    weightUnit?: ShopToWeightUnitResolver<TParent>;
  }
  
  export interface ShopToAlertsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToAllProductCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToAnalyticsTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToAssignedFulfillmentOrdersArgs {
    assignmentStatus?: FulfillmentOrderAssignmentStatus;
    locationIds?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: FulfillmentOrderSortKeys;
  }
  export interface ShopToAssignedFulfillmentOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToAssignedFulfillmentOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToAvailableChannelAppsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToAvailableChannelAppsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToAvailableChannelAppsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToBillingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToChannelCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToChannelDefinitionsForInstalledChannelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToChannelsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToChannelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToChannelsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCheckoutApiSupportedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCollectionByHandleArgs {
    handle: string;
  }
  export interface ShopToCollectionByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToCollectionByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCollectionSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToCollectionSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToCollectionSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCollectionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CollectionSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface ShopToCollectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToContactEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCountriesInShippingZonesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCurrencyFormatsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCurrencySettingsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToCurrencySettingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToCurrencySettingsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCustomerAccountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCustomerAccountsV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCustomerSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CustomerSavedSearchSortKeys;
    query?: string;
  }
  export interface ShopToCustomerSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToCustomerSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCustomerTagsArgs {
    first: number;
  }
  export interface ShopToCustomerTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToCustomerTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToCustomersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CustomerSortKeys;
    query?: string;
  }
  export interface ShopToCustomersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToCustomersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToDomainsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToDraftOrderSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToDraftOrderSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToDraftOrderSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToDraftOrderTagsArgs {
    first: number;
  }
  export interface ShopToDraftOrderTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToDraftOrderTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToDraftOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DraftOrderSortKeys;
    query?: string;
  }
  export interface ShopToDraftOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToDraftOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToEnabledPresentmentCurrenciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToFeaturesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToFulfillmentOrdersArgs {
    includeClosed?: boolean;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: FulfillmentOrderSortKeys;
    query?: string;
  }
  export interface ShopToFulfillmentOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToFulfillmentOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToFulfillmentServicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToIanaTimezoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToInventoryItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface ShopToInventoryItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToInventoryItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToLimitedPendingOrderCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToLocationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: LocationSortKeys;
    query?: string;
    includeLegacy?: boolean;
    includeInactive?: boolean;
  }
  export interface ShopToLocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToLocationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToMarketingEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MarketingEventSortKeys;
    query?: string;
  }
  export interface ShopToMarketingEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToMarketingEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToMerchantApprovalSignalsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface ShopToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToMyshopifyDomainResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToNavigationSettingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToOrderNumberFormatPrefixResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToOrderNumberFormatSuffixResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToOrderSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToOrderSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToOrderSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToOrderTagsArgs {
    first: number;
    sort?: ShopTagSort;
  }
  export interface ShopToOrderTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToOrderTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: OrderSortKeys;
    query?: string;
  }
  export interface ShopToOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPaymentSettingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPendingOrderCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPlanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPriceRuleSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToPriceRuleSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToPriceRuleSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPriceRulesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: PriceRuleSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface ShopToPriceRulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToPriceRulesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPrimaryDomainResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface ShopToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductByHandleArgs {
    handle: string;
  }
  export interface ShopToProductByHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductByHandleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductImagesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductImageSortKeys;
  }
  export interface ShopToProductImagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductImagesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductSavedSearchesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToProductSavedSearchesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductSavedSearchesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductTagsArgs {
    first: number;
  }
  export interface ShopToProductTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductTypesArgs {
    first: number;
  }
  export interface ShopToProductTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductTypesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductVariantsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductVariantSortKeys;
    query?: string;
  }
  export interface ShopToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductVendorsArgs {
    first: number;
  }
  export interface ShopToProductVendorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductVendorsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: ProductSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface ShopToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToPublicationCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToResourceLimitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToRichTextEditorUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToSearchArgs {
    query: string;
    types?: Array<SearchResultType>;
    first: number;
    after?: string;
  }
  export interface ShopToSearchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToSearchFiltersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToSetupRequiredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToShipsToCountriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToShopPoliciesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToStaffMembersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToStaffMembersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToStaffMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToStorefrontAccessTokensArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopToStorefrontAccessTokensResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToStorefrontAccessTokensArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToStorefrontUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToTaxShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToTaxesIncludedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToTimezoneAbbreviationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToTimezoneOffsetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToTimezoneOffsetMinutesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToTransactionalSmsDisabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface ShopToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToUnitSystemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToUploadedImagesByIdsArgs {
    imageIds: Array<string>;
  }
  export interface ShopToUploadedImagesByIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopToUploadedImagesByIdsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopToWeightUnitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAlertTypeResolver<TParent = any> {
    action?: ShopAlertToActionResolver<TParent>;
    description?: ShopAlertToDescriptionResolver<TParent>;
  }
  
  export interface ShopAlertToActionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAlertToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAlertActionTypeResolver<TParent = any> {
    title?: ShopAlertActionToTitleResolver<TParent>;
    url?: ShopAlertActionToUrlResolver<TParent>;
  }
  
  export interface ShopAlertActionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAlertActionToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppConnectionTypeResolver<TParent = any> {
    edges?: AppConnectionToEdgesResolver<TParent>;
    nodes?: AppConnectionToNodesResolver<TParent>;
    pageInfo?: AppConnectionToPageInfoResolver<TParent>;
  }
  
  export interface AppConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppEdgeTypeResolver<TParent = any> {
    cursor?: AppEdgeToCursorResolver<TParent>;
    node?: AppEdgeToNodeResolver<TParent>;
  }
  
  export interface AppEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressTypeResolver<TParent = any> {
    address1?: ShopAddressToAddress1Resolver<TParent>;
    address2?: ShopAddressToAddress2Resolver<TParent>;
    city?: ShopAddressToCityResolver<TParent>;
    company?: ShopAddressToCompanyResolver<TParent>;
    coordinatesValidated?: ShopAddressToCoordinatesValidatedResolver<TParent>;
    country?: ShopAddressToCountryResolver<TParent>;
    countryCode?: ShopAddressToCountryCodeResolver<TParent>;
    countryCodeV2?: ShopAddressToCountryCodeV2Resolver<TParent>;
    firstName?: ShopAddressToFirstNameResolver<TParent>;
    formatted?: ShopAddressToFormattedResolver<TParent>;
    formattedArea?: ShopAddressToFormattedAreaResolver<TParent>;
    id?: ShopAddressToIdResolver<TParent>;
    lastName?: ShopAddressToLastNameResolver<TParent>;
    latitude?: ShopAddressToLatitudeResolver<TParent>;
    longitude?: ShopAddressToLongitudeResolver<TParent>;
    name?: ShopAddressToNameResolver<TParent>;
    phone?: ShopAddressToPhoneResolver<TParent>;
    province?: ShopAddressToProvinceResolver<TParent>;
    provinceCode?: ShopAddressToProvinceCodeResolver<TParent>;
    zip?: ShopAddressToZipResolver<TParent>;
  }
  
  export interface ShopAddressToAddress1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToAddress2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToCityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToCoordinatesValidatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToCountryCodeV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToFormattedArgs {
    withCompany?: boolean;
  }
  export interface ShopAddressToFormattedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopAddressToFormattedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToFormattedAreaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToLatitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToLongitudeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToProvinceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToProvinceCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopAddressToZipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AvailableChannelDefinitionsByChannelTypeResolver<TParent = any> {
    channelDefinitions?: AvailableChannelDefinitionsByChannelToChannelDefinitionsResolver<TParent>;
    channelName?: AvailableChannelDefinitionsByChannelToChannelNameResolver<TParent>;
  }
  
  export interface AvailableChannelDefinitionsByChannelToChannelDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AvailableChannelDefinitionsByChannelToChannelNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchConnectionTypeResolver<TParent = any> {
    edges?: SavedSearchConnectionToEdgesResolver<TParent>;
    nodes?: SavedSearchConnectionToNodesResolver<TParent>;
    pageInfo?: SavedSearchConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SavedSearchConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchEdgeTypeResolver<TParent = any> {
    cursor?: SavedSearchEdgeToCursorResolver<TParent>;
    node?: SavedSearchEdgeToNodeResolver<TParent>;
  }
  
  export interface SavedSearchEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchTypeResolver<TParent = any> {
    filters?: SavedSearchToFiltersResolver<TParent>;
    id?: SavedSearchToIdResolver<TParent>;
    legacyResourceId?: SavedSearchToLegacyResourceIdResolver<TParent>;
    name?: SavedSearchToNameResolver<TParent>;
    query?: SavedSearchToQueryResolver<TParent>;
    resourceType?: SavedSearchToResourceTypeResolver<TParent>;
    searchTerms?: SavedSearchToSearchTermsResolver<TParent>;
  }
  
  export interface SavedSearchToFiltersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchToQueryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchToResourceTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchToSearchTermsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchFilterTypeResolver<TParent = any> {
    key?: SearchFilterToKeyResolver<TParent>;
    value?: SearchFilterToValueResolver<TParent>;
  }
  
  export interface SearchFilterToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchFilterToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CountriesInShippingZonesTypeResolver<TParent = any> {
    countryCodes?: CountriesInShippingZonesToCountryCodesResolver<TParent>;
    includeRestOfWorld?: CountriesInShippingZonesToIncludeRestOfWorldResolver<TParent>;
  }
  
  export interface CountriesInShippingZonesToCountryCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CountriesInShippingZonesToIncludeRestOfWorldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyFormatsTypeResolver<TParent = any> {
    moneyFormat?: CurrencyFormatsToMoneyFormatResolver<TParent>;
    moneyInEmailsFormat?: CurrencyFormatsToMoneyInEmailsFormatResolver<TParent>;
    moneyWithCurrencyFormat?: CurrencyFormatsToMoneyWithCurrencyFormatResolver<TParent>;
    moneyWithCurrencyInEmailsFormat?: CurrencyFormatsToMoneyWithCurrencyInEmailsFormatResolver<TParent>;
  }
  
  export interface CurrencyFormatsToMoneyFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyFormatsToMoneyInEmailsFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyFormatsToMoneyWithCurrencyFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencyFormatsToMoneyWithCurrencyInEmailsFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencySettingConnectionTypeResolver<TParent = any> {
    edges?: CurrencySettingConnectionToEdgesResolver<TParent>;
    nodes?: CurrencySettingConnectionToNodesResolver<TParent>;
    pageInfo?: CurrencySettingConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CurrencySettingConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencySettingConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencySettingConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencySettingEdgeTypeResolver<TParent = any> {
    cursor?: CurrencySettingEdgeToCursorResolver<TParent>;
    node?: CurrencySettingEdgeToNodeResolver<TParent>;
  }
  
  export interface CurrencySettingEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CurrencySettingEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccountsV2TypeResolver<TParent = any> {
    customerAccountsVersion?: CustomerAccountsV2ToCustomerAccountsVersionResolver<TParent>;
    loginLinksVisibleOnStorefrontAndCheckout?: CustomerAccountsV2ToLoginLinksVisibleOnStorefrontAndCheckoutResolver<TParent>;
    loginRequiredAtCheckout?: CustomerAccountsV2ToLoginRequiredAtCheckoutResolver<TParent>;
    url?: CustomerAccountsV2ToUrlResolver<TParent>;
  }
  
  export interface CustomerAccountsV2ToCustomerAccountsVersionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccountsV2ToLoginLinksVisibleOnStorefrontAndCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccountsV2ToLoginRequiredAtCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAccountsV2ToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StringConnectionTypeResolver<TParent = any> {
    edges?: StringConnectionToEdgesResolver<TParent>;
    pageInfo?: StringConnectionToPageInfoResolver<TParent>;
  }
  
  export interface StringConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StringConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StringEdgeTypeResolver<TParent = any> {
    cursor?: StringEdgeToCursorResolver<TParent>;
    node?: StringEdgeToNodeResolver<TParent>;
  }
  
  export interface StringEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StringEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerConnectionTypeResolver<TParent = any> {
    edges?: CustomerConnectionToEdgesResolver<TParent>;
    nodes?: CustomerConnectionToNodesResolver<TParent>;
    pageInfo?: CustomerConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CustomerConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEdgeTypeResolver<TParent = any> {
    cursor?: CustomerEdgeToCursorResolver<TParent>;
    node?: CustomerEdgeToNodeResolver<TParent>;
  }
  
  export interface CustomerEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesTypeResolver<TParent = any> {
    avalaraAvatax?: ShopFeaturesToAvalaraAvataxResolver<TParent>;
    branding?: ShopFeaturesToBrandingResolver<TParent>;
    bundles?: ShopFeaturesToBundlesResolver<TParent>;
    captcha?: ShopFeaturesToCaptchaResolver<TParent>;
    captchaExternalDomains?: ShopFeaturesToCaptchaExternalDomainsResolver<TParent>;
    cartTransform?: ShopFeaturesToCartTransformResolver<TParent>;
    deliveryProfiles?: ShopFeaturesToDeliveryProfilesResolver<TParent>;
    dynamicRemarketing?: ShopFeaturesToDynamicRemarketingResolver<TParent>;
    eligibleForSubscriptionMigration?: ShopFeaturesToEligibleForSubscriptionMigrationResolver<TParent>;
    eligibleForSubscriptions?: ShopFeaturesToEligibleForSubscriptionsResolver<TParent>;
    giftCards?: ShopFeaturesToGiftCardsResolver<TParent>;
    harmonizedSystemCode?: ShopFeaturesToHarmonizedSystemCodeResolver<TParent>;
    internationalDomains?: ShopFeaturesToInternationalDomainsResolver<TParent>;
    internationalPriceOverrides?: ShopFeaturesToInternationalPriceOverridesResolver<TParent>;
    internationalPriceRules?: ShopFeaturesToInternationalPriceRulesResolver<TParent>;
    legacySubscriptionGatewayEnabled?: ShopFeaturesToLegacySubscriptionGatewayEnabledResolver<TParent>;
    liveView?: ShopFeaturesToLiveViewResolver<TParent>;
    multiLocation?: ShopFeaturesToMultiLocationResolver<TParent>;
    onboardingVisual?: ShopFeaturesToOnboardingVisualResolver<TParent>;
    paypalExpressSubscriptionGatewayStatus?: ShopFeaturesToPaypalExpressSubscriptionGatewayStatusResolver<TParent>;
    reports?: ShopFeaturesToReportsResolver<TParent>;
    sellsSubscriptions?: ShopFeaturesToSellsSubscriptionsResolver<TParent>;
    shopifyPlus?: ShopFeaturesToShopifyPlusResolver<TParent>;
    showMetrics?: ShopFeaturesToShowMetricsResolver<TParent>;
    storefront?: ShopFeaturesToStorefrontResolver<TParent>;
    usingShopifyBalance?: ShopFeaturesToUsingShopifyBalanceResolver<TParent>;
  }
  
  export interface ShopFeaturesToAvalaraAvataxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToBrandingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToBundlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToCaptchaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToCaptchaExternalDomainsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToCartTransformResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToDeliveryProfilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToDynamicRemarketingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToEligibleForSubscriptionMigrationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToEligibleForSubscriptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToGiftCardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToHarmonizedSystemCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToInternationalDomainsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToInternationalPriceOverridesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToInternationalPriceRulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToLegacySubscriptionGatewayEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToLiveViewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToMultiLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToOnboardingVisualResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToPaypalExpressSubscriptionGatewayStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToReportsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToSellsSubscriptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToShopifyPlusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToShowMetricsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToStorefrontResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopFeaturesToUsingShopifyBalanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BundlesFeatureTypeResolver<TParent = any> {
    eligibleForBundles?: BundlesFeatureToEligibleForBundlesResolver<TParent>;
    ineligibilityReason?: BundlesFeatureToIneligibilityReasonResolver<TParent>;
    sellsBundles?: BundlesFeatureToSellsBundlesResolver<TParent>;
  }
  
  export interface BundlesFeatureToEligibleForBundlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BundlesFeatureToIneligibilityReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BundlesFeatureToSellsBundlesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformFeatureTypeResolver<TParent = any> {
    eligibleOperations?: CartTransformFeatureToEligibleOperationsResolver<TParent>;
  }
  
  export interface CartTransformFeatureToEligibleOperationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformEligibleOperationsTypeResolver<TParent = any> {
    expandOperation?: CartTransformEligibleOperationsToExpandOperationResolver<TParent>;
    mergeOperation?: CartTransformEligibleOperationsToMergeOperationResolver<TParent>;
    updateOperation?: CartTransformEligibleOperationsToUpdateOperationResolver<TParent>;
  }
  
  export interface CartTransformEligibleOperationsToExpandOperationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformEligibleOperationsToMergeOperationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformEligibleOperationsToUpdateOperationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemConnectionTypeResolver<TParent = any> {
    edges?: InventoryItemConnectionToEdgesResolver<TParent>;
    nodes?: InventoryItemConnectionToNodesResolver<TParent>;
    pageInfo?: InventoryItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface InventoryItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemEdgeTypeResolver<TParent = any> {
    cursor?: InventoryItemEdgeToCursorResolver<TParent>;
    node?: InventoryItemEdgeToNodeResolver<TParent>;
  }
  
  export interface InventoryItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LimitedPendingOrderCountTypeResolver<TParent = any> {
    atMax?: LimitedPendingOrderCountToAtMaxResolver<TParent>;
    count?: LimitedPendingOrderCountToCountResolver<TParent>;
  }
  
  export interface LimitedPendingOrderCountToAtMaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LimitedPendingOrderCountToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventConnectionTypeResolver<TParent = any> {
    edges?: MarketingEventConnectionToEdgesResolver<TParent>;
    nodes?: MarketingEventConnectionToNodesResolver<TParent>;
    pageInfo?: MarketingEventConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MarketingEventConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventEdgeTypeResolver<TParent = any> {
    cursor?: MarketingEventEdgeToCursorResolver<TParent>;
    node?: MarketingEventEdgeToNodeResolver<TParent>;
  }
  
  export interface MarketingEventEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEventEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MerchantApprovalSignalsTypeResolver<TParent = any> {
    identityVerified?: MerchantApprovalSignalsToIdentityVerifiedResolver<TParent>;
    verifiedByShopify?: MerchantApprovalSignalsToVerifiedByShopifyResolver<TParent>;
    verifiedByShopifyTier?: MerchantApprovalSignalsToVerifiedByShopifyTierResolver<TParent>;
  }
  
  export interface MerchantApprovalSignalsToIdentityVerifiedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MerchantApprovalSignalsToVerifiedByShopifyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MerchantApprovalSignalsToVerifiedByShopifyTierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentSettingsTypeResolver<TParent = any> {
    supportedDigitalWallets?: PaymentSettingsToSupportedDigitalWalletsResolver<TParent>;
  }
  
  export interface PaymentSettingsToSupportedDigitalWalletsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPlanTypeResolver<TParent = any> {
    displayName?: ShopPlanToDisplayNameResolver<TParent>;
    partnerDevelopment?: ShopPlanToPartnerDevelopmentResolver<TParent>;
    shopifyPlus?: ShopPlanToShopifyPlusResolver<TParent>;
  }
  
  export interface ShopPlanToDisplayNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPlanToPartnerDevelopmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPlanToShopifyPlusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleConnectionTypeResolver<TParent = any> {
    edges?: PriceRuleConnectionToEdgesResolver<TParent>;
    nodes?: PriceRuleConnectionToNodesResolver<TParent>;
    pageInfo?: PriceRuleConnectionToPageInfoResolver<TParent>;
  }
  
  export interface PriceRuleConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleEdgeTypeResolver<TParent = any> {
    cursor?: PriceRuleEdgeToCursorResolver<TParent>;
    node?: PriceRuleEdgeToNodeResolver<TParent>;
  }
  
  export interface PriceRuleEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleTypeResolver<TParent = any> {
    allocationLimit?: PriceRuleToAllocationLimitResolver<TParent>;
    allocationMethod?: PriceRuleToAllocationMethodResolver<TParent>;
    app?: PriceRuleToAppResolver<TParent>;
    combinesWith?: PriceRuleToCombinesWithResolver<TParent>;
    createdAt?: PriceRuleToCreatedAtResolver<TParent>;
    customerSelection?: PriceRuleToCustomerSelectionResolver<TParent>;
    discountClass?: PriceRuleToDiscountClassResolver<TParent>;
    discountCodes?: PriceRuleToDiscountCodesResolver<TParent>;
    discountCodesCount?: PriceRuleToDiscountCodesCountResolver<TParent>;
    endsAt?: PriceRuleToEndsAtResolver<TParent>;
    entitlementToPrerequisiteQuantityRatio?: PriceRuleToEntitlementToPrerequisiteQuantityRatioResolver<TParent>;
    events?: PriceRuleToEventsResolver<TParent>;
    features?: PriceRuleToFeaturesResolver<TParent>;
    hasTimelineComment?: PriceRuleToHasTimelineCommentResolver<TParent>;
    id?: PriceRuleToIdResolver<TParent>;
    itemEntitlements?: PriceRuleToItemEntitlementsResolver<TParent>;
    itemPrerequisites?: PriceRuleToItemPrerequisitesResolver<TParent>;
    legacyResourceId?: PriceRuleToLegacyResourceIdResolver<TParent>;
    oncePerCustomer?: PriceRuleToOncePerCustomerResolver<TParent>;
    prerequisiteQuantityRange?: PriceRuleToPrerequisiteQuantityRangeResolver<TParent>;
    prerequisiteShippingPriceRange?: PriceRuleToPrerequisiteShippingPriceRangeResolver<TParent>;
    prerequisiteSubtotalRange?: PriceRuleToPrerequisiteSubtotalRangeResolver<TParent>;
    prerequisiteToEntitlementQuantityRatio?: PriceRuleToPrerequisiteToEntitlementQuantityRatioResolver<TParent>;
    shareableUrls?: PriceRuleToShareableUrlsResolver<TParent>;
    shippingEntitlements?: PriceRuleToShippingEntitlementsResolver<TParent>;
    startsAt?: PriceRuleToStartsAtResolver<TParent>;
    status?: PriceRuleToStatusResolver<TParent>;
    summary?: PriceRuleToSummaryResolver<TParent>;
    target?: PriceRuleToTargetResolver<TParent>;
    title?: PriceRuleToTitleResolver<TParent>;
    totalSales?: PriceRuleToTotalSalesResolver<TParent>;
    traits?: PriceRuleToTraitsResolver<TParent>;
    usageCount?: PriceRuleToUsageCountResolver<TParent>;
    usageLimit?: PriceRuleToUsageLimitResolver<TParent>;
    validityPeriod?: PriceRuleToValidityPeriodResolver<TParent>;
    value?: PriceRuleToValueResolver<TParent>;
    valueV2?: PriceRuleToValueV2Resolver<TParent>;
  }
  
  export interface PriceRuleToAllocationLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToCombinesWithResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToCustomerSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToDiscountClassResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToDiscountCodesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DiscountCodeSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface PriceRuleToDiscountCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceRuleToDiscountCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToDiscountCodesCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToEndsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToEntitlementToPrerequisiteQuantityRatioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToEventsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: EventSortKeys;
    query?: string;
  }
  export interface PriceRuleToEventsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceRuleToEventsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToFeaturesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToHasTimelineCommentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToItemEntitlementsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToItemPrerequisitesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToOncePerCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToPrerequisiteQuantityRangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToPrerequisiteShippingPriceRangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToPrerequisiteSubtotalRangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToPrerequisiteToEntitlementQuantityRatioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToShareableUrlsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToShippingEntitlementsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToStartsAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToTargetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToTotalSalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToTraitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToUsageLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToValidityPeriodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleToValueV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleCustomerSelectionTypeResolver<TParent = any> {
    customers?: PriceRuleCustomerSelectionToCustomersResolver<TParent>;
    forAllCustomers?: PriceRuleCustomerSelectionToForAllCustomersResolver<TParent>;
    segments?: PriceRuleCustomerSelectionToSegmentsResolver<TParent>;
  }
  
  export interface PriceRuleCustomerSelectionToCustomersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CustomerSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface PriceRuleCustomerSelectionToCustomersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceRuleCustomerSelectionToCustomersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleCustomerSelectionToForAllCustomersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleCustomerSelectionToSegmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeConnectionTypeResolver<TParent = any> {
    edges?: PriceRuleDiscountCodeConnectionToEdgesResolver<TParent>;
    nodes?: PriceRuleDiscountCodeConnectionToNodesResolver<TParent>;
    pageInfo?: PriceRuleDiscountCodeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface PriceRuleDiscountCodeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeEdgeTypeResolver<TParent = any> {
    cursor?: PriceRuleDiscountCodeEdgeToCursorResolver<TParent>;
    node?: PriceRuleDiscountCodeEdgeToNodeResolver<TParent>;
  }
  
  export interface PriceRuleDiscountCodeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeTypeResolver<TParent = any> {
    app?: PriceRuleDiscountCodeToAppResolver<TParent>;
    code?: PriceRuleDiscountCodeToCodeResolver<TParent>;
    id?: PriceRuleDiscountCodeToIdResolver<TParent>;
    usageCount?: PriceRuleDiscountCodeToUsageCountResolver<TParent>;
  }
  
  export interface PriceRuleDiscountCodeToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeToUsageCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleEntitlementToPrerequisiteQuantityRatioTypeResolver<TParent = any> {
    entitlementQuantity?: PriceRuleEntitlementToPrerequisiteQuantityRatioToEntitlementQuantityResolver<TParent>;
    prerequisiteQuantity?: PriceRuleEntitlementToPrerequisiteQuantityRatioToPrerequisiteQuantityResolver<TParent>;
  }
  
  export interface PriceRuleEntitlementToPrerequisiteQuantityRatioToEntitlementQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleEntitlementToPrerequisiteQuantityRatioToPrerequisiteQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleItemEntitlementsTypeResolver<TParent = any> {
    collections?: PriceRuleItemEntitlementsToCollectionsResolver<TParent>;
    productVariants?: PriceRuleItemEntitlementsToProductVariantsResolver<TParent>;
    products?: PriceRuleItemEntitlementsToProductsResolver<TParent>;
    targetAllLineItems?: PriceRuleItemEntitlementsToTargetAllLineItemsResolver<TParent>;
  }
  
  export interface PriceRuleItemEntitlementsToCollectionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PriceRuleItemEntitlementsToCollectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceRuleItemEntitlementsToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleItemEntitlementsToProductVariantsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PriceRuleItemEntitlementsToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceRuleItemEntitlementsToProductVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleItemEntitlementsToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PriceRuleItemEntitlementsToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceRuleItemEntitlementsToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleItemEntitlementsToTargetAllLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleLineItemPrerequisitesTypeResolver<TParent = any> {
    collections?: PriceRuleLineItemPrerequisitesToCollectionsResolver<TParent>;
    productVariants?: PriceRuleLineItemPrerequisitesToProductVariantsResolver<TParent>;
    products?: PriceRuleLineItemPrerequisitesToProductsResolver<TParent>;
  }
  
  export interface PriceRuleLineItemPrerequisitesToCollectionsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PriceRuleLineItemPrerequisitesToCollectionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceRuleLineItemPrerequisitesToCollectionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleLineItemPrerequisitesToProductVariantsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PriceRuleLineItemPrerequisitesToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceRuleLineItemPrerequisitesToProductVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleLineItemPrerequisitesToProductsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface PriceRuleLineItemPrerequisitesToProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: PriceRuleLineItemPrerequisitesToProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleQuantityRangeTypeResolver<TParent = any> {
    greaterThan?: PriceRuleQuantityRangeToGreaterThanResolver<TParent>;
    greaterThanOrEqualTo?: PriceRuleQuantityRangeToGreaterThanOrEqualToResolver<TParent>;
    lessThan?: PriceRuleQuantityRangeToLessThanResolver<TParent>;
    lessThanOrEqualTo?: PriceRuleQuantityRangeToLessThanOrEqualToResolver<TParent>;
  }
  
  export interface PriceRuleQuantityRangeToGreaterThanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleQuantityRangeToGreaterThanOrEqualToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleQuantityRangeToLessThanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleQuantityRangeToLessThanOrEqualToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleMoneyRangeTypeResolver<TParent = any> {
    greaterThan?: PriceRuleMoneyRangeToGreaterThanResolver<TParent>;
    greaterThanOrEqualTo?: PriceRuleMoneyRangeToGreaterThanOrEqualToResolver<TParent>;
    lessThan?: PriceRuleMoneyRangeToLessThanResolver<TParent>;
    lessThanOrEqualTo?: PriceRuleMoneyRangeToLessThanOrEqualToResolver<TParent>;
  }
  
  export interface PriceRuleMoneyRangeToGreaterThanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleMoneyRangeToGreaterThanOrEqualToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleMoneyRangeToLessThanResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleMoneyRangeToLessThanOrEqualToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRulePrerequisiteToEntitlementQuantityRatioTypeResolver<TParent = any> {
    entitlementQuantity?: PriceRulePrerequisiteToEntitlementQuantityRatioToEntitlementQuantityResolver<TParent>;
    prerequisiteQuantity?: PriceRulePrerequisiteToEntitlementQuantityRatioToPrerequisiteQuantityResolver<TParent>;
  }
  
  export interface PriceRulePrerequisiteToEntitlementQuantityRatioToEntitlementQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRulePrerequisiteToEntitlementQuantityRatioToPrerequisiteQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleShareableUrlTypeResolver<TParent = any> {
    targetItemImage?: PriceRuleShareableUrlToTargetItemImageResolver<TParent>;
    targetType?: PriceRuleShareableUrlToTargetTypeResolver<TParent>;
    title?: PriceRuleShareableUrlToTitleResolver<TParent>;
    url?: PriceRuleShareableUrlToUrlResolver<TParent>;
  }
  
  export interface PriceRuleShareableUrlToTargetItemImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleShareableUrlToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleShareableUrlToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleShareableUrlToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleShippingLineEntitlementsTypeResolver<TParent = any> {
    countryCodes?: PriceRuleShippingLineEntitlementsToCountryCodesResolver<TParent>;
    includeRestOfWorld?: PriceRuleShippingLineEntitlementsToIncludeRestOfWorldResolver<TParent>;
    targetAllShippingLines?: PriceRuleShippingLineEntitlementsToTargetAllShippingLinesResolver<TParent>;
  }
  
  export interface PriceRuleShippingLineEntitlementsToCountryCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleShippingLineEntitlementsToIncludeRestOfWorldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleShippingLineEntitlementsToTargetAllShippingLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleValidityPeriodTypeResolver<TParent = any> {
    end?: PriceRuleValidityPeriodToEndResolver<TParent>;
    start?: PriceRuleValidityPeriodToStartResolver<TParent>;
  }
  
  export interface PriceRuleValidityPeriodToEndResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleValidityPeriodToStartResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleValueTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'PriceRuleFixedAmountValue' | 'PriceRulePercentValue';
  }
  export interface PriceRuleFixedAmountValueTypeResolver<TParent = any> {
    amount?: PriceRuleFixedAmountValueToAmountResolver<TParent>;
  }
  
  export interface PriceRuleFixedAmountValueToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRulePercentValueTypeResolver<TParent = any> {
    percentage?: PriceRulePercentValueToPercentageResolver<TParent>;
  }
  
  export interface PriceRulePercentValueToPercentageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopResourceLimitsTypeResolver<TParent = any> {
    locationLimit?: ShopResourceLimitsToLocationLimitResolver<TParent>;
    maxProductOptions?: ShopResourceLimitsToMaxProductOptionsResolver<TParent>;
    maxProductVariants?: ShopResourceLimitsToMaxProductVariantsResolver<TParent>;
    redirectLimitReached?: ShopResourceLimitsToRedirectLimitReachedResolver<TParent>;
  }
  
  export interface ShopResourceLimitsToLocationLimitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopResourceLimitsToMaxProductOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopResourceLimitsToMaxProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopResourceLimitsToRedirectLimitReachedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultConnectionTypeResolver<TParent = any> {
    edges?: SearchResultConnectionToEdgesResolver<TParent>;
    pageInfo?: SearchResultConnectionToPageInfoResolver<TParent>;
    resultsAfterCount?: SearchResultConnectionToResultsAfterCountResolver<TParent>;
  }
  
  export interface SearchResultConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultConnectionToResultsAfterCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultEdgeTypeResolver<TParent = any> {
    cursor?: SearchResultEdgeToCursorResolver<TParent>;
    node?: SearchResultEdgeToNodeResolver<TParent>;
  }
  
  export interface SearchResultEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultTypeResolver<TParent = any> {
    description?: SearchResultToDescriptionResolver<TParent>;
    image?: SearchResultToImageResolver<TParent>;
    reference?: SearchResultToReferenceResolver<TParent>;
    title?: SearchResultToTitleResolver<TParent>;
    url?: SearchResultToUrlResolver<TParent>;
  }
  
  export interface SearchResultToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultToReferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchFilterOptionsTypeResolver<TParent = any> {
    productAvailability?: SearchFilterOptionsToProductAvailabilityResolver<TParent>;
  }
  
  export interface SearchFilterOptionsToProductAvailabilityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FilterOptionTypeResolver<TParent = any> {
    label?: FilterOptionToLabelResolver<TParent>;
    value?: FilterOptionToValueResolver<TParent>;
  }
  
  export interface FilterOptionToLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FilterOptionToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyTypeResolver<TParent = any> {
    body?: ShopPolicyToBodyResolver<TParent>;
    id?: ShopPolicyToIdResolver<TParent>;
    translations?: ShopPolicyToTranslationsResolver<TParent>;
    type?: ShopPolicyToTypeResolver<TParent>;
    url?: ShopPolicyToUrlResolver<TParent>;
  }
  
  export interface ShopPolicyToBodyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyToTranslationsArgs {
    locale: string;
    marketId?: string;
  }
  export interface ShopPolicyToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopPolicyToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberConnectionTypeResolver<TParent = any> {
    edges?: StaffMemberConnectionToEdgesResolver<TParent>;
    nodes?: StaffMemberConnectionToNodesResolver<TParent>;
    pageInfo?: StaffMemberConnectionToPageInfoResolver<TParent>;
  }
  
  export interface StaffMemberConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberEdgeTypeResolver<TParent = any> {
    cursor?: StaffMemberEdgeToCursorResolver<TParent>;
    node?: StaffMemberEdgeToNodeResolver<TParent>;
  }
  
  export interface StaffMemberEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StaffMemberEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenConnectionTypeResolver<TParent = any> {
    edges?: StorefrontAccessTokenConnectionToEdgesResolver<TParent>;
    nodes?: StorefrontAccessTokenConnectionToNodesResolver<TParent>;
    pageInfo?: StorefrontAccessTokenConnectionToPageInfoResolver<TParent>;
  }
  
  export interface StorefrontAccessTokenConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenEdgeTypeResolver<TParent = any> {
    cursor?: StorefrontAccessTokenEdgeToCursorResolver<TParent>;
    node?: StorefrontAccessTokenEdgeToNodeResolver<TParent>;
  }
  
  export interface StorefrontAccessTokenEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenTypeResolver<TParent = any> {
    accessScopes?: StorefrontAccessTokenToAccessScopesResolver<TParent>;
    accessToken?: StorefrontAccessTokenToAccessTokenResolver<TParent>;
    createdAt?: StorefrontAccessTokenToCreatedAtResolver<TParent>;
    id?: StorefrontAccessTokenToIdResolver<TParent>;
    title?: StorefrontAccessTokenToTitleResolver<TParent>;
    updatedAt?: StorefrontAccessTokenToUpdatedAtResolver<TParent>;
  }
  
  export interface StorefrontAccessTokenToAccessScopesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenToAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoTypeResolver<TParent = any> {
    alt?: VideoToAltResolver<TParent>;
    createdAt?: VideoToCreatedAtResolver<TParent>;
    duration?: VideoToDurationResolver<TParent>;
    fileErrors?: VideoToFileErrorsResolver<TParent>;
    fileStatus?: VideoToFileStatusResolver<TParent>;
    filename?: VideoToFilenameResolver<TParent>;
    id?: VideoToIdResolver<TParent>;
    mediaContentType?: VideoToMediaContentTypeResolver<TParent>;
    mediaErrors?: VideoToMediaErrorsResolver<TParent>;
    mediaWarnings?: VideoToMediaWarningsResolver<TParent>;
    originalSource?: VideoToOriginalSourceResolver<TParent>;
    preview?: VideoToPreviewResolver<TParent>;
    sources?: VideoToSourcesResolver<TParent>;
    status?: VideoToStatusResolver<TParent>;
    updatedAt?: VideoToUpdatedAtResolver<TParent>;
  }
  
  export interface VideoToAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToDurationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToFileErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToFileStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToFilenameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToMediaContentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToMediaErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToMediaWarningsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToOriginalSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToPreviewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToSourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoSourceTypeResolver<TParent = any> {
    fileSize?: VideoSourceToFileSizeResolver<TParent>;
    format?: VideoSourceToFormatResolver<TParent>;
    height?: VideoSourceToHeightResolver<TParent>;
    mimeType?: VideoSourceToMimeTypeResolver<TParent>;
    url?: VideoSourceToUrlResolver<TParent>;
    width?: VideoSourceToWidthResolver<TParent>;
  }
  
  export interface VideoSourceToFileSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoSourceToFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoSourceToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoSourceToMimeTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoSourceToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface VideoSourceToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitProductInfoConnectionTypeResolver<TParent = any> {
    edges?: CustomerVisitProductInfoConnectionToEdgesResolver<TParent>;
    nodes?: CustomerVisitProductInfoConnectionToNodesResolver<TParent>;
    pageInfo?: CustomerVisitProductInfoConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CustomerVisitProductInfoConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitProductInfoConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitProductInfoConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitProductInfoEdgeTypeResolver<TParent = any> {
    cursor?: CustomerVisitProductInfoEdgeToCursorResolver<TParent>;
    node?: CustomerVisitProductInfoEdgeToNodeResolver<TParent>;
  }
  
  export interface CustomerVisitProductInfoEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitProductInfoEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitProductInfoTypeResolver<TParent = any> {
    product?: CustomerVisitProductInfoToProductResolver<TParent>;
    quantity?: CustomerVisitProductInfoToQuantityResolver<TParent>;
    variant?: CustomerVisitProductInfoToVariantResolver<TParent>;
  }
  
  export interface CustomerVisitProductInfoToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitProductInfoToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerVisitProductInfoToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationConnectionTypeResolver<TParent = any> {
    edges?: AppInstallationConnectionToEdgesResolver<TParent>;
    nodes?: AppInstallationConnectionToNodesResolver<TParent>;
    pageInfo?: AppInstallationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface AppInstallationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationEdgeTypeResolver<TParent = any> {
    cursor?: AppInstallationEdgeToCursorResolver<TParent>;
    node?: AppInstallationEdgeToNodeResolver<TParent>;
  }
  
  export interface AppInstallationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppInstallationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeConnectionTypeResolver<TParent = any> {
    edges?: DiscountAutomaticNodeConnectionToEdgesResolver<TParent>;
    nodes?: DiscountAutomaticNodeConnectionToNodesResolver<TParent>;
    pageInfo?: DiscountAutomaticNodeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DiscountAutomaticNodeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeEdgeTypeResolver<TParent = any> {
    cursor?: DiscountAutomaticNodeEdgeToCursorResolver<TParent>;
    node?: DiscountAutomaticNodeEdgeToNodeResolver<TParent>;
  }
  
  export interface DiscountAutomaticNodeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticNodeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticConnectionTypeResolver<TParent = any> {
    edges?: DiscountAutomaticConnectionToEdgesResolver<TParent>;
    nodes?: DiscountAutomaticConnectionToNodesResolver<TParent>;
    pageInfo?: DiscountAutomaticConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DiscountAutomaticConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticEdgeTypeResolver<TParent = any> {
    cursor?: DiscountAutomaticEdgeToCursorResolver<TParent>;
    node?: DiscountAutomaticEdgeToNodeResolver<TParent>;
  }
  
  export interface DiscountAutomaticEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCarrierServiceAndLocationsTypeResolver<TParent = any> {
    carrierService?: DeliveryCarrierServiceAndLocationsToCarrierServiceResolver<TParent>;
    locations?: DeliveryCarrierServiceAndLocationsToLocationsResolver<TParent>;
  }
  
  export interface DeliveryCarrierServiceAndLocationsToCarrierServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCarrierServiceAndLocationsToLocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocaleTypeResolver<TParent = any> {
    isoCode?: LocaleToIsoCodeResolver<TParent>;
    name?: LocaleToNameResolver<TParent>;
  }
  
  export interface LocaleToIsoCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocaleToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformConnectionTypeResolver<TParent = any> {
    edges?: CartTransformConnectionToEdgesResolver<TParent>;
    nodes?: CartTransformConnectionToNodesResolver<TParent>;
    pageInfo?: CartTransformConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CartTransformConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformEdgeTypeResolver<TParent = any> {
    cursor?: CartTransformEdgeToCursorResolver<TParent>;
    node?: CartTransformEdgeToNodeResolver<TParent>;
  }
  
  export interface CartTransformEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformTypeResolver<TParent = any> {
    blockOnFailure?: CartTransformToBlockOnFailureResolver<TParent>;
    functionId?: CartTransformToFunctionIdResolver<TParent>;
    id?: CartTransformToIdResolver<TParent>;
    metafield?: CartTransformToMetafieldResolver<TParent>;
    metafields?: CartTransformToMetafieldsResolver<TParent>;
    privateMetafield?: CartTransformToPrivateMetafieldResolver<TParent>;
    privateMetafields?: CartTransformToPrivateMetafieldsResolver<TParent>;
  }
  
  export interface CartTransformToBlockOnFailureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformToFunctionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface CartTransformToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CartTransformToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CartTransformToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CartTransformToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface CartTransformToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CartTransformToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CartTransformToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CartTransformToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTypeResolver<TParent = any> {
    customizations?: CheckoutBrandingToCustomizationsResolver<TParent>;
    designSystem?: CheckoutBrandingToDesignSystemResolver<TParent>;
  }
  
  export interface CheckoutBrandingToCustomizationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingToDesignSystemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsTypeResolver<TParent = any> {
    checkbox?: CheckoutBrandingCustomizationsToCheckboxResolver<TParent>;
    choiceList?: CheckoutBrandingCustomizationsToChoiceListResolver<TParent>;
    control?: CheckoutBrandingCustomizationsToControlResolver<TParent>;
    favicon?: CheckoutBrandingCustomizationsToFaviconResolver<TParent>;
    global?: CheckoutBrandingCustomizationsToGlobalResolver<TParent>;
    header?: CheckoutBrandingCustomizationsToHeaderResolver<TParent>;
    headingLevel1?: CheckoutBrandingCustomizationsToHeadingLevel1Resolver<TParent>;
    headingLevel2?: CheckoutBrandingCustomizationsToHeadingLevel2Resolver<TParent>;
    headingLevel3?: CheckoutBrandingCustomizationsToHeadingLevel3Resolver<TParent>;
    main?: CheckoutBrandingCustomizationsToMainResolver<TParent>;
    merchandiseThumbnail?: CheckoutBrandingCustomizationsToMerchandiseThumbnailResolver<TParent>;
    orderSummary?: CheckoutBrandingCustomizationsToOrderSummaryResolver<TParent>;
    primaryButton?: CheckoutBrandingCustomizationsToPrimaryButtonResolver<TParent>;
    secondaryButton?: CheckoutBrandingCustomizationsToSecondaryButtonResolver<TParent>;
    select?: CheckoutBrandingCustomizationsToSelectResolver<TParent>;
    textField?: CheckoutBrandingCustomizationsToTextFieldResolver<TParent>;
  }
  
  export interface CheckoutBrandingCustomizationsToCheckboxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToChoiceListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToControlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToFaviconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToGlobalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToHeaderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToHeadingLevel1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToHeadingLevel2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToHeadingLevel3Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToMainResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToMerchandiseThumbnailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToOrderSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToPrimaryButtonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToSecondaryButtonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToSelectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomizationsToTextFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCheckboxTypeResolver<TParent = any> {
    cornerRadius?: CheckoutBrandingCheckboxToCornerRadiusResolver<TParent>;
  }
  
  export interface CheckoutBrandingCheckboxToCornerRadiusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingChoiceListTypeResolver<TParent = any> {
    group?: CheckoutBrandingChoiceListToGroupResolver<TParent>;
  }
  
  export interface CheckoutBrandingChoiceListToGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingChoiceListGroupTypeResolver<TParent = any> {
    spacing?: CheckoutBrandingChoiceListGroupToSpacingResolver<TParent>;
  }
  
  export interface CheckoutBrandingChoiceListGroupToSpacingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingControlTypeResolver<TParent = any> {
    border?: CheckoutBrandingControlToBorderResolver<TParent>;
    color?: CheckoutBrandingControlToColorResolver<TParent>;
    cornerRadius?: CheckoutBrandingControlToCornerRadiusResolver<TParent>;
    labelPosition?: CheckoutBrandingControlToLabelPositionResolver<TParent>;
  }
  
  export interface CheckoutBrandingControlToBorderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingControlToColorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingControlToCornerRadiusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingControlToLabelPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingImageTypeResolver<TParent = any> {
    image?: CheckoutBrandingImageToImageResolver<TParent>;
  }
  
  export interface CheckoutBrandingImageToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingGlobalTypeResolver<TParent = any> {
    cornerRadius?: CheckoutBrandingGlobalToCornerRadiusResolver<TParent>;
    typography?: CheckoutBrandingGlobalToTypographyResolver<TParent>;
  }
  
  export interface CheckoutBrandingGlobalToCornerRadiusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingGlobalToTypographyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTypographyStyleGlobalTypeResolver<TParent = any> {
    kerning?: CheckoutBrandingTypographyStyleGlobalToKerningResolver<TParent>;
    letterCase?: CheckoutBrandingTypographyStyleGlobalToLetterCaseResolver<TParent>;
  }
  
  export interface CheckoutBrandingTypographyStyleGlobalToKerningResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTypographyStyleGlobalToLetterCaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingHeaderTypeResolver<TParent = any> {
    alignment?: CheckoutBrandingHeaderToAlignmentResolver<TParent>;
    banner?: CheckoutBrandingHeaderToBannerResolver<TParent>;
    logo?: CheckoutBrandingHeaderToLogoResolver<TParent>;
    position?: CheckoutBrandingHeaderToPositionResolver<TParent>;
  }
  
  export interface CheckoutBrandingHeaderToAlignmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingHeaderToBannerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingHeaderToLogoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingHeaderToPositionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingLogoTypeResolver<TParent = any> {
    image?: CheckoutBrandingLogoToImageResolver<TParent>;
    maxWidth?: CheckoutBrandingLogoToMaxWidthResolver<TParent>;
  }
  
  export interface CheckoutBrandingLogoToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingLogoToMaxWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingHeadingLevelTypeResolver<TParent = any> {
    typography?: CheckoutBrandingHeadingLevelToTypographyResolver<TParent>;
  }
  
  export interface CheckoutBrandingHeadingLevelToTypographyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTypographyStyleTypeResolver<TParent = any> {
    font?: CheckoutBrandingTypographyStyleToFontResolver<TParent>;
    kerning?: CheckoutBrandingTypographyStyleToKerningResolver<TParent>;
    letterCase?: CheckoutBrandingTypographyStyleToLetterCaseResolver<TParent>;
    size?: CheckoutBrandingTypographyStyleToSizeResolver<TParent>;
    weight?: CheckoutBrandingTypographyStyleToWeightResolver<TParent>;
  }
  
  export interface CheckoutBrandingTypographyStyleToFontResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTypographyStyleToKerningResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTypographyStyleToLetterCaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTypographyStyleToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTypographyStyleToWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingMainTypeResolver<TParent = any> {
    backgroundImage?: CheckoutBrandingMainToBackgroundImageResolver<TParent>;
    colorScheme?: CheckoutBrandingMainToColorSchemeResolver<TParent>;
  }
  
  export interface CheckoutBrandingMainToBackgroundImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingMainToColorSchemeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingMerchandiseThumbnailTypeResolver<TParent = any> {
    border?: CheckoutBrandingMerchandiseThumbnailToBorderResolver<TParent>;
    cornerRadius?: CheckoutBrandingMerchandiseThumbnailToCornerRadiusResolver<TParent>;
  }
  
  export interface CheckoutBrandingMerchandiseThumbnailToBorderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingMerchandiseThumbnailToCornerRadiusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingOrderSummaryTypeResolver<TParent = any> {
    backgroundImage?: CheckoutBrandingOrderSummaryToBackgroundImageResolver<TParent>;
    colorScheme?: CheckoutBrandingOrderSummaryToColorSchemeResolver<TParent>;
  }
  
  export interface CheckoutBrandingOrderSummaryToBackgroundImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingOrderSummaryToColorSchemeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonTypeResolver<TParent = any> {
    background?: CheckoutBrandingButtonToBackgroundResolver<TParent>;
    blockPadding?: CheckoutBrandingButtonToBlockPaddingResolver<TParent>;
    border?: CheckoutBrandingButtonToBorderResolver<TParent>;
    cornerRadius?: CheckoutBrandingButtonToCornerRadiusResolver<TParent>;
    inlinePadding?: CheckoutBrandingButtonToInlinePaddingResolver<TParent>;
    typography?: CheckoutBrandingButtonToTypographyResolver<TParent>;
  }
  
  export interface CheckoutBrandingButtonToBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonToBlockPaddingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonToBorderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonToCornerRadiusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonToInlinePaddingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonToTypographyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingSelectTypeResolver<TParent = any> {
    border?: CheckoutBrandingSelectToBorderResolver<TParent>;
    typography?: CheckoutBrandingSelectToTypographyResolver<TParent>;
  }
  
  export interface CheckoutBrandingSelectToBorderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingSelectToTypographyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTextFieldTypeResolver<TParent = any> {
    border?: CheckoutBrandingTextFieldToBorderResolver<TParent>;
    typography?: CheckoutBrandingTextFieldToTypographyResolver<TParent>;
  }
  
  export interface CheckoutBrandingTextFieldToBorderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTextFieldToTypographyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingDesignSystemTypeResolver<TParent = any> {
    colors?: CheckoutBrandingDesignSystemToColorsResolver<TParent>;
    cornerRadius?: CheckoutBrandingDesignSystemToCornerRadiusResolver<TParent>;
    typography?: CheckoutBrandingDesignSystemToTypographyResolver<TParent>;
  }
  
  export interface CheckoutBrandingDesignSystemToColorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingDesignSystemToCornerRadiusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingDesignSystemToTypographyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorsTypeResolver<TParent = any> {
    global?: CheckoutBrandingColorsToGlobalResolver<TParent>;
    schemes?: CheckoutBrandingColorsToSchemesResolver<TParent>;
  }
  
  export interface CheckoutBrandingColorsToGlobalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorsToSchemesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorGlobalTypeResolver<TParent = any> {
    accent?: CheckoutBrandingColorGlobalToAccentResolver<TParent>;
    brand?: CheckoutBrandingColorGlobalToBrandResolver<TParent>;
    critical?: CheckoutBrandingColorGlobalToCriticalResolver<TParent>;
    decorative?: CheckoutBrandingColorGlobalToDecorativeResolver<TParent>;
    info?: CheckoutBrandingColorGlobalToInfoResolver<TParent>;
    success?: CheckoutBrandingColorGlobalToSuccessResolver<TParent>;
    warning?: CheckoutBrandingColorGlobalToWarningResolver<TParent>;
  }
  
  export interface CheckoutBrandingColorGlobalToAccentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorGlobalToBrandResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorGlobalToCriticalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorGlobalToDecorativeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorGlobalToInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorGlobalToSuccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorGlobalToWarningResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorSchemesTypeResolver<TParent = any> {
    scheme1?: CheckoutBrandingColorSchemesToScheme1Resolver<TParent>;
    scheme2?: CheckoutBrandingColorSchemesToScheme2Resolver<TParent>;
  }
  
  export interface CheckoutBrandingColorSchemesToScheme1Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorSchemesToScheme2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorSchemeTypeResolver<TParent = any> {
    base?: CheckoutBrandingColorSchemeToBaseResolver<TParent>;
    control?: CheckoutBrandingColorSchemeToControlResolver<TParent>;
    primaryButton?: CheckoutBrandingColorSchemeToPrimaryButtonResolver<TParent>;
    secondaryButton?: CheckoutBrandingColorSchemeToSecondaryButtonResolver<TParent>;
  }
  
  export interface CheckoutBrandingColorSchemeToBaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorSchemeToControlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorSchemeToPrimaryButtonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorSchemeToSecondaryButtonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorRolesTypeResolver<TParent = any> {
    accent?: CheckoutBrandingColorRolesToAccentResolver<TParent>;
    background?: CheckoutBrandingColorRolesToBackgroundResolver<TParent>;
    border?: CheckoutBrandingColorRolesToBorderResolver<TParent>;
    decorative?: CheckoutBrandingColorRolesToDecorativeResolver<TParent>;
    icon?: CheckoutBrandingColorRolesToIconResolver<TParent>;
    text?: CheckoutBrandingColorRolesToTextResolver<TParent>;
  }
  
  export interface CheckoutBrandingColorRolesToAccentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorRolesToBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorRolesToBorderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorRolesToDecorativeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorRolesToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingColorRolesToTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingControlColorRolesTypeResolver<TParent = any> {
    accent?: CheckoutBrandingControlColorRolesToAccentResolver<TParent>;
    background?: CheckoutBrandingControlColorRolesToBackgroundResolver<TParent>;
    border?: CheckoutBrandingControlColorRolesToBorderResolver<TParent>;
    decorative?: CheckoutBrandingControlColorRolesToDecorativeResolver<TParent>;
    icon?: CheckoutBrandingControlColorRolesToIconResolver<TParent>;
    selected?: CheckoutBrandingControlColorRolesToSelectedResolver<TParent>;
    text?: CheckoutBrandingControlColorRolesToTextResolver<TParent>;
  }
  
  export interface CheckoutBrandingControlColorRolesToAccentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingControlColorRolesToBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingControlColorRolesToBorderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingControlColorRolesToDecorativeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingControlColorRolesToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingControlColorRolesToSelectedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingControlColorRolesToTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonColorRolesTypeResolver<TParent = any> {
    accent?: CheckoutBrandingButtonColorRolesToAccentResolver<TParent>;
    background?: CheckoutBrandingButtonColorRolesToBackgroundResolver<TParent>;
    border?: CheckoutBrandingButtonColorRolesToBorderResolver<TParent>;
    decorative?: CheckoutBrandingButtonColorRolesToDecorativeResolver<TParent>;
    hover?: CheckoutBrandingButtonColorRolesToHoverResolver<TParent>;
    icon?: CheckoutBrandingButtonColorRolesToIconResolver<TParent>;
    text?: CheckoutBrandingButtonColorRolesToTextResolver<TParent>;
  }
  
  export interface CheckoutBrandingButtonColorRolesToAccentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonColorRolesToBackgroundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonColorRolesToBorderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonColorRolesToDecorativeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonColorRolesToHoverResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonColorRolesToIconResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingButtonColorRolesToTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCornerRadiusVariablesTypeResolver<TParent = any> {
    base?: CheckoutBrandingCornerRadiusVariablesToBaseResolver<TParent>;
    large?: CheckoutBrandingCornerRadiusVariablesToLargeResolver<TParent>;
    small?: CheckoutBrandingCornerRadiusVariablesToSmallResolver<TParent>;
  }
  
  export interface CheckoutBrandingCornerRadiusVariablesToBaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCornerRadiusVariablesToLargeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCornerRadiusVariablesToSmallResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTypographyTypeResolver<TParent = any> {
    primary?: CheckoutBrandingTypographyToPrimaryResolver<TParent>;
    secondary?: CheckoutBrandingTypographyToSecondaryResolver<TParent>;
    size?: CheckoutBrandingTypographyToSizeResolver<TParent>;
  }
  
  export interface CheckoutBrandingTypographyToPrimaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTypographyToSecondaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingTypographyToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingFontGroupTypeResolver<TParent = any> {
    base?: CheckoutBrandingFontGroupToBaseResolver<TParent>;
    bold?: CheckoutBrandingFontGroupToBoldResolver<TParent>;
    loadingStrategy?: CheckoutBrandingFontGroupToLoadingStrategyResolver<TParent>;
    name?: CheckoutBrandingFontGroupToNameResolver<TParent>;
  }
  
  export interface CheckoutBrandingFontGroupToBaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingFontGroupToBoldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingFontGroupToLoadingStrategyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingFontGroupToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingFontTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'CheckoutBrandingCustomFont' | 'CheckoutBrandingShopifyFont';
  }
  export interface CheckoutBrandingFontSizeTypeResolver<TParent = any> {
    base?: CheckoutBrandingFontSizeToBaseResolver<TParent>;
    ratio?: CheckoutBrandingFontSizeToRatioResolver<TParent>;
  }
  
  export interface CheckoutBrandingFontSizeToBaseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingFontSizeToRatioResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutProfileTypeResolver<TParent = any> {
    createdAt?: CheckoutProfileToCreatedAtResolver<TParent>;
    editedAt?: CheckoutProfileToEditedAtResolver<TParent>;
    id?: CheckoutProfileToIdResolver<TParent>;
    isPublished?: CheckoutProfileToIsPublishedResolver<TParent>;
    name?: CheckoutProfileToNameResolver<TParent>;
    updatedAt?: CheckoutProfileToUpdatedAtResolver<TParent>;
  }
  
  export interface CheckoutProfileToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutProfileToEditedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutProfileToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutProfileToIsPublishedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutProfileToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutProfileToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutProfileConnectionTypeResolver<TParent = any> {
    edges?: CheckoutProfileConnectionToEdgesResolver<TParent>;
    nodes?: CheckoutProfileConnectionToNodesResolver<TParent>;
    pageInfo?: CheckoutProfileConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CheckoutProfileConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutProfileConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutProfileConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutProfileEdgeTypeResolver<TParent = any> {
    cursor?: CheckoutProfileEdgeToCursorResolver<TParent>;
    node?: CheckoutProfileEdgeToNodeResolver<TParent>;
  }
  
  export interface CheckoutProfileEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutProfileEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeConnectionTypeResolver<TParent = any> {
    edges?: DiscountCodeNodeConnectionToEdgesResolver<TParent>;
    nodes?: DiscountCodeNodeConnectionToNodesResolver<TParent>;
    pageInfo?: DiscountCodeNodeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DiscountCodeNodeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeEdgeTypeResolver<TParent = any> {
    cursor?: DiscountCodeNodeEdgeToCursorResolver<TParent>;
    node?: DiscountCodeNodeEdgeToNodeResolver<TParent>;
  }
  
  export interface DiscountCodeNodeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeNodeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleConditionsTypeResolver<TParent = any> {
    allowedRelations?: CollectionRuleConditionsToAllowedRelationsResolver<TParent>;
    defaultRelation?: CollectionRuleConditionsToDefaultRelationResolver<TParent>;
    ruleObject?: CollectionRuleConditionsToRuleObjectResolver<TParent>;
    ruleType?: CollectionRuleConditionsToRuleTypeResolver<TParent>;
  }
  
  export interface CollectionRuleConditionsToAllowedRelationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleConditionsToDefaultRelationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleConditionsToRuleObjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleConditionsToRuleTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRuleConditionsRuleObjectTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'CollectionRuleMetafieldCondition';
  }
  export interface CompanyConnectionTypeResolver<TParent = any> {
    edges?: CompanyConnectionToEdgesResolver<TParent>;
    nodes?: CompanyConnectionToNodesResolver<TParent>;
    pageInfo?: CompanyConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CompanyConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyEdgeTypeResolver<TParent = any> {
    cursor?: CompanyEdgeToCursorResolver<TParent>;
    node?: CompanyEdgeToNodeResolver<TParent>;
  }
  
  export interface CompanyEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationTypeResolver<TParent = any> {
    completedAt?: BulkOperationToCompletedAtResolver<TParent>;
    createdAt?: BulkOperationToCreatedAtResolver<TParent>;
    errorCode?: BulkOperationToErrorCodeResolver<TParent>;
    fileSize?: BulkOperationToFileSizeResolver<TParent>;
    id?: BulkOperationToIdResolver<TParent>;
    objectCount?: BulkOperationToObjectCountResolver<TParent>;
    partialDataUrl?: BulkOperationToPartialDataUrlResolver<TParent>;
    query?: BulkOperationToQueryResolver<TParent>;
    rootObjectCount?: BulkOperationToRootObjectCountResolver<TParent>;
    status?: BulkOperationToStatusResolver<TParent>;
    type?: BulkOperationToTypeResolver<TParent>;
    url?: BulkOperationToUrlResolver<TParent>;
  }
  
  export interface BulkOperationToCompletedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationToErrorCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationToFileSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationToObjectCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationToPartialDataUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationToQueryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationToRootObjectCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewTypeResolver<TParent = any> {
    alternateFields?: CustomerMergePreviewToAlternateFieldsResolver<TParent>;
    blockingFields?: CustomerMergePreviewToBlockingFieldsResolver<TParent>;
    customerMergeErrors?: CustomerMergePreviewToCustomerMergeErrorsResolver<TParent>;
    defaultFields?: CustomerMergePreviewToDefaultFieldsResolver<TParent>;
    resultingCustomerId?: CustomerMergePreviewToResultingCustomerIdResolver<TParent>;
  }
  
  export interface CustomerMergePreviewToAlternateFieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewToBlockingFieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewToCustomerMergeErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewToDefaultFieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewToResultingCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewAlternateFieldsTypeResolver<TParent = any> {
    defaultAddress?: CustomerMergePreviewAlternateFieldsToDefaultAddressResolver<TParent>;
    email?: CustomerMergePreviewAlternateFieldsToEmailResolver<TParent>;
    firstName?: CustomerMergePreviewAlternateFieldsToFirstNameResolver<TParent>;
    lastName?: CustomerMergePreviewAlternateFieldsToLastNameResolver<TParent>;
    phoneNumber?: CustomerMergePreviewAlternateFieldsToPhoneNumberResolver<TParent>;
  }
  
  export interface CustomerMergePreviewAlternateFieldsToDefaultAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewAlternateFieldsToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewAlternateFieldsToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewAlternateFieldsToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewAlternateFieldsToPhoneNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailAddressTypeResolver<TParent = any> {
    emailAddress?: CustomerEmailAddressToEmailAddressResolver<TParent>;
    marketingState?: CustomerEmailAddressToMarketingStateResolver<TParent>;
    marketingUnsubscribeUrl?: CustomerEmailAddressToMarketingUnsubscribeUrlResolver<TParent>;
    openTrackingLevel?: CustomerEmailAddressToOpenTrackingLevelResolver<TParent>;
    openTrackingUrl?: CustomerEmailAddressToOpenTrackingUrlResolver<TParent>;
  }
  
  export interface CustomerEmailAddressToEmailAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailAddressToMarketingStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailAddressToMarketingUnsubscribeUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailAddressToOpenTrackingLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailAddressToOpenTrackingUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPhoneNumberTypeResolver<TParent = any> {
    marketingState?: CustomerPhoneNumberToMarketingStateResolver<TParent>;
    phoneNumber?: CustomerPhoneNumberToPhoneNumberResolver<TParent>;
  }
  
  export interface CustomerPhoneNumberToMarketingStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPhoneNumberToPhoneNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewBlockingFieldsTypeResolver<TParent = any> {
    note?: CustomerMergePreviewBlockingFieldsToNoteResolver<TParent>;
    tags?: CustomerMergePreviewBlockingFieldsToTagsResolver<TParent>;
  }
  
  export interface CustomerMergePreviewBlockingFieldsToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewBlockingFieldsToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsTypeResolver<TParent = any> {
    addresses?: CustomerMergePreviewDefaultFieldsToAddressesResolver<TParent>;
    defaultAddress?: CustomerMergePreviewDefaultFieldsToDefaultAddressResolver<TParent>;
    discountNodeCount?: CustomerMergePreviewDefaultFieldsToDiscountNodeCountResolver<TParent>;
    discountNodes?: CustomerMergePreviewDefaultFieldsToDiscountNodesResolver<TParent>;
    displayName?: CustomerMergePreviewDefaultFieldsToDisplayNameResolver<TParent>;
    draftOrderCount?: CustomerMergePreviewDefaultFieldsToDraftOrderCountResolver<TParent>;
    draftOrders?: CustomerMergePreviewDefaultFieldsToDraftOrdersResolver<TParent>;
    email?: CustomerMergePreviewDefaultFieldsToEmailResolver<TParent>;
    firstName?: CustomerMergePreviewDefaultFieldsToFirstNameResolver<TParent>;
    giftCardCount?: CustomerMergePreviewDefaultFieldsToGiftCardCountResolver<TParent>;
    giftCards?: CustomerMergePreviewDefaultFieldsToGiftCardsResolver<TParent>;
    lastName?: CustomerMergePreviewDefaultFieldsToLastNameResolver<TParent>;
    metafieldCount?: CustomerMergePreviewDefaultFieldsToMetafieldCountResolver<TParent>;
    note?: CustomerMergePreviewDefaultFieldsToNoteResolver<TParent>;
    orderCount?: CustomerMergePreviewDefaultFieldsToOrderCountResolver<TParent>;
    orders?: CustomerMergePreviewDefaultFieldsToOrdersResolver<TParent>;
    phoneNumber?: CustomerMergePreviewDefaultFieldsToPhoneNumberResolver<TParent>;
    tags?: CustomerMergePreviewDefaultFieldsToTagsResolver<TParent>;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToAddressesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CustomerMergePreviewDefaultFieldsToAddressesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerMergePreviewDefaultFieldsToAddressesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToDefaultAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToDiscountNodeCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToDiscountNodesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DiscountSortKeys;
  }
  export interface CustomerMergePreviewDefaultFieldsToDiscountNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerMergePreviewDefaultFieldsToDiscountNodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToDisplayNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToDraftOrderCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToDraftOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: DraftOrderSortKeys;
  }
  export interface CustomerMergePreviewDefaultFieldsToDraftOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerMergePreviewDefaultFieldsToDraftOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToGiftCardCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToGiftCardsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: GiftCardSortKeys;
  }
  export interface CustomerMergePreviewDefaultFieldsToGiftCardsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerMergePreviewDefaultFieldsToGiftCardsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToMetafieldCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToOrderCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: OrderSortKeys;
  }
  export interface CustomerMergePreviewDefaultFieldsToOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerMergePreviewDefaultFieldsToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToPhoneNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePreviewDefaultFieldsToTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressConnectionTypeResolver<TParent = any> {
    edges?: MailingAddressConnectionToEdgesResolver<TParent>;
    nodes?: MailingAddressConnectionToNodesResolver<TParent>;
    pageInfo?: MailingAddressConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MailingAddressConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressEdgeTypeResolver<TParent = any> {
    cursor?: MailingAddressEdgeToCursorResolver<TParent>;
    node?: MailingAddressEdgeToNodeResolver<TParent>;
  }
  
  export interface MailingAddressEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MailingAddressEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeConnectionTypeResolver<TParent = any> {
    edges?: DiscountNodeConnectionToEdgesResolver<TParent>;
    nodes?: DiscountNodeConnectionToNodesResolver<TParent>;
    pageInfo?: DiscountNodeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DiscountNodeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeEdgeTypeResolver<TParent = any> {
    cursor?: DiscountNodeEdgeToCursorResolver<TParent>;
    node?: DiscountNodeEdgeToNodeResolver<TParent>;
  }
  
  export interface DiscountNodeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountNodeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardConnectionTypeResolver<TParent = any> {
    edges?: GiftCardConnectionToEdgesResolver<TParent>;
    nodes?: GiftCardConnectionToNodesResolver<TParent>;
    pageInfo?: GiftCardConnectionToPageInfoResolver<TParent>;
  }
  
  export interface GiftCardConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardEdgeTypeResolver<TParent = any> {
    cursor?: GiftCardEdgeToCursorResolver<TParent>;
    node?: GiftCardEdgeToNodeResolver<TParent>;
  }
  
  export interface GiftCardEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberConnectionTypeResolver<TParent = any> {
    edges?: CustomerSegmentMemberConnectionToEdgesResolver<TParent>;
    pageInfo?: CustomerSegmentMemberConnectionToPageInfoResolver<TParent>;
    statistics?: CustomerSegmentMemberConnectionToStatisticsResolver<TParent>;
    totalCount?: CustomerSegmentMemberConnectionToTotalCountResolver<TParent>;
  }
  
  export interface CustomerSegmentMemberConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberConnectionToStatisticsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberConnectionToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberEdgeTypeResolver<TParent = any> {
    cursor?: CustomerSegmentMemberEdgeToCursorResolver<TParent>;
    node?: CustomerSegmentMemberEdgeToNodeResolver<TParent>;
  }
  
  export interface CustomerSegmentMemberEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberTypeResolver<TParent = any> {
    amountSpent?: CustomerSegmentMemberToAmountSpentResolver<TParent>;
    defaultAddress?: CustomerSegmentMemberToDefaultAddressResolver<TParent>;
    defaultEmailAddress?: CustomerSegmentMemberToDefaultEmailAddressResolver<TParent>;
    defaultPhoneNumber?: CustomerSegmentMemberToDefaultPhoneNumberResolver<TParent>;
    displayName?: CustomerSegmentMemberToDisplayNameResolver<TParent>;
    firstName?: CustomerSegmentMemberToFirstNameResolver<TParent>;
    id?: CustomerSegmentMemberToIdResolver<TParent>;
    lastName?: CustomerSegmentMemberToLastNameResolver<TParent>;
    lastOrderId?: CustomerSegmentMemberToLastOrderIdResolver<TParent>;
    mergeable?: CustomerSegmentMemberToMergeableResolver<TParent>;
    metafield?: CustomerSegmentMemberToMetafieldResolver<TParent>;
    metafields?: CustomerSegmentMemberToMetafieldsResolver<TParent>;
    note?: CustomerSegmentMemberToNoteResolver<TParent>;
    numberOfOrders?: CustomerSegmentMemberToNumberOfOrdersResolver<TParent>;
    privateMetafield?: CustomerSegmentMemberToPrivateMetafieldResolver<TParent>;
    privateMetafields?: CustomerSegmentMemberToPrivateMetafieldsResolver<TParent>;
  }
  
  export interface CustomerSegmentMemberToAmountSpentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToDefaultAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToDefaultEmailAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToDefaultPhoneNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToDisplayNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToLastOrderIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToMergeableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface CustomerSegmentMemberToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerSegmentMemberToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CustomerSegmentMemberToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerSegmentMemberToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToNumberOfOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface CustomerSegmentMemberToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerSegmentMemberToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMemberToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CustomerSegmentMemberToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CustomerSegmentMemberToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentStatisticsTypeResolver<TParent = any> {
    attributeStatistics?: SegmentStatisticsToAttributeStatisticsResolver<TParent>;
  }
  
  export interface SegmentStatisticsToAttributeStatisticsArgs {
    attributeName: string;
  }
  export interface SegmentStatisticsToAttributeStatisticsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SegmentStatisticsToAttributeStatisticsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentAttributeStatisticsTypeResolver<TParent = any> {
    average?: SegmentAttributeStatisticsToAverageResolver<TParent>;
    sum?: SegmentAttributeStatisticsToSumResolver<TParent>;
  }
  
  export interface SegmentAttributeStatisticsToAverageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentAttributeStatisticsToSumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMembersQueryTypeResolver<TParent = any> {
    currentCount?: CustomerSegmentMembersQueryToCurrentCountResolver<TParent>;
    done?: CustomerSegmentMembersQueryToDoneResolver<TParent>;
    id?: CustomerSegmentMembersQueryToIdResolver<TParent>;
  }
  
  export interface CustomerSegmentMembersQueryToCurrentCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMembersQueryToDoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMembersQueryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface JobResultTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'CustomerSegmentMembersQuery';
  }
  export interface SegmentMembershipResponseTypeResolver<TParent = any> {
    memberships?: SegmentMembershipResponseToMembershipsResolver<TParent>;
  }
  
  export interface SegmentMembershipResponseToMembershipsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentMembershipTypeResolver<TParent = any> {
    isMember?: SegmentMembershipToIsMemberResolver<TParent>;
    segmentId?: SegmentMembershipToSegmentIdResolver<TParent>;
  }
  
  export interface SegmentMembershipToIsMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentMembershipToSegmentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeletionEventConnectionTypeResolver<TParent = any> {
    edges?: DeletionEventConnectionToEdgesResolver<TParent>;
    nodes?: DeletionEventConnectionToNodesResolver<TParent>;
    pageInfo?: DeletionEventConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DeletionEventConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeletionEventConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeletionEventConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeletionEventEdgeTypeResolver<TParent = any> {
    cursor?: DeletionEventEdgeToCursorResolver<TParent>;
    node?: DeletionEventEdgeToNodeResolver<TParent>;
  }
  
  export interface DeletionEventEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeletionEventEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeletionEventTypeResolver<TParent = any> {
    occurredAt?: DeletionEventToOccurredAtResolver<TParent>;
    subjectId?: DeletionEventToSubjectIdResolver<TParent>;
    subjectType?: DeletionEventToSubjectTypeResolver<TParent>;
  }
  
  export interface DeletionEventToOccurredAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeletionEventToSubjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeletionEventToSubjectTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationConnectionTypeResolver<TParent = any> {
    edges?: DeliveryCustomizationConnectionToEdgesResolver<TParent>;
    nodes?: DeliveryCustomizationConnectionToNodesResolver<TParent>;
    pageInfo?: DeliveryCustomizationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DeliveryCustomizationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationEdgeTypeResolver<TParent = any> {
    cursor?: DeliveryCustomizationEdgeToCursorResolver<TParent>;
    node?: DeliveryCustomizationEdgeToNodeResolver<TParent>;
  }
  
  export interface DeliveryCustomizationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileConnectionTypeResolver<TParent = any> {
    edges?: DeliveryProfileConnectionToEdgesResolver<TParent>;
    nodes?: DeliveryProfileConnectionToNodesResolver<TParent>;
    pageInfo?: DeliveryProfileConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DeliveryProfileConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileEdgeTypeResolver<TParent = any> {
    cursor?: DeliveryProfileEdgeToCursorResolver<TParent>;
    node?: DeliveryProfileEdgeToNodeResolver<TParent>;
  }
  
  export interface DeliveryProfileEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryProfileEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliverySettingTypeResolver<TParent = any> {
    legacyModeBlocked?: DeliverySettingToLegacyModeBlockedResolver<TParent>;
    legacyModeProfiles?: DeliverySettingToLegacyModeProfilesResolver<TParent>;
  }
  
  export interface DeliverySettingToLegacyModeBlockedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliverySettingToLegacyModeProfilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLegacyModeBlockedTypeResolver<TParent = any> {
    blocked?: DeliveryLegacyModeBlockedToBlockedResolver<TParent>;
    reasons?: DeliveryLegacyModeBlockedToReasonsResolver<TParent>;
  }
  
  export interface DeliveryLegacyModeBlockedToBlockedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLegacyModeBlockedToReasonsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationTypeResolver<TParent = any> {
    codes?: DiscountRedeemCodeBulkCreationToCodesResolver<TParent>;
    codesCount?: DiscountRedeemCodeBulkCreationToCodesCountResolver<TParent>;
    createdAt?: DiscountRedeemCodeBulkCreationToCreatedAtResolver<TParent>;
    discountCode?: DiscountRedeemCodeBulkCreationToDiscountCodeResolver<TParent>;
    done?: DiscountRedeemCodeBulkCreationToDoneResolver<TParent>;
    failedCount?: DiscountRedeemCodeBulkCreationToFailedCountResolver<TParent>;
    id?: DiscountRedeemCodeBulkCreationToIdResolver<TParent>;
    importedCount?: DiscountRedeemCodeBulkCreationToImportedCountResolver<TParent>;
  }
  
  export interface DiscountRedeemCodeBulkCreationToCodesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface DiscountRedeemCodeBulkCreationToCodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: DiscountRedeemCodeBulkCreationToCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationToCodesCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationToDiscountCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationToDoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationToFailedCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationToImportedCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationCodeConnectionTypeResolver<TParent = any> {
    edges?: DiscountRedeemCodeBulkCreationCodeConnectionToEdgesResolver<TParent>;
    nodes?: DiscountRedeemCodeBulkCreationCodeConnectionToNodesResolver<TParent>;
    pageInfo?: DiscountRedeemCodeBulkCreationCodeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface DiscountRedeemCodeBulkCreationCodeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationCodeConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationCodeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationCodeEdgeTypeResolver<TParent = any> {
    cursor?: DiscountRedeemCodeBulkCreationCodeEdgeToCursorResolver<TParent>;
    node?: DiscountRedeemCodeBulkCreationCodeEdgeToNodeResolver<TParent>;
  }
  
  export interface DiscountRedeemCodeBulkCreationCodeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationCodeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationCodeTypeResolver<TParent = any> {
    code?: DiscountRedeemCodeBulkCreationCodeToCodeResolver<TParent>;
    discountRedeemCode?: DiscountRedeemCodeBulkCreationCodeToDiscountRedeemCodeResolver<TParent>;
    errors?: DiscountRedeemCodeBulkCreationCodeToErrorsResolver<TParent>;
  }
  
  export interface DiscountRedeemCodeBulkCreationCodeToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationCodeToDiscountRedeemCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkCreationCodeToErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountUserErrorTypeResolver<TParent = any> {
    code?: DiscountUserErrorToCodeResolver<TParent>;
    extraInfo?: DiscountUserErrorToExtraInfoResolver<TParent>;
    field?: DiscountUserErrorToFieldResolver<TParent>;
    message?: DiscountUserErrorToMessageResolver<TParent>;
  }
  
  export interface DiscountUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountUserErrorToExtraInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeTypeResolver<TParent = any> {
    amount?: ShopifyPaymentsDisputeToAmountResolver<TParent>;
    evidenceDueBy?: ShopifyPaymentsDisputeToEvidenceDueByResolver<TParent>;
    evidenceSentOn?: ShopifyPaymentsDisputeToEvidenceSentOnResolver<TParent>;
    finalizedOn?: ShopifyPaymentsDisputeToFinalizedOnResolver<TParent>;
    id?: ShopifyPaymentsDisputeToIdResolver<TParent>;
    initiatedAt?: ShopifyPaymentsDisputeToInitiatedAtResolver<TParent>;
    legacyResourceId?: ShopifyPaymentsDisputeToLegacyResourceIdResolver<TParent>;
    order?: ShopifyPaymentsDisputeToOrderResolver<TParent>;
    reasonDetails?: ShopifyPaymentsDisputeToReasonDetailsResolver<TParent>;
    status?: ShopifyPaymentsDisputeToStatusResolver<TParent>;
    type?: ShopifyPaymentsDisputeToTypeResolver<TParent>;
  }
  
  export interface ShopifyPaymentsDisputeToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeToEvidenceDueByResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeToEvidenceSentOnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeToFinalizedOnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeToInitiatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeToReasonDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeReasonDetailsTypeResolver<TParent = any> {
    networkReasonCode?: ShopifyPaymentsDisputeReasonDetailsToNetworkReasonCodeResolver<TParent>;
    reason?: ShopifyPaymentsDisputeReasonDetailsToReasonResolver<TParent>;
  }
  
  export interface ShopifyPaymentsDisputeReasonDetailsToNetworkReasonCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeReasonDetailsToReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceTypeResolver<TParent = any> {
    accessActivityLog?: ShopifyPaymentsDisputeEvidenceToAccessActivityLogResolver<TParent>;
    billingAddress?: ShopifyPaymentsDisputeEvidenceToBillingAddressResolver<TParent>;
    cancellationPolicyDisclosure?: ShopifyPaymentsDisputeEvidenceToCancellationPolicyDisclosureResolver<TParent>;
    cancellationPolicyFile?: ShopifyPaymentsDisputeEvidenceToCancellationPolicyFileResolver<TParent>;
    cancellationRebuttal?: ShopifyPaymentsDisputeEvidenceToCancellationRebuttalResolver<TParent>;
    customerCommunicationFile?: ShopifyPaymentsDisputeEvidenceToCustomerCommunicationFileResolver<TParent>;
    customerEmailAddress?: ShopifyPaymentsDisputeEvidenceToCustomerEmailAddressResolver<TParent>;
    customerFirstName?: ShopifyPaymentsDisputeEvidenceToCustomerFirstNameResolver<TParent>;
    customerLastName?: ShopifyPaymentsDisputeEvidenceToCustomerLastNameResolver<TParent>;
    customerPurchaseIp?: ShopifyPaymentsDisputeEvidenceToCustomerPurchaseIpResolver<TParent>;
    dispute?: ShopifyPaymentsDisputeEvidenceToDisputeResolver<TParent>;
    disputeFileUploads?: ShopifyPaymentsDisputeEvidenceToDisputeFileUploadsResolver<TParent>;
    fulfillments?: ShopifyPaymentsDisputeEvidenceToFulfillmentsResolver<TParent>;
    id?: ShopifyPaymentsDisputeEvidenceToIdResolver<TParent>;
    productDescription?: ShopifyPaymentsDisputeEvidenceToProductDescriptionResolver<TParent>;
    refundPolicyDisclosure?: ShopifyPaymentsDisputeEvidenceToRefundPolicyDisclosureResolver<TParent>;
    refundPolicyFile?: ShopifyPaymentsDisputeEvidenceToRefundPolicyFileResolver<TParent>;
    refundRefusalExplanation?: ShopifyPaymentsDisputeEvidenceToRefundRefusalExplanationResolver<TParent>;
    serviceDocumentationFile?: ShopifyPaymentsDisputeEvidenceToServiceDocumentationFileResolver<TParent>;
    shippingAddress?: ShopifyPaymentsDisputeEvidenceToShippingAddressResolver<TParent>;
    shippingDocumentationFile?: ShopifyPaymentsDisputeEvidenceToShippingDocumentationFileResolver<TParent>;
    submitted?: ShopifyPaymentsDisputeEvidenceToSubmittedResolver<TParent>;
    uncategorizedFile?: ShopifyPaymentsDisputeEvidenceToUncategorizedFileResolver<TParent>;
    uncategorizedText?: ShopifyPaymentsDisputeEvidenceToUncategorizedTextResolver<TParent>;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToAccessActivityLogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToBillingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToCancellationPolicyDisclosureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToCancellationPolicyFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToCancellationRebuttalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToCustomerCommunicationFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToCustomerEmailAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToCustomerFirstNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToCustomerLastNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToCustomerPurchaseIpResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToDisputeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToDisputeFileUploadsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToFulfillmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToProductDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToRefundPolicyDisclosureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToRefundPolicyFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToRefundRefusalExplanationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToServiceDocumentationFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToShippingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToShippingDocumentationFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToSubmittedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToUncategorizedFileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEvidenceToUncategorizedTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeFileUploadTypeResolver<TParent = any> {
    disputeEvidenceType?: ShopifyPaymentsDisputeFileUploadToDisputeEvidenceTypeResolver<TParent>;
    fileSize?: ShopifyPaymentsDisputeFileUploadToFileSizeResolver<TParent>;
    fileType?: ShopifyPaymentsDisputeFileUploadToFileTypeResolver<TParent>;
    id?: ShopifyPaymentsDisputeFileUploadToIdResolver<TParent>;
    originalFileName?: ShopifyPaymentsDisputeFileUploadToOriginalFileNameResolver<TParent>;
    url?: ShopifyPaymentsDisputeFileUploadToUrlResolver<TParent>;
  }
  
  export interface ShopifyPaymentsDisputeFileUploadToDisputeEvidenceTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeFileUploadToFileSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeFileUploadToFileTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeFileUploadToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeFileUploadToOriginalFileNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeFileUploadToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeFulfillmentTypeResolver<TParent = any> {
    id?: ShopifyPaymentsDisputeFulfillmentToIdResolver<TParent>;
    shippingCarrier?: ShopifyPaymentsDisputeFulfillmentToShippingCarrierResolver<TParent>;
    shippingDate?: ShopifyPaymentsDisputeFulfillmentToShippingDateResolver<TParent>;
    shippingTrackingNumber?: ShopifyPaymentsDisputeFulfillmentToShippingTrackingNumberResolver<TParent>;
  }
  
  export interface ShopifyPaymentsDisputeFulfillmentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeFulfillmentToShippingCarrierResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeFulfillmentToShippingDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeFulfillmentToShippingTrackingNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderTagTypeResolver<TParent = any> {
    handle?: DraftOrderTagToHandleResolver<TParent>;
    id?: DraftOrderTagToIdResolver<TParent>;
    title?: DraftOrderTagToTitleResolver<TParent>;
  }
  
  export interface DraftOrderTagToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderTagToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderTagToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileConnectionTypeResolver<TParent = any> {
    edges?: FileConnectionToEdgesResolver<TParent>;
    nodes?: FileConnectionToNodesResolver<TParent>;
    pageInfo?: FileConnectionToPageInfoResolver<TParent>;
  }
  
  export interface FileConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileEdgeTypeResolver<TParent = any> {
    cursor?: FileEdgeToCursorResolver<TParent>;
    node?: FileEdgeToNodeResolver<TParent>;
  }
  
  export interface FileEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleTypeResolver<TParent = any> {
    function?: FulfillmentConstraintRuleToFunctionResolver<TParent>;
    id?: FulfillmentConstraintRuleToIdResolver<TParent>;
    metafield?: FulfillmentConstraintRuleToMetafieldResolver<TParent>;
    metafields?: FulfillmentConstraintRuleToMetafieldsResolver<TParent>;
    privateMetafield?: FulfillmentConstraintRuleToPrivateMetafieldResolver<TParent>;
    privateMetafields?: FulfillmentConstraintRuleToPrivateMetafieldsResolver<TParent>;
  }
  
  export interface FulfillmentConstraintRuleToFunctionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface FulfillmentConstraintRuleToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentConstraintRuleToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentConstraintRuleToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentConstraintRuleToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface FulfillmentConstraintRuleToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentConstraintRuleToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface FulfillmentConstraintRuleToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: FulfillmentConstraintRuleToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryPropertiesTypeResolver<TParent = any> {
    quantityNames?: InventoryPropertiesToQuantityNamesResolver<TParent>;
  }
  
  export interface InventoryPropertiesToQuantityNamesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryQuantityNameTypeResolver<TParent = any> {
    belongsTo?: InventoryQuantityNameToBelongsToResolver<TParent>;
    comprises?: InventoryQuantityNameToComprisesResolver<TParent>;
    displayName?: InventoryQuantityNameToDisplayNameResolver<TParent>;
    isInUse?: InventoryQuantityNameToIsInUseResolver<TParent>;
    name?: InventoryQuantityNameToNameResolver<TParent>;
  }
  
  export interface InventoryQuantityNameToBelongsToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryQuantityNameToComprisesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryQuantityNameToDisplayNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryQuantityNameToIsInUseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryQuantityNameToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface JobTypeResolver<TParent = any> {
    done?: JobToDoneResolver<TParent>;
    id?: JobToIdResolver<TParent>;
    query?: JobToQueryResolver<TParent>;
  }
  
  export interface JobToDoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface JobToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface JobToQueryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizableResourceTypeResolver<TParent = any> {
    marketLocalizableContent?: MarketLocalizableResourceToMarketLocalizableContentResolver<TParent>;
    marketLocalizations?: MarketLocalizableResourceToMarketLocalizationsResolver<TParent>;
    resourceId?: MarketLocalizableResourceToResourceIdResolver<TParent>;
  }
  
  export interface MarketLocalizableResourceToMarketLocalizableContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizableResourceToMarketLocalizationsArgs {
    marketId: string;
  }
  export interface MarketLocalizableResourceToMarketLocalizationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MarketLocalizableResourceToMarketLocalizationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizableResourceToResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizableContentTypeResolver<TParent = any> {
    digest?: MarketLocalizableContentToDigestResolver<TParent>;
    key?: MarketLocalizableContentToKeyResolver<TParent>;
    value?: MarketLocalizableContentToValueResolver<TParent>;
  }
  
  export interface MarketLocalizableContentToDigestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizableContentToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizableContentToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizationTypeResolver<TParent = any> {
    key?: MarketLocalizationToKeyResolver<TParent>;
    market?: MarketLocalizationToMarketResolver<TParent>;
    outdated?: MarketLocalizationToOutdatedResolver<TParent>;
    updatedAt?: MarketLocalizationToUpdatedAtResolver<TParent>;
    value?: MarketLocalizationToValueResolver<TParent>;
  }
  
  export interface MarketLocalizationToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizationToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizationToOutdatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizationToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizableResourceConnectionTypeResolver<TParent = any> {
    edges?: MarketLocalizableResourceConnectionToEdgesResolver<TParent>;
    nodes?: MarketLocalizableResourceConnectionToNodesResolver<TParent>;
    pageInfo?: MarketLocalizableResourceConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MarketLocalizableResourceConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizableResourceConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizableResourceConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizableResourceEdgeTypeResolver<TParent = any> {
    cursor?: MarketLocalizableResourceEdgeToCursorResolver<TParent>;
    node?: MarketLocalizableResourceEdgeToNodeResolver<TParent>;
  }
  
  export interface MarketLocalizableResourceEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizableResourceEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityConnectionTypeResolver<TParent = any> {
    edges?: MarketingActivityConnectionToEdgesResolver<TParent>;
    nodes?: MarketingActivityConnectionToNodesResolver<TParent>;
    pageInfo?: MarketingActivityConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MarketingActivityConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityEdgeTypeResolver<TParent = any> {
    cursor?: MarketingActivityEdgeToCursorResolver<TParent>;
    node?: MarketingActivityEdgeToNodeResolver<TParent>;
  }
  
  export interface MarketingActivityEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityTypeResolver<TParent = any> {
    activityListUrl?: MarketingActivityToActivityListUrlResolver<TParent>;
    adSpend?: MarketingActivityToAdSpendResolver<TParent>;
    app?: MarketingActivityToAppResolver<TParent>;
    appErrors?: MarketingActivityToAppErrorsResolver<TParent>;
    budget?: MarketingActivityToBudgetResolver<TParent>;
    createdAt?: MarketingActivityToCreatedAtResolver<TParent>;
    formData?: MarketingActivityToFormDataResolver<TParent>;
    hierarchyLevel?: MarketingActivityToHierarchyLevelResolver<TParent>;
    id?: MarketingActivityToIdResolver<TParent>;
    inMainWorkflowVersion?: MarketingActivityToInMainWorkflowVersionResolver<TParent>;
    marketingChannel?: MarketingActivityToMarketingChannelResolver<TParent>;
    marketingChannelType?: MarketingActivityToMarketingChannelTypeResolver<TParent>;
    marketingEvent?: MarketingActivityToMarketingEventResolver<TParent>;
    parentActivityId?: MarketingActivityToParentActivityIdResolver<TParent>;
    parentRemoteId?: MarketingActivityToParentRemoteIdResolver<TParent>;
    sourceAndMedium?: MarketingActivityToSourceAndMediumResolver<TParent>;
    status?: MarketingActivityToStatusResolver<TParent>;
    statusBadgeType?: MarketingActivityToStatusBadgeTypeResolver<TParent>;
    statusBadgeTypeV2?: MarketingActivityToStatusBadgeTypeV2Resolver<TParent>;
    statusLabel?: MarketingActivityToStatusLabelResolver<TParent>;
    statusTransitionedAt?: MarketingActivityToStatusTransitionedAtResolver<TParent>;
    tactic?: MarketingActivityToTacticResolver<TParent>;
    targetStatus?: MarketingActivityToTargetStatusResolver<TParent>;
    title?: MarketingActivityToTitleResolver<TParent>;
    updatedAt?: MarketingActivityToUpdatedAtResolver<TParent>;
    urlParameterValue?: MarketingActivityToUrlParameterValueResolver<TParent>;
    utmParameters?: MarketingActivityToUtmParametersResolver<TParent>;
  }
  
  export interface MarketingActivityToActivityListUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToAdSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToAppErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToBudgetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToFormDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToHierarchyLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToInMainWorkflowVersionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToMarketingChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToMarketingChannelTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToMarketingEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToParentActivityIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToParentRemoteIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToSourceAndMediumResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToStatusBadgeTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToStatusBadgeTypeV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToStatusLabelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToStatusTransitionedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToTacticResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToTargetStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToUrlParameterValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityToUtmParametersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityExtensionAppErrorsTypeResolver<TParent = any> {
    code?: MarketingActivityExtensionAppErrorsToCodeResolver<TParent>;
    userErrors?: MarketingActivityExtensionAppErrorsToUserErrorsResolver<TParent>;
  }
  
  export interface MarketingActivityExtensionAppErrorsToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityExtensionAppErrorsToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingBudgetTypeResolver<TParent = any> {
    budgetType?: MarketingBudgetToBudgetTypeResolver<TParent>;
    total?: MarketingBudgetToTotalResolver<TParent>;
  }
  
  export interface MarketingBudgetToBudgetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingBudgetToTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityConnectionTypeResolver<TParent = any> {
    edges?: MetafieldStorefrontVisibilityConnectionToEdgesResolver<TParent>;
    nodes?: MetafieldStorefrontVisibilityConnectionToNodesResolver<TParent>;
    pageInfo?: MetafieldStorefrontVisibilityConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MetafieldStorefrontVisibilityConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityEdgeTypeResolver<TParent = any> {
    cursor?: MetafieldStorefrontVisibilityEdgeToCursorResolver<TParent>;
    node?: MetafieldStorefrontVisibilityEdgeToNodeResolver<TParent>;
  }
  
  export interface MetafieldStorefrontVisibilityEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityTypeResolver<TParent = any> {
    createdAt?: MetafieldStorefrontVisibilityToCreatedAtResolver<TParent>;
    id?: MetafieldStorefrontVisibilityToIdResolver<TParent>;
    key?: MetafieldStorefrontVisibilityToKeyResolver<TParent>;
    legacyResourceId?: MetafieldStorefrontVisibilityToLegacyResourceIdResolver<TParent>;
    namespace?: MetafieldStorefrontVisibilityToNamespaceResolver<TParent>;
    ownerType?: MetafieldStorefrontVisibilityToOwnerTypeResolver<TParent>;
    updatedAt?: MetafieldStorefrontVisibilityToUpdatedAtResolver<TParent>;
  }
  
  export interface MetafieldStorefrontVisibilityToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityToNamespaceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityToOwnerTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionConnectionTypeResolver<TParent = any> {
    edges?: MetaobjectDefinitionConnectionToEdgesResolver<TParent>;
    nodes?: MetaobjectDefinitionConnectionToNodesResolver<TParent>;
    pageInfo?: MetaobjectDefinitionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface MetaobjectDefinitionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionEdgeTypeResolver<TParent = any> {
    cursor?: MetaobjectDefinitionEdgeToCursorResolver<TParent>;
    node?: MetaobjectDefinitionEdgeToNodeResolver<TParent>;
  }
  
  export interface MetaobjectDefinitionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderPaymentStatusTypeResolver<TParent = any> {
    errorMessage?: OrderPaymentStatusToErrorMessageResolver<TParent>;
    paymentReferenceId?: OrderPaymentStatusToPaymentReferenceIdResolver<TParent>;
    status?: OrderPaymentStatusToStatusResolver<TParent>;
    translatedErrorMessage?: OrderPaymentStatusToTranslatedErrorMessageResolver<TParent>;
  }
  
  export interface OrderPaymentStatusToErrorMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderPaymentStatusToPaymentReferenceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderPaymentStatusToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderPaymentStatusToTranslatedErrorMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationConnectionTypeResolver<TParent = any> {
    edges?: PaymentCustomizationConnectionToEdgesResolver<TParent>;
    nodes?: PaymentCustomizationConnectionToNodesResolver<TParent>;
    pageInfo?: PaymentCustomizationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface PaymentCustomizationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationEdgeTypeResolver<TParent = any> {
    cursor?: PaymentCustomizationEdgeToCursorResolver<TParent>;
    node?: PaymentCustomizationEdgeToNodeResolver<TParent>;
  }
  
  export interface PaymentCustomizationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListConnectionTypeResolver<TParent = any> {
    edges?: PriceListConnectionToEdgesResolver<TParent>;
    nodes?: PriceListConnectionToNodesResolver<TParent>;
    pageInfo?: PriceListConnectionToPageInfoResolver<TParent>;
  }
  
  export interface PriceListConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListEdgeTypeResolver<TParent = any> {
    cursor?: PriceListEdgeToCursorResolver<TParent>;
    node?: PriceListEdgeToNodeResolver<TParent>;
  }
  
  export interface PriceListEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicateJobTypeResolver<TParent = any> {
    done?: ProductDuplicateJobToDoneResolver<TParent>;
    id?: ProductDuplicateJobToIdResolver<TParent>;
  }
  
  export interface ProductDuplicateJobToDoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicateJobToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedTypeResolver<TParent = any> {
    country?: ProductFeedToCountryResolver<TParent>;
    id?: ProductFeedToIdResolver<TParent>;
    language?: ProductFeedToLanguageResolver<TParent>;
    status?: ProductFeedToStatusResolver<TParent>;
  }
  
  export interface ProductFeedToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedConnectionTypeResolver<TParent = any> {
    edges?: ProductFeedConnectionToEdgesResolver<TParent>;
    nodes?: ProductFeedConnectionToNodesResolver<TParent>;
    pageInfo?: ProductFeedConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ProductFeedConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedEdgeTypeResolver<TParent = any> {
    cursor?: ProductFeedEdgeToCursorResolver<TParent>;
    node?: ProductFeedEdgeToNodeResolver<TParent>;
  }
  
  export interface ProductFeedEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductResourceFeedbackTypeResolver<TParent = any> {
    feedbackGeneratedAt?: ProductResourceFeedbackToFeedbackGeneratedAtResolver<TParent>;
    messages?: ProductResourceFeedbackToMessagesResolver<TParent>;
    productId?: ProductResourceFeedbackToProductIdResolver<TParent>;
    productUpdatedAt?: ProductResourceFeedbackToProductUpdatedAtResolver<TParent>;
    state?: ProductResourceFeedbackToStateResolver<TParent>;
  }
  
  export interface ProductResourceFeedbackToFeedbackGeneratedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductResourceFeedbackToMessagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductResourceFeedbackToProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductResourceFeedbackToProductUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductResourceFeedbackToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ApiVersionTypeResolver<TParent = any> {
    displayName?: ApiVersionToDisplayNameResolver<TParent>;
    handle?: ApiVersionToHandleResolver<TParent>;
    supported?: ApiVersionToSupportedResolver<TParent>;
  }
  
  export interface ApiVersionToDisplayNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ApiVersionToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ApiVersionToSupportedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentTypeResolver<TParent = any> {
    fulfillment?: ReturnableFulfillmentToFulfillmentResolver<TParent>;
    id?: ReturnableFulfillmentToIdResolver<TParent>;
    returnableFulfillmentLineItems?: ReturnableFulfillmentToReturnableFulfillmentLineItemsResolver<TParent>;
  }
  
  export interface ReturnableFulfillmentToFulfillmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentToReturnableFulfillmentLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ReturnableFulfillmentToReturnableFulfillmentLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ReturnableFulfillmentToReturnableFulfillmentLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentLineItemConnectionTypeResolver<TParent = any> {
    edges?: ReturnableFulfillmentLineItemConnectionToEdgesResolver<TParent>;
    nodes?: ReturnableFulfillmentLineItemConnectionToNodesResolver<TParent>;
    pageInfo?: ReturnableFulfillmentLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ReturnableFulfillmentLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentLineItemEdgeTypeResolver<TParent = any> {
    cursor?: ReturnableFulfillmentLineItemEdgeToCursorResolver<TParent>;
    node?: ReturnableFulfillmentLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface ReturnableFulfillmentLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentLineItemTypeResolver<TParent = any> {
    fulfillmentLineItem?: ReturnableFulfillmentLineItemToFulfillmentLineItemResolver<TParent>;
    quantity?: ReturnableFulfillmentLineItemToQuantityResolver<TParent>;
  }
  
  export interface ReturnableFulfillmentLineItemToFulfillmentLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentConnectionTypeResolver<TParent = any> {
    edges?: ReturnableFulfillmentConnectionToEdgesResolver<TParent>;
    nodes?: ReturnableFulfillmentConnectionToNodesResolver<TParent>;
    pageInfo?: ReturnableFulfillmentConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ReturnableFulfillmentConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentEdgeTypeResolver<TParent = any> {
    cursor?: ReturnableFulfillmentEdgeToCursorResolver<TParent>;
    node?: ReturnableFulfillmentEdgeToNodeResolver<TParent>;
  }
  
  export interface ReturnableFulfillmentEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnableFulfillmentEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagTypeResolver<TParent = any> {
    cache?: ScriptTagToCacheResolver<TParent>;
    createdAt?: ScriptTagToCreatedAtResolver<TParent>;
    displayScope?: ScriptTagToDisplayScopeResolver<TParent>;
    id?: ScriptTagToIdResolver<TParent>;
    legacyResourceId?: ScriptTagToLegacyResourceIdResolver<TParent>;
    src?: ScriptTagToSrcResolver<TParent>;
    updatedAt?: ScriptTagToUpdatedAtResolver<TParent>;
  }
  
  export interface ScriptTagToCacheResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagToDisplayScopeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagToSrcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagConnectionTypeResolver<TParent = any> {
    edges?: ScriptTagConnectionToEdgesResolver<TParent>;
    nodes?: ScriptTagConnectionToNodesResolver<TParent>;
    pageInfo?: ScriptTagConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ScriptTagConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagEdgeTypeResolver<TParent = any> {
    cursor?: ScriptTagEdgeToCursorResolver<TParent>;
    node?: ScriptTagEdgeToNodeResolver<TParent>;
  }
  
  export interface ScriptTagEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentFilterConnectionTypeResolver<TParent = any> {
    edges?: SegmentFilterConnectionToEdgesResolver<TParent>;
    nodes?: SegmentFilterConnectionToNodesResolver<TParent>;
    pageInfo?: SegmentFilterConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SegmentFilterConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentFilterConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentFilterConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentFilterEdgeTypeResolver<TParent = any> {
    cursor?: SegmentFilterEdgeToCursorResolver<TParent>;
    node?: SegmentFilterEdgeToNodeResolver<TParent>;
  }
  
  export interface SegmentFilterEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentFilterEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentFilterTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SegmentAssociationFilter' | 'SegmentBooleanFilter' | 'SegmentDateFilter' | 'SegmentEnumFilter' | 'SegmentEventFilter' | 'SegmentFloatFilter' | 'SegmentIntegerFilter' | 'SegmentStringFilter';
  }
  export interface SegmentMigrationConnectionTypeResolver<TParent = any> {
    edges?: SegmentMigrationConnectionToEdgesResolver<TParent>;
    nodes?: SegmentMigrationConnectionToNodesResolver<TParent>;
    pageInfo?: SegmentMigrationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SegmentMigrationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentMigrationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentMigrationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentMigrationEdgeTypeResolver<TParent = any> {
    cursor?: SegmentMigrationEdgeToCursorResolver<TParent>;
    node?: SegmentMigrationEdgeToNodeResolver<TParent>;
  }
  
  export interface SegmentMigrationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentMigrationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentMigrationTypeResolver<TParent = any> {
    id?: SegmentMigrationToIdResolver<TParent>;
    savedSearchId?: SegmentMigrationToSavedSearchIdResolver<TParent>;
    segmentId?: SegmentMigrationToSegmentIdResolver<TParent>;
  }
  
  export interface SegmentMigrationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentMigrationToSavedSearchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentMigrationToSegmentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentValueConnectionTypeResolver<TParent = any> {
    edges?: SegmentValueConnectionToEdgesResolver<TParent>;
    nodes?: SegmentValueConnectionToNodesResolver<TParent>;
    pageInfo?: SegmentValueConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SegmentValueConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentValueConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentValueConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentValueEdgeTypeResolver<TParent = any> {
    cursor?: SegmentValueEdgeToCursorResolver<TParent>;
    node?: SegmentValueEdgeToNodeResolver<TParent>;
  }
  
  export interface SegmentValueEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentValueEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentValueTypeResolver<TParent = any> {
    localizedValue?: SegmentValueToLocalizedValueResolver<TParent>;
    queryName?: SegmentValueToQueryNameResolver<TParent>;
  }
  
  export interface SegmentValueToLocalizedValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentValueToQueryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentConnectionTypeResolver<TParent = any> {
    edges?: SegmentConnectionToEdgesResolver<TParent>;
    nodes?: SegmentConnectionToNodesResolver<TParent>;
    pageInfo?: SegmentConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SegmentConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEdgeTypeResolver<TParent = any> {
    cursor?: SegmentEdgeToCursorResolver<TParent>;
    node?: SegmentEdgeToNodeResolver<TParent>;
  }
  
  export interface SegmentEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ServerPixelTypeResolver<TParent = any> {
    id?: ServerPixelToIdResolver<TParent>;
    status?: ServerPixelToStatusResolver<TParent>;
    webhookEndpointAddress?: ServerPixelToWebhookEndpointAddressResolver<TParent>;
  }
  
  export interface ServerPixelToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ServerPixelToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ServerPixelToWebhookEndpointAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopBillingPreferencesTypeResolver<TParent = any> {
    currency?: ShopBillingPreferencesToCurrencyResolver<TParent>;
  }
  
  export interface ShopBillingPreferencesToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopLocaleTypeResolver<TParent = any> {
    locale?: ShopLocaleToLocaleResolver<TParent>;
    marketWebPresences?: ShopLocaleToMarketWebPresencesResolver<TParent>;
    name?: ShopLocaleToNameResolver<TParent>;
    primary?: ShopLocaleToPrimaryResolver<TParent>;
    published?: ShopLocaleToPublishedResolver<TParent>;
  }
  
  export interface ShopLocaleToLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopLocaleToMarketWebPresencesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopLocaleToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopLocaleToPrimaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopLocaleToPublishedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionConnectionTypeResolver<TParent = any> {
    edges?: ShopifyFunctionConnectionToEdgesResolver<TParent>;
    nodes?: ShopifyFunctionConnectionToNodesResolver<TParent>;
    pageInfo?: ShopifyFunctionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ShopifyFunctionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionEdgeTypeResolver<TParent = any> {
    cursor?: ShopifyFunctionEdgeToCursorResolver<TParent>;
    node?: ShopifyFunctionEdgeToNodeResolver<TParent>;
  }
  
  export interface ShopifyFunctionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyFunctionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountTypeResolver<TParent = any> {
    activated?: ShopifyPaymentsAccountToActivatedResolver<TParent>;
    balance?: ShopifyPaymentsAccountToBalanceResolver<TParent>;
    balanceTransactions?: ShopifyPaymentsAccountToBalanceTransactionsResolver<TParent>;
    bankAccounts?: ShopifyPaymentsAccountToBankAccountsResolver<TParent>;
    chargeStatementDescriptor?: ShopifyPaymentsAccountToChargeStatementDescriptorResolver<TParent>;
    chargeStatementDescriptors?: ShopifyPaymentsAccountToChargeStatementDescriptorsResolver<TParent>;
    country?: ShopifyPaymentsAccountToCountryResolver<TParent>;
    defaultCurrency?: ShopifyPaymentsAccountToDefaultCurrencyResolver<TParent>;
    disputes?: ShopifyPaymentsAccountToDisputesResolver<TParent>;
    fraudSettings?: ShopifyPaymentsAccountToFraudSettingsResolver<TParent>;
    id?: ShopifyPaymentsAccountToIdResolver<TParent>;
    notificationSettings?: ShopifyPaymentsAccountToNotificationSettingsResolver<TParent>;
    onboardable?: ShopifyPaymentsAccountToOnboardableResolver<TParent>;
    payoutSchedule?: ShopifyPaymentsAccountToPayoutScheduleResolver<TParent>;
    payoutStatementDescriptor?: ShopifyPaymentsAccountToPayoutStatementDescriptorResolver<TParent>;
    payouts?: ShopifyPaymentsAccountToPayoutsResolver<TParent>;
    permittedVerificationDocuments?: ShopifyPaymentsAccountToPermittedVerificationDocumentsResolver<TParent>;
    verifications?: ShopifyPaymentsAccountToVerificationsResolver<TParent>;
  }
  
  export interface ShopifyPaymentsAccountToActivatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToBalanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToBalanceTransactionsArgs {
    hideTransfers?: boolean;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: BalanceTransactionSortKeys;
    query?: string;
    savedSearchId?: string;
  }
  export interface ShopifyPaymentsAccountToBalanceTransactionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopifyPaymentsAccountToBalanceTransactionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToBankAccountsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopifyPaymentsAccountToBankAccountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopifyPaymentsAccountToBankAccountsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToChargeStatementDescriptorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToChargeStatementDescriptorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToDefaultCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToDisputesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface ShopifyPaymentsAccountToDisputesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopifyPaymentsAccountToDisputesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToFraudSettingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToNotificationSettingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToOnboardableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToPayoutScheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToPayoutStatementDescriptorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToPayoutsArgs {
    transactionType?: ShopifyPaymentsPayoutTransactionType;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopifyPaymentsAccountToPayoutsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopifyPaymentsAccountToPayoutsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToPermittedVerificationDocumentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAccountToVerificationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBalanceTransactionConnectionTypeResolver<TParent = any> {
    edges?: ShopifyPaymentsBalanceTransactionConnectionToEdgesResolver<TParent>;
    nodes?: ShopifyPaymentsBalanceTransactionConnectionToNodesResolver<TParent>;
    pageInfo?: ShopifyPaymentsBalanceTransactionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ShopifyPaymentsBalanceTransactionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBalanceTransactionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBalanceTransactionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBalanceTransactionEdgeTypeResolver<TParent = any> {
    cursor?: ShopifyPaymentsBalanceTransactionEdgeToCursorResolver<TParent>;
    node?: ShopifyPaymentsBalanceTransactionEdgeToNodeResolver<TParent>;
  }
  
  export interface ShopifyPaymentsBalanceTransactionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBalanceTransactionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBalanceTransactionTypeResolver<TParent = any> {
    adjustmentsOrders?: ShopifyPaymentsBalanceTransactionToAdjustmentsOrdersResolver<TParent>;
    id?: ShopifyPaymentsBalanceTransactionToIdResolver<TParent>;
    net?: ShopifyPaymentsBalanceTransactionToNetResolver<TParent>;
    transactionDate?: ShopifyPaymentsBalanceTransactionToTransactionDateResolver<TParent>;
  }
  
  export interface ShopifyPaymentsBalanceTransactionToAdjustmentsOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBalanceTransactionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBalanceTransactionToNetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBalanceTransactionToTransactionDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAdjustmentOrderTypeResolver<TParent = any> {
    amount?: ShopifyPaymentsAdjustmentOrderToAmountResolver<TParent>;
    link?: ShopifyPaymentsAdjustmentOrderToLinkResolver<TParent>;
    name?: ShopifyPaymentsAdjustmentOrderToNameResolver<TParent>;
  }
  
  export interface ShopifyPaymentsAdjustmentOrderToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAdjustmentOrderToLinkResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsAdjustmentOrderToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountConnectionTypeResolver<TParent = any> {
    edges?: ShopifyPaymentsBankAccountConnectionToEdgesResolver<TParent>;
    nodes?: ShopifyPaymentsBankAccountConnectionToNodesResolver<TParent>;
    pageInfo?: ShopifyPaymentsBankAccountConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ShopifyPaymentsBankAccountConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountEdgeTypeResolver<TParent = any> {
    cursor?: ShopifyPaymentsBankAccountEdgeToCursorResolver<TParent>;
    node?: ShopifyPaymentsBankAccountEdgeToNodeResolver<TParent>;
  }
  
  export interface ShopifyPaymentsBankAccountEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountTypeResolver<TParent = any> {
    accountNumber?: ShopifyPaymentsBankAccountToAccountNumberResolver<TParent>;
    accountNumberLastDigits?: ShopifyPaymentsBankAccountToAccountNumberLastDigitsResolver<TParent>;
    bankName?: ShopifyPaymentsBankAccountToBankNameResolver<TParent>;
    country?: ShopifyPaymentsBankAccountToCountryResolver<TParent>;
    createdAt?: ShopifyPaymentsBankAccountToCreatedAtResolver<TParent>;
    currency?: ShopifyPaymentsBankAccountToCurrencyResolver<TParent>;
    id?: ShopifyPaymentsBankAccountToIdResolver<TParent>;
    payouts?: ShopifyPaymentsBankAccountToPayoutsResolver<TParent>;
    routingNumber?: ShopifyPaymentsBankAccountToRoutingNumberResolver<TParent>;
    status?: ShopifyPaymentsBankAccountToStatusResolver<TParent>;
  }
  
  export interface ShopifyPaymentsBankAccountToAccountNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountToAccountNumberLastDigitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountToBankNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountToCountryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountToPayoutsArgs {
    transactionType?: ShopifyPaymentsPayoutTransactionType;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ShopifyPaymentsBankAccountToPayoutsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ShopifyPaymentsBankAccountToPayoutsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountToRoutingNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsBankAccountToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutConnectionTypeResolver<TParent = any> {
    edges?: ShopifyPaymentsPayoutConnectionToEdgesResolver<TParent>;
    nodes?: ShopifyPaymentsPayoutConnectionToNodesResolver<TParent>;
    pageInfo?: ShopifyPaymentsPayoutConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ShopifyPaymentsPayoutConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutEdgeTypeResolver<TParent = any> {
    cursor?: ShopifyPaymentsPayoutEdgeToCursorResolver<TParent>;
    node?: ShopifyPaymentsPayoutEdgeToNodeResolver<TParent>;
  }
  
  export interface ShopifyPaymentsPayoutEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutTypeResolver<TParent = any> {
    bankAccount?: ShopifyPaymentsPayoutToBankAccountResolver<TParent>;
    gross?: ShopifyPaymentsPayoutToGrossResolver<TParent>;
    id?: ShopifyPaymentsPayoutToIdResolver<TParent>;
    issuedAt?: ShopifyPaymentsPayoutToIssuedAtResolver<TParent>;
    legacyResourceId?: ShopifyPaymentsPayoutToLegacyResourceIdResolver<TParent>;
    net?: ShopifyPaymentsPayoutToNetResolver<TParent>;
    status?: ShopifyPaymentsPayoutToStatusResolver<TParent>;
    summary?: ShopifyPaymentsPayoutToSummaryResolver<TParent>;
    transactionType?: ShopifyPaymentsPayoutToTransactionTypeResolver<TParent>;
  }
  
  export interface ShopifyPaymentsPayoutToBankAccountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutToGrossResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutToIssuedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutToNetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutToSummaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutToTransactionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutSummaryTypeResolver<TParent = any> {
    adjustmentsFee?: ShopifyPaymentsPayoutSummaryToAdjustmentsFeeResolver<TParent>;
    adjustmentsGross?: ShopifyPaymentsPayoutSummaryToAdjustmentsGrossResolver<TParent>;
    chargesFee?: ShopifyPaymentsPayoutSummaryToChargesFeeResolver<TParent>;
    chargesGross?: ShopifyPaymentsPayoutSummaryToChargesGrossResolver<TParent>;
    refundsFee?: ShopifyPaymentsPayoutSummaryToRefundsFeeResolver<TParent>;
    refundsFeeGross?: ShopifyPaymentsPayoutSummaryToRefundsFeeGrossResolver<TParent>;
    reservedFundsFee?: ShopifyPaymentsPayoutSummaryToReservedFundsFeeResolver<TParent>;
    reservedFundsGross?: ShopifyPaymentsPayoutSummaryToReservedFundsGrossResolver<TParent>;
    retriedPayoutsFee?: ShopifyPaymentsPayoutSummaryToRetriedPayoutsFeeResolver<TParent>;
    retriedPayoutsGross?: ShopifyPaymentsPayoutSummaryToRetriedPayoutsGrossResolver<TParent>;
  }
  
  export interface ShopifyPaymentsPayoutSummaryToAdjustmentsFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutSummaryToAdjustmentsGrossResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutSummaryToChargesFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutSummaryToChargesGrossResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutSummaryToRefundsFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutSummaryToRefundsFeeGrossResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutSummaryToReservedFundsFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutSummaryToReservedFundsGrossResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutSummaryToRetriedPayoutsFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutSummaryToRetriedPayoutsGrossResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsChargeStatementDescriptorTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'ShopifyPaymentsDefaultChargeStatementDescriptor' | 'ShopifyPaymentsJpChargeStatementDescriptor';
  }
  export interface ShopifyPaymentsDisputeConnectionTypeResolver<TParent = any> {
    edges?: ShopifyPaymentsDisputeConnectionToEdgesResolver<TParent>;
    nodes?: ShopifyPaymentsDisputeConnectionToNodesResolver<TParent>;
    pageInfo?: ShopifyPaymentsDisputeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ShopifyPaymentsDisputeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEdgeTypeResolver<TParent = any> {
    cursor?: ShopifyPaymentsDisputeEdgeToCursorResolver<TParent>;
    node?: ShopifyPaymentsDisputeEdgeToNodeResolver<TParent>;
  }
  
  export interface ShopifyPaymentsDisputeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDisputeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsFraudSettingsTypeResolver<TParent = any> {
    declineChargeOnAvsFailure?: ShopifyPaymentsFraudSettingsToDeclineChargeOnAvsFailureResolver<TParent>;
    declineChargeOnCvcFailure?: ShopifyPaymentsFraudSettingsToDeclineChargeOnCvcFailureResolver<TParent>;
  }
  
  export interface ShopifyPaymentsFraudSettingsToDeclineChargeOnAvsFailureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsFraudSettingsToDeclineChargeOnCvcFailureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsNotificationSettingsTypeResolver<TParent = any> {
    payouts?: ShopifyPaymentsNotificationSettingsToPayoutsResolver<TParent>;
  }
  
  export interface ShopifyPaymentsNotificationSettingsToPayoutsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutScheduleTypeResolver<TParent = any> {
    interval?: ShopifyPaymentsPayoutScheduleToIntervalResolver<TParent>;
    monthlyAnchor?: ShopifyPaymentsPayoutScheduleToMonthlyAnchorResolver<TParent>;
    weeklyAnchor?: ShopifyPaymentsPayoutScheduleToWeeklyAnchorResolver<TParent>;
  }
  
  export interface ShopifyPaymentsPayoutScheduleToIntervalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutScheduleToMonthlyAnchorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsPayoutScheduleToWeeklyAnchorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsVerificationDocumentTypeResolver<TParent = any> {
    backRequired?: ShopifyPaymentsVerificationDocumentToBackRequiredResolver<TParent>;
    frontRequired?: ShopifyPaymentsVerificationDocumentToFrontRequiredResolver<TParent>;
    type?: ShopifyPaymentsVerificationDocumentToTypeResolver<TParent>;
  }
  
  export interface ShopifyPaymentsVerificationDocumentToBackRequiredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsVerificationDocumentToFrontRequiredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsVerificationDocumentToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsVerificationTypeResolver<TParent = any> {
    id?: ShopifyPaymentsVerificationToIdResolver<TParent>;
    status?: ShopifyPaymentsVerificationToStatusResolver<TParent>;
    subject?: ShopifyPaymentsVerificationToSubjectResolver<TParent>;
  }
  
  export interface ShopifyPaymentsVerificationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsVerificationToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsVerificationToSubjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsVerificationSubjectTypeResolver<TParent = any> {
    familyName?: ShopifyPaymentsVerificationSubjectToFamilyNameResolver<TParent>;
    givenName?: ShopifyPaymentsVerificationSubjectToGivenNameResolver<TParent>;
  }
  
  export interface ShopifyPaymentsVerificationSubjectToFamilyNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsVerificationSubjectToGivenNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyqlResponseTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'PolarisVizResponse' | 'TableResponse';
  }
  export interface ParseErrorTypeResolver<TParent = any> {
    code?: ParseErrorToCodeResolver<TParent>;
    message?: ParseErrorToMessageResolver<TParent>;
    range?: ParseErrorToRangeResolver<TParent>;
  }
  
  export interface ParseErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ParseErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ParseErrorToRangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ParseErrorRangeTypeResolver<TParent = any> {
    end?: ParseErrorRangeToEndResolver<TParent>;
    start?: ParseErrorRangeToStartResolver<TParent>;
  }
  
  export interface ParseErrorRangeToEndResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ParseErrorRangeToStartResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ErrorPositionTypeResolver<TParent = any> {
    character?: ErrorPositionToCharacterResolver<TParent>;
    line?: ErrorPositionToLineResolver<TParent>;
  }
  
  export interface ErrorPositionToCharacterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ErrorPositionToLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TableDataTypeResolver<TParent = any> {
    columns?: TableDataToColumnsResolver<TParent>;
    rowData?: TableDataToRowDataResolver<TParent>;
    unformattedData?: TableDataToUnformattedDataResolver<TParent>;
  }
  
  export interface TableDataToColumnsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TableDataToRowDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TableDataToUnformattedDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TableDataColumnTypeResolver<TParent = any> {
    comparedTo?: TableDataColumnToComparedToResolver<TParent>;
    dataType?: TableDataColumnToDataTypeResolver<TParent>;
    displayName?: TableDataColumnToDisplayNameResolver<TParent>;
    name?: TableDataColumnToNameResolver<TParent>;
  }
  
  export interface TableDataColumnToComparedToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TableDataColumnToDataTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TableDataColumnToDisplayNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TableDataColumnToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateConnectionTypeResolver<TParent = any> {
    edges?: StandardMetafieldDefinitionTemplateConnectionToEdgesResolver<TParent>;
    nodes?: StandardMetafieldDefinitionTemplateConnectionToNodesResolver<TParent>;
    pageInfo?: StandardMetafieldDefinitionTemplateConnectionToPageInfoResolver<TParent>;
  }
  
  export interface StandardMetafieldDefinitionTemplateConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateEdgeTypeResolver<TParent = any> {
    cursor?: StandardMetafieldDefinitionTemplateEdgeToCursorResolver<TParent>;
    node?: StandardMetafieldDefinitionTemplateEdgeToNodeResolver<TParent>;
  }
  
  export interface StandardMetafieldDefinitionTemplateEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionTemplateEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleTypeResolver<TParent = any> {
    billingAttemptExpectedDate?: SubscriptionBillingCycleToBillingAttemptExpectedDateResolver<TParent>;
    billingAttempts?: SubscriptionBillingCycleToBillingAttemptsResolver<TParent>;
    cycleEndAt?: SubscriptionBillingCycleToCycleEndAtResolver<TParent>;
    cycleIndex?: SubscriptionBillingCycleToCycleIndexResolver<TParent>;
    cycleStartAt?: SubscriptionBillingCycleToCycleStartAtResolver<TParent>;
    edited?: SubscriptionBillingCycleToEditedResolver<TParent>;
    editedContract?: SubscriptionBillingCycleToEditedContractResolver<TParent>;
    skipped?: SubscriptionBillingCycleToSkippedResolver<TParent>;
    sourceContract?: SubscriptionBillingCycleToSourceContractResolver<TParent>;
    status?: SubscriptionBillingCycleToStatusResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleToBillingAttemptExpectedDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleToBillingAttemptsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionBillingCycleToBillingAttemptsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionBillingCycleToBillingAttemptsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleToCycleEndAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleToCycleIndexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleToCycleStartAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleToEditedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleToEditedContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleToSkippedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleToSourceContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractTypeResolver<TParent = any> {
    app?: SubscriptionBillingCycleEditedContractToAppResolver<TParent>;
    appAdminUrl?: SubscriptionBillingCycleEditedContractToAppAdminUrlResolver<TParent>;
    billingCycles?: SubscriptionBillingCycleEditedContractToBillingCyclesResolver<TParent>;
    createdAt?: SubscriptionBillingCycleEditedContractToCreatedAtResolver<TParent>;
    currencyCode?: SubscriptionBillingCycleEditedContractToCurrencyCodeResolver<TParent>;
    customAttributes?: SubscriptionBillingCycleEditedContractToCustomAttributesResolver<TParent>;
    customer?: SubscriptionBillingCycleEditedContractToCustomerResolver<TParent>;
    customerPaymentMethod?: SubscriptionBillingCycleEditedContractToCustomerPaymentMethodResolver<TParent>;
    deliveryMethod?: SubscriptionBillingCycleEditedContractToDeliveryMethodResolver<TParent>;
    deliveryPrice?: SubscriptionBillingCycleEditedContractToDeliveryPriceResolver<TParent>;
    discounts?: SubscriptionBillingCycleEditedContractToDiscountsResolver<TParent>;
    lineCount?: SubscriptionBillingCycleEditedContractToLineCountResolver<TParent>;
    lines?: SubscriptionBillingCycleEditedContractToLinesResolver<TParent>;
    note?: SubscriptionBillingCycleEditedContractToNoteResolver<TParent>;
    orders?: SubscriptionBillingCycleEditedContractToOrdersResolver<TParent>;
    updatedAt?: SubscriptionBillingCycleEditedContractToUpdatedAtResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleEditedContractToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToAppAdminUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToBillingCyclesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: SubscriptionBillingCyclesSortKeys;
  }
  export interface SubscriptionBillingCycleEditedContractToBillingCyclesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionBillingCycleEditedContractToBillingCyclesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToCustomerPaymentMethodArgs {
    showRevoked?: boolean;
  }
  export interface SubscriptionBillingCycleEditedContractToCustomerPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionBillingCycleEditedContractToCustomerPaymentMethodArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToDeliveryMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToDeliveryPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToDiscountsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionBillingCycleEditedContractToDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionBillingCycleEditedContractToDiscountsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToLineCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToLinesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionBillingCycleEditedContractToLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionBillingCycleEditedContractToLinesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToOrdersArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionBillingCycleEditedContractToOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionBillingCycleEditedContractToOrdersArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditedContractToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleConnectionTypeResolver<TParent = any> {
    edges?: SubscriptionBillingCycleConnectionToEdgesResolver<TParent>;
    nodes?: SubscriptionBillingCycleConnectionToNodesResolver<TParent>;
    pageInfo?: SubscriptionBillingCycleConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEdgeTypeResolver<TParent = any> {
    cursor?: SubscriptionBillingCycleEdgeToCursorResolver<TParent>;
    node?: SubscriptionBillingCycleEdgeToNodeResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftTypeResolver<TParent = any> {
    billingCycle?: SubscriptionDraftToBillingCycleResolver<TParent>;
    billingPolicy?: SubscriptionDraftToBillingPolicyResolver<TParent>;
    concatenatedBillingCycles?: SubscriptionDraftToConcatenatedBillingCyclesResolver<TParent>;
    currencyCode?: SubscriptionDraftToCurrencyCodeResolver<TParent>;
    customAttributes?: SubscriptionDraftToCustomAttributesResolver<TParent>;
    customer?: SubscriptionDraftToCustomerResolver<TParent>;
    customerPaymentMethod?: SubscriptionDraftToCustomerPaymentMethodResolver<TParent>;
    deliveryMethod?: SubscriptionDraftToDeliveryMethodResolver<TParent>;
    deliveryOptions?: SubscriptionDraftToDeliveryOptionsResolver<TParent>;
    deliveryPolicy?: SubscriptionDraftToDeliveryPolicyResolver<TParent>;
    deliveryPrice?: SubscriptionDraftToDeliveryPriceResolver<TParent>;
    discounts?: SubscriptionDraftToDiscountsResolver<TParent>;
    discountsAdded?: SubscriptionDraftToDiscountsAddedResolver<TParent>;
    discountsRemoved?: SubscriptionDraftToDiscountsRemovedResolver<TParent>;
    discountsUpdated?: SubscriptionDraftToDiscountsUpdatedResolver<TParent>;
    id?: SubscriptionDraftToIdResolver<TParent>;
    lines?: SubscriptionDraftToLinesResolver<TParent>;
    linesAdded?: SubscriptionDraftToLinesAddedResolver<TParent>;
    linesRemoved?: SubscriptionDraftToLinesRemovedResolver<TParent>;
    nextBillingDate?: SubscriptionDraftToNextBillingDateResolver<TParent>;
    note?: SubscriptionDraftToNoteResolver<TParent>;
    originalContract?: SubscriptionDraftToOriginalContractResolver<TParent>;
    shippingOptions?: SubscriptionDraftToShippingOptionsResolver<TParent>;
    status?: SubscriptionDraftToStatusResolver<TParent>;
  }
  
  export interface SubscriptionDraftToBillingCycleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToBillingPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToConcatenatedBillingCyclesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: SubscriptionBillingCyclesSortKeys;
  }
  export interface SubscriptionDraftToConcatenatedBillingCyclesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDraftToConcatenatedBillingCyclesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToCustomerPaymentMethodArgs {
    showRevoked?: boolean;
  }
  export interface SubscriptionDraftToCustomerPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDraftToCustomerPaymentMethodArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToDeliveryMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToDeliveryOptionsArgs {
    deliveryAddress?: MailingAddressInput;
  }
  export interface SubscriptionDraftToDeliveryOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDraftToDeliveryOptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToDeliveryPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToDeliveryPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToDiscountsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionDraftToDiscountsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDraftToDiscountsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToDiscountsAddedArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionDraftToDiscountsAddedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDraftToDiscountsAddedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToDiscountsRemovedArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionDraftToDiscountsRemovedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDraftToDiscountsRemovedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToDiscountsUpdatedArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionDraftToDiscountsUpdatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDraftToDiscountsUpdatedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToLinesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionDraftToLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDraftToLinesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToLinesAddedArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionDraftToLinesAddedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDraftToLinesAddedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToLinesRemovedArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface SubscriptionDraftToLinesRemovedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDraftToLinesRemovedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToNextBillingDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToNoteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToOriginalContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToShippingOptionsArgs {
    deliveryAddress?: MailingAddressInput;
  }
  export interface SubscriptionDraftToShippingOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubscriptionDraftToShippingOptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryOptionResultTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SubscriptionDeliveryOptionResultFailure' | 'SubscriptionDeliveryOptionResultSuccess';
  }
  export interface SubscriptionDeliveryOptionResultFailureTypeResolver<TParent = any> {
    message?: SubscriptionDeliveryOptionResultFailureToMessageResolver<TParent>;
  }
  
  export interface SubscriptionDeliveryOptionResultFailureToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryOptionResultSuccessTypeResolver<TParent = any> {
    deliveryOptions?: SubscriptionDeliveryOptionResultSuccessToDeliveryOptionsResolver<TParent>;
  }
  
  export interface SubscriptionDeliveryOptionResultSuccessToDeliveryOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDeliveryOptionTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SubscriptionLocalDeliveryOption' | 'SubscriptionPickupOption' | 'SubscriptionShippingOption';
  }
  export interface SubscriptionLocalDeliveryOptionTypeResolver<TParent = any> {
    code?: SubscriptionLocalDeliveryOptionToCodeResolver<TParent>;
    description?: SubscriptionLocalDeliveryOptionToDescriptionResolver<TParent>;
    phoneRequired?: SubscriptionLocalDeliveryOptionToPhoneRequiredResolver<TParent>;
    presentmentTitle?: SubscriptionLocalDeliveryOptionToPresentmentTitleResolver<TParent>;
    price?: SubscriptionLocalDeliveryOptionToPriceResolver<TParent>;
    title?: SubscriptionLocalDeliveryOptionToTitleResolver<TParent>;
  }
  
  export interface SubscriptionLocalDeliveryOptionToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLocalDeliveryOptionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLocalDeliveryOptionToPhoneRequiredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLocalDeliveryOptionToPresentmentTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLocalDeliveryOptionToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionLocalDeliveryOptionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionPickupOptionTypeResolver<TParent = any> {
    code?: SubscriptionPickupOptionToCodeResolver<TParent>;
    description?: SubscriptionPickupOptionToDescriptionResolver<TParent>;
    location?: SubscriptionPickupOptionToLocationResolver<TParent>;
    phoneRequired?: SubscriptionPickupOptionToPhoneRequiredResolver<TParent>;
    pickupTime?: SubscriptionPickupOptionToPickupTimeResolver<TParent>;
    presentmentTitle?: SubscriptionPickupOptionToPresentmentTitleResolver<TParent>;
    price?: SubscriptionPickupOptionToPriceResolver<TParent>;
    title?: SubscriptionPickupOptionToTitleResolver<TParent>;
  }
  
  export interface SubscriptionPickupOptionToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionPickupOptionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionPickupOptionToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionPickupOptionToPhoneRequiredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionPickupOptionToPickupTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionPickupOptionToPresentmentTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionPickupOptionToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionPickupOptionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionShippingOptionTypeResolver<TParent = any> {
    carrierService?: SubscriptionShippingOptionToCarrierServiceResolver<TParent>;
    code?: SubscriptionShippingOptionToCodeResolver<TParent>;
    description?: SubscriptionShippingOptionToDescriptionResolver<TParent>;
    phoneRequired?: SubscriptionShippingOptionToPhoneRequiredResolver<TParent>;
    presentmentTitle?: SubscriptionShippingOptionToPresentmentTitleResolver<TParent>;
    price?: SubscriptionShippingOptionToPriceResolver<TParent>;
    title?: SubscriptionShippingOptionToTitleResolver<TParent>;
  }
  
  export interface SubscriptionShippingOptionToCarrierServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionShippingOptionToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionShippingOptionToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionShippingOptionToPhoneRequiredResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionShippingOptionToPresentmentTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionShippingOptionToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionShippingOptionToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountConnectionTypeResolver<TParent = any> {
    edges?: SubscriptionDiscountConnectionToEdgesResolver<TParent>;
    nodes?: SubscriptionDiscountConnectionToNodesResolver<TParent>;
    pageInfo?: SubscriptionDiscountConnectionToPageInfoResolver<TParent>;
  }
  
  export interface SubscriptionDiscountConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountEdgeTypeResolver<TParent = any> {
    cursor?: SubscriptionDiscountEdgeToCursorResolver<TParent>;
    node?: SubscriptionDiscountEdgeToNodeResolver<TParent>;
  }
  
  export interface SubscriptionDiscountEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDiscountEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionShippingOptionResultTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'SubscriptionShippingOptionResultFailure' | 'SubscriptionShippingOptionResultSuccess';
  }
  export interface SubscriptionShippingOptionResultFailureTypeResolver<TParent = any> {
    message?: SubscriptionShippingOptionResultFailureToMessageResolver<TParent>;
  }
  
  export interface SubscriptionShippingOptionResultFailureToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionShippingOptionResultSuccessTypeResolver<TParent = any> {
    shippingOptions?: SubscriptionShippingOptionResultSuccessToShippingOptionsResolver<TParent>;
  }
  
  export interface SubscriptionShippingOptionResultSuccessToShippingOptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionConnectionTypeResolver<TParent = any> {
    edges?: TenderTransactionConnectionToEdgesResolver<TParent>;
    nodes?: TenderTransactionConnectionToNodesResolver<TParent>;
    pageInfo?: TenderTransactionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface TenderTransactionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionEdgeTypeResolver<TParent = any> {
    cursor?: TenderTransactionEdgeToCursorResolver<TParent>;
    node?: TenderTransactionEdgeToNodeResolver<TParent>;
  }
  
  export interface TenderTransactionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionTypeResolver<TParent = any> {
    amount?: TenderTransactionToAmountResolver<TParent>;
    id?: TenderTransactionToIdResolver<TParent>;
    paymentMethod?: TenderTransactionToPaymentMethodResolver<TParent>;
    processedAt?: TenderTransactionToProcessedAtResolver<TParent>;
    remoteReference?: TenderTransactionToRemoteReferenceResolver<TParent>;
    test?: TenderTransactionToTestResolver<TParent>;
    transactionDetails?: TenderTransactionToTransactionDetailsResolver<TParent>;
    user?: TenderTransactionToUserResolver<TParent>;
  }
  
  export interface TenderTransactionToAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionToPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionToProcessedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionToRemoteReferenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionToTestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionToTransactionDetailsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionDetailsTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'TenderTransactionCreditCardDetails';
  }
  export interface TenderTransactionCreditCardDetailsTypeResolver<TParent = any> {
    creditCardCompany?: TenderTransactionCreditCardDetailsToCreditCardCompanyResolver<TParent>;
    creditCardNumber?: TenderTransactionCreditCardDetailsToCreditCardNumberResolver<TParent>;
  }
  
  export interface TenderTransactionCreditCardDetailsToCreditCardCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TenderTransactionCreditCardDetailsToCreditCardNumberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableResourceTypeResolver<TParent = any> {
    resourceId?: TranslatableResourceToResourceIdResolver<TParent>;
    translatableContent?: TranslatableResourceToTranslatableContentResolver<TParent>;
    translations?: TranslatableResourceToTranslationsResolver<TParent>;
  }
  
  export interface TranslatableResourceToResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableResourceToTranslatableContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableResourceToTranslationsArgs {
    locale: string;
    outdated?: boolean;
    marketId?: string;
  }
  export interface TranslatableResourceToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: TranslatableResourceToTranslationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableContentTypeResolver<TParent = any> {
    digest?: TranslatableContentToDigestResolver<TParent>;
    key?: TranslatableContentToKeyResolver<TParent>;
    locale?: TranslatableContentToLocaleResolver<TParent>;
    type?: TranslatableContentToTypeResolver<TParent>;
    value?: TranslatableContentToValueResolver<TParent>;
  }
  
  export interface TranslatableContentToDigestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableContentToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableContentToLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableContentToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableContentToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableResourceConnectionTypeResolver<TParent = any> {
    edges?: TranslatableResourceConnectionToEdgesResolver<TParent>;
    nodes?: TranslatableResourceConnectionToNodesResolver<TParent>;
    pageInfo?: TranslatableResourceConnectionToPageInfoResolver<TParent>;
  }
  
  export interface TranslatableResourceConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableResourceConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableResourceConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableResourceEdgeTypeResolver<TParent = any> {
    cursor?: TranslatableResourceEdgeToCursorResolver<TParent>;
    node?: TranslatableResourceEdgeToNodeResolver<TParent>;
  }
  
  export interface TranslatableResourceEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslatableResourceEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectTypeResolver<TParent = any> {
    id?: UrlRedirectToIdResolver<TParent>;
    path?: UrlRedirectToPathResolver<TParent>;
    target?: UrlRedirectToTargetResolver<TParent>;
  }
  
  export interface UrlRedirectToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectToPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectToTargetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportTypeResolver<TParent = any> {
    count?: UrlRedirectImportToCountResolver<TParent>;
    createdCount?: UrlRedirectImportToCreatedCountResolver<TParent>;
    failedCount?: UrlRedirectImportToFailedCountResolver<TParent>;
    finished?: UrlRedirectImportToFinishedResolver<TParent>;
    finishedAt?: UrlRedirectImportToFinishedAtResolver<TParent>;
    id?: UrlRedirectImportToIdResolver<TParent>;
    previewRedirects?: UrlRedirectImportToPreviewRedirectsResolver<TParent>;
    updatedCount?: UrlRedirectImportToUpdatedCountResolver<TParent>;
  }
  
  export interface UrlRedirectImportToCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportToCreatedCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportToFailedCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportToFinishedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportToFinishedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportToPreviewRedirectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportToUpdatedCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportPreviewTypeResolver<TParent = any> {
    path?: UrlRedirectImportPreviewToPathResolver<TParent>;
    target?: UrlRedirectImportPreviewToTargetResolver<TParent>;
  }
  
  export interface UrlRedirectImportPreviewToPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportPreviewToTargetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectConnectionTypeResolver<TParent = any> {
    edges?: UrlRedirectConnectionToEdgesResolver<TParent>;
    nodes?: UrlRedirectConnectionToNodesResolver<TParent>;
    pageInfo?: UrlRedirectConnectionToPageInfoResolver<TParent>;
  }
  
  export interface UrlRedirectConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectEdgeTypeResolver<TParent = any> {
    cursor?: UrlRedirectEdgeToCursorResolver<TParent>;
    node?: UrlRedirectEdgeToNodeResolver<TParent>;
  }
  
  export interface UrlRedirectEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationTypeResolver<TParent = any> {
    blockOnFailure?: ValidationToBlockOnFailureResolver<TParent>;
    enabled?: ValidationToEnabledResolver<TParent>;
    errorHistory?: ValidationToErrorHistoryResolver<TParent>;
    id?: ValidationToIdResolver<TParent>;
    metafield?: ValidationToMetafieldResolver<TParent>;
    metafieldDefinitions?: ValidationToMetafieldDefinitionsResolver<TParent>;
    metafields?: ValidationToMetafieldsResolver<TParent>;
    privateMetafield?: ValidationToPrivateMetafieldResolver<TParent>;
    privateMetafields?: ValidationToPrivateMetafieldsResolver<TParent>;
    shopifyFunction?: ValidationToShopifyFunctionResolver<TParent>;
    title?: ValidationToTitleResolver<TParent>;
  }
  
  export interface ValidationToBlockOnFailureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationToEnabledResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationToErrorHistoryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationToMetafieldArgs {
    namespace?: string;
    key: string;
  }
  export interface ValidationToMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ValidationToMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationToMetafieldDefinitionsArgs {
    namespace?: string;
    pinnedStatus?: MetafieldDefinitionPinnedStatus;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: MetafieldDefinitionSortKeys;
    query?: string;
  }
  export interface ValidationToMetafieldDefinitionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ValidationToMetafieldDefinitionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationToMetafieldsArgs {
    namespace?: string;
    keys?: Array<string>;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ValidationToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ValidationToMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationToPrivateMetafieldArgs {
    namespace: string;
    key: string;
  }
  export interface ValidationToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ValidationToPrivateMetafieldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationToPrivateMetafieldsArgs {
    namespace?: string;
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface ValidationToPrivateMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ValidationToPrivateMetafieldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationToShopifyFunctionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationConnectionTypeResolver<TParent = any> {
    edges?: ValidationConnectionToEdgesResolver<TParent>;
    nodes?: ValidationConnectionToNodesResolver<TParent>;
    pageInfo?: ValidationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface ValidationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationEdgeTypeResolver<TParent = any> {
    cursor?: ValidationEdgeToCursorResolver<TParent>;
    node?: ValidationEdgeToNodeResolver<TParent>;
  }
  
  export interface ValidationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebPixelTypeResolver<TParent = any> {
    id?: WebPixelToIdResolver<TParent>;
    settings?: WebPixelToSettingsResolver<TParent>;
  }
  
  export interface WebPixelToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebPixelToSettingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionTypeResolver<TParent = any> {
    apiVersion?: WebhookSubscriptionToApiVersionResolver<TParent>;
    callbackUrl?: WebhookSubscriptionToCallbackUrlResolver<TParent>;
    createdAt?: WebhookSubscriptionToCreatedAtResolver<TParent>;
    endpoint?: WebhookSubscriptionToEndpointResolver<TParent>;
    format?: WebhookSubscriptionToFormatResolver<TParent>;
    id?: WebhookSubscriptionToIdResolver<TParent>;
    includeFields?: WebhookSubscriptionToIncludeFieldsResolver<TParent>;
    legacyResourceId?: WebhookSubscriptionToLegacyResourceIdResolver<TParent>;
    metafieldNamespaces?: WebhookSubscriptionToMetafieldNamespacesResolver<TParent>;
    privateMetafieldNamespaces?: WebhookSubscriptionToPrivateMetafieldNamespacesResolver<TParent>;
    subTopic?: WebhookSubscriptionToSubTopicResolver<TParent>;
    topic?: WebhookSubscriptionToTopicResolver<TParent>;
    updatedAt?: WebhookSubscriptionToUpdatedAtResolver<TParent>;
  }
  
  export interface WebhookSubscriptionToApiVersionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToCallbackUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToEndpointResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToIncludeFieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToLegacyResourceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToMetafieldNamespacesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToPrivateMetafieldNamespacesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToSubTopicResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToTopicResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionToUpdatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionEndpointTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'WebhookEventBridgeEndpoint' | 'WebhookHttpEndpoint' | 'WebhookPubSubEndpoint';
  }
  export interface WebhookEventBridgeEndpointTypeResolver<TParent = any> {
    arn?: WebhookEventBridgeEndpointToArnResolver<TParent>;
  }
  
  export interface WebhookEventBridgeEndpointToArnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookHttpEndpointTypeResolver<TParent = any> {
    callbackUrl?: WebhookHttpEndpointToCallbackUrlResolver<TParent>;
  }
  
  export interface WebhookHttpEndpointToCallbackUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookPubSubEndpointTypeResolver<TParent = any> {
    pubSubProject?: WebhookPubSubEndpointToPubSubProjectResolver<TParent>;
    pubSubTopic?: WebhookPubSubEndpointToPubSubTopicResolver<TParent>;
  }
  
  export interface WebhookPubSubEndpointToPubSubProjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookPubSubEndpointToPubSubTopicResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionConnectionTypeResolver<TParent = any> {
    edges?: WebhookSubscriptionConnectionToEdgesResolver<TParent>;
    nodes?: WebhookSubscriptionConnectionToNodesResolver<TParent>;
    pageInfo?: WebhookSubscriptionConnectionToPageInfoResolver<TParent>;
  }
  
  export interface WebhookSubscriptionConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionEdgeTypeResolver<TParent = any> {
    cursor?: WebhookSubscriptionEdgeToCursorResolver<TParent>;
    node?: WebhookSubscriptionEdgeToNodeResolver<TParent>;
  }
  
  export interface WebhookSubscriptionEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationTypeResolver<TParent = any> {
    abandonmentEmailStateUpdate?: MutationToAbandonmentEmailStateUpdateResolver<TParent>;
    abandonmentUpdateActivitiesDeliveryStatuses?: MutationToAbandonmentUpdateActivitiesDeliveryStatusesResolver<TParent>;
    appPurchaseOneTimeCreate?: MutationToAppPurchaseOneTimeCreateResolver<TParent>;
    appSubscriptionCancel?: MutationToAppSubscriptionCancelResolver<TParent>;
    appSubscriptionCreate?: MutationToAppSubscriptionCreateResolver<TParent>;
    appSubscriptionLineItemUpdate?: MutationToAppSubscriptionLineItemUpdateResolver<TParent>;
    appSubscriptionTrialExtend?: MutationToAppSubscriptionTrialExtendResolver<TParent>;
    appUsageRecordCreate?: MutationToAppUsageRecordCreateResolver<TParent>;
    bulkOperationCancel?: MutationToBulkOperationCancelResolver<TParent>;
    bulkOperationRunMutation?: MutationToBulkOperationRunMutationResolver<TParent>;
    bulkOperationRunQuery?: MutationToBulkOperationRunQueryResolver<TParent>;
    bulkProductResourceFeedbackCreate?: MutationToBulkProductResourceFeedbackCreateResolver<TParent>;
    cartTransformCreate?: MutationToCartTransformCreateResolver<TParent>;
    cartTransformDelete?: MutationToCartTransformDeleteResolver<TParent>;
    catalogContextUpdate?: MutationToCatalogContextUpdateResolver<TParent>;
    catalogCreate?: MutationToCatalogCreateResolver<TParent>;
    catalogDelete?: MutationToCatalogDeleteResolver<TParent>;
    catalogUpdate?: MutationToCatalogUpdateResolver<TParent>;
    checkoutBrandingUpsert?: MutationToCheckoutBrandingUpsertResolver<TParent>;
    collectionAddProducts?: MutationToCollectionAddProductsResolver<TParent>;
    collectionAddProductsV2?: MutationToCollectionAddProductsV2Resolver<TParent>;
    collectionCreate?: MutationToCollectionCreateResolver<TParent>;
    collectionDelete?: MutationToCollectionDeleteResolver<TParent>;
    collectionPublish?: MutationToCollectionPublishResolver<TParent>;
    collectionRemoveProducts?: MutationToCollectionRemoveProductsResolver<TParent>;
    collectionReorderProducts?: MutationToCollectionReorderProductsResolver<TParent>;
    collectionUnpublish?: MutationToCollectionUnpublishResolver<TParent>;
    collectionUpdate?: MutationToCollectionUpdateResolver<TParent>;
    companiesDelete?: MutationToCompaniesDeleteResolver<TParent>;
    companyAddressDelete?: MutationToCompanyAddressDeleteResolver<TParent>;
    companyAssignCustomerAsContact?: MutationToCompanyAssignCustomerAsContactResolver<TParent>;
    companyAssignMainContact?: MutationToCompanyAssignMainContactResolver<TParent>;
    companyContactAssignRole?: MutationToCompanyContactAssignRoleResolver<TParent>;
    companyContactAssignRoles?: MutationToCompanyContactAssignRolesResolver<TParent>;
    companyContactCreate?: MutationToCompanyContactCreateResolver<TParent>;
    companyContactDelete?: MutationToCompanyContactDeleteResolver<TParent>;
    companyContactRemoveFromCompany?: MutationToCompanyContactRemoveFromCompanyResolver<TParent>;
    companyContactRevokeRole?: MutationToCompanyContactRevokeRoleResolver<TParent>;
    companyContactRevokeRoles?: MutationToCompanyContactRevokeRolesResolver<TParent>;
    companyContactSendWelcomeEmail?: MutationToCompanyContactSendWelcomeEmailResolver<TParent>;
    companyContactUpdate?: MutationToCompanyContactUpdateResolver<TParent>;
    companyContactsDelete?: MutationToCompanyContactsDeleteResolver<TParent>;
    companyCreate?: MutationToCompanyCreateResolver<TParent>;
    companyDelete?: MutationToCompanyDeleteResolver<TParent>;
    companyLocationAssignAddress?: MutationToCompanyLocationAssignAddressResolver<TParent>;
    companyLocationAssignRoles?: MutationToCompanyLocationAssignRolesResolver<TParent>;
    companyLocationAssignTaxExemptions?: MutationToCompanyLocationAssignTaxExemptionsResolver<TParent>;
    companyLocationCreate?: MutationToCompanyLocationCreateResolver<TParent>;
    companyLocationCreateTaxRegistration?: MutationToCompanyLocationCreateTaxRegistrationResolver<TParent>;
    companyLocationDelete?: MutationToCompanyLocationDeleteResolver<TParent>;
    companyLocationRevokeRoles?: MutationToCompanyLocationRevokeRolesResolver<TParent>;
    companyLocationRevokeTaxExemptions?: MutationToCompanyLocationRevokeTaxExemptionsResolver<TParent>;
    companyLocationRevokeTaxRegistration?: MutationToCompanyLocationRevokeTaxRegistrationResolver<TParent>;
    companyLocationUpdate?: MutationToCompanyLocationUpdateResolver<TParent>;
    companyLocationsDelete?: MutationToCompanyLocationsDeleteResolver<TParent>;
    companyRevokeMainContact?: MutationToCompanyRevokeMainContactResolver<TParent>;
    companyUpdate?: MutationToCompanyUpdateResolver<TParent>;
    customerAddTaxExemptions?: MutationToCustomerAddTaxExemptionsResolver<TParent>;
    customerCancelDataErasure?: MutationToCustomerCancelDataErasureResolver<TParent>;
    customerCreate?: MutationToCustomerCreateResolver<TParent>;
    customerDelete?: MutationToCustomerDeleteResolver<TParent>;
    customerEmailMarketingConsentUpdate?: MutationToCustomerEmailMarketingConsentUpdateResolver<TParent>;
    customerGenerateAccountActivationUrl?: MutationToCustomerGenerateAccountActivationUrlResolver<TParent>;
    customerMerge?: MutationToCustomerMergeResolver<TParent>;
    customerPaymentMethodCreateFromDuplicationData?: MutationToCustomerPaymentMethodCreateFromDuplicationDataResolver<TParent>;
    customerPaymentMethodCreditCardCreate?: MutationToCustomerPaymentMethodCreditCardCreateResolver<TParent>;
    customerPaymentMethodCreditCardUpdate?: MutationToCustomerPaymentMethodCreditCardUpdateResolver<TParent>;
    customerPaymentMethodGetDuplicationData?: MutationToCustomerPaymentMethodGetDuplicationDataResolver<TParent>;
    customerPaymentMethodGetUpdateUrl?: MutationToCustomerPaymentMethodGetUpdateUrlResolver<TParent>;
    customerPaymentMethodPaypalBillingAgreementCreate?: MutationToCustomerPaymentMethodPaypalBillingAgreementCreateResolver<TParent>;
    customerPaymentMethodPaypalBillingAgreementUpdate?: MutationToCustomerPaymentMethodPaypalBillingAgreementUpdateResolver<TParent>;
    customerPaymentMethodRemoteCreate?: MutationToCustomerPaymentMethodRemoteCreateResolver<TParent>;
    customerPaymentMethodRemoteCreditCardCreate?: MutationToCustomerPaymentMethodRemoteCreditCardCreateResolver<TParent>;
    customerPaymentMethodRevoke?: MutationToCustomerPaymentMethodRevokeResolver<TParent>;
    customerPaymentMethodSendUpdateEmail?: MutationToCustomerPaymentMethodSendUpdateEmailResolver<TParent>;
    customerRemoveTaxExemptions?: MutationToCustomerRemoveTaxExemptionsResolver<TParent>;
    customerReplaceTaxExemptions?: MutationToCustomerReplaceTaxExemptionsResolver<TParent>;
    customerRequestDataErasure?: MutationToCustomerRequestDataErasureResolver<TParent>;
    customerSegmentMembersQueryCreate?: MutationToCustomerSegmentMembersQueryCreateResolver<TParent>;
    customerSmsMarketingConsentUpdate?: MutationToCustomerSmsMarketingConsentUpdateResolver<TParent>;
    customerUpdate?: MutationToCustomerUpdateResolver<TParent>;
    customerUpdateDefaultAddress?: MutationToCustomerUpdateDefaultAddressResolver<TParent>;
    delegateAccessTokenCreate?: MutationToDelegateAccessTokenCreateResolver<TParent>;
    delegateAccessTokenDestroy?: MutationToDelegateAccessTokenDestroyResolver<TParent>;
    deliveryCustomizationActivation?: MutationToDeliveryCustomizationActivationResolver<TParent>;
    deliveryCustomizationCreate?: MutationToDeliveryCustomizationCreateResolver<TParent>;
    deliveryCustomizationDelete?: MutationToDeliveryCustomizationDeleteResolver<TParent>;
    deliveryCustomizationUpdate?: MutationToDeliveryCustomizationUpdateResolver<TParent>;
    deliveryProfileCreate?: MutationToDeliveryProfileCreateResolver<TParent>;
    deliveryProfileRemove?: MutationToDeliveryProfileRemoveResolver<TParent>;
    deliveryProfileUpdate?: MutationToDeliveryProfileUpdateResolver<TParent>;
    deliverySettingUpdate?: MutationToDeliverySettingUpdateResolver<TParent>;
    deliveryShippingOriginAssign?: MutationToDeliveryShippingOriginAssignResolver<TParent>;
    discountAutomaticActivate?: MutationToDiscountAutomaticActivateResolver<TParent>;
    discountAutomaticAppCreate?: MutationToDiscountAutomaticAppCreateResolver<TParent>;
    discountAutomaticAppUpdate?: MutationToDiscountAutomaticAppUpdateResolver<TParent>;
    discountAutomaticBasicCreate?: MutationToDiscountAutomaticBasicCreateResolver<TParent>;
    discountAutomaticBasicUpdate?: MutationToDiscountAutomaticBasicUpdateResolver<TParent>;
    discountAutomaticBulkDelete?: MutationToDiscountAutomaticBulkDeleteResolver<TParent>;
    discountAutomaticBxgyCreate?: MutationToDiscountAutomaticBxgyCreateResolver<TParent>;
    discountAutomaticBxgyUpdate?: MutationToDiscountAutomaticBxgyUpdateResolver<TParent>;
    discountAutomaticDeactivate?: MutationToDiscountAutomaticDeactivateResolver<TParent>;
    discountAutomaticDelete?: MutationToDiscountAutomaticDeleteResolver<TParent>;
    discountAutomaticFreeShippingCreate?: MutationToDiscountAutomaticFreeShippingCreateResolver<TParent>;
    discountAutomaticFreeShippingUpdate?: MutationToDiscountAutomaticFreeShippingUpdateResolver<TParent>;
    discountCodeActivate?: MutationToDiscountCodeActivateResolver<TParent>;
    discountCodeAppCreate?: MutationToDiscountCodeAppCreateResolver<TParent>;
    discountCodeAppUpdate?: MutationToDiscountCodeAppUpdateResolver<TParent>;
    discountCodeBasicCreate?: MutationToDiscountCodeBasicCreateResolver<TParent>;
    discountCodeBasicUpdate?: MutationToDiscountCodeBasicUpdateResolver<TParent>;
    discountCodeBulkActivate?: MutationToDiscountCodeBulkActivateResolver<TParent>;
    discountCodeBulkDeactivate?: MutationToDiscountCodeBulkDeactivateResolver<TParent>;
    discountCodeBulkDelete?: MutationToDiscountCodeBulkDeleteResolver<TParent>;
    discountCodeBxgyCreate?: MutationToDiscountCodeBxgyCreateResolver<TParent>;
    discountCodeBxgyUpdate?: MutationToDiscountCodeBxgyUpdateResolver<TParent>;
    discountCodeDeactivate?: MutationToDiscountCodeDeactivateResolver<TParent>;
    discountCodeDelete?: MutationToDiscountCodeDeleteResolver<TParent>;
    discountCodeFreeShippingCreate?: MutationToDiscountCodeFreeShippingCreateResolver<TParent>;
    discountCodeFreeShippingUpdate?: MutationToDiscountCodeFreeShippingUpdateResolver<TParent>;
    discountCodeRedeemCodeBulkDelete?: MutationToDiscountCodeRedeemCodeBulkDeleteResolver<TParent>;
    discountRedeemCodeBulkAdd?: MutationToDiscountRedeemCodeBulkAddResolver<TParent>;
    disputeEvidenceUpdate?: MutationToDisputeEvidenceUpdateResolver<TParent>;
    draftOrderBulkAddTags?: MutationToDraftOrderBulkAddTagsResolver<TParent>;
    draftOrderBulkDelete?: MutationToDraftOrderBulkDeleteResolver<TParent>;
    draftOrderBulkRemoveTags?: MutationToDraftOrderBulkRemoveTagsResolver<TParent>;
    draftOrderCalculate?: MutationToDraftOrderCalculateResolver<TParent>;
    draftOrderComplete?: MutationToDraftOrderCompleteResolver<TParent>;
    draftOrderCreate?: MutationToDraftOrderCreateResolver<TParent>;
    draftOrderCreateFromOrder?: MutationToDraftOrderCreateFromOrderResolver<TParent>;
    draftOrderCreateMerchantCheckout?: MutationToDraftOrderCreateMerchantCheckoutResolver<TParent>;
    draftOrderDelete?: MutationToDraftOrderDeleteResolver<TParent>;
    draftOrderDuplicate?: MutationToDraftOrderDuplicateResolver<TParent>;
    draftOrderInvoicePreview?: MutationToDraftOrderInvoicePreviewResolver<TParent>;
    draftOrderInvoiceSend?: MutationToDraftOrderInvoiceSendResolver<TParent>;
    draftOrderUpdate?: MutationToDraftOrderUpdateResolver<TParent>;
    eventBridgeServerPixelUpdate?: MutationToEventBridgeServerPixelUpdateResolver<TParent>;
    eventBridgeWebhookSubscriptionCreate?: MutationToEventBridgeWebhookSubscriptionCreateResolver<TParent>;
    eventBridgeWebhookSubscriptionUpdate?: MutationToEventBridgeWebhookSubscriptionUpdateResolver<TParent>;
    fileAcknowledgeUpdateFailed?: MutationToFileAcknowledgeUpdateFailedResolver<TParent>;
    fileCreate?: MutationToFileCreateResolver<TParent>;
    fileDelete?: MutationToFileDeleteResolver<TParent>;
    fileUpdate?: MutationToFileUpdateResolver<TParent>;
    flowGenerateSignature?: MutationToFlowGenerateSignatureResolver<TParent>;
    flowTriggerReceive?: MutationToFlowTriggerReceiveResolver<TParent>;
    fulfillmentCancel?: MutationToFulfillmentCancelResolver<TParent>;
    fulfillmentConstraintRuleCreate?: MutationToFulfillmentConstraintRuleCreateResolver<TParent>;
    fulfillmentConstraintRuleDelete?: MutationToFulfillmentConstraintRuleDeleteResolver<TParent>;
    fulfillmentCreateV2?: MutationToFulfillmentCreateV2Resolver<TParent>;
    fulfillmentEventCreate?: MutationToFulfillmentEventCreateResolver<TParent>;
    fulfillmentOrderAcceptCancellationRequest?: MutationToFulfillmentOrderAcceptCancellationRequestResolver<TParent>;
    fulfillmentOrderAcceptFulfillmentRequest?: MutationToFulfillmentOrderAcceptFulfillmentRequestResolver<TParent>;
    fulfillmentOrderCancel?: MutationToFulfillmentOrderCancelResolver<TParent>;
    fulfillmentOrderClose?: MutationToFulfillmentOrderCloseResolver<TParent>;
    fulfillmentOrderHold?: MutationToFulfillmentOrderHoldResolver<TParent>;
    fulfillmentOrderLineItemsPreparedForPickup?: MutationToFulfillmentOrderLineItemsPreparedForPickupResolver<TParent>;
    fulfillmentOrderMerge?: MutationToFulfillmentOrderMergeResolver<TParent>;
    fulfillmentOrderMove?: MutationToFulfillmentOrderMoveResolver<TParent>;
    fulfillmentOrderOpen?: MutationToFulfillmentOrderOpenResolver<TParent>;
    fulfillmentOrderRejectCancellationRequest?: MutationToFulfillmentOrderRejectCancellationRequestResolver<TParent>;
    fulfillmentOrderRejectFulfillmentRequest?: MutationToFulfillmentOrderRejectFulfillmentRequestResolver<TParent>;
    fulfillmentOrderReleaseHold?: MutationToFulfillmentOrderReleaseHoldResolver<TParent>;
    fulfillmentOrderReschedule?: MutationToFulfillmentOrderRescheduleResolver<TParent>;
    fulfillmentOrderSplit?: MutationToFulfillmentOrderSplitResolver<TParent>;
    fulfillmentOrderSubmitCancellationRequest?: MutationToFulfillmentOrderSubmitCancellationRequestResolver<TParent>;
    fulfillmentOrderSubmitFulfillmentRequest?: MutationToFulfillmentOrderSubmitFulfillmentRequestResolver<TParent>;
    fulfillmentOrdersReleaseHolds?: MutationToFulfillmentOrdersReleaseHoldsResolver<TParent>;
    fulfillmentOrdersSetFulfillmentDeadline?: MutationToFulfillmentOrdersSetFulfillmentDeadlineResolver<TParent>;
    fulfillmentServiceCreate?: MutationToFulfillmentServiceCreateResolver<TParent>;
    fulfillmentServiceDelete?: MutationToFulfillmentServiceDeleteResolver<TParent>;
    fulfillmentServiceUpdate?: MutationToFulfillmentServiceUpdateResolver<TParent>;
    fulfillmentTrackingInfoUpdateV2?: MutationToFulfillmentTrackingInfoUpdateV2Resolver<TParent>;
    giftCardCreate?: MutationToGiftCardCreateResolver<TParent>;
    giftCardDisable?: MutationToGiftCardDisableResolver<TParent>;
    giftCardUpdate?: MutationToGiftCardUpdateResolver<TParent>;
    inventoryActivate?: MutationToInventoryActivateResolver<TParent>;
    inventoryAdjustQuantities?: MutationToInventoryAdjustQuantitiesResolver<TParent>;
    inventoryAdjustQuantity?: MutationToInventoryAdjustQuantityResolver<TParent>;
    inventoryBulkAdjustQuantityAtLocation?: MutationToInventoryBulkAdjustQuantityAtLocationResolver<TParent>;
    inventoryBulkToggleActivation?: MutationToInventoryBulkToggleActivationResolver<TParent>;
    inventoryDeactivate?: MutationToInventoryDeactivateResolver<TParent>;
    inventoryItemUpdate?: MutationToInventoryItemUpdateResolver<TParent>;
    inventoryMoveQuantities?: MutationToInventoryMoveQuantitiesResolver<TParent>;
    inventorySetOnHandQuantities?: MutationToInventorySetOnHandQuantitiesResolver<TParent>;
    inventorySetScheduledChanges?: MutationToInventorySetScheduledChangesResolver<TParent>;
    locationActivate?: MutationToLocationActivateResolver<TParent>;
    locationAdd?: MutationToLocationAddResolver<TParent>;
    locationDeactivate?: MutationToLocationDeactivateResolver<TParent>;
    locationDelete?: MutationToLocationDeleteResolver<TParent>;
    locationEdit?: MutationToLocationEditResolver<TParent>;
    locationLocalPickupDisable?: MutationToLocationLocalPickupDisableResolver<TParent>;
    locationLocalPickupEnable?: MutationToLocationLocalPickupEnableResolver<TParent>;
    marketCreate?: MutationToMarketCreateResolver<TParent>;
    marketCurrencySettingsUpdate?: MutationToMarketCurrencySettingsUpdateResolver<TParent>;
    marketDelete?: MutationToMarketDeleteResolver<TParent>;
    marketLocalizationsRegister?: MutationToMarketLocalizationsRegisterResolver<TParent>;
    marketLocalizationsRemove?: MutationToMarketLocalizationsRemoveResolver<TParent>;
    marketRegionDelete?: MutationToMarketRegionDeleteResolver<TParent>;
    marketRegionsCreate?: MutationToMarketRegionsCreateResolver<TParent>;
    marketRegionsDelete?: MutationToMarketRegionsDeleteResolver<TParent>;
    marketUpdate?: MutationToMarketUpdateResolver<TParent>;
    marketWebPresenceCreate?: MutationToMarketWebPresenceCreateResolver<TParent>;
    marketWebPresenceDelete?: MutationToMarketWebPresenceDeleteResolver<TParent>;
    marketWebPresenceUpdate?: MutationToMarketWebPresenceUpdateResolver<TParent>;
    marketingActivitiesDeleteAllExternal?: MutationToMarketingActivitiesDeleteAllExternalResolver<TParent>;
    marketingActivityCreate?: MutationToMarketingActivityCreateResolver<TParent>;
    marketingActivityCreateExternal?: MutationToMarketingActivityCreateExternalResolver<TParent>;
    marketingActivityDeleteExternal?: MutationToMarketingActivityDeleteExternalResolver<TParent>;
    marketingActivityUpdate?: MutationToMarketingActivityUpdateResolver<TParent>;
    marketingActivityUpdateExternal?: MutationToMarketingActivityUpdateExternalResolver<TParent>;
    marketingActivityUpsertExternal?: MutationToMarketingActivityUpsertExternalResolver<TParent>;
    marketingEngagementCreate?: MutationToMarketingEngagementCreateResolver<TParent>;
    marketingEngagementsDelete?: MutationToMarketingEngagementsDeleteResolver<TParent>;
    metafieldDefinitionCreate?: MutationToMetafieldDefinitionCreateResolver<TParent>;
    metafieldDefinitionDelete?: MutationToMetafieldDefinitionDeleteResolver<TParent>;
    metafieldDefinitionPin?: MutationToMetafieldDefinitionPinResolver<TParent>;
    metafieldDefinitionUnpin?: MutationToMetafieldDefinitionUnpinResolver<TParent>;
    metafieldDefinitionUpdate?: MutationToMetafieldDefinitionUpdateResolver<TParent>;
    metafieldDelete?: MutationToMetafieldDeleteResolver<TParent>;
    metafieldStorefrontVisibilityCreate?: MutationToMetafieldStorefrontVisibilityCreateResolver<TParent>;
    metafieldStorefrontVisibilityDelete?: MutationToMetafieldStorefrontVisibilityDeleteResolver<TParent>;
    metafieldsSet?: MutationToMetafieldsSetResolver<TParent>;
    metaobjectBulkDelete?: MutationToMetaobjectBulkDeleteResolver<TParent>;
    metaobjectCreate?: MutationToMetaobjectCreateResolver<TParent>;
    metaobjectDefinitionCreate?: MutationToMetaobjectDefinitionCreateResolver<TParent>;
    metaobjectDefinitionDelete?: MutationToMetaobjectDefinitionDeleteResolver<TParent>;
    metaobjectDefinitionUpdate?: MutationToMetaobjectDefinitionUpdateResolver<TParent>;
    metaobjectDelete?: MutationToMetaobjectDeleteResolver<TParent>;
    metaobjectUpdate?: MutationToMetaobjectUpdateResolver<TParent>;
    metaobjectUpsert?: MutationToMetaobjectUpsertResolver<TParent>;
    orderCancel?: MutationToOrderCancelResolver<TParent>;
    orderCapture?: MutationToOrderCaptureResolver<TParent>;
    orderClose?: MutationToOrderCloseResolver<TParent>;
    orderCreateMandatePayment?: MutationToOrderCreateMandatePaymentResolver<TParent>;
    orderEditAddCustomItem?: MutationToOrderEditAddCustomItemResolver<TParent>;
    orderEditAddLineItemDiscount?: MutationToOrderEditAddLineItemDiscountResolver<TParent>;
    orderEditAddVariant?: MutationToOrderEditAddVariantResolver<TParent>;
    orderEditBegin?: MutationToOrderEditBeginResolver<TParent>;
    orderEditCommit?: MutationToOrderEditCommitResolver<TParent>;
    orderEditRemoveDiscount?: MutationToOrderEditRemoveDiscountResolver<TParent>;
    orderEditRemoveLineItemDiscount?: MutationToOrderEditRemoveLineItemDiscountResolver<TParent>;
    orderEditSetQuantity?: MutationToOrderEditSetQuantityResolver<TParent>;
    orderEditUpdateDiscount?: MutationToOrderEditUpdateDiscountResolver<TParent>;
    orderInvoiceSend?: MutationToOrderInvoiceSendResolver<TParent>;
    orderMarkAsPaid?: MutationToOrderMarkAsPaidResolver<TParent>;
    orderOpen?: MutationToOrderOpenResolver<TParent>;
    orderUpdate?: MutationToOrderUpdateResolver<TParent>;
    paymentCustomizationActivation?: MutationToPaymentCustomizationActivationResolver<TParent>;
    paymentCustomizationCreate?: MutationToPaymentCustomizationCreateResolver<TParent>;
    paymentCustomizationDelete?: MutationToPaymentCustomizationDeleteResolver<TParent>;
    paymentCustomizationUpdate?: MutationToPaymentCustomizationUpdateResolver<TParent>;
    paymentReminderSend?: MutationToPaymentReminderSendResolver<TParent>;
    paymentTermsCreate?: MutationToPaymentTermsCreateResolver<TParent>;
    paymentTermsDelete?: MutationToPaymentTermsDeleteResolver<TParent>;
    paymentTermsUpdate?: MutationToPaymentTermsUpdateResolver<TParent>;
    priceListCreate?: MutationToPriceListCreateResolver<TParent>;
    priceListDelete?: MutationToPriceListDeleteResolver<TParent>;
    priceListFixedPricesAdd?: MutationToPriceListFixedPricesAddResolver<TParent>;
    priceListFixedPricesByProductUpdate?: MutationToPriceListFixedPricesByProductUpdateResolver<TParent>;
    priceListFixedPricesDelete?: MutationToPriceListFixedPricesDeleteResolver<TParent>;
    priceListFixedPricesUpdate?: MutationToPriceListFixedPricesUpdateResolver<TParent>;
    priceListUpdate?: MutationToPriceListUpdateResolver<TParent>;
    priceRuleActivate?: MutationToPriceRuleActivateResolver<TParent>;
    priceRuleCreate?: MutationToPriceRuleCreateResolver<TParent>;
    priceRuleDeactivate?: MutationToPriceRuleDeactivateResolver<TParent>;
    priceRuleDelete?: MutationToPriceRuleDeleteResolver<TParent>;
    priceRuleDiscountCodeCreate?: MutationToPriceRuleDiscountCodeCreateResolver<TParent>;
    priceRuleDiscountCodeUpdate?: MutationToPriceRuleDiscountCodeUpdateResolver<TParent>;
    priceRuleUpdate?: MutationToPriceRuleUpdateResolver<TParent>;
    privateMetafieldDelete?: MutationToPrivateMetafieldDeleteResolver<TParent>;
    privateMetafieldUpsert?: MutationToPrivateMetafieldUpsertResolver<TParent>;
    productAppendImages?: MutationToProductAppendImagesResolver<TParent>;
    productChangeStatus?: MutationToProductChangeStatusResolver<TParent>;
    productCreate?: MutationToProductCreateResolver<TParent>;
    productCreateMedia?: MutationToProductCreateMediaResolver<TParent>;
    productDelete?: MutationToProductDeleteResolver<TParent>;
    productDeleteAsync?: MutationToProductDeleteAsyncResolver<TParent>;
    productDeleteImages?: MutationToProductDeleteImagesResolver<TParent>;
    productDeleteMedia?: MutationToProductDeleteMediaResolver<TParent>;
    productDuplicate?: MutationToProductDuplicateResolver<TParent>;
    productDuplicateAsync?: MutationToProductDuplicateAsyncResolver<TParent>;
    productDuplicateAsyncV2?: MutationToProductDuplicateAsyncV2Resolver<TParent>;
    productFeedCreate?: MutationToProductFeedCreateResolver<TParent>;
    productFeedDelete?: MutationToProductFeedDeleteResolver<TParent>;
    productFullSync?: MutationToProductFullSyncResolver<TParent>;
    productImageUpdate?: MutationToProductImageUpdateResolver<TParent>;
    productJoinSellingPlanGroups?: MutationToProductJoinSellingPlanGroupsResolver<TParent>;
    productLeaveSellingPlanGroups?: MutationToProductLeaveSellingPlanGroupsResolver<TParent>;
    productPublish?: MutationToProductPublishResolver<TParent>;
    productReorderImages?: MutationToProductReorderImagesResolver<TParent>;
    productReorderMedia?: MutationToProductReorderMediaResolver<TParent>;
    productUnpublish?: MutationToProductUnpublishResolver<TParent>;
    productUpdate?: MutationToProductUpdateResolver<TParent>;
    productUpdateMedia?: MutationToProductUpdateMediaResolver<TParent>;
    productVariantAppendMedia?: MutationToProductVariantAppendMediaResolver<TParent>;
    productVariantCreate?: MutationToProductVariantCreateResolver<TParent>;
    productVariantDelete?: MutationToProductVariantDeleteResolver<TParent>;
    productVariantDetachMedia?: MutationToProductVariantDetachMediaResolver<TParent>;
    productVariantJoinSellingPlanGroups?: MutationToProductVariantJoinSellingPlanGroupsResolver<TParent>;
    productVariantLeaveSellingPlanGroups?: MutationToProductVariantLeaveSellingPlanGroupsResolver<TParent>;
    productVariantRelationshipBulkUpdate?: MutationToProductVariantRelationshipBulkUpdateResolver<TParent>;
    productVariantUpdate?: MutationToProductVariantUpdateResolver<TParent>;
    productVariantsBulkCreate?: MutationToProductVariantsBulkCreateResolver<TParent>;
    productVariantsBulkDelete?: MutationToProductVariantsBulkDeleteResolver<TParent>;
    productVariantsBulkReorder?: MutationToProductVariantsBulkReorderResolver<TParent>;
    productVariantsBulkUpdate?: MutationToProductVariantsBulkUpdateResolver<TParent>;
    pubSubServerPixelUpdate?: MutationToPubSubServerPixelUpdateResolver<TParent>;
    pubSubWebhookSubscriptionCreate?: MutationToPubSubWebhookSubscriptionCreateResolver<TParent>;
    pubSubWebhookSubscriptionUpdate?: MutationToPubSubWebhookSubscriptionUpdateResolver<TParent>;
    publicationCreate?: MutationToPublicationCreateResolver<TParent>;
    publicationDelete?: MutationToPublicationDeleteResolver<TParent>;
    publicationUpdate?: MutationToPublicationUpdateResolver<TParent>;
    publishablePublish?: MutationToPublishablePublishResolver<TParent>;
    publishablePublishToCurrentChannel?: MutationToPublishablePublishToCurrentChannelResolver<TParent>;
    publishableUnpublish?: MutationToPublishableUnpublishResolver<TParent>;
    publishableUnpublishToCurrentChannel?: MutationToPublishableUnpublishToCurrentChannelResolver<TParent>;
    quantityPricingByVariantUpdate?: MutationToQuantityPricingByVariantUpdateResolver<TParent>;
    quantityRulesAdd?: MutationToQuantityRulesAddResolver<TParent>;
    quantityRulesDelete?: MutationToQuantityRulesDeleteResolver<TParent>;
    refundCreate?: MutationToRefundCreateResolver<TParent>;
    returnApproveRequest?: MutationToReturnApproveRequestResolver<TParent>;
    returnCancel?: MutationToReturnCancelResolver<TParent>;
    returnClose?: MutationToReturnCloseResolver<TParent>;
    returnCreate?: MutationToReturnCreateResolver<TParent>;
    returnDeclineRequest?: MutationToReturnDeclineRequestResolver<TParent>;
    returnRefund?: MutationToReturnRefundResolver<TParent>;
    returnReopen?: MutationToReturnReopenResolver<TParent>;
    returnRequest?: MutationToReturnRequestResolver<TParent>;
    reverseDeliveryCreateWithShipping?: MutationToReverseDeliveryCreateWithShippingResolver<TParent>;
    reverseDeliveryDispose?: MutationToReverseDeliveryDisposeResolver<TParent>;
    reverseDeliveryShippingUpdate?: MutationToReverseDeliveryShippingUpdateResolver<TParent>;
    reverseFulfillmentOrderDispose?: MutationToReverseFulfillmentOrderDisposeResolver<TParent>;
    savedSearchCreate?: MutationToSavedSearchCreateResolver<TParent>;
    savedSearchDelete?: MutationToSavedSearchDeleteResolver<TParent>;
    savedSearchUpdate?: MutationToSavedSearchUpdateResolver<TParent>;
    scriptTagCreate?: MutationToScriptTagCreateResolver<TParent>;
    scriptTagDelete?: MutationToScriptTagDeleteResolver<TParent>;
    scriptTagUpdate?: MutationToScriptTagUpdateResolver<TParent>;
    segmentCreate?: MutationToSegmentCreateResolver<TParent>;
    segmentDelete?: MutationToSegmentDeleteResolver<TParent>;
    segmentUpdate?: MutationToSegmentUpdateResolver<TParent>;
    sellingPlanGroupAddProductVariants?: MutationToSellingPlanGroupAddProductVariantsResolver<TParent>;
    sellingPlanGroupAddProducts?: MutationToSellingPlanGroupAddProductsResolver<TParent>;
    sellingPlanGroupCreate?: MutationToSellingPlanGroupCreateResolver<TParent>;
    sellingPlanGroupDelete?: MutationToSellingPlanGroupDeleteResolver<TParent>;
    sellingPlanGroupRemoveProductVariants?: MutationToSellingPlanGroupRemoveProductVariantsResolver<TParent>;
    sellingPlanGroupRemoveProducts?: MutationToSellingPlanGroupRemoveProductsResolver<TParent>;
    sellingPlanGroupUpdate?: MutationToSellingPlanGroupUpdateResolver<TParent>;
    serverPixelCreate?: MutationToServerPixelCreateResolver<TParent>;
    serverPixelDelete?: MutationToServerPixelDeleteResolver<TParent>;
    shippingPackageDelete?: MutationToShippingPackageDeleteResolver<TParent>;
    shippingPackageMakeDefault?: MutationToShippingPackageMakeDefaultResolver<TParent>;
    shippingPackageUpdate?: MutationToShippingPackageUpdateResolver<TParent>;
    shopLocaleDisable?: MutationToShopLocaleDisableResolver<TParent>;
    shopLocaleEnable?: MutationToShopLocaleEnableResolver<TParent>;
    shopLocaleUpdate?: MutationToShopLocaleUpdateResolver<TParent>;
    shopPolicyUpdate?: MutationToShopPolicyUpdateResolver<TParent>;
    shopResourceFeedbackCreate?: MutationToShopResourceFeedbackCreateResolver<TParent>;
    stagedUploadTargetGenerate?: MutationToStagedUploadTargetGenerateResolver<TParent>;
    stagedUploadTargetsGenerate?: MutationToStagedUploadTargetsGenerateResolver<TParent>;
    stagedUploadsCreate?: MutationToStagedUploadsCreateResolver<TParent>;
    standardMetafieldDefinitionEnable?: MutationToStandardMetafieldDefinitionEnableResolver<TParent>;
    standardMetaobjectDefinitionEnable?: MutationToStandardMetaobjectDefinitionEnableResolver<TParent>;
    storefrontAccessTokenCreate?: MutationToStorefrontAccessTokenCreateResolver<TParent>;
    storefrontAccessTokenDelete?: MutationToStorefrontAccessTokenDeleteResolver<TParent>;
    subscriptionBillingAttemptCreate?: MutationToSubscriptionBillingAttemptCreateResolver<TParent>;
    subscriptionBillingCycleContractDraftCommit?: MutationToSubscriptionBillingCycleContractDraftCommitResolver<TParent>;
    subscriptionBillingCycleContractDraftConcatenate?: MutationToSubscriptionBillingCycleContractDraftConcatenateResolver<TParent>;
    subscriptionBillingCycleContractEdit?: MutationToSubscriptionBillingCycleContractEditResolver<TParent>;
    subscriptionBillingCycleEditDelete?: MutationToSubscriptionBillingCycleEditDeleteResolver<TParent>;
    subscriptionBillingCycleEditsDelete?: MutationToSubscriptionBillingCycleEditsDeleteResolver<TParent>;
    subscriptionBillingCycleScheduleEdit?: MutationToSubscriptionBillingCycleScheduleEditResolver<TParent>;
    subscriptionBillingCycleSkip?: MutationToSubscriptionBillingCycleSkipResolver<TParent>;
    subscriptionBillingCycleUnskip?: MutationToSubscriptionBillingCycleUnskipResolver<TParent>;
    subscriptionContractActivate?: MutationToSubscriptionContractActivateResolver<TParent>;
    subscriptionContractAtomicCreate?: MutationToSubscriptionContractAtomicCreateResolver<TParent>;
    subscriptionContractCancel?: MutationToSubscriptionContractCancelResolver<TParent>;
    subscriptionContractCreate?: MutationToSubscriptionContractCreateResolver<TParent>;
    subscriptionContractExpire?: MutationToSubscriptionContractExpireResolver<TParent>;
    subscriptionContractFail?: MutationToSubscriptionContractFailResolver<TParent>;
    subscriptionContractPause?: MutationToSubscriptionContractPauseResolver<TParent>;
    subscriptionContractProductChange?: MutationToSubscriptionContractProductChangeResolver<TParent>;
    subscriptionContractSetNextBillingDate?: MutationToSubscriptionContractSetNextBillingDateResolver<TParent>;
    subscriptionContractUpdate?: MutationToSubscriptionContractUpdateResolver<TParent>;
    subscriptionDraftCommit?: MutationToSubscriptionDraftCommitResolver<TParent>;
    subscriptionDraftDiscountAdd?: MutationToSubscriptionDraftDiscountAddResolver<TParent>;
    subscriptionDraftDiscountCodeApply?: MutationToSubscriptionDraftDiscountCodeApplyResolver<TParent>;
    subscriptionDraftDiscountRemove?: MutationToSubscriptionDraftDiscountRemoveResolver<TParent>;
    subscriptionDraftDiscountUpdate?: MutationToSubscriptionDraftDiscountUpdateResolver<TParent>;
    subscriptionDraftFreeShippingDiscountAdd?: MutationToSubscriptionDraftFreeShippingDiscountAddResolver<TParent>;
    subscriptionDraftFreeShippingDiscountUpdate?: MutationToSubscriptionDraftFreeShippingDiscountUpdateResolver<TParent>;
    subscriptionDraftLineAdd?: MutationToSubscriptionDraftLineAddResolver<TParent>;
    subscriptionDraftLineRemove?: MutationToSubscriptionDraftLineRemoveResolver<TParent>;
    subscriptionDraftLineUpdate?: MutationToSubscriptionDraftLineUpdateResolver<TParent>;
    subscriptionDraftUpdate?: MutationToSubscriptionDraftUpdateResolver<TParent>;
    tagsAdd?: MutationToTagsAddResolver<TParent>;
    tagsRemove?: MutationToTagsRemoveResolver<TParent>;
    taxAppConfigure?: MutationToTaxAppConfigureResolver<TParent>;
    translationsRegister?: MutationToTranslationsRegisterResolver<TParent>;
    translationsRemove?: MutationToTranslationsRemoveResolver<TParent>;
    urlRedirectBulkDeleteAll?: MutationToUrlRedirectBulkDeleteAllResolver<TParent>;
    urlRedirectBulkDeleteByIds?: MutationToUrlRedirectBulkDeleteByIdsResolver<TParent>;
    urlRedirectBulkDeleteBySavedSearch?: MutationToUrlRedirectBulkDeleteBySavedSearchResolver<TParent>;
    urlRedirectBulkDeleteBySearch?: MutationToUrlRedirectBulkDeleteBySearchResolver<TParent>;
    urlRedirectCreate?: MutationToUrlRedirectCreateResolver<TParent>;
    urlRedirectDelete?: MutationToUrlRedirectDeleteResolver<TParent>;
    urlRedirectImportCreate?: MutationToUrlRedirectImportCreateResolver<TParent>;
    urlRedirectImportSubmit?: MutationToUrlRedirectImportSubmitResolver<TParent>;
    urlRedirectUpdate?: MutationToUrlRedirectUpdateResolver<TParent>;
    validationCreate?: MutationToValidationCreateResolver<TParent>;
    validationDelete?: MutationToValidationDeleteResolver<TParent>;
    validationUpdate?: MutationToValidationUpdateResolver<TParent>;
    webPixelCreate?: MutationToWebPixelCreateResolver<TParent>;
    webPixelDelete?: MutationToWebPixelDeleteResolver<TParent>;
    webPixelUpdate?: MutationToWebPixelUpdateResolver<TParent>;
    webhookSubscriptionCreate?: MutationToWebhookSubscriptionCreateResolver<TParent>;
    webhookSubscriptionDelete?: MutationToWebhookSubscriptionDeleteResolver<TParent>;
    webhookSubscriptionUpdate?: MutationToWebhookSubscriptionUpdateResolver<TParent>;
  }
  
  export interface MutationToAbandonmentEmailStateUpdateArgs {
    id: string;
    emailState: AbandonmentEmailState;
    emailSentAt?: DateTime;
    emailStateChangeReason?: string;
  }
  export interface MutationToAbandonmentEmailStateUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAbandonmentEmailStateUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToAbandonmentUpdateActivitiesDeliveryStatusesArgs {
    abandonmentId: string;
    marketingActivityId: string;
    deliveryStatus: AbandonmentDeliveryState;
    deliveredAt?: DateTime;
    deliveryStatusChangeReason?: string;
  }
  export interface MutationToAbandonmentUpdateActivitiesDeliveryStatusesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAbandonmentUpdateActivitiesDeliveryStatusesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToAppPurchaseOneTimeCreateArgs {
    name: string;
    price: MoneyInput;
    returnUrl: URL;
    test?: boolean;
  }
  export interface MutationToAppPurchaseOneTimeCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAppPurchaseOneTimeCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToAppSubscriptionCancelArgs {
    id: string;
    prorate?: boolean;
  }
  export interface MutationToAppSubscriptionCancelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAppSubscriptionCancelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToAppSubscriptionCreateArgs {
    name: string;
    lineItems: Array<AppSubscriptionLineItemInput>;
    test?: boolean;
    trialDays?: number;
    returnUrl: URL;
    replacementBehavior?: AppSubscriptionReplacementBehavior;
  }
  export interface MutationToAppSubscriptionCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAppSubscriptionCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToAppSubscriptionLineItemUpdateArgs {
    id: string;
    cappedAmount: MoneyInput;
  }
  export interface MutationToAppSubscriptionLineItemUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAppSubscriptionLineItemUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToAppSubscriptionTrialExtendArgs {
    id: string;
    days: number;
  }
  export interface MutationToAppSubscriptionTrialExtendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAppSubscriptionTrialExtendArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToAppUsageRecordCreateArgs {
    subscriptionLineItemId: string;
    price: MoneyInput;
    description: string;
    idempotencyKey?: string;
  }
  export interface MutationToAppUsageRecordCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToAppUsageRecordCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToBulkOperationCancelArgs {
    id: string;
  }
  export interface MutationToBulkOperationCancelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToBulkOperationCancelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToBulkOperationRunMutationArgs {
    mutation: string;
    stagedUploadPath: string;
    clientIdentifier?: string;
  }
  export interface MutationToBulkOperationRunMutationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToBulkOperationRunMutationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToBulkOperationRunQueryArgs {
    query: string;
  }
  export interface MutationToBulkOperationRunQueryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToBulkOperationRunQueryArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToBulkProductResourceFeedbackCreateArgs {
    feedbackInput: Array<ProductResourceFeedbackInput>;
  }
  export interface MutationToBulkProductResourceFeedbackCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToBulkProductResourceFeedbackCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCartTransformCreateArgs {
    functionId: string;
    blockOnFailure?: boolean;
  }
  export interface MutationToCartTransformCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCartTransformCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCartTransformDeleteArgs {
    id: string;
  }
  export interface MutationToCartTransformDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCartTransformDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCatalogContextUpdateArgs {
    catalogId: string;
    contextsToAdd?: CatalogContextInput;
    contextsToRemove?: CatalogContextInput;
  }
  export interface MutationToCatalogContextUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCatalogContextUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCatalogCreateArgs {
    input: CatalogCreateInput;
  }
  export interface MutationToCatalogCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCatalogCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCatalogDeleteArgs {
    id: string;
    deleteDependentResources?: boolean;
  }
  export interface MutationToCatalogDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCatalogDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCatalogUpdateArgs {
    id: string;
    input: CatalogUpdateInput;
  }
  export interface MutationToCatalogUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCatalogUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCheckoutBrandingUpsertArgs {
    checkoutProfileId: string;
    checkoutBrandingInput?: CheckoutBrandingInput;
  }
  export interface MutationToCheckoutBrandingUpsertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCheckoutBrandingUpsertArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCollectionAddProductsArgs {
    id: string;
    productIds: Array<string>;
  }
  export interface MutationToCollectionAddProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCollectionAddProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCollectionAddProductsV2Args {
    id: string;
    productIds: Array<string>;
  }
  export interface MutationToCollectionAddProductsV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCollectionAddProductsV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCollectionCreateArgs {
    input: CollectionInput;
  }
  export interface MutationToCollectionCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCollectionCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCollectionDeleteArgs {
    input: CollectionDeleteInput;
  }
  export interface MutationToCollectionDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCollectionDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCollectionPublishArgs {
    input: CollectionPublishInput;
  }
  export interface MutationToCollectionPublishResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCollectionPublishArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCollectionRemoveProductsArgs {
    id: string;
    productIds: Array<string>;
  }
  export interface MutationToCollectionRemoveProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCollectionRemoveProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCollectionReorderProductsArgs {
    id: string;
    moves: Array<MoveInput>;
  }
  export interface MutationToCollectionReorderProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCollectionReorderProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCollectionUnpublishArgs {
    input: CollectionUnpublishInput;
  }
  export interface MutationToCollectionUnpublishResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCollectionUnpublishArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCollectionUpdateArgs {
    input: CollectionInput;
  }
  export interface MutationToCollectionUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCollectionUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompaniesDeleteArgs {
    companyIds: Array<string>;
  }
  export interface MutationToCompaniesDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompaniesDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyAddressDeleteArgs {
    addressId: string;
  }
  export interface MutationToCompanyAddressDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyAddressDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyAssignCustomerAsContactArgs {
    companyId: string;
    customerId: string;
  }
  export interface MutationToCompanyAssignCustomerAsContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyAssignCustomerAsContactArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyAssignMainContactArgs {
    companyId: string;
    companyContactId: string;
  }
  export interface MutationToCompanyAssignMainContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyAssignMainContactArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyContactAssignRoleArgs {
    companyContactId: string;
    companyContactRoleId: string;
    companyLocationId: string;
  }
  export interface MutationToCompanyContactAssignRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyContactAssignRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyContactAssignRolesArgs {
    companyContactId: string;
    rolesToAssign: Array<CompanyContactRoleAssign>;
  }
  export interface MutationToCompanyContactAssignRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyContactAssignRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyContactCreateArgs {
    companyId: string;
    input: CompanyContactInput;
  }
  export interface MutationToCompanyContactCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyContactCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyContactDeleteArgs {
    companyContactId: string;
  }
  export interface MutationToCompanyContactDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyContactDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyContactRemoveFromCompanyArgs {
    companyContactId: string;
  }
  export interface MutationToCompanyContactRemoveFromCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyContactRemoveFromCompanyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyContactRevokeRoleArgs {
    companyContactId: string;
    companyContactRoleAssignmentId: string;
  }
  export interface MutationToCompanyContactRevokeRoleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyContactRevokeRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyContactRevokeRolesArgs {
    companyContactId: string;
    roleAssignmentIds?: Array<string>;
    revokeAll?: boolean;
  }
  export interface MutationToCompanyContactRevokeRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyContactRevokeRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyContactSendWelcomeEmailArgs {
    companyContactId: string;
    email?: EmailInput;
  }
  export interface MutationToCompanyContactSendWelcomeEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyContactSendWelcomeEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyContactUpdateArgs {
    companyContactId: string;
    input: CompanyContactInput;
  }
  export interface MutationToCompanyContactUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyContactUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyContactsDeleteArgs {
    companyContactIds: Array<string>;
  }
  export interface MutationToCompanyContactsDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyContactsDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyCreateArgs {
    input: CompanyCreateInput;
  }
  export interface MutationToCompanyCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyDeleteArgs {
    id: string;
  }
  export interface MutationToCompanyDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyLocationAssignAddressArgs {
    locationId: string;
    address: CompanyAddressInput;
    addressTypes: Array<CompanyAddressType>;
  }
  export interface MutationToCompanyLocationAssignAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyLocationAssignAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyLocationAssignRolesArgs {
    companyLocationId: string;
    rolesToAssign: Array<CompanyLocationRoleAssign>;
  }
  export interface MutationToCompanyLocationAssignRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyLocationAssignRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyLocationAssignTaxExemptionsArgs {
    companyLocationId: string;
    taxExemptions: Array<TaxExemption>;
  }
  export interface MutationToCompanyLocationAssignTaxExemptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyLocationAssignTaxExemptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyLocationCreateArgs {
    companyId: string;
    input: CompanyLocationInput;
  }
  export interface MutationToCompanyLocationCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyLocationCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyLocationCreateTaxRegistrationArgs {
    locationId: string;
    taxId: string;
  }
  export interface MutationToCompanyLocationCreateTaxRegistrationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyLocationCreateTaxRegistrationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyLocationDeleteArgs {
    companyLocationId: string;
  }
  export interface MutationToCompanyLocationDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyLocationDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyLocationRevokeRolesArgs {
    companyLocationId: string;
    rolesToRevoke: Array<string>;
  }
  export interface MutationToCompanyLocationRevokeRolesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyLocationRevokeRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyLocationRevokeTaxExemptionsArgs {
    companyLocationId: string;
    taxExemptions: Array<TaxExemption>;
  }
  export interface MutationToCompanyLocationRevokeTaxExemptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyLocationRevokeTaxExemptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyLocationRevokeTaxRegistrationArgs {
    companyLocationId: string;
  }
  export interface MutationToCompanyLocationRevokeTaxRegistrationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyLocationRevokeTaxRegistrationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyLocationUpdateArgs {
    companyLocationId: string;
    input: CompanyLocationUpdateInput;
  }
  export interface MutationToCompanyLocationUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyLocationUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyLocationsDeleteArgs {
    companyLocationIds: Array<string>;
  }
  export interface MutationToCompanyLocationsDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyLocationsDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyRevokeMainContactArgs {
    companyId: string;
  }
  export interface MutationToCompanyRevokeMainContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyRevokeMainContactArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCompanyUpdateArgs {
    companyId: string;
    input: CompanyInput;
  }
  export interface MutationToCompanyUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCompanyUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerAddTaxExemptionsArgs {
    customerId: string;
    taxExemptions: Array<TaxExemption>;
  }
  export interface MutationToCustomerAddTaxExemptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerAddTaxExemptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerCancelDataErasureArgs {
    customerId: string;
  }
  export interface MutationToCustomerCancelDataErasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerCancelDataErasureArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerCreateArgs {
    input: CustomerInput;
  }
  export interface MutationToCustomerCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerDeleteArgs {
    input: CustomerDeleteInput;
  }
  export interface MutationToCustomerDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerEmailMarketingConsentUpdateArgs {
    input: CustomerEmailMarketingConsentUpdateInput;
  }
  export interface MutationToCustomerEmailMarketingConsentUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerEmailMarketingConsentUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerGenerateAccountActivationUrlArgs {
    customerId: string;
  }
  export interface MutationToCustomerGenerateAccountActivationUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerGenerateAccountActivationUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerMergeArgs {
    customerOneId: string;
    customerTwoId: string;
    overrideFields?: CustomerMergeOverrideFields;
  }
  export interface MutationToCustomerMergeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerMergeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerPaymentMethodCreateFromDuplicationDataArgs {
    customerId: string;
    billingAddress: MailingAddressInput;
    encryptedDuplicationData: string;
  }
  export interface MutationToCustomerPaymentMethodCreateFromDuplicationDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerPaymentMethodCreateFromDuplicationDataArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerPaymentMethodCreditCardCreateArgs {
    customerId: string;
    billingAddress: MailingAddressInput;
    sessionId: string;
  }
  export interface MutationToCustomerPaymentMethodCreditCardCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerPaymentMethodCreditCardCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerPaymentMethodCreditCardUpdateArgs {
    id: string;
    billingAddress: MailingAddressInput;
    sessionId: string;
  }
  export interface MutationToCustomerPaymentMethodCreditCardUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerPaymentMethodCreditCardUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerPaymentMethodGetDuplicationDataArgs {
    customerPaymentMethodId: string;
    targetShopId: string;
    targetCustomerId: string;
  }
  export interface MutationToCustomerPaymentMethodGetDuplicationDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerPaymentMethodGetDuplicationDataArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerPaymentMethodGetUpdateUrlArgs {
    customerPaymentMethodId: string;
  }
  export interface MutationToCustomerPaymentMethodGetUpdateUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerPaymentMethodGetUpdateUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerPaymentMethodPaypalBillingAgreementCreateArgs {
    customerId: string;
    billingAddress?: MailingAddressInput;
    billingAgreementId: string;
    inactive?: boolean;
  }
  export interface MutationToCustomerPaymentMethodPaypalBillingAgreementCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerPaymentMethodPaypalBillingAgreementCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerPaymentMethodPaypalBillingAgreementUpdateArgs {
    id: string;
    billingAddress: MailingAddressInput;
  }
  export interface MutationToCustomerPaymentMethodPaypalBillingAgreementUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerPaymentMethodPaypalBillingAgreementUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerPaymentMethodRemoteCreateArgs {
    customerId: string;
    remoteReference: CustomerPaymentMethodRemoteInput;
  }
  export interface MutationToCustomerPaymentMethodRemoteCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerPaymentMethodRemoteCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerPaymentMethodRemoteCreditCardCreateArgs {
    customerId: string;
    stripeCustomerId: string;
    stripePaymentMethodId?: string;
  }
  export interface MutationToCustomerPaymentMethodRemoteCreditCardCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerPaymentMethodRemoteCreditCardCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerPaymentMethodRevokeArgs {
    customerPaymentMethodId: string;
  }
  export interface MutationToCustomerPaymentMethodRevokeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerPaymentMethodRevokeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerPaymentMethodSendUpdateEmailArgs {
    customerPaymentMethodId: string;
    email?: EmailInput;
  }
  export interface MutationToCustomerPaymentMethodSendUpdateEmailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerPaymentMethodSendUpdateEmailArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerRemoveTaxExemptionsArgs {
    customerId: string;
    taxExemptions: Array<TaxExemption>;
  }
  export interface MutationToCustomerRemoveTaxExemptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerRemoveTaxExemptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerReplaceTaxExemptionsArgs {
    customerId: string;
    taxExemptions: Array<TaxExemption>;
  }
  export interface MutationToCustomerReplaceTaxExemptionsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerReplaceTaxExemptionsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerRequestDataErasureArgs {
    customerId: string;
  }
  export interface MutationToCustomerRequestDataErasureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerRequestDataErasureArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerSegmentMembersQueryCreateArgs {
    input: CustomerSegmentMembersQueryInput;
  }
  export interface MutationToCustomerSegmentMembersQueryCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerSegmentMembersQueryCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerSmsMarketingConsentUpdateArgs {
    input: CustomerSmsMarketingConsentUpdateInput;
  }
  export interface MutationToCustomerSmsMarketingConsentUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerSmsMarketingConsentUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerUpdateArgs {
    input: CustomerInput;
  }
  export interface MutationToCustomerUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToCustomerUpdateDefaultAddressArgs {
    customerId: string;
    addressId: string;
  }
  export interface MutationToCustomerUpdateDefaultAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToCustomerUpdateDefaultAddressArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDelegateAccessTokenCreateArgs {
    input: DelegateAccessTokenInput;
  }
  export interface MutationToDelegateAccessTokenCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDelegateAccessTokenCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDelegateAccessTokenDestroyArgs {
    accessToken: string;
  }
  export interface MutationToDelegateAccessTokenDestroyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDelegateAccessTokenDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeliveryCustomizationActivationArgs {
    ids: Array<string>;
    enabled: boolean;
  }
  export interface MutationToDeliveryCustomizationActivationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeliveryCustomizationActivationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeliveryCustomizationCreateArgs {
    deliveryCustomization: DeliveryCustomizationInput;
  }
  export interface MutationToDeliveryCustomizationCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeliveryCustomizationCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeliveryCustomizationDeleteArgs {
    id: string;
  }
  export interface MutationToDeliveryCustomizationDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeliveryCustomizationDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeliveryCustomizationUpdateArgs {
    id: string;
    deliveryCustomization: DeliveryCustomizationInput;
  }
  export interface MutationToDeliveryCustomizationUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeliveryCustomizationUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeliveryProfileCreateArgs {
    profile: DeliveryProfileInput;
  }
  export interface MutationToDeliveryProfileCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeliveryProfileCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeliveryProfileRemoveArgs {
    id: string;
  }
  export interface MutationToDeliveryProfileRemoveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeliveryProfileRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeliveryProfileUpdateArgs {
    id: string;
    profile: DeliveryProfileInput;
    leaveLegacyModeProfiles?: boolean;
  }
  export interface MutationToDeliveryProfileUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeliveryProfileUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeliverySettingUpdateArgs {
    setting: DeliverySettingInput;
  }
  export interface MutationToDeliverySettingUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeliverySettingUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDeliveryShippingOriginAssignArgs {
    locationId: string;
  }
  export interface MutationToDeliveryShippingOriginAssignResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDeliveryShippingOriginAssignArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticActivateArgs {
    id: string;
  }
  export interface MutationToDiscountAutomaticActivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticActivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticAppCreateArgs {
    automaticAppDiscount: DiscountAutomaticAppInput;
  }
  export interface MutationToDiscountAutomaticAppCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticAppCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticAppUpdateArgs {
    id: string;
    automaticAppDiscount: DiscountAutomaticAppInput;
  }
  export interface MutationToDiscountAutomaticAppUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticAppUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticBasicCreateArgs {
    automaticBasicDiscount: DiscountAutomaticBasicInput;
  }
  export interface MutationToDiscountAutomaticBasicCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticBasicCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticBasicUpdateArgs {
    id: string;
    automaticBasicDiscount: DiscountAutomaticBasicInput;
  }
  export interface MutationToDiscountAutomaticBasicUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticBasicUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticBulkDeleteArgs {
    search?: string;
    savedSearchId?: string;
    ids?: Array<string>;
  }
  export interface MutationToDiscountAutomaticBulkDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticBulkDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticBxgyCreateArgs {
    automaticBxgyDiscount: DiscountAutomaticBxgyInput;
  }
  export interface MutationToDiscountAutomaticBxgyCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticBxgyCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticBxgyUpdateArgs {
    id: string;
    automaticBxgyDiscount: DiscountAutomaticBxgyInput;
  }
  export interface MutationToDiscountAutomaticBxgyUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticBxgyUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticDeactivateArgs {
    id: string;
  }
  export interface MutationToDiscountAutomaticDeactivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticDeactivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticDeleteArgs {
    id: string;
  }
  export interface MutationToDiscountAutomaticDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticFreeShippingCreateArgs {
    freeShippingAutomaticDiscount: DiscountAutomaticFreeShippingInput;
  }
  export interface MutationToDiscountAutomaticFreeShippingCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticFreeShippingCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountAutomaticFreeShippingUpdateArgs {
    id: string;
    freeShippingAutomaticDiscount: DiscountAutomaticFreeShippingInput;
  }
  export interface MutationToDiscountAutomaticFreeShippingUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountAutomaticFreeShippingUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeActivateArgs {
    id: string;
  }
  export interface MutationToDiscountCodeActivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeActivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeAppCreateArgs {
    codeAppDiscount: DiscountCodeAppInput;
  }
  export interface MutationToDiscountCodeAppCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeAppCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeAppUpdateArgs {
    id: string;
    codeAppDiscount: DiscountCodeAppInput;
  }
  export interface MutationToDiscountCodeAppUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeAppUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeBasicCreateArgs {
    basicCodeDiscount: DiscountCodeBasicInput;
  }
  export interface MutationToDiscountCodeBasicCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeBasicCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeBasicUpdateArgs {
    id: string;
    basicCodeDiscount: DiscountCodeBasicInput;
  }
  export interface MutationToDiscountCodeBasicUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeBasicUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeBulkActivateArgs {
    search?: string;
    savedSearchId?: string;
    ids?: Array<string>;
  }
  export interface MutationToDiscountCodeBulkActivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeBulkActivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeBulkDeactivateArgs {
    search?: string;
    savedSearchId?: string;
    ids?: Array<string>;
  }
  export interface MutationToDiscountCodeBulkDeactivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeBulkDeactivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeBulkDeleteArgs {
    search?: string;
    savedSearchId?: string;
    ids?: Array<string>;
  }
  export interface MutationToDiscountCodeBulkDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeBulkDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeBxgyCreateArgs {
    bxgyCodeDiscount: DiscountCodeBxgyInput;
  }
  export interface MutationToDiscountCodeBxgyCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeBxgyCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeBxgyUpdateArgs {
    id: string;
    bxgyCodeDiscount: DiscountCodeBxgyInput;
  }
  export interface MutationToDiscountCodeBxgyUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeBxgyUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeDeactivateArgs {
    id: string;
  }
  export interface MutationToDiscountCodeDeactivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeDeactivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeDeleteArgs {
    id: string;
  }
  export interface MutationToDiscountCodeDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeFreeShippingCreateArgs {
    freeShippingCodeDiscount: DiscountCodeFreeShippingInput;
  }
  export interface MutationToDiscountCodeFreeShippingCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeFreeShippingCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeFreeShippingUpdateArgs {
    id: string;
    freeShippingCodeDiscount: DiscountCodeFreeShippingInput;
  }
  export interface MutationToDiscountCodeFreeShippingUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeFreeShippingUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountCodeRedeemCodeBulkDeleteArgs {
    discountId: string;
    search?: string;
    savedSearchId?: string;
    ids?: Array<string>;
  }
  export interface MutationToDiscountCodeRedeemCodeBulkDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountCodeRedeemCodeBulkDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDiscountRedeemCodeBulkAddArgs {
    discountId: string;
    codes: Array<DiscountRedeemCodeInput>;
  }
  export interface MutationToDiscountRedeemCodeBulkAddResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDiscountRedeemCodeBulkAddArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDisputeEvidenceUpdateArgs {
    id: string;
    input: ShopifyPaymentsDisputeEvidenceUpdateInput;
  }
  export interface MutationToDisputeEvidenceUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDisputeEvidenceUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderBulkAddTagsArgs {
    search?: string;
    savedSearchId?: string;
    ids?: Array<string>;
    tags: Array<string>;
  }
  export interface MutationToDraftOrderBulkAddTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderBulkAddTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderBulkDeleteArgs {
    search?: string;
    savedSearchId?: string;
    ids?: Array<string>;
  }
  export interface MutationToDraftOrderBulkDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderBulkDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderBulkRemoveTagsArgs {
    search?: string;
    savedSearchId?: string;
    ids?: Array<string>;
    tags: Array<string>;
  }
  export interface MutationToDraftOrderBulkRemoveTagsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderBulkRemoveTagsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderCalculateArgs {
    input: DraftOrderInput;
  }
  export interface MutationToDraftOrderCalculateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderCalculateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderCompleteArgs {
    id: string;
    paymentPending?: boolean;
    paymentGatewayId?: string;
    sourceName?: string;
  }
  export interface MutationToDraftOrderCompleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderCompleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderCreateArgs {
    input: DraftOrderInput;
  }
  export interface MutationToDraftOrderCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderCreateFromOrderArgs {
    orderId: string;
  }
  export interface MutationToDraftOrderCreateFromOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderCreateFromOrderArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderCreateMerchantCheckoutArgs {
    id: string;
  }
  export interface MutationToDraftOrderCreateMerchantCheckoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderCreateMerchantCheckoutArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderDeleteArgs {
    input: DraftOrderDeleteInput;
  }
  export interface MutationToDraftOrderDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderDuplicateArgs {
    id?: string;
  }
  export interface MutationToDraftOrderDuplicateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderDuplicateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderInvoicePreviewArgs {
    id: string;
    email?: EmailInput;
  }
  export interface MutationToDraftOrderInvoicePreviewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderInvoicePreviewArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderInvoiceSendArgs {
    id: string;
    email?: EmailInput;
  }
  export interface MutationToDraftOrderInvoiceSendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderInvoiceSendArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToDraftOrderUpdateArgs {
    id: string;
    input: DraftOrderInput;
  }
  export interface MutationToDraftOrderUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToDraftOrderUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToEventBridgeServerPixelUpdateArgs {
    arn: ARN;
  }
  export interface MutationToEventBridgeServerPixelUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToEventBridgeServerPixelUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToEventBridgeWebhookSubscriptionCreateArgs {
    topic: WebhookSubscriptionTopic;
    subTopic?: string;
    webhookSubscription: EventBridgeWebhookSubscriptionInput;
  }
  export interface MutationToEventBridgeWebhookSubscriptionCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToEventBridgeWebhookSubscriptionCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToEventBridgeWebhookSubscriptionUpdateArgs {
    id: string;
    webhookSubscription: EventBridgeWebhookSubscriptionInput;
  }
  export interface MutationToEventBridgeWebhookSubscriptionUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToEventBridgeWebhookSubscriptionUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFileAcknowledgeUpdateFailedArgs {
    fileIds: Array<string>;
  }
  export interface MutationToFileAcknowledgeUpdateFailedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFileAcknowledgeUpdateFailedArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFileCreateArgs {
    files: Array<FileCreateInput>;
  }
  export interface MutationToFileCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFileCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFileDeleteArgs {
    fileIds: Array<string>;
  }
  export interface MutationToFileDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFileDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFileUpdateArgs {
    files: Array<FileUpdateInput>;
  }
  export interface MutationToFileUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFileUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFlowGenerateSignatureArgs {
    id: string;
    payload: string;
  }
  export interface MutationToFlowGenerateSignatureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFlowGenerateSignatureArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFlowTriggerReceiveArgs {
    handle?: string;
    payload?: JSON;
  }
  export interface MutationToFlowTriggerReceiveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFlowTriggerReceiveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentCancelArgs {
    id: string;
  }
  export interface MutationToFulfillmentCancelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentCancelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentConstraintRuleCreateArgs {
    functionId: string;
    metafields?: Array<MetafieldInput>;
  }
  export interface MutationToFulfillmentConstraintRuleCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentConstraintRuleCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentConstraintRuleDeleteArgs {
    id: string;
  }
  export interface MutationToFulfillmentConstraintRuleDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentConstraintRuleDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentCreateV2Args {
    fulfillment: FulfillmentV2Input;
    message?: string;
  }
  export interface MutationToFulfillmentCreateV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentCreateV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentEventCreateArgs {
    fulfillmentEvent: FulfillmentEventInput;
  }
  export interface MutationToFulfillmentEventCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentEventCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderAcceptCancellationRequestArgs {
    id: string;
    message?: string;
  }
  export interface MutationToFulfillmentOrderAcceptCancellationRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderAcceptCancellationRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderAcceptFulfillmentRequestArgs {
    id: string;
    message?: string;
  }
  export interface MutationToFulfillmentOrderAcceptFulfillmentRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderAcceptFulfillmentRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderCancelArgs {
    id: string;
  }
  export interface MutationToFulfillmentOrderCancelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderCancelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderCloseArgs {
    id: string;
    message?: string;
  }
  export interface MutationToFulfillmentOrderCloseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderCloseArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderHoldArgs {
    id: string;
    fulfillmentHold: FulfillmentOrderHoldInput;
  }
  export interface MutationToFulfillmentOrderHoldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderHoldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderLineItemsPreparedForPickupArgs {
    input: FulfillmentOrderLineItemsPreparedForPickupInput;
  }
  export interface MutationToFulfillmentOrderLineItemsPreparedForPickupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderLineItemsPreparedForPickupArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderMergeArgs {
    fulfillmentOrderMergeInputs: Array<FulfillmentOrderMergeInput>;
  }
  export interface MutationToFulfillmentOrderMergeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderMergeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderMoveArgs {
    id: string;
    newLocationId: string;
    fulfillmentOrderLineItems?: Array<FulfillmentOrderLineItemInput>;
  }
  export interface MutationToFulfillmentOrderMoveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderMoveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderOpenArgs {
    id: string;
  }
  export interface MutationToFulfillmentOrderOpenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderOpenArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderRejectCancellationRequestArgs {
    id: string;
    message?: string;
  }
  export interface MutationToFulfillmentOrderRejectCancellationRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderRejectCancellationRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderRejectFulfillmentRequestArgs {
    id: string;
    reason?: FulfillmentOrderRejectionReason;
    message?: string;
    lineItems?: Array<IncomingRequestLineItemInput>;
  }
  export interface MutationToFulfillmentOrderRejectFulfillmentRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderRejectFulfillmentRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderReleaseHoldArgs {
    id: string;
    externalId?: string;
  }
  export interface MutationToFulfillmentOrderReleaseHoldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderReleaseHoldArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderRescheduleArgs {
    id: string;
    fulfillAt: DateTime;
  }
  export interface MutationToFulfillmentOrderRescheduleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderRescheduleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderSplitArgs {
    fulfillmentOrderSplits: Array<FulfillmentOrderSplitInput>;
  }
  export interface MutationToFulfillmentOrderSplitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderSplitArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderSubmitCancellationRequestArgs {
    id: string;
    message?: string;
  }
  export interface MutationToFulfillmentOrderSubmitCancellationRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderSubmitCancellationRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrderSubmitFulfillmentRequestArgs {
    id: string;
    message?: string;
    notifyCustomer?: boolean;
    fulfillmentOrderLineItems?: Array<FulfillmentOrderLineItemInput>;
  }
  export interface MutationToFulfillmentOrderSubmitFulfillmentRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrderSubmitFulfillmentRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrdersReleaseHoldsArgs {
    ids: Array<string>;
    externalId?: string;
  }
  export interface MutationToFulfillmentOrdersReleaseHoldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrdersReleaseHoldsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentOrdersSetFulfillmentDeadlineArgs {
    fulfillmentOrderIds: Array<string>;
    fulfillmentDeadline: DateTime;
  }
  export interface MutationToFulfillmentOrdersSetFulfillmentDeadlineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentOrdersSetFulfillmentDeadlineArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentServiceCreateArgs {
    name: string;
    callbackUrl: URL;
    trackingSupport?: boolean;
    fulfillmentOrdersOptIn: boolean;
    permitsSkuSharing?: boolean;
    inventoryManagement?: boolean;
  }
  export interface MutationToFulfillmentServiceCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentServiceCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentServiceDeleteArgs {
    id: string;
    destinationLocationId?: string;
  }
  export interface MutationToFulfillmentServiceDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentServiceDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentServiceUpdateArgs {
    id: string;
    name?: string;
    callbackUrl?: URL;
    trackingSupport?: boolean;
    permitsSkuSharing?: boolean;
  }
  export interface MutationToFulfillmentServiceUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentServiceUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToFulfillmentTrackingInfoUpdateV2Args {
    fulfillmentId: string;
    trackingInfoInput: FulfillmentTrackingInput;
    notifyCustomer?: boolean;
  }
  export interface MutationToFulfillmentTrackingInfoUpdateV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToFulfillmentTrackingInfoUpdateV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToGiftCardCreateArgs {
    input: GiftCardCreateInput;
  }
  export interface MutationToGiftCardCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToGiftCardCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToGiftCardDisableArgs {
    id: string;
  }
  export interface MutationToGiftCardDisableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToGiftCardDisableArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToGiftCardUpdateArgs {
    id: string;
    input: GiftCardUpdateInput;
  }
  export interface MutationToGiftCardUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToGiftCardUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToInventoryActivateArgs {
    inventoryItemId: string;
    locationId: string;
    available?: number;
    onHand?: number;
  }
  export interface MutationToInventoryActivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToInventoryActivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToInventoryAdjustQuantitiesArgs {
    input: InventoryAdjustQuantitiesInput;
  }
  export interface MutationToInventoryAdjustQuantitiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToInventoryAdjustQuantitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToInventoryAdjustQuantityArgs {
    input: InventoryAdjustQuantityInput;
  }
  export interface MutationToInventoryAdjustQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToInventoryAdjustQuantityArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToInventoryBulkAdjustQuantityAtLocationArgs {
    inventoryItemAdjustments: Array<InventoryAdjustItemInput>;
    locationId: string;
  }
  export interface MutationToInventoryBulkAdjustQuantityAtLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToInventoryBulkAdjustQuantityAtLocationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToInventoryBulkToggleActivationArgs {
    inventoryItemId: string;
    inventoryItemUpdates: Array<InventoryBulkToggleActivationInput>;
  }
  export interface MutationToInventoryBulkToggleActivationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToInventoryBulkToggleActivationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToInventoryDeactivateArgs {
    inventoryLevelId: string;
  }
  export interface MutationToInventoryDeactivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToInventoryDeactivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToInventoryItemUpdateArgs {
    id: string;
    input: InventoryItemUpdateInput;
  }
  export interface MutationToInventoryItemUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToInventoryItemUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToInventoryMoveQuantitiesArgs {
    input: InventoryMoveQuantitiesInput;
  }
  export interface MutationToInventoryMoveQuantitiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToInventoryMoveQuantitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToInventorySetOnHandQuantitiesArgs {
    input: InventorySetOnHandQuantitiesInput;
  }
  export interface MutationToInventorySetOnHandQuantitiesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToInventorySetOnHandQuantitiesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToInventorySetScheduledChangesArgs {
    input: InventorySetScheduledChangesInput;
  }
  export interface MutationToInventorySetScheduledChangesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToInventorySetScheduledChangesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToLocationActivateArgs {
    locationId: string;
  }
  export interface MutationToLocationActivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLocationActivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToLocationAddArgs {
    input: LocationAddInput;
  }
  export interface MutationToLocationAddResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLocationAddArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToLocationDeactivateArgs {
    locationId: string;
    destinationLocationId?: string;
  }
  export interface MutationToLocationDeactivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLocationDeactivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToLocationDeleteArgs {
    locationId: string;
  }
  export interface MutationToLocationDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLocationDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToLocationEditArgs {
    id: string;
    input: LocationEditInput;
  }
  export interface MutationToLocationEditResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLocationEditArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToLocationLocalPickupDisableArgs {
    locationId: string;
  }
  export interface MutationToLocationLocalPickupDisableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLocationLocalPickupDisableArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToLocationLocalPickupEnableArgs {
    localPickupSettings: DeliveryLocationLocalPickupEnableInput;
  }
  export interface MutationToLocationLocalPickupEnableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToLocationLocalPickupEnableArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketCreateArgs {
    input: MarketCreateInput;
  }
  export interface MutationToMarketCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketCurrencySettingsUpdateArgs {
    marketId: string;
    input: MarketCurrencySettingsUpdateInput;
  }
  export interface MutationToMarketCurrencySettingsUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketCurrencySettingsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketDeleteArgs {
    id: string;
  }
  export interface MutationToMarketDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketLocalizationsRegisterArgs {
    resourceId: string;
    marketLocalizations: Array<MarketLocalizationRegisterInput>;
  }
  export interface MutationToMarketLocalizationsRegisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketLocalizationsRegisterArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketLocalizationsRemoveArgs {
    resourceId: string;
    marketLocalizationKeys: Array<string>;
    marketIds: Array<string>;
  }
  export interface MutationToMarketLocalizationsRemoveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketLocalizationsRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketRegionDeleteArgs {
    id: string;
  }
  export interface MutationToMarketRegionDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketRegionDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketRegionsCreateArgs {
    marketId: string;
    regions: Array<MarketRegionCreateInput>;
  }
  export interface MutationToMarketRegionsCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketRegionsCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketRegionsDeleteArgs {
    ids: Array<string>;
  }
  export interface MutationToMarketRegionsDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketRegionsDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketUpdateArgs {
    id: string;
    input: MarketUpdateInput;
  }
  export interface MutationToMarketUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketWebPresenceCreateArgs {
    marketId: string;
    webPresence: MarketWebPresenceCreateInput;
  }
  export interface MutationToMarketWebPresenceCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketWebPresenceCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketWebPresenceDeleteArgs {
    webPresenceId: string;
  }
  export interface MutationToMarketWebPresenceDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketWebPresenceDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketWebPresenceUpdateArgs {
    webPresenceId: string;
    webPresence: MarketWebPresenceUpdateInput;
  }
  export interface MutationToMarketWebPresenceUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketWebPresenceUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketingActivitiesDeleteAllExternalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketingActivityCreateArgs {
    input: MarketingActivityCreateInput;
  }
  export interface MutationToMarketingActivityCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketingActivityCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketingActivityCreateExternalArgs {
    input: MarketingActivityCreateExternalInput;
  }
  export interface MutationToMarketingActivityCreateExternalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketingActivityCreateExternalArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketingActivityDeleteExternalArgs {
    marketingActivityId?: string;
    remoteId?: string;
  }
  export interface MutationToMarketingActivityDeleteExternalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketingActivityDeleteExternalArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketingActivityUpdateArgs {
    input: MarketingActivityUpdateInput;
  }
  export interface MutationToMarketingActivityUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketingActivityUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketingActivityUpdateExternalArgs {
    input: MarketingActivityUpdateExternalInput;
    marketingActivityId?: string;
    remoteId?: string;
    utm?: UTMInput;
  }
  export interface MutationToMarketingActivityUpdateExternalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketingActivityUpdateExternalArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketingActivityUpsertExternalArgs {
    input: MarketingActivityUpsertExternalInput;
  }
  export interface MutationToMarketingActivityUpsertExternalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketingActivityUpsertExternalArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketingEngagementCreateArgs {
    marketingActivityId?: string;
    remoteId?: string;
    channelHandle?: string;
    marketingEngagement: MarketingEngagementInput;
  }
  export interface MutationToMarketingEngagementCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketingEngagementCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMarketingEngagementsDeleteArgs {
    channelHandle?: string;
    deleteEngagementsForAllChannels?: boolean;
  }
  export interface MutationToMarketingEngagementsDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMarketingEngagementsDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetafieldDefinitionCreateArgs {
    definition: MetafieldDefinitionInput;
  }
  export interface MutationToMetafieldDefinitionCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetafieldDefinitionCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetafieldDefinitionDeleteArgs {
    id: string;
    deleteAllAssociatedMetafields?: boolean;
  }
  export interface MutationToMetafieldDefinitionDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetafieldDefinitionDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetafieldDefinitionPinArgs {
    definitionId: string;
  }
  export interface MutationToMetafieldDefinitionPinResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetafieldDefinitionPinArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetafieldDefinitionUnpinArgs {
    definitionId: string;
  }
  export interface MutationToMetafieldDefinitionUnpinResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetafieldDefinitionUnpinArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetafieldDefinitionUpdateArgs {
    definition: MetafieldDefinitionUpdateInput;
  }
  export interface MutationToMetafieldDefinitionUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetafieldDefinitionUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetafieldDeleteArgs {
    input: MetafieldDeleteInput;
  }
  export interface MutationToMetafieldDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetafieldDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetafieldStorefrontVisibilityCreateArgs {
    input: MetafieldStorefrontVisibilityInput;
  }
  export interface MutationToMetafieldStorefrontVisibilityCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetafieldStorefrontVisibilityCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetafieldStorefrontVisibilityDeleteArgs {
    id: string;
  }
  export interface MutationToMetafieldStorefrontVisibilityDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetafieldStorefrontVisibilityDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetafieldsSetArgs {
    metafields: Array<MetafieldsSetInput>;
  }
  export interface MutationToMetafieldsSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetafieldsSetArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetaobjectBulkDeleteArgs {
    where: MetaobjectBulkDeleteWhereCondition;
  }
  export interface MutationToMetaobjectBulkDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetaobjectBulkDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetaobjectCreateArgs {
    metaobject: MetaobjectCreateInput;
  }
  export interface MutationToMetaobjectCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetaobjectCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetaobjectDefinitionCreateArgs {
    definition: MetaobjectDefinitionCreateInput;
  }
  export interface MutationToMetaobjectDefinitionCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetaobjectDefinitionCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetaobjectDefinitionDeleteArgs {
    id: string;
  }
  export interface MutationToMetaobjectDefinitionDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetaobjectDefinitionDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetaobjectDefinitionUpdateArgs {
    id: string;
    definition: MetaobjectDefinitionUpdateInput;
  }
  export interface MutationToMetaobjectDefinitionUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetaobjectDefinitionUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetaobjectDeleteArgs {
    id: string;
  }
  export interface MutationToMetaobjectDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetaobjectDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetaobjectUpdateArgs {
    id: string;
    metaobject: MetaobjectUpdateInput;
  }
  export interface MutationToMetaobjectUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetaobjectUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToMetaobjectUpsertArgs {
    handle: MetaobjectHandleInput;
    metaobject: MetaobjectUpsertInput;
  }
  export interface MutationToMetaobjectUpsertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToMetaobjectUpsertArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderCancelArgs {
    orderId: string;
    refund: boolean;
    restock: boolean;
    reason: OrderCancelReason;
    notifyCustomer?: boolean;
    staffNote?: string;
  }
  export interface MutationToOrderCancelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderCancelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderCaptureArgs {
    input: OrderCaptureInput;
  }
  export interface MutationToOrderCaptureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderCaptureArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderCloseArgs {
    input: OrderCloseInput;
  }
  export interface MutationToOrderCloseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderCloseArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderCreateMandatePaymentArgs {
    id: string;
    paymentScheduleId?: string;
    idempotencyKey: string;
    mandateId: string;
    autoCapture?: boolean;
  }
  export interface MutationToOrderCreateMandatePaymentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderCreateMandatePaymentArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderEditAddCustomItemArgs {
    id: string;
    title: string;
    locationId?: string;
    price: MoneyInput;
    quantity: number;
    taxable?: boolean;
    requiresShipping?: boolean;
  }
  export interface MutationToOrderEditAddCustomItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderEditAddCustomItemArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderEditAddLineItemDiscountArgs {
    id: string;
    lineItemId: string;
    discount: OrderEditAppliedDiscountInput;
  }
  export interface MutationToOrderEditAddLineItemDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderEditAddLineItemDiscountArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderEditAddVariantArgs {
    id: string;
    variantId: string;
    locationId?: string;
    quantity: number;
    allowDuplicates?: boolean;
  }
  export interface MutationToOrderEditAddVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderEditAddVariantArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderEditBeginArgs {
    id: string;
  }
  export interface MutationToOrderEditBeginResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderEditBeginArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderEditCommitArgs {
    id: string;
    notifyCustomer?: boolean;
    staffNote?: string;
  }
  export interface MutationToOrderEditCommitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderEditCommitArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderEditRemoveDiscountArgs {
    id: string;
    discountApplicationId: string;
  }
  export interface MutationToOrderEditRemoveDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderEditRemoveDiscountArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderEditRemoveLineItemDiscountArgs {
    id: string;
    discountApplicationId: string;
  }
  export interface MutationToOrderEditRemoveLineItemDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderEditRemoveLineItemDiscountArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderEditSetQuantityArgs {
    id: string;
    lineItemId: string;
    quantity: number;
    restock?: boolean;
  }
  export interface MutationToOrderEditSetQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderEditSetQuantityArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderEditUpdateDiscountArgs {
    id: string;
    discount: OrderEditAppliedDiscountInput;
    discountApplicationId: string;
  }
  export interface MutationToOrderEditUpdateDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderEditUpdateDiscountArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderInvoiceSendArgs {
    id: string;
    email?: EmailInput;
  }
  export interface MutationToOrderInvoiceSendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderInvoiceSendArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderMarkAsPaidArgs {
    input: OrderMarkAsPaidInput;
  }
  export interface MutationToOrderMarkAsPaidResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderMarkAsPaidArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderOpenArgs {
    input: OrderOpenInput;
  }
  export interface MutationToOrderOpenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderOpenArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToOrderUpdateArgs {
    input: OrderInput;
  }
  export interface MutationToOrderUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToOrderUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPaymentCustomizationActivationArgs {
    ids: Array<string>;
    enabled: boolean;
  }
  export interface MutationToPaymentCustomizationActivationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPaymentCustomizationActivationArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPaymentCustomizationCreateArgs {
    paymentCustomization: PaymentCustomizationInput;
  }
  export interface MutationToPaymentCustomizationCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPaymentCustomizationCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPaymentCustomizationDeleteArgs {
    id: string;
  }
  export interface MutationToPaymentCustomizationDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPaymentCustomizationDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPaymentCustomizationUpdateArgs {
    id: string;
    paymentCustomization: PaymentCustomizationInput;
  }
  export interface MutationToPaymentCustomizationUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPaymentCustomizationUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPaymentReminderSendArgs {
    paymentScheduleId: string;
  }
  export interface MutationToPaymentReminderSendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPaymentReminderSendArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPaymentTermsCreateArgs {
    referenceId: string;
    paymentTermsAttributes: PaymentTermsCreateInput;
  }
  export interface MutationToPaymentTermsCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPaymentTermsCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPaymentTermsDeleteArgs {
    input: PaymentTermsDeleteInput;
  }
  export interface MutationToPaymentTermsDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPaymentTermsDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPaymentTermsUpdateArgs {
    input: PaymentTermsUpdateInput;
  }
  export interface MutationToPaymentTermsUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPaymentTermsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceListCreateArgs {
    input: PriceListCreateInput;
  }
  export interface MutationToPriceListCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceListCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceListDeleteArgs {
    id: string;
  }
  export interface MutationToPriceListDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceListDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceListFixedPricesAddArgs {
    priceListId: string;
    prices: Array<PriceListPriceInput>;
  }
  export interface MutationToPriceListFixedPricesAddResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceListFixedPricesAddArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceListFixedPricesByProductUpdateArgs {
    pricesToAdd?: Array<PriceListProductPriceInput>;
    pricesToDeleteByProductIds?: Array<string>;
    priceListId: string;
  }
  export interface MutationToPriceListFixedPricesByProductUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceListFixedPricesByProductUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceListFixedPricesDeleteArgs {
    priceListId: string;
    variantIds: Array<string>;
  }
  export interface MutationToPriceListFixedPricesDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceListFixedPricesDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceListFixedPricesUpdateArgs {
    priceListId: string;
    pricesToAdd: Array<PriceListPriceInput>;
    variantIdsToDelete: Array<string>;
  }
  export interface MutationToPriceListFixedPricesUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceListFixedPricesUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceListUpdateArgs {
    id: string;
    input: PriceListUpdateInput;
  }
  export interface MutationToPriceListUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceListUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceRuleActivateArgs {
    id: string;
  }
  export interface MutationToPriceRuleActivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceRuleActivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceRuleCreateArgs {
    priceRule: PriceRuleInput;
    priceRuleDiscountCode?: PriceRuleDiscountCodeInput;
  }
  export interface MutationToPriceRuleCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceRuleCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceRuleDeactivateArgs {
    id: string;
  }
  export interface MutationToPriceRuleDeactivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceRuleDeactivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceRuleDeleteArgs {
    id: string;
  }
  export interface MutationToPriceRuleDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceRuleDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceRuleDiscountCodeCreateArgs {
    priceRuleId: string;
    code: string;
  }
  export interface MutationToPriceRuleDiscountCodeCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceRuleDiscountCodeCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceRuleDiscountCodeUpdateArgs {
    priceRuleId: string;
    code: string;
  }
  export interface MutationToPriceRuleDiscountCodeUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceRuleDiscountCodeUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPriceRuleUpdateArgs {
    id: string;
    priceRule: PriceRuleInput;
    priceRuleDiscountCode?: PriceRuleDiscountCodeInput;
  }
  export interface MutationToPriceRuleUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPriceRuleUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPrivateMetafieldDeleteArgs {
    input: PrivateMetafieldDeleteInput;
  }
  export interface MutationToPrivateMetafieldDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPrivateMetafieldDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPrivateMetafieldUpsertArgs {
    input: PrivateMetafieldInput;
  }
  export interface MutationToPrivateMetafieldUpsertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPrivateMetafieldUpsertArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductAppendImagesArgs {
    input: ProductAppendImagesInput;
  }
  export interface MutationToProductAppendImagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductAppendImagesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductChangeStatusArgs {
    productId: string;
    status: ProductStatus;
  }
  export interface MutationToProductChangeStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductChangeStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductCreateArgs {
    input: ProductInput;
    media?: Array<CreateMediaInput>;
  }
  export interface MutationToProductCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductCreateMediaArgs {
    productId: string;
    media: Array<CreateMediaInput>;
  }
  export interface MutationToProductCreateMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductCreateMediaArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductDeleteArgs {
    input: ProductDeleteInput;
  }
  export interface MutationToProductDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductDeleteAsyncArgs {
    productId: string;
  }
  export interface MutationToProductDeleteAsyncResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductDeleteAsyncArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductDeleteImagesArgs {
    id: string;
    imageIds: Array<string>;
  }
  export interface MutationToProductDeleteImagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductDeleteImagesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductDeleteMediaArgs {
    productId: string;
    mediaIds: Array<string>;
  }
  export interface MutationToProductDeleteMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductDeleteMediaArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductDuplicateArgs {
    productId: string;
    newTitle: string;
    newStatus?: ProductStatus;
    includeImages?: boolean;
    includeTranslations?: boolean;
  }
  export interface MutationToProductDuplicateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductDuplicateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductDuplicateAsyncArgs {
    input: ProductDuplicateAsyncInput;
  }
  export interface MutationToProductDuplicateAsyncResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductDuplicateAsyncArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductDuplicateAsyncV2Args {
    input: ProductDuplicateAsyncInput;
  }
  export interface MutationToProductDuplicateAsyncV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductDuplicateAsyncV2Args, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductFeedCreateArgs {
    input?: ProductFeedInput;
  }
  export interface MutationToProductFeedCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductFeedCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductFeedDeleteArgs {
    id: string;
  }
  export interface MutationToProductFeedDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductFeedDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductFullSyncArgs {
    beforeUpdatedAt?: DateTime;
    id: string;
    updatedAtSince?: DateTime;
  }
  export interface MutationToProductFullSyncResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductFullSyncArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductImageUpdateArgs {
    productId: string;
    image: ImageInput;
  }
  export interface MutationToProductImageUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductImageUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductJoinSellingPlanGroupsArgs {
    id: string;
    sellingPlanGroupIds: Array<string>;
  }
  export interface MutationToProductJoinSellingPlanGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductJoinSellingPlanGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductLeaveSellingPlanGroupsArgs {
    id: string;
    sellingPlanGroupIds: Array<string>;
  }
  export interface MutationToProductLeaveSellingPlanGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductLeaveSellingPlanGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductPublishArgs {
    input: ProductPublishInput;
  }
  export interface MutationToProductPublishResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductPublishArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductReorderImagesArgs {
    id: string;
    moves: Array<MoveInput>;
  }
  export interface MutationToProductReorderImagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductReorderImagesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductReorderMediaArgs {
    id: string;
    moves: Array<MoveInput>;
  }
  export interface MutationToProductReorderMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductReorderMediaArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductUnpublishArgs {
    input: ProductUnpublishInput;
  }
  export interface MutationToProductUnpublishResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductUnpublishArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductUpdateArgs {
    input: ProductInput;
    media?: Array<CreateMediaInput>;
  }
  export interface MutationToProductUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductUpdateMediaArgs {
    productId: string;
    media: Array<UpdateMediaInput>;
  }
  export interface MutationToProductUpdateMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductUpdateMediaArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantAppendMediaArgs {
    productId: string;
    variantMedia: Array<ProductVariantAppendMediaInput>;
  }
  export interface MutationToProductVariantAppendMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantAppendMediaArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantCreateArgs {
    input: ProductVariantInput;
  }
  export interface MutationToProductVariantCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantDeleteArgs {
    id: string;
  }
  export interface MutationToProductVariantDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantDetachMediaArgs {
    productId: string;
    variantMedia: Array<ProductVariantDetachMediaInput>;
  }
  export interface MutationToProductVariantDetachMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantDetachMediaArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantJoinSellingPlanGroupsArgs {
    id: string;
    sellingPlanGroupIds: Array<string>;
  }
  export interface MutationToProductVariantJoinSellingPlanGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantJoinSellingPlanGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantLeaveSellingPlanGroupsArgs {
    id: string;
    sellingPlanGroupIds: Array<string>;
  }
  export interface MutationToProductVariantLeaveSellingPlanGroupsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantLeaveSellingPlanGroupsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantRelationshipBulkUpdateArgs {
    input: Array<ProductVariantRelationshipUpdateInput>;
  }
  export interface MutationToProductVariantRelationshipBulkUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantRelationshipBulkUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantUpdateArgs {
    input: ProductVariantInput;
  }
  export interface MutationToProductVariantUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantsBulkCreateArgs {
    variants: Array<ProductVariantsBulkInput>;
    productId: string;
    media?: Array<CreateMediaInput>;
  }
  export interface MutationToProductVariantsBulkCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantsBulkCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantsBulkDeleteArgs {
    variantsIds: Array<string>;
    productId: string;
  }
  export interface MutationToProductVariantsBulkDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantsBulkDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantsBulkReorderArgs {
    productId: string;
    positions: Array<ProductVariantPositionInput>;
  }
  export interface MutationToProductVariantsBulkReorderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantsBulkReorderArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToProductVariantsBulkUpdateArgs {
    variants: Array<ProductVariantsBulkInput>;
    productId: string;
    media?: Array<CreateMediaInput>;
    allowPartialUpdates?: boolean;
  }
  export interface MutationToProductVariantsBulkUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToProductVariantsBulkUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPubSubServerPixelUpdateArgs {
    pubSubProject: string;
    pubSubTopic: string;
  }
  export interface MutationToPubSubServerPixelUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPubSubServerPixelUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPubSubWebhookSubscriptionCreateArgs {
    topic: WebhookSubscriptionTopic;
    subTopic?: string;
    webhookSubscription: PubSubWebhookSubscriptionInput;
  }
  export interface MutationToPubSubWebhookSubscriptionCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPubSubWebhookSubscriptionCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPubSubWebhookSubscriptionUpdateArgs {
    id: string;
    webhookSubscription?: PubSubWebhookSubscriptionInput;
  }
  export interface MutationToPubSubWebhookSubscriptionUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPubSubWebhookSubscriptionUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPublicationCreateArgs {
    input: PublicationCreateInput;
  }
  export interface MutationToPublicationCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPublicationCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPublicationDeleteArgs {
    id: string;
  }
  export interface MutationToPublicationDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPublicationDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPublicationUpdateArgs {
    id: string;
    input: PublicationUpdateInput;
  }
  export interface MutationToPublicationUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPublicationUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPublishablePublishArgs {
    id: string;
    input: Array<PublicationInput>;
  }
  export interface MutationToPublishablePublishResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPublishablePublishArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPublishablePublishToCurrentChannelArgs {
    id: string;
  }
  export interface MutationToPublishablePublishToCurrentChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPublishablePublishToCurrentChannelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPublishableUnpublishArgs {
    id: string;
    input: Array<PublicationInput>;
  }
  export interface MutationToPublishableUnpublishResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPublishableUnpublishArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToPublishableUnpublishToCurrentChannelArgs {
    id: string;
  }
  export interface MutationToPublishableUnpublishToCurrentChannelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToPublishableUnpublishToCurrentChannelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToQuantityPricingByVariantUpdateArgs {
    priceListId: string;
    input: QuantityPricingByVariantUpdateInput;
  }
  export interface MutationToQuantityPricingByVariantUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToQuantityPricingByVariantUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToQuantityRulesAddArgs {
    priceListId: string;
    quantityRules: Array<QuantityRuleInput>;
  }
  export interface MutationToQuantityRulesAddResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToQuantityRulesAddArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToQuantityRulesDeleteArgs {
    priceListId: string;
    variantIds: Array<string>;
  }
  export interface MutationToQuantityRulesDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToQuantityRulesDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToRefundCreateArgs {
    input: RefundInput;
  }
  export interface MutationToRefundCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToRefundCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReturnApproveRequestArgs {
    input: ReturnApproveRequestInput;
  }
  export interface MutationToReturnApproveRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReturnApproveRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReturnCancelArgs {
    id: string;
    notifyCustomer?: boolean;
  }
  export interface MutationToReturnCancelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReturnCancelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReturnCloseArgs {
    id: string;
  }
  export interface MutationToReturnCloseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReturnCloseArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReturnCreateArgs {
    returnInput: ReturnInput;
  }
  export interface MutationToReturnCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReturnCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReturnDeclineRequestArgs {
    input: ReturnDeclineRequestInput;
  }
  export interface MutationToReturnDeclineRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReturnDeclineRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReturnRefundArgs {
    returnRefundInput: ReturnRefundInput;
  }
  export interface MutationToReturnRefundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReturnRefundArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReturnReopenArgs {
    id: string;
  }
  export interface MutationToReturnReopenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReturnReopenArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReturnRequestArgs {
    input: ReturnRequestInput;
  }
  export interface MutationToReturnRequestResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReturnRequestArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReverseDeliveryCreateWithShippingArgs {
    reverseFulfillmentOrderId: string;
    reverseDeliveryLineItems: Array<ReverseDeliveryLineItemInput>;
    trackingInput?: ReverseDeliveryTrackingInput;
    labelInput?: ReverseDeliveryLabelInput;
    notifyCustomer?: boolean;
  }
  export interface MutationToReverseDeliveryCreateWithShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReverseDeliveryCreateWithShippingArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReverseDeliveryDisposeArgs {
    dispositionInputs: Array<ReverseDeliveryDisposeInput>;
  }
  export interface MutationToReverseDeliveryDisposeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReverseDeliveryDisposeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReverseDeliveryShippingUpdateArgs {
    reverseDeliveryId: string;
    trackingInput?: ReverseDeliveryTrackingInput;
    labelInput?: ReverseDeliveryLabelInput;
    notifyCustomer?: boolean;
  }
  export interface MutationToReverseDeliveryShippingUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReverseDeliveryShippingUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToReverseFulfillmentOrderDisposeArgs {
    dispositionInputs: Array<ReverseFulfillmentOrderDisposeInput>;
  }
  export interface MutationToReverseFulfillmentOrderDisposeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToReverseFulfillmentOrderDisposeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSavedSearchCreateArgs {
    input: SavedSearchCreateInput;
  }
  export interface MutationToSavedSearchCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSavedSearchCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSavedSearchDeleteArgs {
    input: SavedSearchDeleteInput;
  }
  export interface MutationToSavedSearchDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSavedSearchDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSavedSearchUpdateArgs {
    input: SavedSearchUpdateInput;
  }
  export interface MutationToSavedSearchUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSavedSearchUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToScriptTagCreateArgs {
    input: ScriptTagInput;
  }
  export interface MutationToScriptTagCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToScriptTagCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToScriptTagDeleteArgs {
    id: string;
  }
  export interface MutationToScriptTagDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToScriptTagDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToScriptTagUpdateArgs {
    id: string;
    input: ScriptTagInput;
  }
  export interface MutationToScriptTagUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToScriptTagUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSegmentCreateArgs {
    name: string;
    query: string;
  }
  export interface MutationToSegmentCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSegmentCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSegmentDeleteArgs {
    id: string;
  }
  export interface MutationToSegmentDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSegmentDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSegmentUpdateArgs {
    id: string;
    name?: string;
    query?: string;
  }
  export interface MutationToSegmentUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSegmentUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSellingPlanGroupAddProductVariantsArgs {
    id: string;
    productVariantIds: Array<string>;
  }
  export interface MutationToSellingPlanGroupAddProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSellingPlanGroupAddProductVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSellingPlanGroupAddProductsArgs {
    id: string;
    productIds: Array<string>;
  }
  export interface MutationToSellingPlanGroupAddProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSellingPlanGroupAddProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSellingPlanGroupCreateArgs {
    input: SellingPlanGroupInput;
    resources?: SellingPlanGroupResourceInput;
  }
  export interface MutationToSellingPlanGroupCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSellingPlanGroupCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSellingPlanGroupDeleteArgs {
    id: string;
  }
  export interface MutationToSellingPlanGroupDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSellingPlanGroupDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSellingPlanGroupRemoveProductVariantsArgs {
    id: string;
    productVariantIds: Array<string>;
  }
  export interface MutationToSellingPlanGroupRemoveProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSellingPlanGroupRemoveProductVariantsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSellingPlanGroupRemoveProductsArgs {
    id: string;
    productIds: Array<string>;
  }
  export interface MutationToSellingPlanGroupRemoveProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSellingPlanGroupRemoveProductsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSellingPlanGroupUpdateArgs {
    id: string;
    input: SellingPlanGroupInput;
  }
  export interface MutationToSellingPlanGroupUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSellingPlanGroupUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToServerPixelCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToServerPixelDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToShippingPackageDeleteArgs {
    id: string;
  }
  export interface MutationToShippingPackageDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToShippingPackageDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToShippingPackageMakeDefaultArgs {
    id: string;
  }
  export interface MutationToShippingPackageMakeDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToShippingPackageMakeDefaultArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToShippingPackageUpdateArgs {
    id: string;
    shippingPackage: CustomShippingPackageInput;
  }
  export interface MutationToShippingPackageUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToShippingPackageUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToShopLocaleDisableArgs {
    locale: string;
  }
  export interface MutationToShopLocaleDisableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToShopLocaleDisableArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToShopLocaleEnableArgs {
    locale: string;
    marketWebPresenceIds?: Array<string>;
  }
  export interface MutationToShopLocaleEnableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToShopLocaleEnableArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToShopLocaleUpdateArgs {
    locale: string;
    shopLocale: ShopLocaleInput;
  }
  export interface MutationToShopLocaleUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToShopLocaleUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToShopPolicyUpdateArgs {
    shopPolicy: ShopPolicyInput;
  }
  export interface MutationToShopPolicyUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToShopPolicyUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToShopResourceFeedbackCreateArgs {
    input: ResourceFeedbackCreateInput;
  }
  export interface MutationToShopResourceFeedbackCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToShopResourceFeedbackCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToStagedUploadTargetGenerateArgs {
    input: StagedUploadTargetGenerateInput;
  }
  export interface MutationToStagedUploadTargetGenerateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToStagedUploadTargetGenerateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToStagedUploadTargetsGenerateArgs {
    input: Array<StageImageInput>;
  }
  export interface MutationToStagedUploadTargetsGenerateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToStagedUploadTargetsGenerateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToStagedUploadsCreateArgs {
    input: Array<StagedUploadInput>;
  }
  export interface MutationToStagedUploadsCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToStagedUploadsCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToStandardMetafieldDefinitionEnableArgs {
    ownerType: MetafieldOwnerType;
    id?: string;
    namespace?: string;
    key?: string;
    pin: boolean;
    visibleToStorefrontApi?: boolean;
    useAsCollectionCondition?: boolean;
  }
  export interface MutationToStandardMetafieldDefinitionEnableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToStandardMetafieldDefinitionEnableArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToStandardMetaobjectDefinitionEnableArgs {
    type: string;
  }
  export interface MutationToStandardMetaobjectDefinitionEnableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToStandardMetaobjectDefinitionEnableArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToStorefrontAccessTokenCreateArgs {
    input: StorefrontAccessTokenInput;
  }
  export interface MutationToStorefrontAccessTokenCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToStorefrontAccessTokenCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToStorefrontAccessTokenDeleteArgs {
    input: StorefrontAccessTokenDeleteInput;
  }
  export interface MutationToStorefrontAccessTokenDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToStorefrontAccessTokenDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionBillingAttemptCreateArgs {
    subscriptionContractId: string;
    subscriptionBillingAttemptInput: SubscriptionBillingAttemptInput;
  }
  export interface MutationToSubscriptionBillingAttemptCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionBillingAttemptCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionBillingCycleContractDraftCommitArgs {
    draftId: string;
  }
  export interface MutationToSubscriptionBillingCycleContractDraftCommitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionBillingCycleContractDraftCommitArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionBillingCycleContractDraftConcatenateArgs {
    draftId: string;
    concatenatedBillingCycleContracts: Array<SubscriptionBillingCycleInput>;
  }
  export interface MutationToSubscriptionBillingCycleContractDraftConcatenateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionBillingCycleContractDraftConcatenateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionBillingCycleContractEditArgs {
    billingCycleInput: SubscriptionBillingCycleInput;
  }
  export interface MutationToSubscriptionBillingCycleContractEditResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionBillingCycleContractEditArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionBillingCycleEditDeleteArgs {
    billingCycleInput: SubscriptionBillingCycleInput;
  }
  export interface MutationToSubscriptionBillingCycleEditDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionBillingCycleEditDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionBillingCycleEditsDeleteArgs {
    contractId: string;
    targetSelection: SubscriptionBillingCyclesTargetSelection;
  }
  export interface MutationToSubscriptionBillingCycleEditsDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionBillingCycleEditsDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionBillingCycleScheduleEditArgs {
    billingCycleInput: SubscriptionBillingCycleInput;
    input: SubscriptionBillingCycleScheduleEditInput;
  }
  export interface MutationToSubscriptionBillingCycleScheduleEditResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionBillingCycleScheduleEditArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionBillingCycleSkipArgs {
    billingCycleInput: SubscriptionBillingCycleInput;
  }
  export interface MutationToSubscriptionBillingCycleSkipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionBillingCycleSkipArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionBillingCycleUnskipArgs {
    billingCycleInput: SubscriptionBillingCycleInput;
  }
  export interface MutationToSubscriptionBillingCycleUnskipResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionBillingCycleUnskipArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionContractActivateArgs {
    subscriptionContractId: string;
  }
  export interface MutationToSubscriptionContractActivateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionContractActivateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionContractAtomicCreateArgs {
    input: SubscriptionContractAtomicCreateInput;
  }
  export interface MutationToSubscriptionContractAtomicCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionContractAtomicCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionContractCancelArgs {
    subscriptionContractId: string;
  }
  export interface MutationToSubscriptionContractCancelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionContractCancelArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionContractCreateArgs {
    input: SubscriptionContractCreateInput;
  }
  export interface MutationToSubscriptionContractCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionContractCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionContractExpireArgs {
    subscriptionContractId: string;
  }
  export interface MutationToSubscriptionContractExpireResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionContractExpireArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionContractFailArgs {
    subscriptionContractId: string;
  }
  export interface MutationToSubscriptionContractFailResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionContractFailArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionContractPauseArgs {
    subscriptionContractId: string;
  }
  export interface MutationToSubscriptionContractPauseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionContractPauseArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionContractProductChangeArgs {
    subscriptionContractId: string;
    lineId: string;
    input: SubscriptionContractProductChangeInput;
  }
  export interface MutationToSubscriptionContractProductChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionContractProductChangeArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionContractSetNextBillingDateArgs {
    contractId: string;
    date: DateTime;
  }
  export interface MutationToSubscriptionContractSetNextBillingDateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionContractSetNextBillingDateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionContractUpdateArgs {
    contractId: string;
  }
  export interface MutationToSubscriptionContractUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionContractUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionDraftCommitArgs {
    draftId: string;
  }
  export interface MutationToSubscriptionDraftCommitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionDraftCommitArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionDraftDiscountAddArgs {
    draftId: string;
    input: SubscriptionManualDiscountInput;
  }
  export interface MutationToSubscriptionDraftDiscountAddResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionDraftDiscountAddArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionDraftDiscountCodeApplyArgs {
    draftId: string;
    redeemCode: string;
  }
  export interface MutationToSubscriptionDraftDiscountCodeApplyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionDraftDiscountCodeApplyArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionDraftDiscountRemoveArgs {
    draftId: string;
    discountId: string;
  }
  export interface MutationToSubscriptionDraftDiscountRemoveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionDraftDiscountRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionDraftDiscountUpdateArgs {
    draftId: string;
    discountId: string;
    input: SubscriptionManualDiscountInput;
  }
  export interface MutationToSubscriptionDraftDiscountUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionDraftDiscountUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionDraftFreeShippingDiscountAddArgs {
    draftId: string;
    input: SubscriptionFreeShippingDiscountInput;
  }
  export interface MutationToSubscriptionDraftFreeShippingDiscountAddResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionDraftFreeShippingDiscountAddArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionDraftFreeShippingDiscountUpdateArgs {
    draftId: string;
    discountId: string;
    input: SubscriptionFreeShippingDiscountInput;
  }
  export interface MutationToSubscriptionDraftFreeShippingDiscountUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionDraftFreeShippingDiscountUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionDraftLineAddArgs {
    draftId: string;
    input: SubscriptionLineInput;
  }
  export interface MutationToSubscriptionDraftLineAddResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionDraftLineAddArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionDraftLineRemoveArgs {
    draftId: string;
    lineId: string;
  }
  export interface MutationToSubscriptionDraftLineRemoveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionDraftLineRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionDraftLineUpdateArgs {
    draftId: string;
    lineId: string;
    input: SubscriptionLineUpdateInput;
  }
  export interface MutationToSubscriptionDraftLineUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionDraftLineUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToSubscriptionDraftUpdateArgs {
    draftId: string;
    input: SubscriptionDraftInput;
  }
  export interface MutationToSubscriptionDraftUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToSubscriptionDraftUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToTagsAddArgs {
    id: string;
    tags: Array<string>;
  }
  export interface MutationToTagsAddResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToTagsAddArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToTagsRemoveArgs {
    id: string;
    tags: Array<string>;
  }
  export interface MutationToTagsRemoveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToTagsRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToTaxAppConfigureArgs {
    ready: boolean;
  }
  export interface MutationToTaxAppConfigureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToTaxAppConfigureArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToTranslationsRegisterArgs {
    resourceId: string;
    translations: Array<TranslationInput>;
  }
  export interface MutationToTranslationsRegisterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToTranslationsRegisterArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToTranslationsRemoveArgs {
    resourceId: string;
    translationKeys: Array<string>;
    locales: Array<string>;
    marketIds?: Array<string>;
  }
  export interface MutationToTranslationsRemoveResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToTranslationsRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUrlRedirectBulkDeleteAllResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUrlRedirectBulkDeleteByIdsArgs {
    ids: Array<string>;
  }
  export interface MutationToUrlRedirectBulkDeleteByIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUrlRedirectBulkDeleteByIdsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUrlRedirectBulkDeleteBySavedSearchArgs {
    savedSearchId: string;
  }
  export interface MutationToUrlRedirectBulkDeleteBySavedSearchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUrlRedirectBulkDeleteBySavedSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUrlRedirectBulkDeleteBySearchArgs {
    search: string;
  }
  export interface MutationToUrlRedirectBulkDeleteBySearchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUrlRedirectBulkDeleteBySearchArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUrlRedirectCreateArgs {
    urlRedirect: UrlRedirectInput;
  }
  export interface MutationToUrlRedirectCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUrlRedirectCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUrlRedirectDeleteArgs {
    id: string;
  }
  export interface MutationToUrlRedirectDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUrlRedirectDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUrlRedirectImportCreateArgs {
    url: URL;
  }
  export interface MutationToUrlRedirectImportCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUrlRedirectImportCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUrlRedirectImportSubmitArgs {
    id: string;
  }
  export interface MutationToUrlRedirectImportSubmitResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUrlRedirectImportSubmitArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToUrlRedirectUpdateArgs {
    id: string;
    urlRedirect: UrlRedirectInput;
  }
  export interface MutationToUrlRedirectUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToUrlRedirectUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToValidationCreateArgs {
    validation: ValidationCreateInput;
  }
  export interface MutationToValidationCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToValidationCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToValidationDeleteArgs {
    id: string;
  }
  export interface MutationToValidationDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToValidationDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToValidationUpdateArgs {
    validation: ValidationUpdateInput;
    id: string;
  }
  export interface MutationToValidationUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToValidationUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToWebPixelCreateArgs {
    webPixel: WebPixelInput;
  }
  export interface MutationToWebPixelCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToWebPixelCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToWebPixelDeleteArgs {
    id: string;
  }
  export interface MutationToWebPixelDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToWebPixelDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToWebPixelUpdateArgs {
    id: string;
    webPixel: WebPixelInput;
  }
  export interface MutationToWebPixelUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToWebPixelUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToWebhookSubscriptionCreateArgs {
    topic: WebhookSubscriptionTopic;
    subTopic?: string;
    webhookSubscription: WebhookSubscriptionInput;
  }
  export interface MutationToWebhookSubscriptionCreateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToWebhookSubscriptionCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToWebhookSubscriptionDeleteArgs {
    id: string;
  }
  export interface MutationToWebhookSubscriptionDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToWebhookSubscriptionDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationToWebhookSubscriptionUpdateArgs {
    id: string;
    webhookSubscription: WebhookSubscriptionInput;
  }
  export interface MutationToWebhookSubscriptionUpdateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: MutationToWebhookSubscriptionUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentEmailStateUpdatePayloadTypeResolver<TParent = any> {
    abandonment?: AbandonmentEmailStateUpdatePayloadToAbandonmentResolver<TParent>;
    userErrors?: AbandonmentEmailStateUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface AbandonmentEmailStateUpdatePayloadToAbandonmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentEmailStateUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentEmailStateUpdateUserErrorTypeResolver<TParent = any> {
    code?: AbandonmentEmailStateUpdateUserErrorToCodeResolver<TParent>;
    field?: AbandonmentEmailStateUpdateUserErrorToFieldResolver<TParent>;
    message?: AbandonmentEmailStateUpdateUserErrorToMessageResolver<TParent>;
  }
  
  export interface AbandonmentEmailStateUpdateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentEmailStateUpdateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentEmailStateUpdateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentUpdateActivitiesDeliveryStatusesPayloadTypeResolver<TParent = any> {
    abandonment?: AbandonmentUpdateActivitiesDeliveryStatusesPayloadToAbandonmentResolver<TParent>;
    userErrors?: AbandonmentUpdateActivitiesDeliveryStatusesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface AbandonmentUpdateActivitiesDeliveryStatusesPayloadToAbandonmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentUpdateActivitiesDeliveryStatusesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentUpdateActivitiesDeliveryStatusesUserErrorTypeResolver<TParent = any> {
    code?: AbandonmentUpdateActivitiesDeliveryStatusesUserErrorToCodeResolver<TParent>;
    field?: AbandonmentUpdateActivitiesDeliveryStatusesUserErrorToFieldResolver<TParent>;
    message?: AbandonmentUpdateActivitiesDeliveryStatusesUserErrorToMessageResolver<TParent>;
  }
  
  export interface AbandonmentUpdateActivitiesDeliveryStatusesUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentUpdateActivitiesDeliveryStatusesUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AbandonmentUpdateActivitiesDeliveryStatusesUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeCreatePayloadTypeResolver<TParent = any> {
    appPurchaseOneTime?: AppPurchaseOneTimeCreatePayloadToAppPurchaseOneTimeResolver<TParent>;
    confirmationUrl?: AppPurchaseOneTimeCreatePayloadToConfirmationUrlResolver<TParent>;
    userErrors?: AppPurchaseOneTimeCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface AppPurchaseOneTimeCreatePayloadToAppPurchaseOneTimeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeCreatePayloadToConfirmationUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppPurchaseOneTimeCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionCancelPayloadTypeResolver<TParent = any> {
    appSubscription?: AppSubscriptionCancelPayloadToAppSubscriptionResolver<TParent>;
    userErrors?: AppSubscriptionCancelPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface AppSubscriptionCancelPayloadToAppSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionCancelPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionCreatePayloadTypeResolver<TParent = any> {
    appSubscription?: AppSubscriptionCreatePayloadToAppSubscriptionResolver<TParent>;
    confirmationUrl?: AppSubscriptionCreatePayloadToConfirmationUrlResolver<TParent>;
    userErrors?: AppSubscriptionCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface AppSubscriptionCreatePayloadToAppSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionCreatePayloadToConfirmationUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionLineItemUpdatePayloadTypeResolver<TParent = any> {
    appSubscription?: AppSubscriptionLineItemUpdatePayloadToAppSubscriptionResolver<TParent>;
    confirmationUrl?: AppSubscriptionLineItemUpdatePayloadToConfirmationUrlResolver<TParent>;
    userErrors?: AppSubscriptionLineItemUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface AppSubscriptionLineItemUpdatePayloadToAppSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionLineItemUpdatePayloadToConfirmationUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionLineItemUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionTrialExtendPayloadTypeResolver<TParent = any> {
    appSubscription?: AppSubscriptionTrialExtendPayloadToAppSubscriptionResolver<TParent>;
    userErrors?: AppSubscriptionTrialExtendPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface AppSubscriptionTrialExtendPayloadToAppSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionTrialExtendPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionTrialExtendUserErrorTypeResolver<TParent = any> {
    code?: AppSubscriptionTrialExtendUserErrorToCodeResolver<TParent>;
    field?: AppSubscriptionTrialExtendUserErrorToFieldResolver<TParent>;
    message?: AppSubscriptionTrialExtendUserErrorToMessageResolver<TParent>;
  }
  
  export interface AppSubscriptionTrialExtendUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionTrialExtendUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppSubscriptionTrialExtendUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordCreatePayloadTypeResolver<TParent = any> {
    appUsageRecord?: AppUsageRecordCreatePayloadToAppUsageRecordResolver<TParent>;
    userErrors?: AppUsageRecordCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface AppUsageRecordCreatePayloadToAppUsageRecordResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppUsageRecordCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationCancelPayloadTypeResolver<TParent = any> {
    bulkOperation?: BulkOperationCancelPayloadToBulkOperationResolver<TParent>;
    userErrors?: BulkOperationCancelPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface BulkOperationCancelPayloadToBulkOperationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationCancelPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationRunMutationPayloadTypeResolver<TParent = any> {
    bulkOperation?: BulkOperationRunMutationPayloadToBulkOperationResolver<TParent>;
    userErrors?: BulkOperationRunMutationPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface BulkOperationRunMutationPayloadToBulkOperationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationRunMutationPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkMutationUserErrorTypeResolver<TParent = any> {
    code?: BulkMutationUserErrorToCodeResolver<TParent>;
    field?: BulkMutationUserErrorToFieldResolver<TParent>;
    message?: BulkMutationUserErrorToMessageResolver<TParent>;
  }
  
  export interface BulkMutationUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkMutationUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkMutationUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationRunQueryPayloadTypeResolver<TParent = any> {
    bulkOperation?: BulkOperationRunQueryPayloadToBulkOperationResolver<TParent>;
    userErrors?: BulkOperationRunQueryPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface BulkOperationRunQueryPayloadToBulkOperationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkOperationRunQueryPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkProductResourceFeedbackCreatePayloadTypeResolver<TParent = any> {
    feedback?: BulkProductResourceFeedbackCreatePayloadToFeedbackResolver<TParent>;
    userErrors?: BulkProductResourceFeedbackCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface BulkProductResourceFeedbackCreatePayloadToFeedbackResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkProductResourceFeedbackCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkProductResourceFeedbackCreateUserErrorTypeResolver<TParent = any> {
    code?: BulkProductResourceFeedbackCreateUserErrorToCodeResolver<TParent>;
    field?: BulkProductResourceFeedbackCreateUserErrorToFieldResolver<TParent>;
    message?: BulkProductResourceFeedbackCreateUserErrorToMessageResolver<TParent>;
  }
  
  export interface BulkProductResourceFeedbackCreateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkProductResourceFeedbackCreateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BulkProductResourceFeedbackCreateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformCreatePayloadTypeResolver<TParent = any> {
    cartTransform?: CartTransformCreatePayloadToCartTransformResolver<TParent>;
    userErrors?: CartTransformCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CartTransformCreatePayloadToCartTransformResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformCreateUserErrorTypeResolver<TParent = any> {
    code?: CartTransformCreateUserErrorToCodeResolver<TParent>;
    field?: CartTransformCreateUserErrorToFieldResolver<TParent>;
    message?: CartTransformCreateUserErrorToMessageResolver<TParent>;
  }
  
  export interface CartTransformCreateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformCreateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformCreateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformDeletePayloadTypeResolver<TParent = any> {
    deletedId?: CartTransformDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: CartTransformDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CartTransformDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformDeleteUserErrorTypeResolver<TParent = any> {
    code?: CartTransformDeleteUserErrorToCodeResolver<TParent>;
    field?: CartTransformDeleteUserErrorToFieldResolver<TParent>;
    message?: CartTransformDeleteUserErrorToMessageResolver<TParent>;
  }
  
  export interface CartTransformDeleteUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformDeleteUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CartTransformDeleteUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogContextUpdatePayloadTypeResolver<TParent = any> {
    catalog?: CatalogContextUpdatePayloadToCatalogResolver<TParent>;
    userErrors?: CatalogContextUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CatalogContextUpdatePayloadToCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogContextUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogUserErrorTypeResolver<TParent = any> {
    code?: CatalogUserErrorToCodeResolver<TParent>;
    field?: CatalogUserErrorToFieldResolver<TParent>;
    message?: CatalogUserErrorToMessageResolver<TParent>;
  }
  
  export interface CatalogUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogCreatePayloadTypeResolver<TParent = any> {
    catalog?: CatalogCreatePayloadToCatalogResolver<TParent>;
    userErrors?: CatalogCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CatalogCreatePayloadToCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogDeletePayloadTypeResolver<TParent = any> {
    deletedId?: CatalogDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: CatalogDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CatalogDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogUpdatePayloadTypeResolver<TParent = any> {
    catalog?: CatalogUpdatePayloadToCatalogResolver<TParent>;
    userErrors?: CatalogUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CatalogUpdatePayloadToCatalogResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CatalogUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingUpsertPayloadTypeResolver<TParent = any> {
    checkoutBranding?: CheckoutBrandingUpsertPayloadToCheckoutBrandingResolver<TParent>;
    userErrors?: CheckoutBrandingUpsertPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CheckoutBrandingUpsertPayloadToCheckoutBrandingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingUpsertPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingUpsertUserErrorTypeResolver<TParent = any> {
    code?: CheckoutBrandingUpsertUserErrorToCodeResolver<TParent>;
    field?: CheckoutBrandingUpsertUserErrorToFieldResolver<TParent>;
    message?: CheckoutBrandingUpsertUserErrorToMessageResolver<TParent>;
  }
  
  export interface CheckoutBrandingUpsertUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingUpsertUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingUpsertUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionAddProductsPayloadTypeResolver<TParent = any> {
    collection?: CollectionAddProductsPayloadToCollectionResolver<TParent>;
    userErrors?: CollectionAddProductsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CollectionAddProductsPayloadToCollectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionAddProductsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionAddProductsV2PayloadTypeResolver<TParent = any> {
    job?: CollectionAddProductsV2PayloadToJobResolver<TParent>;
    userErrors?: CollectionAddProductsV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CollectionAddProductsV2PayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionAddProductsV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionAddProductsV2UserErrorTypeResolver<TParent = any> {
    code?: CollectionAddProductsV2UserErrorToCodeResolver<TParent>;
    field?: CollectionAddProductsV2UserErrorToFieldResolver<TParent>;
    message?: CollectionAddProductsV2UserErrorToMessageResolver<TParent>;
  }
  
  export interface CollectionAddProductsV2UserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionAddProductsV2UserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionAddProductsV2UserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionCreatePayloadTypeResolver<TParent = any> {
    collection?: CollectionCreatePayloadToCollectionResolver<TParent>;
    userErrors?: CollectionCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CollectionCreatePayloadToCollectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionDeletePayloadTypeResolver<TParent = any> {
    deletedCollectionId?: CollectionDeletePayloadToDeletedCollectionIdResolver<TParent>;
    shop?: CollectionDeletePayloadToShopResolver<TParent>;
    userErrors?: CollectionDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CollectionDeletePayloadToDeletedCollectionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionDeletePayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublishPayloadTypeResolver<TParent = any> {
    collection?: CollectionPublishPayloadToCollectionResolver<TParent>;
    collectionPublications?: CollectionPublishPayloadToCollectionPublicationsResolver<TParent>;
    shop?: CollectionPublishPayloadToShopResolver<TParent>;
    userErrors?: CollectionPublishPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CollectionPublishPayloadToCollectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublishPayloadToCollectionPublicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublishPayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionPublishPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRemoveProductsPayloadTypeResolver<TParent = any> {
    job?: CollectionRemoveProductsPayloadToJobResolver<TParent>;
    userErrors?: CollectionRemoveProductsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CollectionRemoveProductsPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionRemoveProductsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionReorderProductsPayloadTypeResolver<TParent = any> {
    job?: CollectionReorderProductsPayloadToJobResolver<TParent>;
    userErrors?: CollectionReorderProductsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CollectionReorderProductsPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionReorderProductsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionUnpublishPayloadTypeResolver<TParent = any> {
    collection?: CollectionUnpublishPayloadToCollectionResolver<TParent>;
    shop?: CollectionUnpublishPayloadToShopResolver<TParent>;
    userErrors?: CollectionUnpublishPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CollectionUnpublishPayloadToCollectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionUnpublishPayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionUnpublishPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionUpdatePayloadTypeResolver<TParent = any> {
    collection?: CollectionUpdatePayloadToCollectionResolver<TParent>;
    job?: CollectionUpdatePayloadToJobResolver<TParent>;
    userErrors?: CollectionUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CollectionUpdatePayloadToCollectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionUpdatePayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CollectionUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompaniesDeletePayloadTypeResolver<TParent = any> {
    deletedCompanyIds?: CompaniesDeletePayloadToDeletedCompanyIdsResolver<TParent>;
    userErrors?: CompaniesDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompaniesDeletePayloadToDeletedCompanyIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompaniesDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BusinessCustomerUserErrorTypeResolver<TParent = any> {
    code?: BusinessCustomerUserErrorToCodeResolver<TParent>;
    field?: BusinessCustomerUserErrorToFieldResolver<TParent>;
    message?: BusinessCustomerUserErrorToMessageResolver<TParent>;
  }
  
  export interface BusinessCustomerUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BusinessCustomerUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BusinessCustomerUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressDeletePayloadTypeResolver<TParent = any> {
    deletedAddressId?: CompanyAddressDeletePayloadToDeletedAddressIdResolver<TParent>;
    userErrors?: CompanyAddressDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyAddressDeletePayloadToDeletedAddressIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAddressDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAssignCustomerAsContactPayloadTypeResolver<TParent = any> {
    companyContact?: CompanyAssignCustomerAsContactPayloadToCompanyContactResolver<TParent>;
    userErrors?: CompanyAssignCustomerAsContactPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyAssignCustomerAsContactPayloadToCompanyContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAssignCustomerAsContactPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAssignMainContactPayloadTypeResolver<TParent = any> {
    company?: CompanyAssignMainContactPayloadToCompanyResolver<TParent>;
    userErrors?: CompanyAssignMainContactPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyAssignMainContactPayloadToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyAssignMainContactPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactAssignRolePayloadTypeResolver<TParent = any> {
    companyContactRoleAssignment?: CompanyContactAssignRolePayloadToCompanyContactRoleAssignmentResolver<TParent>;
    userErrors?: CompanyContactAssignRolePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyContactAssignRolePayloadToCompanyContactRoleAssignmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactAssignRolePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactAssignRolesPayloadTypeResolver<TParent = any> {
    roleAssignments?: CompanyContactAssignRolesPayloadToRoleAssignmentsResolver<TParent>;
    userErrors?: CompanyContactAssignRolesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyContactAssignRolesPayloadToRoleAssignmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactAssignRolesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactCreatePayloadTypeResolver<TParent = any> {
    companyContact?: CompanyContactCreatePayloadToCompanyContactResolver<TParent>;
    userErrors?: CompanyContactCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyContactCreatePayloadToCompanyContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactDeletePayloadTypeResolver<TParent = any> {
    deletedCompanyContactId?: CompanyContactDeletePayloadToDeletedCompanyContactIdResolver<TParent>;
    userErrors?: CompanyContactDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyContactDeletePayloadToDeletedCompanyContactIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRemoveFromCompanyPayloadTypeResolver<TParent = any> {
    removedCompanyContactId?: CompanyContactRemoveFromCompanyPayloadToRemovedCompanyContactIdResolver<TParent>;
    userErrors?: CompanyContactRemoveFromCompanyPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyContactRemoveFromCompanyPayloadToRemovedCompanyContactIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRemoveFromCompanyPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRevokeRolePayloadTypeResolver<TParent = any> {
    revokedCompanyContactRoleAssignmentId?: CompanyContactRevokeRolePayloadToRevokedCompanyContactRoleAssignmentIdResolver<TParent>;
    userErrors?: CompanyContactRevokeRolePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyContactRevokeRolePayloadToRevokedCompanyContactRoleAssignmentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRevokeRolePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRevokeRolesPayloadTypeResolver<TParent = any> {
    revokedRoleAssignmentIds?: CompanyContactRevokeRolesPayloadToRevokedRoleAssignmentIdsResolver<TParent>;
    userErrors?: CompanyContactRevokeRolesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyContactRevokeRolesPayloadToRevokedRoleAssignmentIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactRevokeRolesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactSendWelcomeEmailPayloadTypeResolver<TParent = any> {
    companyContact?: CompanyContactSendWelcomeEmailPayloadToCompanyContactResolver<TParent>;
    userErrors?: CompanyContactSendWelcomeEmailPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyContactSendWelcomeEmailPayloadToCompanyContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactSendWelcomeEmailPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactUpdatePayloadTypeResolver<TParent = any> {
    companyContact?: CompanyContactUpdatePayloadToCompanyContactResolver<TParent>;
    userErrors?: CompanyContactUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyContactUpdatePayloadToCompanyContactResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactsDeletePayloadTypeResolver<TParent = any> {
    deletedCompanyContactIds?: CompanyContactsDeletePayloadToDeletedCompanyContactIdsResolver<TParent>;
    userErrors?: CompanyContactsDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyContactsDeletePayloadToDeletedCompanyContactIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyContactsDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyCreatePayloadTypeResolver<TParent = any> {
    company?: CompanyCreatePayloadToCompanyResolver<TParent>;
    userErrors?: CompanyCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyCreatePayloadToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyDeletePayloadTypeResolver<TParent = any> {
    deletedCompanyId?: CompanyDeletePayloadToDeletedCompanyIdResolver<TParent>;
    userErrors?: CompanyDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyDeletePayloadToDeletedCompanyIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationAssignAddressPayloadTypeResolver<TParent = any> {
    addresses?: CompanyLocationAssignAddressPayloadToAddressesResolver<TParent>;
    userErrors?: CompanyLocationAssignAddressPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyLocationAssignAddressPayloadToAddressesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationAssignAddressPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationAssignRolesPayloadTypeResolver<TParent = any> {
    roleAssignments?: CompanyLocationAssignRolesPayloadToRoleAssignmentsResolver<TParent>;
    userErrors?: CompanyLocationAssignRolesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyLocationAssignRolesPayloadToRoleAssignmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationAssignRolesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationAssignTaxExemptionsPayloadTypeResolver<TParent = any> {
    companyLocation?: CompanyLocationAssignTaxExemptionsPayloadToCompanyLocationResolver<TParent>;
    userErrors?: CompanyLocationAssignTaxExemptionsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyLocationAssignTaxExemptionsPayloadToCompanyLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationAssignTaxExemptionsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationCreatePayloadTypeResolver<TParent = any> {
    companyLocation?: CompanyLocationCreatePayloadToCompanyLocationResolver<TParent>;
    userErrors?: CompanyLocationCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyLocationCreatePayloadToCompanyLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationCreateTaxRegistrationPayloadTypeResolver<TParent = any> {
    companyLocation?: CompanyLocationCreateTaxRegistrationPayloadToCompanyLocationResolver<TParent>;
    userErrors?: CompanyLocationCreateTaxRegistrationPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyLocationCreateTaxRegistrationPayloadToCompanyLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationCreateTaxRegistrationPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationDeletePayloadTypeResolver<TParent = any> {
    deletedCompanyLocationId?: CompanyLocationDeletePayloadToDeletedCompanyLocationIdResolver<TParent>;
    userErrors?: CompanyLocationDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyLocationDeletePayloadToDeletedCompanyLocationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationRevokeRolesPayloadTypeResolver<TParent = any> {
    revokedRoleAssignmentIds?: CompanyLocationRevokeRolesPayloadToRevokedRoleAssignmentIdsResolver<TParent>;
    userErrors?: CompanyLocationRevokeRolesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyLocationRevokeRolesPayloadToRevokedRoleAssignmentIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationRevokeRolesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationRevokeTaxExemptionsPayloadTypeResolver<TParent = any> {
    companyLocation?: CompanyLocationRevokeTaxExemptionsPayloadToCompanyLocationResolver<TParent>;
    userErrors?: CompanyLocationRevokeTaxExemptionsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyLocationRevokeTaxExemptionsPayloadToCompanyLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationRevokeTaxExemptionsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationRevokeTaxRegistrationPayloadTypeResolver<TParent = any> {
    companyLocation?: CompanyLocationRevokeTaxRegistrationPayloadToCompanyLocationResolver<TParent>;
    userErrors?: CompanyLocationRevokeTaxRegistrationPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyLocationRevokeTaxRegistrationPayloadToCompanyLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationRevokeTaxRegistrationPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationUpdatePayloadTypeResolver<TParent = any> {
    companyLocation?: CompanyLocationUpdatePayloadToCompanyLocationResolver<TParent>;
    userErrors?: CompanyLocationUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyLocationUpdatePayloadToCompanyLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationsDeletePayloadTypeResolver<TParent = any> {
    deletedCompanyLocationIds?: CompanyLocationsDeletePayloadToDeletedCompanyLocationIdsResolver<TParent>;
    userErrors?: CompanyLocationsDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyLocationsDeletePayloadToDeletedCompanyLocationIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationsDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyRevokeMainContactPayloadTypeResolver<TParent = any> {
    company?: CompanyRevokeMainContactPayloadToCompanyResolver<TParent>;
    userErrors?: CompanyRevokeMainContactPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyRevokeMainContactPayloadToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyRevokeMainContactPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyUpdatePayloadTypeResolver<TParent = any> {
    company?: CompanyUpdatePayloadToCompanyResolver<TParent>;
    userErrors?: CompanyUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CompanyUpdatePayloadToCompanyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAddTaxExemptionsPayloadTypeResolver<TParent = any> {
    customer?: CustomerAddTaxExemptionsPayloadToCustomerResolver<TParent>;
    userErrors?: CustomerAddTaxExemptionsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerAddTaxExemptionsPayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerAddTaxExemptionsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCancelDataErasurePayloadTypeResolver<TParent = any> {
    customerId?: CustomerCancelDataErasurePayloadToCustomerIdResolver<TParent>;
    userErrors?: CustomerCancelDataErasurePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerCancelDataErasurePayloadToCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCancelDataErasurePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCancelDataErasureUserErrorTypeResolver<TParent = any> {
    code?: CustomerCancelDataErasureUserErrorToCodeResolver<TParent>;
    field?: CustomerCancelDataErasureUserErrorToFieldResolver<TParent>;
    message?: CustomerCancelDataErasureUserErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerCancelDataErasureUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCancelDataErasureUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCancelDataErasureUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreatePayloadTypeResolver<TParent = any> {
    customer?: CustomerCreatePayloadToCustomerResolver<TParent>;
    userErrors?: CustomerCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerCreatePayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerDeletePayloadTypeResolver<TParent = any> {
    deletedCustomerId?: CustomerDeletePayloadToDeletedCustomerIdResolver<TParent>;
    shop?: CustomerDeletePayloadToShopResolver<TParent>;
    userErrors?: CustomerDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerDeletePayloadToDeletedCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerDeletePayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailMarketingConsentUpdatePayloadTypeResolver<TParent = any> {
    customer?: CustomerEmailMarketingConsentUpdatePayloadToCustomerResolver<TParent>;
    userErrors?: CustomerEmailMarketingConsentUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerEmailMarketingConsentUpdatePayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailMarketingConsentUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailMarketingConsentUpdateUserErrorTypeResolver<TParent = any> {
    code?: CustomerEmailMarketingConsentUpdateUserErrorToCodeResolver<TParent>;
    field?: CustomerEmailMarketingConsentUpdateUserErrorToFieldResolver<TParent>;
    message?: CustomerEmailMarketingConsentUpdateUserErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerEmailMarketingConsentUpdateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailMarketingConsentUpdateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerEmailMarketingConsentUpdateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerGenerateAccountActivationUrlPayloadTypeResolver<TParent = any> {
    accountActivationUrl?: CustomerGenerateAccountActivationUrlPayloadToAccountActivationUrlResolver<TParent>;
    userErrors?: CustomerGenerateAccountActivationUrlPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerGenerateAccountActivationUrlPayloadToAccountActivationUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerGenerateAccountActivationUrlPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePayloadTypeResolver<TParent = any> {
    job?: CustomerMergePayloadToJobResolver<TParent>;
    resultingCustomerId?: CustomerMergePayloadToResultingCustomerIdResolver<TParent>;
    userErrors?: CustomerMergePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerMergePayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePayloadToResultingCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeUserErrorTypeResolver<TParent = any> {
    code?: CustomerMergeUserErrorToCodeResolver<TParent>;
    field?: CustomerMergeUserErrorToFieldResolver<TParent>;
    message?: CustomerMergeUserErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerMergeUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerMergeUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodCreateFromDuplicationDataPayloadTypeResolver<TParent = any> {
    customerPaymentMethod?: CustomerPaymentMethodCreateFromDuplicationDataPayloadToCustomerPaymentMethodResolver<TParent>;
    userErrors?: CustomerPaymentMethodCreateFromDuplicationDataPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodCreateFromDuplicationDataPayloadToCustomerPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodCreateFromDuplicationDataPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodCreateFromDuplicationDataUserErrorTypeResolver<TParent = any> {
    code?: CustomerPaymentMethodCreateFromDuplicationDataUserErrorToCodeResolver<TParent>;
    field?: CustomerPaymentMethodCreateFromDuplicationDataUserErrorToFieldResolver<TParent>;
    message?: CustomerPaymentMethodCreateFromDuplicationDataUserErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodCreateFromDuplicationDataUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodCreateFromDuplicationDataUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodCreateFromDuplicationDataUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodCreditCardCreatePayloadTypeResolver<TParent = any> {
    customerPaymentMethod?: CustomerPaymentMethodCreditCardCreatePayloadToCustomerPaymentMethodResolver<TParent>;
    processing?: CustomerPaymentMethodCreditCardCreatePayloadToProcessingResolver<TParent>;
    userErrors?: CustomerPaymentMethodCreditCardCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodCreditCardCreatePayloadToCustomerPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodCreditCardCreatePayloadToProcessingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodCreditCardCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodCreditCardUpdatePayloadTypeResolver<TParent = any> {
    customerPaymentMethod?: CustomerPaymentMethodCreditCardUpdatePayloadToCustomerPaymentMethodResolver<TParent>;
    processing?: CustomerPaymentMethodCreditCardUpdatePayloadToProcessingResolver<TParent>;
    userErrors?: CustomerPaymentMethodCreditCardUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodCreditCardUpdatePayloadToCustomerPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodCreditCardUpdatePayloadToProcessingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodCreditCardUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodGetDuplicationDataPayloadTypeResolver<TParent = any> {
    encryptedDuplicationData?: CustomerPaymentMethodGetDuplicationDataPayloadToEncryptedDuplicationDataResolver<TParent>;
    userErrors?: CustomerPaymentMethodGetDuplicationDataPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodGetDuplicationDataPayloadToEncryptedDuplicationDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodGetDuplicationDataPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodGetDuplicationDataUserErrorTypeResolver<TParent = any> {
    code?: CustomerPaymentMethodGetDuplicationDataUserErrorToCodeResolver<TParent>;
    field?: CustomerPaymentMethodGetDuplicationDataUserErrorToFieldResolver<TParent>;
    message?: CustomerPaymentMethodGetDuplicationDataUserErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodGetDuplicationDataUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodGetDuplicationDataUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodGetDuplicationDataUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodGetUpdateUrlPayloadTypeResolver<TParent = any> {
    updatePaymentMethodUrl?: CustomerPaymentMethodGetUpdateUrlPayloadToUpdatePaymentMethodUrlResolver<TParent>;
    userErrors?: CustomerPaymentMethodGetUpdateUrlPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodGetUpdateUrlPayloadToUpdatePaymentMethodUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodGetUpdateUrlPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodGetUpdateUrlUserErrorTypeResolver<TParent = any> {
    code?: CustomerPaymentMethodGetUpdateUrlUserErrorToCodeResolver<TParent>;
    field?: CustomerPaymentMethodGetUpdateUrlUserErrorToFieldResolver<TParent>;
    message?: CustomerPaymentMethodGetUpdateUrlUserErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodGetUpdateUrlUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodGetUpdateUrlUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodGetUpdateUrlUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodPaypalBillingAgreementCreatePayloadTypeResolver<TParent = any> {
    customerPaymentMethod?: CustomerPaymentMethodPaypalBillingAgreementCreatePayloadToCustomerPaymentMethodResolver<TParent>;
    userErrors?: CustomerPaymentMethodPaypalBillingAgreementCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodPaypalBillingAgreementCreatePayloadToCustomerPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodPaypalBillingAgreementCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodUserErrorTypeResolver<TParent = any> {
    code?: CustomerPaymentMethodUserErrorToCodeResolver<TParent>;
    field?: CustomerPaymentMethodUserErrorToFieldResolver<TParent>;
    message?: CustomerPaymentMethodUserErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodPaypalBillingAgreementUpdatePayloadTypeResolver<TParent = any> {
    customerPaymentMethod?: CustomerPaymentMethodPaypalBillingAgreementUpdatePayloadToCustomerPaymentMethodResolver<TParent>;
    userErrors?: CustomerPaymentMethodPaypalBillingAgreementUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodPaypalBillingAgreementUpdatePayloadToCustomerPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodPaypalBillingAgreementUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodRemoteCreatePayloadTypeResolver<TParent = any> {
    customerPaymentMethod?: CustomerPaymentMethodRemoteCreatePayloadToCustomerPaymentMethodResolver<TParent>;
    userErrors?: CustomerPaymentMethodRemoteCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodRemoteCreatePayloadToCustomerPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodRemoteCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodRemoteUserErrorTypeResolver<TParent = any> {
    code?: CustomerPaymentMethodRemoteUserErrorToCodeResolver<TParent>;
    field?: CustomerPaymentMethodRemoteUserErrorToFieldResolver<TParent>;
    message?: CustomerPaymentMethodRemoteUserErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodRemoteUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodRemoteUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodRemoteUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodRemoteCreditCardCreatePayloadTypeResolver<TParent = any> {
    customerPaymentMethod?: CustomerPaymentMethodRemoteCreditCardCreatePayloadToCustomerPaymentMethodResolver<TParent>;
    userErrors?: CustomerPaymentMethodRemoteCreditCardCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodRemoteCreditCardCreatePayloadToCustomerPaymentMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodRemoteCreditCardCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodRevokePayloadTypeResolver<TParent = any> {
    revokedCustomerPaymentMethodId?: CustomerPaymentMethodRevokePayloadToRevokedCustomerPaymentMethodIdResolver<TParent>;
    userErrors?: CustomerPaymentMethodRevokePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodRevokePayloadToRevokedCustomerPaymentMethodIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodRevokePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodSendUpdateEmailPayloadTypeResolver<TParent = any> {
    customer?: CustomerPaymentMethodSendUpdateEmailPayloadToCustomerResolver<TParent>;
    userErrors?: CustomerPaymentMethodSendUpdateEmailPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerPaymentMethodSendUpdateEmailPayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerPaymentMethodSendUpdateEmailPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerRemoveTaxExemptionsPayloadTypeResolver<TParent = any> {
    customer?: CustomerRemoveTaxExemptionsPayloadToCustomerResolver<TParent>;
    userErrors?: CustomerRemoveTaxExemptionsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerRemoveTaxExemptionsPayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerRemoveTaxExemptionsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerReplaceTaxExemptionsPayloadTypeResolver<TParent = any> {
    customer?: CustomerReplaceTaxExemptionsPayloadToCustomerResolver<TParent>;
    userErrors?: CustomerReplaceTaxExemptionsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerReplaceTaxExemptionsPayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerReplaceTaxExemptionsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerRequestDataErasurePayloadTypeResolver<TParent = any> {
    customerId?: CustomerRequestDataErasurePayloadToCustomerIdResolver<TParent>;
    userErrors?: CustomerRequestDataErasurePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerRequestDataErasurePayloadToCustomerIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerRequestDataErasurePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerRequestDataErasureUserErrorTypeResolver<TParent = any> {
    code?: CustomerRequestDataErasureUserErrorToCodeResolver<TParent>;
    field?: CustomerRequestDataErasureUserErrorToFieldResolver<TParent>;
    message?: CustomerRequestDataErasureUserErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerRequestDataErasureUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerRequestDataErasureUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerRequestDataErasureUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMembersQueryCreatePayloadTypeResolver<TParent = any> {
    customerSegmentMembersQuery?: CustomerSegmentMembersQueryCreatePayloadToCustomerSegmentMembersQueryResolver<TParent>;
    userErrors?: CustomerSegmentMembersQueryCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerSegmentMembersQueryCreatePayloadToCustomerSegmentMembersQueryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMembersQueryCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMembersQueryUserErrorTypeResolver<TParent = any> {
    code?: CustomerSegmentMembersQueryUserErrorToCodeResolver<TParent>;
    field?: CustomerSegmentMembersQueryUserErrorToFieldResolver<TParent>;
    message?: CustomerSegmentMembersQueryUserErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerSegmentMembersQueryUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMembersQueryUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSegmentMembersQueryUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSmsMarketingConsentUpdatePayloadTypeResolver<TParent = any> {
    customer?: CustomerSmsMarketingConsentUpdatePayloadToCustomerResolver<TParent>;
    userErrors?: CustomerSmsMarketingConsentUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerSmsMarketingConsentUpdatePayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSmsMarketingConsentUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSmsMarketingConsentErrorTypeResolver<TParent = any> {
    code?: CustomerSmsMarketingConsentErrorToCodeResolver<TParent>;
    field?: CustomerSmsMarketingConsentErrorToFieldResolver<TParent>;
    message?: CustomerSmsMarketingConsentErrorToMessageResolver<TParent>;
  }
  
  export interface CustomerSmsMarketingConsentErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSmsMarketingConsentErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerSmsMarketingConsentErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerUpdatePayloadTypeResolver<TParent = any> {
    customer?: CustomerUpdatePayloadToCustomerResolver<TParent>;
    userErrors?: CustomerUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerUpdatePayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerUpdateDefaultAddressPayloadTypeResolver<TParent = any> {
    customer?: CustomerUpdateDefaultAddressPayloadToCustomerResolver<TParent>;
    userErrors?: CustomerUpdateDefaultAddressPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface CustomerUpdateDefaultAddressPayloadToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CustomerUpdateDefaultAddressPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenCreatePayloadTypeResolver<TParent = any> {
    delegateAccessToken?: DelegateAccessTokenCreatePayloadToDelegateAccessTokenResolver<TParent>;
    shop?: DelegateAccessTokenCreatePayloadToShopResolver<TParent>;
    userErrors?: DelegateAccessTokenCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DelegateAccessTokenCreatePayloadToDelegateAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenCreatePayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenTypeResolver<TParent = any> {
    accessScopes?: DelegateAccessTokenToAccessScopesResolver<TParent>;
    accessToken?: DelegateAccessTokenToAccessTokenResolver<TParent>;
    createdAt?: DelegateAccessTokenToCreatedAtResolver<TParent>;
  }
  
  export interface DelegateAccessTokenToAccessScopesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenToAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenCreateUserErrorTypeResolver<TParent = any> {
    code?: DelegateAccessTokenCreateUserErrorToCodeResolver<TParent>;
    field?: DelegateAccessTokenCreateUserErrorToFieldResolver<TParent>;
    message?: DelegateAccessTokenCreateUserErrorToMessageResolver<TParent>;
  }
  
  export interface DelegateAccessTokenCreateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenCreateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenCreateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenDestroyPayloadTypeResolver<TParent = any> {
    shop?: DelegateAccessTokenDestroyPayloadToShopResolver<TParent>;
    status?: DelegateAccessTokenDestroyPayloadToStatusResolver<TParent>;
    userErrors?: DelegateAccessTokenDestroyPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DelegateAccessTokenDestroyPayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenDestroyPayloadToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenDestroyPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenDestroyUserErrorTypeResolver<TParent = any> {
    code?: DelegateAccessTokenDestroyUserErrorToCodeResolver<TParent>;
    field?: DelegateAccessTokenDestroyUserErrorToFieldResolver<TParent>;
    message?: DelegateAccessTokenDestroyUserErrorToMessageResolver<TParent>;
  }
  
  export interface DelegateAccessTokenDestroyUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenDestroyUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DelegateAccessTokenDestroyUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationActivationPayloadTypeResolver<TParent = any> {
    ids?: DeliveryCustomizationActivationPayloadToIdsResolver<TParent>;
    userErrors?: DeliveryCustomizationActivationPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DeliveryCustomizationActivationPayloadToIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationActivationPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationErrorTypeResolver<TParent = any> {
    code?: DeliveryCustomizationErrorToCodeResolver<TParent>;
    field?: DeliveryCustomizationErrorToFieldResolver<TParent>;
    message?: DeliveryCustomizationErrorToMessageResolver<TParent>;
  }
  
  export interface DeliveryCustomizationErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationCreatePayloadTypeResolver<TParent = any> {
    deliveryCustomization?: DeliveryCustomizationCreatePayloadToDeliveryCustomizationResolver<TParent>;
    userErrors?: DeliveryCustomizationCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DeliveryCustomizationCreatePayloadToDeliveryCustomizationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationDeletePayloadTypeResolver<TParent = any> {
    deletedId?: DeliveryCustomizationDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: DeliveryCustomizationDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DeliveryCustomizationDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationUpdatePayloadTypeResolver<TParent = any> {
    deliveryCustomization?: DeliveryCustomizationUpdatePayloadToDeliveryCustomizationResolver<TParent>;
    userErrors?: DeliveryCustomizationUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DeliveryCustomizationUpdatePayloadToDeliveryCustomizationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryCustomizationUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deliveryProfileCreatePayloadTypeResolver<TParent = any> {
    profile?: deliveryProfileCreatePayloadToProfileResolver<TParent>;
    userErrors?: deliveryProfileCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface deliveryProfileCreatePayloadToProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deliveryProfileCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deliveryProfileRemovePayloadTypeResolver<TParent = any> {
    job?: deliveryProfileRemovePayloadToJobResolver<TParent>;
    userErrors?: deliveryProfileRemovePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface deliveryProfileRemovePayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deliveryProfileRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deliveryProfileUpdatePayloadTypeResolver<TParent = any> {
    profile?: deliveryProfileUpdatePayloadToProfileResolver<TParent>;
    userErrors?: deliveryProfileUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface deliveryProfileUpdatePayloadToProfileResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface deliveryProfileUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliverySettingUpdatePayloadTypeResolver<TParent = any> {
    setting?: DeliverySettingUpdatePayloadToSettingResolver<TParent>;
    userErrors?: DeliverySettingUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DeliverySettingUpdatePayloadToSettingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliverySettingUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryShippingOriginAssignPayloadTypeResolver<TParent = any> {
    userErrors?: DeliveryShippingOriginAssignPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DeliveryShippingOriginAssignPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticActivatePayloadTypeResolver<TParent = any> {
    automaticDiscountNode?: DiscountAutomaticActivatePayloadToAutomaticDiscountNodeResolver<TParent>;
    userErrors?: DiscountAutomaticActivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticActivatePayloadToAutomaticDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticActivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppCreatePayloadTypeResolver<TParent = any> {
    automaticAppDiscount?: DiscountAutomaticAppCreatePayloadToAutomaticAppDiscountResolver<TParent>;
    userErrors?: DiscountAutomaticAppCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticAppCreatePayloadToAutomaticAppDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppUpdatePayloadTypeResolver<TParent = any> {
    automaticAppDiscount?: DiscountAutomaticAppUpdatePayloadToAutomaticAppDiscountResolver<TParent>;
    userErrors?: DiscountAutomaticAppUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticAppUpdatePayloadToAutomaticAppDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticAppUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicCreatePayloadTypeResolver<TParent = any> {
    automaticDiscountNode?: DiscountAutomaticBasicCreatePayloadToAutomaticDiscountNodeResolver<TParent>;
    userErrors?: DiscountAutomaticBasicCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticBasicCreatePayloadToAutomaticDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicUpdatePayloadTypeResolver<TParent = any> {
    automaticDiscountNode?: DiscountAutomaticBasicUpdatePayloadToAutomaticDiscountNodeResolver<TParent>;
    userErrors?: DiscountAutomaticBasicUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticBasicUpdatePayloadToAutomaticDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBasicUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBulkDeletePayloadTypeResolver<TParent = any> {
    job?: DiscountAutomaticBulkDeletePayloadToJobResolver<TParent>;
    userErrors?: DiscountAutomaticBulkDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticBulkDeletePayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBulkDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyCreatePayloadTypeResolver<TParent = any> {
    automaticDiscountNode?: DiscountAutomaticBxgyCreatePayloadToAutomaticDiscountNodeResolver<TParent>;
    userErrors?: DiscountAutomaticBxgyCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticBxgyCreatePayloadToAutomaticDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyUpdatePayloadTypeResolver<TParent = any> {
    automaticDiscountNode?: DiscountAutomaticBxgyUpdatePayloadToAutomaticDiscountNodeResolver<TParent>;
    userErrors?: DiscountAutomaticBxgyUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticBxgyUpdatePayloadToAutomaticDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticBxgyUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticDeactivatePayloadTypeResolver<TParent = any> {
    automaticDiscountNode?: DiscountAutomaticDeactivatePayloadToAutomaticDiscountNodeResolver<TParent>;
    userErrors?: DiscountAutomaticDeactivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticDeactivatePayloadToAutomaticDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticDeactivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticDeletePayloadTypeResolver<TParent = any> {
    deletedAutomaticDiscountId?: DiscountAutomaticDeletePayloadToDeletedAutomaticDiscountIdResolver<TParent>;
    userErrors?: DiscountAutomaticDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticDeletePayloadToDeletedAutomaticDiscountIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingCreatePayloadTypeResolver<TParent = any> {
    automaticDiscountNode?: DiscountAutomaticFreeShippingCreatePayloadToAutomaticDiscountNodeResolver<TParent>;
    userErrors?: DiscountAutomaticFreeShippingCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticFreeShippingCreatePayloadToAutomaticDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingUpdatePayloadTypeResolver<TParent = any> {
    automaticDiscountNode?: DiscountAutomaticFreeShippingUpdatePayloadToAutomaticDiscountNodeResolver<TParent>;
    userErrors?: DiscountAutomaticFreeShippingUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountAutomaticFreeShippingUpdatePayloadToAutomaticDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountAutomaticFreeShippingUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeActivatePayloadTypeResolver<TParent = any> {
    codeDiscountNode?: DiscountCodeActivatePayloadToCodeDiscountNodeResolver<TParent>;
    userErrors?: DiscountCodeActivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeActivatePayloadToCodeDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeActivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppCreatePayloadTypeResolver<TParent = any> {
    codeAppDiscount?: DiscountCodeAppCreatePayloadToCodeAppDiscountResolver<TParent>;
    userErrors?: DiscountCodeAppCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeAppCreatePayloadToCodeAppDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppUpdatePayloadTypeResolver<TParent = any> {
    codeAppDiscount?: DiscountCodeAppUpdatePayloadToCodeAppDiscountResolver<TParent>;
    userErrors?: DiscountCodeAppUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeAppUpdatePayloadToCodeAppDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeAppUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicCreatePayloadTypeResolver<TParent = any> {
    codeDiscountNode?: DiscountCodeBasicCreatePayloadToCodeDiscountNodeResolver<TParent>;
    userErrors?: DiscountCodeBasicCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeBasicCreatePayloadToCodeDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicUpdatePayloadTypeResolver<TParent = any> {
    codeDiscountNode?: DiscountCodeBasicUpdatePayloadToCodeDiscountNodeResolver<TParent>;
    userErrors?: DiscountCodeBasicUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeBasicUpdatePayloadToCodeDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBasicUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBulkActivatePayloadTypeResolver<TParent = any> {
    job?: DiscountCodeBulkActivatePayloadToJobResolver<TParent>;
    userErrors?: DiscountCodeBulkActivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeBulkActivatePayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBulkActivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBulkDeactivatePayloadTypeResolver<TParent = any> {
    job?: DiscountCodeBulkDeactivatePayloadToJobResolver<TParent>;
    userErrors?: DiscountCodeBulkDeactivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeBulkDeactivatePayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBulkDeactivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBulkDeletePayloadTypeResolver<TParent = any> {
    job?: DiscountCodeBulkDeletePayloadToJobResolver<TParent>;
    userErrors?: DiscountCodeBulkDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeBulkDeletePayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBulkDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyCreatePayloadTypeResolver<TParent = any> {
    codeDiscountNode?: DiscountCodeBxgyCreatePayloadToCodeDiscountNodeResolver<TParent>;
    userErrors?: DiscountCodeBxgyCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeBxgyCreatePayloadToCodeDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyUpdatePayloadTypeResolver<TParent = any> {
    codeDiscountNode?: DiscountCodeBxgyUpdatePayloadToCodeDiscountNodeResolver<TParent>;
    userErrors?: DiscountCodeBxgyUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeBxgyUpdatePayloadToCodeDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeBxgyUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeDeactivatePayloadTypeResolver<TParent = any> {
    codeDiscountNode?: DiscountCodeDeactivatePayloadToCodeDiscountNodeResolver<TParent>;
    userErrors?: DiscountCodeDeactivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeDeactivatePayloadToCodeDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeDeactivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeDeletePayloadTypeResolver<TParent = any> {
    deletedCodeDiscountId?: DiscountCodeDeletePayloadToDeletedCodeDiscountIdResolver<TParent>;
    userErrors?: DiscountCodeDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeDeletePayloadToDeletedCodeDiscountIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingCreatePayloadTypeResolver<TParent = any> {
    codeDiscountNode?: DiscountCodeFreeShippingCreatePayloadToCodeDiscountNodeResolver<TParent>;
    userErrors?: DiscountCodeFreeShippingCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeFreeShippingCreatePayloadToCodeDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingUpdatePayloadTypeResolver<TParent = any> {
    codeDiscountNode?: DiscountCodeFreeShippingUpdatePayloadToCodeDiscountNodeResolver<TParent>;
    userErrors?: DiscountCodeFreeShippingUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeFreeShippingUpdatePayloadToCodeDiscountNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeFreeShippingUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeRedeemCodeBulkDeletePayloadTypeResolver<TParent = any> {
    job?: DiscountCodeRedeemCodeBulkDeletePayloadToJobResolver<TParent>;
    userErrors?: DiscountCodeRedeemCodeBulkDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountCodeRedeemCodeBulkDeletePayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeRedeemCodeBulkDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkAddPayloadTypeResolver<TParent = any> {
    bulkCreation?: DiscountRedeemCodeBulkAddPayloadToBulkCreationResolver<TParent>;
    userErrors?: DiscountRedeemCodeBulkAddPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DiscountRedeemCodeBulkAddPayloadToBulkCreationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountRedeemCodeBulkAddPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DisputeEvidenceUpdatePayloadTypeResolver<TParent = any> {
    disputeEvidence?: DisputeEvidenceUpdatePayloadToDisputeEvidenceResolver<TParent>;
    userErrors?: DisputeEvidenceUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DisputeEvidenceUpdatePayloadToDisputeEvidenceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DisputeEvidenceUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DisputeEvidenceUpdateUserErrorTypeResolver<TParent = any> {
    code?: DisputeEvidenceUpdateUserErrorToCodeResolver<TParent>;
    field?: DisputeEvidenceUpdateUserErrorToFieldResolver<TParent>;
    message?: DisputeEvidenceUpdateUserErrorToMessageResolver<TParent>;
  }
  
  export interface DisputeEvidenceUpdateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DisputeEvidenceUpdateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DisputeEvidenceUpdateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderBulkAddTagsPayloadTypeResolver<TParent = any> {
    job?: DraftOrderBulkAddTagsPayloadToJobResolver<TParent>;
    userErrors?: DraftOrderBulkAddTagsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderBulkAddTagsPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderBulkAddTagsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderBulkDeletePayloadTypeResolver<TParent = any> {
    job?: DraftOrderBulkDeletePayloadToJobResolver<TParent>;
    userErrors?: DraftOrderBulkDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderBulkDeletePayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderBulkDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderBulkRemoveTagsPayloadTypeResolver<TParent = any> {
    job?: DraftOrderBulkRemoveTagsPayloadToJobResolver<TParent>;
    userErrors?: DraftOrderBulkRemoveTagsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderBulkRemoveTagsPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderBulkRemoveTagsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderCalculatePayloadTypeResolver<TParent = any> {
    calculatedDraftOrder?: DraftOrderCalculatePayloadToCalculatedDraftOrderResolver<TParent>;
    userErrors?: DraftOrderCalculatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderCalculatePayloadToCalculatedDraftOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderCalculatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderTypeResolver<TParent = any> {
    appliedDiscount?: CalculatedDraftOrderToAppliedDiscountResolver<TParent>;
    availableShippingRates?: CalculatedDraftOrderToAvailableShippingRatesResolver<TParent>;
    billingAddressMatchesShippingAddress?: CalculatedDraftOrderToBillingAddressMatchesShippingAddressResolver<TParent>;
    currencyCode?: CalculatedDraftOrderToCurrencyCodeResolver<TParent>;
    customer?: CalculatedDraftOrderToCustomerResolver<TParent>;
    lineItems?: CalculatedDraftOrderToLineItemsResolver<TParent>;
    lineItemsSubtotalPrice?: CalculatedDraftOrderToLineItemsSubtotalPriceResolver<TParent>;
    marketName?: CalculatedDraftOrderToMarketNameResolver<TParent>;
    marketRegionCountryCode?: CalculatedDraftOrderToMarketRegionCountryCodeResolver<TParent>;
    phone?: CalculatedDraftOrderToPhoneResolver<TParent>;
    presentmentCurrencyCode?: CalculatedDraftOrderToPresentmentCurrencyCodeResolver<TParent>;
    purchasingEntity?: CalculatedDraftOrderToPurchasingEntityResolver<TParent>;
    shippingLine?: CalculatedDraftOrderToShippingLineResolver<TParent>;
    subtotalPrice?: CalculatedDraftOrderToSubtotalPriceResolver<TParent>;
    subtotalPriceSet?: CalculatedDraftOrderToSubtotalPriceSetResolver<TParent>;
    taxLines?: CalculatedDraftOrderToTaxLinesResolver<TParent>;
    totalDiscountsSet?: CalculatedDraftOrderToTotalDiscountsSetResolver<TParent>;
    totalLineItemsPriceSet?: CalculatedDraftOrderToTotalLineItemsPriceSetResolver<TParent>;
    totalPrice?: CalculatedDraftOrderToTotalPriceResolver<TParent>;
    totalPriceSet?: CalculatedDraftOrderToTotalPriceSetResolver<TParent>;
    totalShippingPrice?: CalculatedDraftOrderToTotalShippingPriceResolver<TParent>;
    totalShippingPriceSet?: CalculatedDraftOrderToTotalShippingPriceSetResolver<TParent>;
    totalTax?: CalculatedDraftOrderToTotalTaxResolver<TParent>;
    totalTaxSet?: CalculatedDraftOrderToTotalTaxSetResolver<TParent>;
  }
  
  export interface CalculatedDraftOrderToAppliedDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToAvailableShippingRatesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToBillingAddressMatchesShippingAddressResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToCustomerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToLineItemsSubtotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToMarketNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToMarketRegionCountryCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToPresentmentCurrencyCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToPurchasingEntityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToShippingLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToSubtotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToSubtotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToTotalDiscountsSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToTotalLineItemsPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToTotalPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToTotalShippingPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToTotalShippingPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToTotalTaxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderToTotalTaxSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRateTypeResolver<TParent = any> {
    handle?: ShippingRateToHandleResolver<TParent>;
    price?: ShippingRateToPriceResolver<TParent>;
    title?: ShippingRateToTitleResolver<TParent>;
  }
  
  export interface ShippingRateToHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRateToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingRateToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemTypeResolver<TParent = any> {
    appliedDiscount?: CalculatedDraftOrderLineItemToAppliedDiscountResolver<TParent>;
    custom?: CalculatedDraftOrderLineItemToCustomResolver<TParent>;
    customAttributes?: CalculatedDraftOrderLineItemToCustomAttributesResolver<TParent>;
    customAttributesV2?: CalculatedDraftOrderLineItemToCustomAttributesV2Resolver<TParent>;
    discountedTotal?: CalculatedDraftOrderLineItemToDiscountedTotalResolver<TParent>;
    discountedTotalSet?: CalculatedDraftOrderLineItemToDiscountedTotalSetResolver<TParent>;
    discountedUnitPrice?: CalculatedDraftOrderLineItemToDiscountedUnitPriceResolver<TParent>;
    discountedUnitPriceSet?: CalculatedDraftOrderLineItemToDiscountedUnitPriceSetResolver<TParent>;
    fulfillmentService?: CalculatedDraftOrderLineItemToFulfillmentServiceResolver<TParent>;
    image?: CalculatedDraftOrderLineItemToImageResolver<TParent>;
    isGiftCard?: CalculatedDraftOrderLineItemToIsGiftCardResolver<TParent>;
    name?: CalculatedDraftOrderLineItemToNameResolver<TParent>;
    originalTotal?: CalculatedDraftOrderLineItemToOriginalTotalResolver<TParent>;
    originalTotalSet?: CalculatedDraftOrderLineItemToOriginalTotalSetResolver<TParent>;
    originalUnitPrice?: CalculatedDraftOrderLineItemToOriginalUnitPriceResolver<TParent>;
    originalUnitPriceSet?: CalculatedDraftOrderLineItemToOriginalUnitPriceSetResolver<TParent>;
    product?: CalculatedDraftOrderLineItemToProductResolver<TParent>;
    quantity?: CalculatedDraftOrderLineItemToQuantityResolver<TParent>;
    requiresShipping?: CalculatedDraftOrderLineItemToRequiresShippingResolver<TParent>;
    sku?: CalculatedDraftOrderLineItemToSkuResolver<TParent>;
    taxable?: CalculatedDraftOrderLineItemToTaxableResolver<TParent>;
    title?: CalculatedDraftOrderLineItemToTitleResolver<TParent>;
    totalDiscount?: CalculatedDraftOrderLineItemToTotalDiscountResolver<TParent>;
    totalDiscountSet?: CalculatedDraftOrderLineItemToTotalDiscountSetResolver<TParent>;
    variant?: CalculatedDraftOrderLineItemToVariantResolver<TParent>;
    variantTitle?: CalculatedDraftOrderLineItemToVariantTitleResolver<TParent>;
    vendor?: CalculatedDraftOrderLineItemToVendorResolver<TParent>;
    weight?: CalculatedDraftOrderLineItemToWeightResolver<TParent>;
  }
  
  export interface CalculatedDraftOrderLineItemToAppliedDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToCustomResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToCustomAttributesV2Resolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToDiscountedTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToDiscountedTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToDiscountedUnitPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToDiscountedUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToFulfillmentServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToIsGiftCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToOriginalTotalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToOriginalTotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToOriginalUnitPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToOriginalUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToRequiresShippingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToTaxableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToTotalDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToTotalDiscountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToVariantTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToVendorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDraftOrderLineItemToWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderCompletePayloadTypeResolver<TParent = any> {
    draftOrder?: DraftOrderCompletePayloadToDraftOrderResolver<TParent>;
    userErrors?: DraftOrderCompletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderCompletePayloadToDraftOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderCompletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderCreatePayloadTypeResolver<TParent = any> {
    draftOrder?: DraftOrderCreatePayloadToDraftOrderResolver<TParent>;
    userErrors?: DraftOrderCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderCreatePayloadToDraftOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderCreateFromOrderPayloadTypeResolver<TParent = any> {
    draftOrder?: DraftOrderCreateFromOrderPayloadToDraftOrderResolver<TParent>;
    userErrors?: DraftOrderCreateFromOrderPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderCreateFromOrderPayloadToDraftOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderCreateFromOrderPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderCreateMerchantCheckoutPayloadTypeResolver<TParent = any> {
    userErrors?: DraftOrderCreateMerchantCheckoutPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderCreateMerchantCheckoutPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderDeletePayloadTypeResolver<TParent = any> {
    deletedId?: DraftOrderDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: DraftOrderDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderDuplicatePayloadTypeResolver<TParent = any> {
    draftOrder?: DraftOrderDuplicatePayloadToDraftOrderResolver<TParent>;
    userErrors?: DraftOrderDuplicatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderDuplicatePayloadToDraftOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderDuplicatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderInvoicePreviewPayloadTypeResolver<TParent = any> {
    previewHtml?: DraftOrderInvoicePreviewPayloadToPreviewHtmlResolver<TParent>;
    previewSubject?: DraftOrderInvoicePreviewPayloadToPreviewSubjectResolver<TParent>;
    userErrors?: DraftOrderInvoicePreviewPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderInvoicePreviewPayloadToPreviewHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderInvoicePreviewPayloadToPreviewSubjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderInvoicePreviewPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderInvoiceSendPayloadTypeResolver<TParent = any> {
    draftOrder?: DraftOrderInvoiceSendPayloadToDraftOrderResolver<TParent>;
    userErrors?: DraftOrderInvoiceSendPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderInvoiceSendPayloadToDraftOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderInvoiceSendPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderUpdatePayloadTypeResolver<TParent = any> {
    draftOrder?: DraftOrderUpdatePayloadToDraftOrderResolver<TParent>;
    userErrors?: DraftOrderUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface DraftOrderUpdatePayloadToDraftOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DraftOrderUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EventBridgeServerPixelUpdatePayloadTypeResolver<TParent = any> {
    serverPixel?: EventBridgeServerPixelUpdatePayloadToServerPixelResolver<TParent>;
    userErrors?: EventBridgeServerPixelUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface EventBridgeServerPixelUpdatePayloadToServerPixelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EventBridgeServerPixelUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ErrorsServerPixelUserErrorTypeResolver<TParent = any> {
    code?: ErrorsServerPixelUserErrorToCodeResolver<TParent>;
    field?: ErrorsServerPixelUserErrorToFieldResolver<TParent>;
    message?: ErrorsServerPixelUserErrorToMessageResolver<TParent>;
  }
  
  export interface ErrorsServerPixelUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ErrorsServerPixelUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ErrorsServerPixelUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EventBridgeWebhookSubscriptionCreatePayloadTypeResolver<TParent = any> {
    userErrors?: EventBridgeWebhookSubscriptionCreatePayloadToUserErrorsResolver<TParent>;
    webhookSubscription?: EventBridgeWebhookSubscriptionCreatePayloadToWebhookSubscriptionResolver<TParent>;
  }
  
  export interface EventBridgeWebhookSubscriptionCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EventBridgeWebhookSubscriptionCreatePayloadToWebhookSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EventBridgeWebhookSubscriptionUpdatePayloadTypeResolver<TParent = any> {
    userErrors?: EventBridgeWebhookSubscriptionUpdatePayloadToUserErrorsResolver<TParent>;
    webhookSubscription?: EventBridgeWebhookSubscriptionUpdatePayloadToWebhookSubscriptionResolver<TParent>;
  }
  
  export interface EventBridgeWebhookSubscriptionUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface EventBridgeWebhookSubscriptionUpdatePayloadToWebhookSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileAcknowledgeUpdateFailedPayloadTypeResolver<TParent = any> {
    files?: FileAcknowledgeUpdateFailedPayloadToFilesResolver<TParent>;
    userErrors?: FileAcknowledgeUpdateFailedPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FileAcknowledgeUpdateFailedPayloadToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileAcknowledgeUpdateFailedPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FilesUserErrorTypeResolver<TParent = any> {
    code?: FilesUserErrorToCodeResolver<TParent>;
    field?: FilesUserErrorToFieldResolver<TParent>;
    message?: FilesUserErrorToMessageResolver<TParent>;
  }
  
  export interface FilesUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FilesUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FilesUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileCreatePayloadTypeResolver<TParent = any> {
    files?: FileCreatePayloadToFilesResolver<TParent>;
    userErrors?: FileCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FileCreatePayloadToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileDeletePayloadTypeResolver<TParent = any> {
    deletedFileIds?: FileDeletePayloadToDeletedFileIdsResolver<TParent>;
    userErrors?: FileDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FileDeletePayloadToDeletedFileIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileUpdatePayloadTypeResolver<TParent = any> {
    files?: FileUpdatePayloadToFilesResolver<TParent>;
    userErrors?: FileUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FileUpdatePayloadToFilesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FileUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FlowGenerateSignaturePayloadTypeResolver<TParent = any> {
    payload?: FlowGenerateSignaturePayloadToPayloadResolver<TParent>;
    signature?: FlowGenerateSignaturePayloadToSignatureResolver<TParent>;
    userErrors?: FlowGenerateSignaturePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FlowGenerateSignaturePayloadToPayloadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FlowGenerateSignaturePayloadToSignatureResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FlowGenerateSignaturePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FlowTriggerReceivePayloadTypeResolver<TParent = any> {
    userErrors?: FlowTriggerReceivePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FlowTriggerReceivePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentCancelPayloadTypeResolver<TParent = any> {
    fulfillment?: FulfillmentCancelPayloadToFulfillmentResolver<TParent>;
    userErrors?: FulfillmentCancelPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentCancelPayloadToFulfillmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentCancelPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleCreatePayloadTypeResolver<TParent = any> {
    fulfillmentConstraintRule?: FulfillmentConstraintRuleCreatePayloadToFulfillmentConstraintRuleResolver<TParent>;
    userErrors?: FulfillmentConstraintRuleCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentConstraintRuleCreatePayloadToFulfillmentConstraintRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleCreateUserErrorTypeResolver<TParent = any> {
    code?: FulfillmentConstraintRuleCreateUserErrorToCodeResolver<TParent>;
    field?: FulfillmentConstraintRuleCreateUserErrorToFieldResolver<TParent>;
    message?: FulfillmentConstraintRuleCreateUserErrorToMessageResolver<TParent>;
  }
  
  export interface FulfillmentConstraintRuleCreateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleCreateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleCreateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleDeletePayloadTypeResolver<TParent = any> {
    success?: FulfillmentConstraintRuleDeletePayloadToSuccessResolver<TParent>;
    userErrors?: FulfillmentConstraintRuleDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentConstraintRuleDeletePayloadToSuccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleDeleteUserErrorTypeResolver<TParent = any> {
    code?: FulfillmentConstraintRuleDeleteUserErrorToCodeResolver<TParent>;
    field?: FulfillmentConstraintRuleDeleteUserErrorToFieldResolver<TParent>;
    message?: FulfillmentConstraintRuleDeleteUserErrorToMessageResolver<TParent>;
  }
  
  export interface FulfillmentConstraintRuleDeleteUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleDeleteUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentConstraintRuleDeleteUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentCreateV2PayloadTypeResolver<TParent = any> {
    fulfillment?: FulfillmentCreateV2PayloadToFulfillmentResolver<TParent>;
    userErrors?: FulfillmentCreateV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentCreateV2PayloadToFulfillmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentCreateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventCreatePayloadTypeResolver<TParent = any> {
    fulfillmentEvent?: FulfillmentEventCreatePayloadToFulfillmentEventResolver<TParent>;
    userErrors?: FulfillmentEventCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentEventCreatePayloadToFulfillmentEventResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentEventCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAcceptCancellationRequestPayloadTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderAcceptCancellationRequestPayloadToFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderAcceptCancellationRequestPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderAcceptCancellationRequestPayloadToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAcceptCancellationRequestPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAcceptFulfillmentRequestPayloadTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderAcceptFulfillmentRequestPayloadToFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderAcceptFulfillmentRequestPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderAcceptFulfillmentRequestPayloadToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderAcceptFulfillmentRequestPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderCancelPayloadTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderCancelPayloadToFulfillmentOrderResolver<TParent>;
    replacementFulfillmentOrder?: FulfillmentOrderCancelPayloadToReplacementFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderCancelPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderCancelPayloadToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderCancelPayloadToReplacementFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderCancelPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderClosePayloadTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderClosePayloadToFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderClosePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderClosePayloadToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderClosePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderHoldPayloadTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderHoldPayloadToFulfillmentOrderResolver<TParent>;
    remainingFulfillmentOrder?: FulfillmentOrderHoldPayloadToRemainingFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderHoldPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderHoldPayloadToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderHoldPayloadToRemainingFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderHoldPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderHoldUserErrorTypeResolver<TParent = any> {
    code?: FulfillmentOrderHoldUserErrorToCodeResolver<TParent>;
    field?: FulfillmentOrderHoldUserErrorToFieldResolver<TParent>;
    message?: FulfillmentOrderHoldUserErrorToMessageResolver<TParent>;
  }
  
  export interface FulfillmentOrderHoldUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderHoldUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderHoldUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemsPreparedForPickupPayloadTypeResolver<TParent = any> {
    userErrors?: FulfillmentOrderLineItemsPreparedForPickupPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderLineItemsPreparedForPickupPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemsPreparedForPickupUserErrorTypeResolver<TParent = any> {
    code?: FulfillmentOrderLineItemsPreparedForPickupUserErrorToCodeResolver<TParent>;
    field?: FulfillmentOrderLineItemsPreparedForPickupUserErrorToFieldResolver<TParent>;
    message?: FulfillmentOrderLineItemsPreparedForPickupUserErrorToMessageResolver<TParent>;
  }
  
  export interface FulfillmentOrderLineItemsPreparedForPickupUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemsPreparedForPickupUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderLineItemsPreparedForPickupUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMergePayloadTypeResolver<TParent = any> {
    fulfillmentOrderMerges?: FulfillmentOrderMergePayloadToFulfillmentOrderMergesResolver<TParent>;
    userErrors?: FulfillmentOrderMergePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderMergePayloadToFulfillmentOrderMergesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMergePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMergeResultTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderMergeResultToFulfillmentOrderResolver<TParent>;
  }
  
  export interface FulfillmentOrderMergeResultToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMergeUserErrorTypeResolver<TParent = any> {
    code?: FulfillmentOrderMergeUserErrorToCodeResolver<TParent>;
    field?: FulfillmentOrderMergeUserErrorToFieldResolver<TParent>;
    message?: FulfillmentOrderMergeUserErrorToMessageResolver<TParent>;
  }
  
  export interface FulfillmentOrderMergeUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMergeUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMergeUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMovePayloadTypeResolver<TParent = any> {
    movedFulfillmentOrder?: FulfillmentOrderMovePayloadToMovedFulfillmentOrderResolver<TParent>;
    originalFulfillmentOrder?: FulfillmentOrderMovePayloadToOriginalFulfillmentOrderResolver<TParent>;
    remainingFulfillmentOrder?: FulfillmentOrderMovePayloadToRemainingFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderMovePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderMovePayloadToMovedFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMovePayloadToOriginalFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMovePayloadToRemainingFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderMovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderOpenPayloadTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderOpenPayloadToFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderOpenPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderOpenPayloadToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderOpenPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderRejectCancellationRequestPayloadTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderRejectCancellationRequestPayloadToFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderRejectCancellationRequestPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderRejectCancellationRequestPayloadToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderRejectCancellationRequestPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderRejectFulfillmentRequestPayloadTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderRejectFulfillmentRequestPayloadToFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderRejectFulfillmentRequestPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderRejectFulfillmentRequestPayloadToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderRejectFulfillmentRequestPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderReleaseHoldPayloadTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderReleaseHoldPayloadToFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderReleaseHoldPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderReleaseHoldPayloadToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderReleaseHoldPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderReleaseHoldUserErrorTypeResolver<TParent = any> {
    code?: FulfillmentOrderReleaseHoldUserErrorToCodeResolver<TParent>;
    field?: FulfillmentOrderReleaseHoldUserErrorToFieldResolver<TParent>;
    message?: FulfillmentOrderReleaseHoldUserErrorToMessageResolver<TParent>;
  }
  
  export interface FulfillmentOrderReleaseHoldUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderReleaseHoldUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderReleaseHoldUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderReschedulePayloadTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderReschedulePayloadToFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderReschedulePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderReschedulePayloadToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderReschedulePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderRescheduleUserErrorTypeResolver<TParent = any> {
    code?: FulfillmentOrderRescheduleUserErrorToCodeResolver<TParent>;
    field?: FulfillmentOrderRescheduleUserErrorToFieldResolver<TParent>;
    message?: FulfillmentOrderRescheduleUserErrorToMessageResolver<TParent>;
  }
  
  export interface FulfillmentOrderRescheduleUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderRescheduleUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderRescheduleUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSplitPayloadTypeResolver<TParent = any> {
    fulfillmentOrderSplits?: FulfillmentOrderSplitPayloadToFulfillmentOrderSplitsResolver<TParent>;
    userErrors?: FulfillmentOrderSplitPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderSplitPayloadToFulfillmentOrderSplitsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSplitPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSplitResultTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderSplitResultToFulfillmentOrderResolver<TParent>;
    remainingFulfillmentOrder?: FulfillmentOrderSplitResultToRemainingFulfillmentOrderResolver<TParent>;
    replacementFulfillmentOrder?: FulfillmentOrderSplitResultToReplacementFulfillmentOrderResolver<TParent>;
  }
  
  export interface FulfillmentOrderSplitResultToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSplitResultToRemainingFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSplitResultToReplacementFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSplitUserErrorTypeResolver<TParent = any> {
    code?: FulfillmentOrderSplitUserErrorToCodeResolver<TParent>;
    field?: FulfillmentOrderSplitUserErrorToFieldResolver<TParent>;
    message?: FulfillmentOrderSplitUserErrorToMessageResolver<TParent>;
  }
  
  export interface FulfillmentOrderSplitUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSplitUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSplitUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSubmitCancellationRequestPayloadTypeResolver<TParent = any> {
    fulfillmentOrder?: FulfillmentOrderSubmitCancellationRequestPayloadToFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderSubmitCancellationRequestPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderSubmitCancellationRequestPayloadToFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSubmitCancellationRequestPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSubmitFulfillmentRequestPayloadTypeResolver<TParent = any> {
    originalFulfillmentOrder?: FulfillmentOrderSubmitFulfillmentRequestPayloadToOriginalFulfillmentOrderResolver<TParent>;
    submittedFulfillmentOrder?: FulfillmentOrderSubmitFulfillmentRequestPayloadToSubmittedFulfillmentOrderResolver<TParent>;
    unsubmittedFulfillmentOrder?: FulfillmentOrderSubmitFulfillmentRequestPayloadToUnsubmittedFulfillmentOrderResolver<TParent>;
    userErrors?: FulfillmentOrderSubmitFulfillmentRequestPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrderSubmitFulfillmentRequestPayloadToOriginalFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSubmitFulfillmentRequestPayloadToSubmittedFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSubmitFulfillmentRequestPayloadToUnsubmittedFulfillmentOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrderSubmitFulfillmentRequestPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrdersReleaseHoldsPayloadTypeResolver<TParent = any> {
    job?: FulfillmentOrdersReleaseHoldsPayloadToJobResolver<TParent>;
    userErrors?: FulfillmentOrdersReleaseHoldsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrdersReleaseHoldsPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrdersReleaseHoldsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrdersReleaseHoldsUserErrorTypeResolver<TParent = any> {
    code?: FulfillmentOrdersReleaseHoldsUserErrorToCodeResolver<TParent>;
    field?: FulfillmentOrdersReleaseHoldsUserErrorToFieldResolver<TParent>;
    message?: FulfillmentOrdersReleaseHoldsUserErrorToMessageResolver<TParent>;
  }
  
  export interface FulfillmentOrdersReleaseHoldsUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrdersReleaseHoldsUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrdersReleaseHoldsUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrdersSetFulfillmentDeadlinePayloadTypeResolver<TParent = any> {
    success?: FulfillmentOrdersSetFulfillmentDeadlinePayloadToSuccessResolver<TParent>;
    userErrors?: FulfillmentOrdersSetFulfillmentDeadlinePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentOrdersSetFulfillmentDeadlinePayloadToSuccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrdersSetFulfillmentDeadlinePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrdersSetFulfillmentDeadlineUserErrorTypeResolver<TParent = any> {
    code?: FulfillmentOrdersSetFulfillmentDeadlineUserErrorToCodeResolver<TParent>;
    field?: FulfillmentOrdersSetFulfillmentDeadlineUserErrorToFieldResolver<TParent>;
    message?: FulfillmentOrdersSetFulfillmentDeadlineUserErrorToMessageResolver<TParent>;
  }
  
  export interface FulfillmentOrdersSetFulfillmentDeadlineUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrdersSetFulfillmentDeadlineUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentOrdersSetFulfillmentDeadlineUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceCreatePayloadTypeResolver<TParent = any> {
    fulfillmentService?: FulfillmentServiceCreatePayloadToFulfillmentServiceResolver<TParent>;
    userErrors?: FulfillmentServiceCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentServiceCreatePayloadToFulfillmentServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceDeletePayloadTypeResolver<TParent = any> {
    deletedId?: FulfillmentServiceDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: FulfillmentServiceDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentServiceDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceUpdatePayloadTypeResolver<TParent = any> {
    fulfillmentService?: FulfillmentServiceUpdatePayloadToFulfillmentServiceResolver<TParent>;
    userErrors?: FulfillmentServiceUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentServiceUpdatePayloadToFulfillmentServiceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentServiceUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentTrackingInfoUpdateV2PayloadTypeResolver<TParent = any> {
    fulfillment?: FulfillmentTrackingInfoUpdateV2PayloadToFulfillmentResolver<TParent>;
    userErrors?: FulfillmentTrackingInfoUpdateV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface FulfillmentTrackingInfoUpdateV2PayloadToFulfillmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FulfillmentTrackingInfoUpdateV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardCreatePayloadTypeResolver<TParent = any> {
    giftCard?: GiftCardCreatePayloadToGiftCardResolver<TParent>;
    giftCardCode?: GiftCardCreatePayloadToGiftCardCodeResolver<TParent>;
    userErrors?: GiftCardCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface GiftCardCreatePayloadToGiftCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardCreatePayloadToGiftCardCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardUserErrorTypeResolver<TParent = any> {
    code?: GiftCardUserErrorToCodeResolver<TParent>;
    field?: GiftCardUserErrorToFieldResolver<TParent>;
    message?: GiftCardUserErrorToMessageResolver<TParent>;
  }
  
  export interface GiftCardUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardDisablePayloadTypeResolver<TParent = any> {
    giftCard?: GiftCardDisablePayloadToGiftCardResolver<TParent>;
    userErrors?: GiftCardDisablePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface GiftCardDisablePayloadToGiftCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardDisablePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardUpdatePayloadTypeResolver<TParent = any> {
    giftCard?: GiftCardUpdatePayloadToGiftCardResolver<TParent>;
    userErrors?: GiftCardUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface GiftCardUpdatePayloadToGiftCardResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryActivatePayloadTypeResolver<TParent = any> {
    inventoryLevel?: InventoryActivatePayloadToInventoryLevelResolver<TParent>;
    userErrors?: InventoryActivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface InventoryActivatePayloadToInventoryLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryActivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustQuantitiesPayloadTypeResolver<TParent = any> {
    inventoryAdjustmentGroup?: InventoryAdjustQuantitiesPayloadToInventoryAdjustmentGroupResolver<TParent>;
    userErrors?: InventoryAdjustQuantitiesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface InventoryAdjustQuantitiesPayloadToInventoryAdjustmentGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustQuantitiesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustmentGroupTypeResolver<TParent = any> {
    app?: InventoryAdjustmentGroupToAppResolver<TParent>;
    changes?: InventoryAdjustmentGroupToChangesResolver<TParent>;
    createdAt?: InventoryAdjustmentGroupToCreatedAtResolver<TParent>;
    id?: InventoryAdjustmentGroupToIdResolver<TParent>;
    reason?: InventoryAdjustmentGroupToReasonResolver<TParent>;
    referenceDocumentUri?: InventoryAdjustmentGroupToReferenceDocumentUriResolver<TParent>;
    staffMember?: InventoryAdjustmentGroupToStaffMemberResolver<TParent>;
  }
  
  export interface InventoryAdjustmentGroupToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustmentGroupToChangesArgs {
    inventoryItemIds?: Array<string>;
    locationIds?: Array<string>;
    quantityNames?: Array<string>;
  }
  export interface InventoryAdjustmentGroupToChangesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: InventoryAdjustmentGroupToChangesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustmentGroupToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustmentGroupToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustmentGroupToReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustmentGroupToReferenceDocumentUriResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustmentGroupToStaffMemberResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryChangeTypeResolver<TParent = any> {
    delta?: InventoryChangeToDeltaResolver<TParent>;
    item?: InventoryChangeToItemResolver<TParent>;
    ledgerDocumentUri?: InventoryChangeToLedgerDocumentUriResolver<TParent>;
    location?: InventoryChangeToLocationResolver<TParent>;
    name?: InventoryChangeToNameResolver<TParent>;
    quantityAfterChange?: InventoryChangeToQuantityAfterChangeResolver<TParent>;
  }
  
  export interface InventoryChangeToDeltaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryChangeToItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryChangeToLedgerDocumentUriResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryChangeToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryChangeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryChangeToQuantityAfterChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustQuantitiesUserErrorTypeResolver<TParent = any> {
    code?: InventoryAdjustQuantitiesUserErrorToCodeResolver<TParent>;
    field?: InventoryAdjustQuantitiesUserErrorToFieldResolver<TParent>;
    message?: InventoryAdjustQuantitiesUserErrorToMessageResolver<TParent>;
  }
  
  export interface InventoryAdjustQuantitiesUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustQuantitiesUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustQuantitiesUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustQuantityPayloadTypeResolver<TParent = any> {
    inventoryLevel?: InventoryAdjustQuantityPayloadToInventoryLevelResolver<TParent>;
    userErrors?: InventoryAdjustQuantityPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface InventoryAdjustQuantityPayloadToInventoryLevelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryAdjustQuantityPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryBulkAdjustQuantityAtLocationPayloadTypeResolver<TParent = any> {
    inventoryLevels?: InventoryBulkAdjustQuantityAtLocationPayloadToInventoryLevelsResolver<TParent>;
    userErrors?: InventoryBulkAdjustQuantityAtLocationPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface InventoryBulkAdjustQuantityAtLocationPayloadToInventoryLevelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryBulkAdjustQuantityAtLocationPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryBulkToggleActivationPayloadTypeResolver<TParent = any> {
    inventoryItem?: InventoryBulkToggleActivationPayloadToInventoryItemResolver<TParent>;
    inventoryLevels?: InventoryBulkToggleActivationPayloadToInventoryLevelsResolver<TParent>;
    userErrors?: InventoryBulkToggleActivationPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface InventoryBulkToggleActivationPayloadToInventoryItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryBulkToggleActivationPayloadToInventoryLevelsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryBulkToggleActivationPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryBulkToggleActivationUserErrorTypeResolver<TParent = any> {
    code?: InventoryBulkToggleActivationUserErrorToCodeResolver<TParent>;
    field?: InventoryBulkToggleActivationUserErrorToFieldResolver<TParent>;
    message?: InventoryBulkToggleActivationUserErrorToMessageResolver<TParent>;
  }
  
  export interface InventoryBulkToggleActivationUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryBulkToggleActivationUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryBulkToggleActivationUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryDeactivatePayloadTypeResolver<TParent = any> {
    userErrors?: InventoryDeactivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface InventoryDeactivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemUpdatePayloadTypeResolver<TParent = any> {
    inventoryItem?: InventoryItemUpdatePayloadToInventoryItemResolver<TParent>;
    userErrors?: InventoryItemUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface InventoryItemUpdatePayloadToInventoryItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryItemUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryMoveQuantitiesPayloadTypeResolver<TParent = any> {
    inventoryAdjustmentGroup?: InventoryMoveQuantitiesPayloadToInventoryAdjustmentGroupResolver<TParent>;
    userErrors?: InventoryMoveQuantitiesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface InventoryMoveQuantitiesPayloadToInventoryAdjustmentGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryMoveQuantitiesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryMoveQuantitiesUserErrorTypeResolver<TParent = any> {
    code?: InventoryMoveQuantitiesUserErrorToCodeResolver<TParent>;
    field?: InventoryMoveQuantitiesUserErrorToFieldResolver<TParent>;
    message?: InventoryMoveQuantitiesUserErrorToMessageResolver<TParent>;
  }
  
  export interface InventoryMoveQuantitiesUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryMoveQuantitiesUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventoryMoveQuantitiesUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventorySetOnHandQuantitiesPayloadTypeResolver<TParent = any> {
    inventoryAdjustmentGroup?: InventorySetOnHandQuantitiesPayloadToInventoryAdjustmentGroupResolver<TParent>;
    userErrors?: InventorySetOnHandQuantitiesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface InventorySetOnHandQuantitiesPayloadToInventoryAdjustmentGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventorySetOnHandQuantitiesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventorySetOnHandQuantitiesUserErrorTypeResolver<TParent = any> {
    code?: InventorySetOnHandQuantitiesUserErrorToCodeResolver<TParent>;
    field?: InventorySetOnHandQuantitiesUserErrorToFieldResolver<TParent>;
    message?: InventorySetOnHandQuantitiesUserErrorToMessageResolver<TParent>;
  }
  
  export interface InventorySetOnHandQuantitiesUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventorySetOnHandQuantitiesUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventorySetOnHandQuantitiesUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventorySetScheduledChangesPayloadTypeResolver<TParent = any> {
    scheduledChanges?: InventorySetScheduledChangesPayloadToScheduledChangesResolver<TParent>;
    userErrors?: InventorySetScheduledChangesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface InventorySetScheduledChangesPayloadToScheduledChangesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventorySetScheduledChangesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventorySetScheduledChangesUserErrorTypeResolver<TParent = any> {
    code?: InventorySetScheduledChangesUserErrorToCodeResolver<TParent>;
    field?: InventorySetScheduledChangesUserErrorToFieldResolver<TParent>;
    message?: InventorySetScheduledChangesUserErrorToMessageResolver<TParent>;
  }
  
  export interface InventorySetScheduledChangesUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventorySetScheduledChangesUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface InventorySetScheduledChangesUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationActivatePayloadTypeResolver<TParent = any> {
    location?: LocationActivatePayloadToLocationResolver<TParent>;
    locationActivateUserErrors?: LocationActivatePayloadToLocationActivateUserErrorsResolver<TParent>;
  }
  
  export interface LocationActivatePayloadToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationActivatePayloadToLocationActivateUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationActivateUserErrorTypeResolver<TParent = any> {
    code?: LocationActivateUserErrorToCodeResolver<TParent>;
    field?: LocationActivateUserErrorToFieldResolver<TParent>;
    message?: LocationActivateUserErrorToMessageResolver<TParent>;
  }
  
  export interface LocationActivateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationActivateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationActivateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddPayloadTypeResolver<TParent = any> {
    location?: LocationAddPayloadToLocationResolver<TParent>;
    userErrors?: LocationAddPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface LocationAddPayloadToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddUserErrorTypeResolver<TParent = any> {
    code?: LocationAddUserErrorToCodeResolver<TParent>;
    field?: LocationAddUserErrorToFieldResolver<TParent>;
    message?: LocationAddUserErrorToMessageResolver<TParent>;
  }
  
  export interface LocationAddUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationAddUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationDeactivatePayloadTypeResolver<TParent = any> {
    location?: LocationDeactivatePayloadToLocationResolver<TParent>;
    locationDeactivateUserErrors?: LocationDeactivatePayloadToLocationDeactivateUserErrorsResolver<TParent>;
  }
  
  export interface LocationDeactivatePayloadToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationDeactivatePayloadToLocationDeactivateUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationDeactivateUserErrorTypeResolver<TParent = any> {
    code?: LocationDeactivateUserErrorToCodeResolver<TParent>;
    field?: LocationDeactivateUserErrorToFieldResolver<TParent>;
    message?: LocationDeactivateUserErrorToMessageResolver<TParent>;
  }
  
  export interface LocationDeactivateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationDeactivateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationDeactivateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationDeletePayloadTypeResolver<TParent = any> {
    deletedLocationId?: LocationDeletePayloadToDeletedLocationIdResolver<TParent>;
    locationDeleteUserErrors?: LocationDeletePayloadToLocationDeleteUserErrorsResolver<TParent>;
  }
  
  export interface LocationDeletePayloadToDeletedLocationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationDeletePayloadToLocationDeleteUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationDeleteUserErrorTypeResolver<TParent = any> {
    code?: LocationDeleteUserErrorToCodeResolver<TParent>;
    field?: LocationDeleteUserErrorToFieldResolver<TParent>;
    message?: LocationDeleteUserErrorToMessageResolver<TParent>;
  }
  
  export interface LocationDeleteUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationDeleteUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationDeleteUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationEditPayloadTypeResolver<TParent = any> {
    location?: LocationEditPayloadToLocationResolver<TParent>;
    userErrors?: LocationEditPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface LocationEditPayloadToLocationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationEditPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationEditUserErrorTypeResolver<TParent = any> {
    code?: LocationEditUserErrorToCodeResolver<TParent>;
    field?: LocationEditUserErrorToFieldResolver<TParent>;
    message?: LocationEditUserErrorToMessageResolver<TParent>;
  }
  
  export interface LocationEditUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationEditUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationEditUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationLocalPickupDisablePayloadTypeResolver<TParent = any> {
    locationId?: LocationLocalPickupDisablePayloadToLocationIdResolver<TParent>;
    userErrors?: LocationLocalPickupDisablePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface LocationLocalPickupDisablePayloadToLocationIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationLocalPickupDisablePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationLocalPickupSettingsErrorTypeResolver<TParent = any> {
    code?: DeliveryLocationLocalPickupSettingsErrorToCodeResolver<TParent>;
    field?: DeliveryLocationLocalPickupSettingsErrorToFieldResolver<TParent>;
    message?: DeliveryLocationLocalPickupSettingsErrorToMessageResolver<TParent>;
  }
  
  export interface DeliveryLocationLocalPickupSettingsErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationLocalPickupSettingsErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DeliveryLocationLocalPickupSettingsErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationLocalPickupEnablePayloadTypeResolver<TParent = any> {
    localPickupSettings?: LocationLocalPickupEnablePayloadToLocalPickupSettingsResolver<TParent>;
    userErrors?: LocationLocalPickupEnablePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface LocationLocalPickupEnablePayloadToLocalPickupSettingsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LocationLocalPickupEnablePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCreatePayloadTypeResolver<TParent = any> {
    market?: MarketCreatePayloadToMarketResolver<TParent>;
    userErrors?: MarketCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketCreatePayloadToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketUserErrorTypeResolver<TParent = any> {
    code?: MarketUserErrorToCodeResolver<TParent>;
    field?: MarketUserErrorToFieldResolver<TParent>;
    message?: MarketUserErrorToMessageResolver<TParent>;
  }
  
  export interface MarketUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCurrencySettingsUpdatePayloadTypeResolver<TParent = any> {
    market?: MarketCurrencySettingsUpdatePayloadToMarketResolver<TParent>;
    userErrors?: MarketCurrencySettingsUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketCurrencySettingsUpdatePayloadToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCurrencySettingsUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCurrencySettingsUserErrorTypeResolver<TParent = any> {
    code?: MarketCurrencySettingsUserErrorToCodeResolver<TParent>;
    field?: MarketCurrencySettingsUserErrorToFieldResolver<TParent>;
    message?: MarketCurrencySettingsUserErrorToMessageResolver<TParent>;
  }
  
  export interface MarketCurrencySettingsUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCurrencySettingsUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketCurrencySettingsUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketDeletePayloadTypeResolver<TParent = any> {
    deletedId?: MarketDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: MarketDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizationsRegisterPayloadTypeResolver<TParent = any> {
    marketLocalizations?: MarketLocalizationsRegisterPayloadToMarketLocalizationsResolver<TParent>;
    userErrors?: MarketLocalizationsRegisterPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketLocalizationsRegisterPayloadToMarketLocalizationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizationsRegisterPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationUserErrorTypeResolver<TParent = any> {
    code?: TranslationUserErrorToCodeResolver<TParent>;
    field?: TranslationUserErrorToFieldResolver<TParent>;
    message?: TranslationUserErrorToMessageResolver<TParent>;
  }
  
  export interface TranslationUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizationsRemovePayloadTypeResolver<TParent = any> {
    marketLocalizations?: MarketLocalizationsRemovePayloadToMarketLocalizationsResolver<TParent>;
    userErrors?: MarketLocalizationsRemovePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketLocalizationsRemovePayloadToMarketLocalizationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketLocalizationsRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionDeletePayloadTypeResolver<TParent = any> {
    deletedId?: MarketRegionDeletePayloadToDeletedIdResolver<TParent>;
    market?: MarketRegionDeletePayloadToMarketResolver<TParent>;
    userErrors?: MarketRegionDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketRegionDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionDeletePayloadToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionsCreatePayloadTypeResolver<TParent = any> {
    market?: MarketRegionsCreatePayloadToMarketResolver<TParent>;
    userErrors?: MarketRegionsCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketRegionsCreatePayloadToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionsCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionsDeletePayloadTypeResolver<TParent = any> {
    deletedIds?: MarketRegionsDeletePayloadToDeletedIdsResolver<TParent>;
    userErrors?: MarketRegionsDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketRegionsDeletePayloadToDeletedIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionsDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketUpdatePayloadTypeResolver<TParent = any> {
    market?: MarketUpdatePayloadToMarketResolver<TParent>;
    userErrors?: MarketUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketUpdatePayloadToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceCreatePayloadTypeResolver<TParent = any> {
    market?: MarketWebPresenceCreatePayloadToMarketResolver<TParent>;
    userErrors?: MarketWebPresenceCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketWebPresenceCreatePayloadToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceDeletePayloadTypeResolver<TParent = any> {
    deletedId?: MarketWebPresenceDeletePayloadToDeletedIdResolver<TParent>;
    market?: MarketWebPresenceDeletePayloadToMarketResolver<TParent>;
    userErrors?: MarketWebPresenceDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketWebPresenceDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceDeletePayloadToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceUpdatePayloadTypeResolver<TParent = any> {
    market?: MarketWebPresenceUpdatePayloadToMarketResolver<TParent>;
    userErrors?: MarketWebPresenceUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketWebPresenceUpdatePayloadToMarketResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketWebPresenceUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivitiesDeleteAllExternalPayloadTypeResolver<TParent = any> {
    job?: MarketingActivitiesDeleteAllExternalPayloadToJobResolver<TParent>;
    userErrors?: MarketingActivitiesDeleteAllExternalPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketingActivitiesDeleteAllExternalPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivitiesDeleteAllExternalPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityUserErrorTypeResolver<TParent = any> {
    code?: MarketingActivityUserErrorToCodeResolver<TParent>;
    field?: MarketingActivityUserErrorToFieldResolver<TParent>;
    message?: MarketingActivityUserErrorToMessageResolver<TParent>;
  }
  
  export interface MarketingActivityUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityCreatePayloadTypeResolver<TParent = any> {
    marketingActivity?: MarketingActivityCreatePayloadToMarketingActivityResolver<TParent>;
    redirectPath?: MarketingActivityCreatePayloadToRedirectPathResolver<TParent>;
    userErrors?: MarketingActivityCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketingActivityCreatePayloadToMarketingActivityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityCreatePayloadToRedirectPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityCreateExternalPayloadTypeResolver<TParent = any> {
    marketingActivity?: MarketingActivityCreateExternalPayloadToMarketingActivityResolver<TParent>;
    userErrors?: MarketingActivityCreateExternalPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketingActivityCreateExternalPayloadToMarketingActivityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityCreateExternalPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityDeleteExternalPayloadTypeResolver<TParent = any> {
    deletedMarketingActivityId?: MarketingActivityDeleteExternalPayloadToDeletedMarketingActivityIdResolver<TParent>;
    userErrors?: MarketingActivityDeleteExternalPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketingActivityDeleteExternalPayloadToDeletedMarketingActivityIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityDeleteExternalPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityUpdatePayloadTypeResolver<TParent = any> {
    marketingActivity?: MarketingActivityUpdatePayloadToMarketingActivityResolver<TParent>;
    redirectPath?: MarketingActivityUpdatePayloadToRedirectPathResolver<TParent>;
    userErrors?: MarketingActivityUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketingActivityUpdatePayloadToMarketingActivityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityUpdatePayloadToRedirectPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityUpdateExternalPayloadTypeResolver<TParent = any> {
    marketingActivity?: MarketingActivityUpdateExternalPayloadToMarketingActivityResolver<TParent>;
    userErrors?: MarketingActivityUpdateExternalPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketingActivityUpdateExternalPayloadToMarketingActivityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityUpdateExternalPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityUpsertExternalPayloadTypeResolver<TParent = any> {
    marketingActivity?: MarketingActivityUpsertExternalPayloadToMarketingActivityResolver<TParent>;
    userErrors?: MarketingActivityUpsertExternalPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketingActivityUpsertExternalPayloadToMarketingActivityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingActivityUpsertExternalPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementCreatePayloadTypeResolver<TParent = any> {
    marketingEngagement?: MarketingEngagementCreatePayloadToMarketingEngagementResolver<TParent>;
    userErrors?: MarketingEngagementCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketingEngagementCreatePayloadToMarketingEngagementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementTypeResolver<TParent = any> {
    adSpend?: MarketingEngagementToAdSpendResolver<TParent>;
    channelHandle?: MarketingEngagementToChannelHandleResolver<TParent>;
    clicksCount?: MarketingEngagementToClicksCountResolver<TParent>;
    commentsCount?: MarketingEngagementToCommentsCountResolver<TParent>;
    complaintsCount?: MarketingEngagementToComplaintsCountResolver<TParent>;
    failsCount?: MarketingEngagementToFailsCountResolver<TParent>;
    favoritesCount?: MarketingEngagementToFavoritesCountResolver<TParent>;
    firstTimeCustomers?: MarketingEngagementToFirstTimeCustomersResolver<TParent>;
    impressionsCount?: MarketingEngagementToImpressionsCountResolver<TParent>;
    isCumulative?: MarketingEngagementToIsCumulativeResolver<TParent>;
    marketingActivity?: MarketingEngagementToMarketingActivityResolver<TParent>;
    occurredOn?: MarketingEngagementToOccurredOnResolver<TParent>;
    orders?: MarketingEngagementToOrdersResolver<TParent>;
    returningCustomers?: MarketingEngagementToReturningCustomersResolver<TParent>;
    sales?: MarketingEngagementToSalesResolver<TParent>;
    sendsCount?: MarketingEngagementToSendsCountResolver<TParent>;
    sessionsCount?: MarketingEngagementToSessionsCountResolver<TParent>;
    sharesCount?: MarketingEngagementToSharesCountResolver<TParent>;
    uniqueClicksCount?: MarketingEngagementToUniqueClicksCountResolver<TParent>;
    uniqueViewsCount?: MarketingEngagementToUniqueViewsCountResolver<TParent>;
    unsubscribesCount?: MarketingEngagementToUnsubscribesCountResolver<TParent>;
    utcOffset?: MarketingEngagementToUtcOffsetResolver<TParent>;
    viewsCount?: MarketingEngagementToViewsCountResolver<TParent>;
  }
  
  export interface MarketingEngagementToAdSpendResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToChannelHandleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToClicksCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToCommentsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToComplaintsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToFailsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToFavoritesCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToFirstTimeCustomersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToImpressionsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToIsCumulativeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToMarketingActivityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToOccurredOnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToOrdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToReturningCustomersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToSalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToSendsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToSessionsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToSharesCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToUniqueClicksCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToUniqueViewsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToUnsubscribesCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToUtcOffsetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementToViewsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementsDeletePayloadTypeResolver<TParent = any> {
    result?: MarketingEngagementsDeletePayloadToResultResolver<TParent>;
    userErrors?: MarketingEngagementsDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MarketingEngagementsDeletePayloadToResultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketingEngagementsDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionCreatePayloadTypeResolver<TParent = any> {
    createdDefinition?: MetafieldDefinitionCreatePayloadToCreatedDefinitionResolver<TParent>;
    userErrors?: MetafieldDefinitionCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetafieldDefinitionCreatePayloadToCreatedDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionCreateUserErrorTypeResolver<TParent = any> {
    code?: MetafieldDefinitionCreateUserErrorToCodeResolver<TParent>;
    field?: MetafieldDefinitionCreateUserErrorToFieldResolver<TParent>;
    message?: MetafieldDefinitionCreateUserErrorToMessageResolver<TParent>;
  }
  
  export interface MetafieldDefinitionCreateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionCreateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionCreateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionDeletePayloadTypeResolver<TParent = any> {
    deletedDefinitionId?: MetafieldDefinitionDeletePayloadToDeletedDefinitionIdResolver<TParent>;
    userErrors?: MetafieldDefinitionDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetafieldDefinitionDeletePayloadToDeletedDefinitionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionDeleteUserErrorTypeResolver<TParent = any> {
    code?: MetafieldDefinitionDeleteUserErrorToCodeResolver<TParent>;
    field?: MetafieldDefinitionDeleteUserErrorToFieldResolver<TParent>;
    message?: MetafieldDefinitionDeleteUserErrorToMessageResolver<TParent>;
  }
  
  export interface MetafieldDefinitionDeleteUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionDeleteUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionDeleteUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionPinPayloadTypeResolver<TParent = any> {
    pinnedDefinition?: MetafieldDefinitionPinPayloadToPinnedDefinitionResolver<TParent>;
    userErrors?: MetafieldDefinitionPinPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetafieldDefinitionPinPayloadToPinnedDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionPinPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionPinUserErrorTypeResolver<TParent = any> {
    code?: MetafieldDefinitionPinUserErrorToCodeResolver<TParent>;
    field?: MetafieldDefinitionPinUserErrorToFieldResolver<TParent>;
    message?: MetafieldDefinitionPinUserErrorToMessageResolver<TParent>;
  }
  
  export interface MetafieldDefinitionPinUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionPinUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionPinUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionUnpinPayloadTypeResolver<TParent = any> {
    unpinnedDefinition?: MetafieldDefinitionUnpinPayloadToUnpinnedDefinitionResolver<TParent>;
    userErrors?: MetafieldDefinitionUnpinPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetafieldDefinitionUnpinPayloadToUnpinnedDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionUnpinPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionUnpinUserErrorTypeResolver<TParent = any> {
    code?: MetafieldDefinitionUnpinUserErrorToCodeResolver<TParent>;
    field?: MetafieldDefinitionUnpinUserErrorToFieldResolver<TParent>;
    message?: MetafieldDefinitionUnpinUserErrorToMessageResolver<TParent>;
  }
  
  export interface MetafieldDefinitionUnpinUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionUnpinUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionUnpinUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionUpdatePayloadTypeResolver<TParent = any> {
    updatedDefinition?: MetafieldDefinitionUpdatePayloadToUpdatedDefinitionResolver<TParent>;
    userErrors?: MetafieldDefinitionUpdatePayloadToUserErrorsResolver<TParent>;
    validationJob?: MetafieldDefinitionUpdatePayloadToValidationJobResolver<TParent>;
  }
  
  export interface MetafieldDefinitionUpdatePayloadToUpdatedDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionUpdatePayloadToValidationJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionUpdateUserErrorTypeResolver<TParent = any> {
    code?: MetafieldDefinitionUpdateUserErrorToCodeResolver<TParent>;
    field?: MetafieldDefinitionUpdateUserErrorToFieldResolver<TParent>;
    message?: MetafieldDefinitionUpdateUserErrorToMessageResolver<TParent>;
  }
  
  export interface MetafieldDefinitionUpdateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionUpdateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDefinitionUpdateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDeletePayloadTypeResolver<TParent = any> {
    deletedId?: MetafieldDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: MetafieldDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetafieldDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityCreatePayloadTypeResolver<TParent = any> {
    metafieldStorefrontVisibility?: MetafieldStorefrontVisibilityCreatePayloadToMetafieldStorefrontVisibilityResolver<TParent>;
    userErrors?: MetafieldStorefrontVisibilityCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetafieldStorefrontVisibilityCreatePayloadToMetafieldStorefrontVisibilityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityDeletePayloadTypeResolver<TParent = any> {
    deletedMetafieldStorefrontVisibilityId?: MetafieldStorefrontVisibilityDeletePayloadToDeletedMetafieldStorefrontVisibilityIdResolver<TParent>;
    userErrors?: MetafieldStorefrontVisibilityDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetafieldStorefrontVisibilityDeletePayloadToDeletedMetafieldStorefrontVisibilityIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldStorefrontVisibilityDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldsSetPayloadTypeResolver<TParent = any> {
    metafields?: MetafieldsSetPayloadToMetafieldsResolver<TParent>;
    userErrors?: MetafieldsSetPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetafieldsSetPayloadToMetafieldsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldsSetPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldsSetUserErrorTypeResolver<TParent = any> {
    code?: MetafieldsSetUserErrorToCodeResolver<TParent>;
    elementIndex?: MetafieldsSetUserErrorToElementIndexResolver<TParent>;
    field?: MetafieldsSetUserErrorToFieldResolver<TParent>;
    message?: MetafieldsSetUserErrorToMessageResolver<TParent>;
  }
  
  export interface MetafieldsSetUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldsSetUserErrorToElementIndexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldsSetUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetafieldsSetUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectBulkDeletePayloadTypeResolver<TParent = any> {
    job?: MetaobjectBulkDeletePayloadToJobResolver<TParent>;
    userErrors?: MetaobjectBulkDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetaobjectBulkDeletePayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectBulkDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectUserErrorTypeResolver<TParent = any> {
    code?: MetaobjectUserErrorToCodeResolver<TParent>;
    elementIndex?: MetaobjectUserErrorToElementIndexResolver<TParent>;
    elementKey?: MetaobjectUserErrorToElementKeyResolver<TParent>;
    field?: MetaobjectUserErrorToFieldResolver<TParent>;
    message?: MetaobjectUserErrorToMessageResolver<TParent>;
  }
  
  export interface MetaobjectUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectUserErrorToElementIndexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectUserErrorToElementKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCreatePayloadTypeResolver<TParent = any> {
    metaobject?: MetaobjectCreatePayloadToMetaobjectResolver<TParent>;
    userErrors?: MetaobjectCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetaobjectCreatePayloadToMetaobjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionCreatePayloadTypeResolver<TParent = any> {
    metaobjectDefinition?: MetaobjectDefinitionCreatePayloadToMetaobjectDefinitionResolver<TParent>;
    userErrors?: MetaobjectDefinitionCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetaobjectDefinitionCreatePayloadToMetaobjectDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionDeletePayloadTypeResolver<TParent = any> {
    deletedId?: MetaobjectDefinitionDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: MetaobjectDefinitionDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetaobjectDefinitionDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionUpdatePayloadTypeResolver<TParent = any> {
    metaobjectDefinition?: MetaobjectDefinitionUpdatePayloadToMetaobjectDefinitionResolver<TParent>;
    userErrors?: MetaobjectDefinitionUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetaobjectDefinitionUpdatePayloadToMetaobjectDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDefinitionUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDeletePayloadTypeResolver<TParent = any> {
    deletedId?: MetaobjectDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: MetaobjectDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetaobjectDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectUpdatePayloadTypeResolver<TParent = any> {
    metaobject?: MetaobjectUpdatePayloadToMetaobjectResolver<TParent>;
    userErrors?: MetaobjectUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetaobjectUpdatePayloadToMetaobjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectUpsertPayloadTypeResolver<TParent = any> {
    metaobject?: MetaobjectUpsertPayloadToMetaobjectResolver<TParent>;
    userErrors?: MetaobjectUpsertPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface MetaobjectUpsertPayloadToMetaobjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaobjectUpsertPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCancelPayloadTypeResolver<TParent = any> {
    job?: OrderCancelPayloadToJobResolver<TParent>;
    orderCancelUserErrors?: OrderCancelPayloadToOrderCancelUserErrorsResolver<TParent>;
    userErrors?: OrderCancelPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderCancelPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCancelPayloadToOrderCancelUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCancelPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCancelUserErrorTypeResolver<TParent = any> {
    code?: OrderCancelUserErrorToCodeResolver<TParent>;
    field?: OrderCancelUserErrorToFieldResolver<TParent>;
    message?: OrderCancelUserErrorToMessageResolver<TParent>;
  }
  
  export interface OrderCancelUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCancelUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCancelUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCapturePayloadTypeResolver<TParent = any> {
    transaction?: OrderCapturePayloadToTransactionResolver<TParent>;
    userErrors?: OrderCapturePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderCapturePayloadToTransactionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCapturePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderClosePayloadTypeResolver<TParent = any> {
    order?: OrderClosePayloadToOrderResolver<TParent>;
    userErrors?: OrderClosePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderClosePayloadToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderClosePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCreateMandatePaymentPayloadTypeResolver<TParent = any> {
    job?: OrderCreateMandatePaymentPayloadToJobResolver<TParent>;
    paymentReferenceId?: OrderCreateMandatePaymentPayloadToPaymentReferenceIdResolver<TParent>;
    userErrors?: OrderCreateMandatePaymentPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderCreateMandatePaymentPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCreateMandatePaymentPayloadToPaymentReferenceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCreateMandatePaymentPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCreateMandatePaymentUserErrorTypeResolver<TParent = any> {
    code?: OrderCreateMandatePaymentUserErrorToCodeResolver<TParent>;
    field?: OrderCreateMandatePaymentUserErrorToFieldResolver<TParent>;
    message?: OrderCreateMandatePaymentUserErrorToMessageResolver<TParent>;
  }
  
  export interface OrderCreateMandatePaymentUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCreateMandatePaymentUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderCreateMandatePaymentUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAddCustomItemPayloadTypeResolver<TParent = any> {
    calculatedLineItem?: OrderEditAddCustomItemPayloadToCalculatedLineItemResolver<TParent>;
    calculatedOrder?: OrderEditAddCustomItemPayloadToCalculatedOrderResolver<TParent>;
    userErrors?: OrderEditAddCustomItemPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderEditAddCustomItemPayloadToCalculatedLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAddCustomItemPayloadToCalculatedOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAddCustomItemPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemTypeResolver<TParent = any> {
    calculatedDiscountAllocations?: CalculatedLineItemToCalculatedDiscountAllocationsResolver<TParent>;
    customAttributes?: CalculatedLineItemToCustomAttributesResolver<TParent>;
    discountAllocations?: CalculatedLineItemToDiscountAllocationsResolver<TParent>;
    discountedUnitPriceSet?: CalculatedLineItemToDiscountedUnitPriceSetResolver<TParent>;
    editableQuantity?: CalculatedLineItemToEditableQuantityResolver<TParent>;
    editableQuantityBeforeChanges?: CalculatedLineItemToEditableQuantityBeforeChangesResolver<TParent>;
    editableSubtotalSet?: CalculatedLineItemToEditableSubtotalSetResolver<TParent>;
    hasStagedLineItemDiscount?: CalculatedLineItemToHasStagedLineItemDiscountResolver<TParent>;
    id?: CalculatedLineItemToIdResolver<TParent>;
    image?: CalculatedLineItemToImageResolver<TParent>;
    originalUnitPriceSet?: CalculatedLineItemToOriginalUnitPriceSetResolver<TParent>;
    quantity?: CalculatedLineItemToQuantityResolver<TParent>;
    restockable?: CalculatedLineItemToRestockableResolver<TParent>;
    restocking?: CalculatedLineItemToRestockingResolver<TParent>;
    sku?: CalculatedLineItemToSkuResolver<TParent>;
    stagedChanges?: CalculatedLineItemToStagedChangesResolver<TParent>;
    title?: CalculatedLineItemToTitleResolver<TParent>;
    uneditableSubtotalSet?: CalculatedLineItemToUneditableSubtotalSetResolver<TParent>;
    variant?: CalculatedLineItemToVariantResolver<TParent>;
    variantTitle?: CalculatedLineItemToVariantTitleResolver<TParent>;
  }
  
  export interface CalculatedLineItemToCalculatedDiscountAllocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToCustomAttributesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToDiscountAllocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToDiscountedUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToEditableQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToEditableQuantityBeforeChangesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToEditableSubtotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToHasStagedLineItemDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToOriginalUnitPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToRestockableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToRestockingResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToSkuResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToStagedChangesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToUneditableSubtotalSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemToVariantTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountAllocationTypeResolver<TParent = any> {
    allocatedAmountSet?: CalculatedDiscountAllocationToAllocatedAmountSetResolver<TParent>;
    discountApplication?: CalculatedDiscountAllocationToDiscountApplicationResolver<TParent>;
  }
  
  export interface CalculatedDiscountAllocationToAllocatedAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountAllocationToDiscountApplicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountApplicationTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'CalculatedAutomaticDiscountApplication' | 'CalculatedDiscountCodeApplication' | 'CalculatedManualDiscountApplication' | 'CalculatedScriptDiscountApplication';
  }
  export interface OrderStagedChangeTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'OrderStagedChangeAddCustomItem' | 'OrderStagedChangeAddLineItemDiscount' | 'OrderStagedChangeAddShippingLine' | 'OrderStagedChangeAddVariant' | 'OrderStagedChangeDecrementItem' | 'OrderStagedChangeIncrementItem';
  }
  export interface OrderStagedChangeAddCustomItemTypeResolver<TParent = any> {
    originalUnitPrice?: OrderStagedChangeAddCustomItemToOriginalUnitPriceResolver<TParent>;
    quantity?: OrderStagedChangeAddCustomItemToQuantityResolver<TParent>;
    title?: OrderStagedChangeAddCustomItemToTitleResolver<TParent>;
  }
  
  export interface OrderStagedChangeAddCustomItemToOriginalUnitPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeAddCustomItemToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeAddCustomItemToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeAddLineItemDiscountTypeResolver<TParent = any> {
    description?: OrderStagedChangeAddLineItemDiscountToDescriptionResolver<TParent>;
    id?: OrderStagedChangeAddLineItemDiscountToIdResolver<TParent>;
    value?: OrderStagedChangeAddLineItemDiscountToValueResolver<TParent>;
  }
  
  export interface OrderStagedChangeAddLineItemDiscountToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeAddLineItemDiscountToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeAddLineItemDiscountToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeAddShippingLineTypeResolver<TParent = any> {
    phone?: OrderStagedChangeAddShippingLineToPhoneResolver<TParent>;
    presentmentTitle?: OrderStagedChangeAddShippingLineToPresentmentTitleResolver<TParent>;
    price?: OrderStagedChangeAddShippingLineToPriceResolver<TParent>;
    title?: OrderStagedChangeAddShippingLineToTitleResolver<TParent>;
  }
  
  export interface OrderStagedChangeAddShippingLineToPhoneResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeAddShippingLineToPresentmentTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeAddShippingLineToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeAddShippingLineToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeAddVariantTypeResolver<TParent = any> {
    quantity?: OrderStagedChangeAddVariantToQuantityResolver<TParent>;
    variant?: OrderStagedChangeAddVariantToVariantResolver<TParent>;
  }
  
  export interface OrderStagedChangeAddVariantToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeAddVariantToVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeDecrementItemTypeResolver<TParent = any> {
    delta?: OrderStagedChangeDecrementItemToDeltaResolver<TParent>;
    lineItem?: OrderStagedChangeDecrementItemToLineItemResolver<TParent>;
    restock?: OrderStagedChangeDecrementItemToRestockResolver<TParent>;
  }
  
  export interface OrderStagedChangeDecrementItemToDeltaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeDecrementItemToLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeDecrementItemToRestockResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeIncrementItemTypeResolver<TParent = any> {
    delta?: OrderStagedChangeIncrementItemToDeltaResolver<TParent>;
    lineItem?: OrderStagedChangeIncrementItemToLineItemResolver<TParent>;
  }
  
  export interface OrderStagedChangeIncrementItemToDeltaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeIncrementItemToLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderTypeResolver<TParent = any> {
    addedDiscountApplications?: CalculatedOrderToAddedDiscountApplicationsResolver<TParent>;
    addedLineItems?: CalculatedOrderToAddedLineItemsResolver<TParent>;
    cartDiscountAmountSet?: CalculatedOrderToCartDiscountAmountSetResolver<TParent>;
    committed?: CalculatedOrderToCommittedResolver<TParent>;
    id?: CalculatedOrderToIdResolver<TParent>;
    lineItems?: CalculatedOrderToLineItemsResolver<TParent>;
    notificationPreviewHtml?: CalculatedOrderToNotificationPreviewHtmlResolver<TParent>;
    notificationPreviewTitle?: CalculatedOrderToNotificationPreviewTitleResolver<TParent>;
    order?: CalculatedOrderToOrderResolver<TParent>;
    originalOrder?: CalculatedOrderToOriginalOrderResolver<TParent>;
    stagedChanges?: CalculatedOrderToStagedChangesResolver<TParent>;
    subtotalLineItemsQuantity?: CalculatedOrderToSubtotalLineItemsQuantityResolver<TParent>;
    subtotalPriceSet?: CalculatedOrderToSubtotalPriceSetResolver<TParent>;
    taxLines?: CalculatedOrderToTaxLinesResolver<TParent>;
    totalOutstandingSet?: CalculatedOrderToTotalOutstandingSetResolver<TParent>;
    totalPriceSet?: CalculatedOrderToTotalPriceSetResolver<TParent>;
  }
  
  export interface CalculatedOrderToAddedDiscountApplicationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CalculatedOrderToAddedDiscountApplicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CalculatedOrderToAddedDiscountApplicationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToAddedLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CalculatedOrderToAddedLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CalculatedOrderToAddedLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToCartDiscountAmountSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToCommittedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToLineItemsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    query?: string;
  }
  export interface CalculatedOrderToLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CalculatedOrderToLineItemsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToNotificationPreviewHtmlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToNotificationPreviewTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToOriginalOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToStagedChangesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface CalculatedOrderToStagedChangesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CalculatedOrderToStagedChangesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToSubtotalLineItemsQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToSubtotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToTotalOutstandingSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedOrderToTotalPriceSetResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountApplicationConnectionTypeResolver<TParent = any> {
    edges?: CalculatedDiscountApplicationConnectionToEdgesResolver<TParent>;
    nodes?: CalculatedDiscountApplicationConnectionToNodesResolver<TParent>;
    pageInfo?: CalculatedDiscountApplicationConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CalculatedDiscountApplicationConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountApplicationConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountApplicationConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountApplicationEdgeTypeResolver<TParent = any> {
    cursor?: CalculatedDiscountApplicationEdgeToCursorResolver<TParent>;
    node?: CalculatedDiscountApplicationEdgeToNodeResolver<TParent>;
  }
  
  export interface CalculatedDiscountApplicationEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountApplicationEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemConnectionTypeResolver<TParent = any> {
    edges?: CalculatedLineItemConnectionToEdgesResolver<TParent>;
    nodes?: CalculatedLineItemConnectionToNodesResolver<TParent>;
    pageInfo?: CalculatedLineItemConnectionToPageInfoResolver<TParent>;
  }
  
  export interface CalculatedLineItemConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemEdgeTypeResolver<TParent = any> {
    cursor?: CalculatedLineItemEdgeToCursorResolver<TParent>;
    node?: CalculatedLineItemEdgeToNodeResolver<TParent>;
  }
  
  export interface CalculatedLineItemEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedLineItemEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeConnectionTypeResolver<TParent = any> {
    edges?: OrderStagedChangeConnectionToEdgesResolver<TParent>;
    nodes?: OrderStagedChangeConnectionToNodesResolver<TParent>;
    pageInfo?: OrderStagedChangeConnectionToPageInfoResolver<TParent>;
  }
  
  export interface OrderStagedChangeConnectionToEdgesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeConnectionToNodesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeConnectionToPageInfoResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeEdgeTypeResolver<TParent = any> {
    cursor?: OrderStagedChangeEdgeToCursorResolver<TParent>;
    node?: OrderStagedChangeEdgeToNodeResolver<TParent>;
  }
  
  export interface OrderStagedChangeEdgeToCursorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderStagedChangeEdgeToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAddLineItemDiscountPayloadTypeResolver<TParent = any> {
    addedDiscountStagedChange?: OrderEditAddLineItemDiscountPayloadToAddedDiscountStagedChangeResolver<TParent>;
    calculatedLineItem?: OrderEditAddLineItemDiscountPayloadToCalculatedLineItemResolver<TParent>;
    calculatedOrder?: OrderEditAddLineItemDiscountPayloadToCalculatedOrderResolver<TParent>;
    userErrors?: OrderEditAddLineItemDiscountPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderEditAddLineItemDiscountPayloadToAddedDiscountStagedChangeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAddLineItemDiscountPayloadToCalculatedLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAddLineItemDiscountPayloadToCalculatedOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAddLineItemDiscountPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAddVariantPayloadTypeResolver<TParent = any> {
    calculatedLineItem?: OrderEditAddVariantPayloadToCalculatedLineItemResolver<TParent>;
    calculatedOrder?: OrderEditAddVariantPayloadToCalculatedOrderResolver<TParent>;
    userErrors?: OrderEditAddVariantPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderEditAddVariantPayloadToCalculatedLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAddVariantPayloadToCalculatedOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAddVariantPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditBeginPayloadTypeResolver<TParent = any> {
    calculatedOrder?: OrderEditBeginPayloadToCalculatedOrderResolver<TParent>;
    userErrors?: OrderEditBeginPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderEditBeginPayloadToCalculatedOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditBeginPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditCommitPayloadTypeResolver<TParent = any> {
    order?: OrderEditCommitPayloadToOrderResolver<TParent>;
    userErrors?: OrderEditCommitPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderEditCommitPayloadToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditCommitPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditRemoveDiscountPayloadTypeResolver<TParent = any> {
    calculatedOrder?: OrderEditRemoveDiscountPayloadToCalculatedOrderResolver<TParent>;
    userErrors?: OrderEditRemoveDiscountPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderEditRemoveDiscountPayloadToCalculatedOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditRemoveDiscountPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditRemoveDiscountUserErrorTypeResolver<TParent = any> {
    code?: OrderEditRemoveDiscountUserErrorToCodeResolver<TParent>;
    field?: OrderEditRemoveDiscountUserErrorToFieldResolver<TParent>;
    message?: OrderEditRemoveDiscountUserErrorToMessageResolver<TParent>;
  }
  
  export interface OrderEditRemoveDiscountUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditRemoveDiscountUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditRemoveDiscountUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditRemoveLineItemDiscountPayloadTypeResolver<TParent = any> {
    calculatedLineItem?: OrderEditRemoveLineItemDiscountPayloadToCalculatedLineItemResolver<TParent>;
    calculatedOrder?: OrderEditRemoveLineItemDiscountPayloadToCalculatedOrderResolver<TParent>;
    userErrors?: OrderEditRemoveLineItemDiscountPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderEditRemoveLineItemDiscountPayloadToCalculatedLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditRemoveLineItemDiscountPayloadToCalculatedOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditRemoveLineItemDiscountPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditSetQuantityPayloadTypeResolver<TParent = any> {
    calculatedLineItem?: OrderEditSetQuantityPayloadToCalculatedLineItemResolver<TParent>;
    calculatedOrder?: OrderEditSetQuantityPayloadToCalculatedOrderResolver<TParent>;
    userErrors?: OrderEditSetQuantityPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderEditSetQuantityPayloadToCalculatedLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditSetQuantityPayloadToCalculatedOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditSetQuantityPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditUpdateDiscountPayloadTypeResolver<TParent = any> {
    calculatedOrder?: OrderEditUpdateDiscountPayloadToCalculatedOrderResolver<TParent>;
    userErrors?: OrderEditUpdateDiscountPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderEditUpdateDiscountPayloadToCalculatedOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditUpdateDiscountPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditUpdateDiscountUserErrorTypeResolver<TParent = any> {
    code?: OrderEditUpdateDiscountUserErrorToCodeResolver<TParent>;
    field?: OrderEditUpdateDiscountUserErrorToFieldResolver<TParent>;
    message?: OrderEditUpdateDiscountUserErrorToMessageResolver<TParent>;
  }
  
  export interface OrderEditUpdateDiscountUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditUpdateDiscountUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditUpdateDiscountUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderInvoiceSendPayloadTypeResolver<TParent = any> {
    order?: OrderInvoiceSendPayloadToOrderResolver<TParent>;
    userErrors?: OrderInvoiceSendPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderInvoiceSendPayloadToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderInvoiceSendPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderInvoiceSendUserErrorTypeResolver<TParent = any> {
    code?: OrderInvoiceSendUserErrorToCodeResolver<TParent>;
    field?: OrderInvoiceSendUserErrorToFieldResolver<TParent>;
    message?: OrderInvoiceSendUserErrorToMessageResolver<TParent>;
  }
  
  export interface OrderInvoiceSendUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderInvoiceSendUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderInvoiceSendUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderMarkAsPaidPayloadTypeResolver<TParent = any> {
    order?: OrderMarkAsPaidPayloadToOrderResolver<TParent>;
    userErrors?: OrderMarkAsPaidPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderMarkAsPaidPayloadToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderMarkAsPaidPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderOpenPayloadTypeResolver<TParent = any> {
    order?: OrderOpenPayloadToOrderResolver<TParent>;
    userErrors?: OrderOpenPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderOpenPayloadToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderOpenPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderUpdatePayloadTypeResolver<TParent = any> {
    order?: OrderUpdatePayloadToOrderResolver<TParent>;
    userErrors?: OrderUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface OrderUpdatePayloadToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationActivationPayloadTypeResolver<TParent = any> {
    ids?: PaymentCustomizationActivationPayloadToIdsResolver<TParent>;
    userErrors?: PaymentCustomizationActivationPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PaymentCustomizationActivationPayloadToIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationActivationPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationErrorTypeResolver<TParent = any> {
    code?: PaymentCustomizationErrorToCodeResolver<TParent>;
    field?: PaymentCustomizationErrorToFieldResolver<TParent>;
    message?: PaymentCustomizationErrorToMessageResolver<TParent>;
  }
  
  export interface PaymentCustomizationErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationCreatePayloadTypeResolver<TParent = any> {
    paymentCustomization?: PaymentCustomizationCreatePayloadToPaymentCustomizationResolver<TParent>;
    userErrors?: PaymentCustomizationCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PaymentCustomizationCreatePayloadToPaymentCustomizationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationDeletePayloadTypeResolver<TParent = any> {
    deletedId?: PaymentCustomizationDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: PaymentCustomizationDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PaymentCustomizationDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationUpdatePayloadTypeResolver<TParent = any> {
    paymentCustomization?: PaymentCustomizationUpdatePayloadToPaymentCustomizationResolver<TParent>;
    userErrors?: PaymentCustomizationUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PaymentCustomizationUpdatePayloadToPaymentCustomizationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentCustomizationUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentReminderSendPayloadTypeResolver<TParent = any> {
    success?: PaymentReminderSendPayloadToSuccessResolver<TParent>;
    userErrors?: PaymentReminderSendPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PaymentReminderSendPayloadToSuccessResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentReminderSendPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentReminderSendUserErrorTypeResolver<TParent = any> {
    code?: PaymentReminderSendUserErrorToCodeResolver<TParent>;
    field?: PaymentReminderSendUserErrorToFieldResolver<TParent>;
    message?: PaymentReminderSendUserErrorToMessageResolver<TParent>;
  }
  
  export interface PaymentReminderSendUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentReminderSendUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentReminderSendUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsCreatePayloadTypeResolver<TParent = any> {
    paymentTerms?: PaymentTermsCreatePayloadToPaymentTermsResolver<TParent>;
    userErrors?: PaymentTermsCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PaymentTermsCreatePayloadToPaymentTermsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsCreateUserErrorTypeResolver<TParent = any> {
    code?: PaymentTermsCreateUserErrorToCodeResolver<TParent>;
    field?: PaymentTermsCreateUserErrorToFieldResolver<TParent>;
    message?: PaymentTermsCreateUserErrorToMessageResolver<TParent>;
  }
  
  export interface PaymentTermsCreateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsCreateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsCreateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsDeletePayloadTypeResolver<TParent = any> {
    deletedId?: PaymentTermsDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: PaymentTermsDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PaymentTermsDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsDeleteUserErrorTypeResolver<TParent = any> {
    code?: PaymentTermsDeleteUserErrorToCodeResolver<TParent>;
    field?: PaymentTermsDeleteUserErrorToFieldResolver<TParent>;
    message?: PaymentTermsDeleteUserErrorToMessageResolver<TParent>;
  }
  
  export interface PaymentTermsDeleteUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsDeleteUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsDeleteUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsUpdatePayloadTypeResolver<TParent = any> {
    paymentTerms?: PaymentTermsUpdatePayloadToPaymentTermsResolver<TParent>;
    userErrors?: PaymentTermsUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PaymentTermsUpdatePayloadToPaymentTermsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsUpdateUserErrorTypeResolver<TParent = any> {
    code?: PaymentTermsUpdateUserErrorToCodeResolver<TParent>;
    field?: PaymentTermsUpdateUserErrorToFieldResolver<TParent>;
    message?: PaymentTermsUpdateUserErrorToMessageResolver<TParent>;
  }
  
  export interface PaymentTermsUpdateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsUpdateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PaymentTermsUpdateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListCreatePayloadTypeResolver<TParent = any> {
    priceList?: PriceListCreatePayloadToPriceListResolver<TParent>;
    userErrors?: PriceListCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceListCreatePayloadToPriceListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListUserErrorTypeResolver<TParent = any> {
    code?: PriceListUserErrorToCodeResolver<TParent>;
    field?: PriceListUserErrorToFieldResolver<TParent>;
    message?: PriceListUserErrorToMessageResolver<TParent>;
  }
  
  export interface PriceListUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListDeletePayloadTypeResolver<TParent = any> {
    deletedId?: PriceListDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: PriceListDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceListDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesAddPayloadTypeResolver<TParent = any> {
    prices?: PriceListFixedPricesAddPayloadToPricesResolver<TParent>;
    userErrors?: PriceListFixedPricesAddPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceListFixedPricesAddPayloadToPricesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesAddPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceUserErrorTypeResolver<TParent = any> {
    code?: PriceListPriceUserErrorToCodeResolver<TParent>;
    field?: PriceListPriceUserErrorToFieldResolver<TParent>;
    message?: PriceListPriceUserErrorToMessageResolver<TParent>;
  }
  
  export interface PriceListPriceUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListPriceUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesByProductUpdatePayloadTypeResolver<TParent = any> {
    priceList?: PriceListFixedPricesByProductUpdatePayloadToPriceListResolver<TParent>;
    pricesToAddProducts?: PriceListFixedPricesByProductUpdatePayloadToPricesToAddProductsResolver<TParent>;
    pricesToDeleteProducts?: PriceListFixedPricesByProductUpdatePayloadToPricesToDeleteProductsResolver<TParent>;
    userErrors?: PriceListFixedPricesByProductUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceListFixedPricesByProductUpdatePayloadToPriceListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesByProductUpdatePayloadToPricesToAddProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesByProductUpdatePayloadToPricesToDeleteProductsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesByProductUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesByProductBulkUpdateUserErrorTypeResolver<TParent = any> {
    code?: PriceListFixedPricesByProductBulkUpdateUserErrorToCodeResolver<TParent>;
    field?: PriceListFixedPricesByProductBulkUpdateUserErrorToFieldResolver<TParent>;
    message?: PriceListFixedPricesByProductBulkUpdateUserErrorToMessageResolver<TParent>;
  }
  
  export interface PriceListFixedPricesByProductBulkUpdateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesByProductBulkUpdateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesByProductBulkUpdateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesDeletePayloadTypeResolver<TParent = any> {
    deletedFixedPriceVariantIds?: PriceListFixedPricesDeletePayloadToDeletedFixedPriceVariantIdsResolver<TParent>;
    userErrors?: PriceListFixedPricesDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceListFixedPricesDeletePayloadToDeletedFixedPriceVariantIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesUpdatePayloadTypeResolver<TParent = any> {
    deletedFixedPriceVariantIds?: PriceListFixedPricesUpdatePayloadToDeletedFixedPriceVariantIdsResolver<TParent>;
    priceList?: PriceListFixedPricesUpdatePayloadToPriceListResolver<TParent>;
    pricesAdded?: PriceListFixedPricesUpdatePayloadToPricesAddedResolver<TParent>;
    userErrors?: PriceListFixedPricesUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceListFixedPricesUpdatePayloadToDeletedFixedPriceVariantIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesUpdatePayloadToPriceListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesUpdatePayloadToPricesAddedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListFixedPricesUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListUpdatePayloadTypeResolver<TParent = any> {
    priceList?: PriceListUpdatePayloadToPriceListResolver<TParent>;
    userErrors?: PriceListUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceListUpdatePayloadToPriceListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceListUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleActivatePayloadTypeResolver<TParent = any> {
    priceRule?: PriceRuleActivatePayloadToPriceRuleResolver<TParent>;
    priceRuleUserErrors?: PriceRuleActivatePayloadToPriceRuleUserErrorsResolver<TParent>;
    userErrors?: PriceRuleActivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceRuleActivatePayloadToPriceRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleActivatePayloadToPriceRuleUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleActivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleUserErrorTypeResolver<TParent = any> {
    code?: PriceRuleUserErrorToCodeResolver<TParent>;
    field?: PriceRuleUserErrorToFieldResolver<TParent>;
    message?: PriceRuleUserErrorToMessageResolver<TParent>;
  }
  
  export interface PriceRuleUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleCreatePayloadTypeResolver<TParent = any> {
    priceRule?: PriceRuleCreatePayloadToPriceRuleResolver<TParent>;
    priceRuleDiscountCode?: PriceRuleCreatePayloadToPriceRuleDiscountCodeResolver<TParent>;
    priceRuleUserErrors?: PriceRuleCreatePayloadToPriceRuleUserErrorsResolver<TParent>;
    userErrors?: PriceRuleCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceRuleCreatePayloadToPriceRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleCreatePayloadToPriceRuleDiscountCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleCreatePayloadToPriceRuleUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDeactivatePayloadTypeResolver<TParent = any> {
    priceRule?: PriceRuleDeactivatePayloadToPriceRuleResolver<TParent>;
    priceRuleUserErrors?: PriceRuleDeactivatePayloadToPriceRuleUserErrorsResolver<TParent>;
    userErrors?: PriceRuleDeactivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceRuleDeactivatePayloadToPriceRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDeactivatePayloadToPriceRuleUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDeactivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDeletePayloadTypeResolver<TParent = any> {
    deletedPriceRuleId?: PriceRuleDeletePayloadToDeletedPriceRuleIdResolver<TParent>;
    priceRuleUserErrors?: PriceRuleDeletePayloadToPriceRuleUserErrorsResolver<TParent>;
    shop?: PriceRuleDeletePayloadToShopResolver<TParent>;
    userErrors?: PriceRuleDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceRuleDeletePayloadToDeletedPriceRuleIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDeletePayloadToPriceRuleUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDeletePayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeCreatePayloadTypeResolver<TParent = any> {
    priceRule?: PriceRuleDiscountCodeCreatePayloadToPriceRuleResolver<TParent>;
    priceRuleDiscountCode?: PriceRuleDiscountCodeCreatePayloadToPriceRuleDiscountCodeResolver<TParent>;
    priceRuleUserErrors?: PriceRuleDiscountCodeCreatePayloadToPriceRuleUserErrorsResolver<TParent>;
    userErrors?: PriceRuleDiscountCodeCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceRuleDiscountCodeCreatePayloadToPriceRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeCreatePayloadToPriceRuleDiscountCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeCreatePayloadToPriceRuleUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeUpdatePayloadTypeResolver<TParent = any> {
    priceRule?: PriceRuleDiscountCodeUpdatePayloadToPriceRuleResolver<TParent>;
    priceRuleDiscountCode?: PriceRuleDiscountCodeUpdatePayloadToPriceRuleDiscountCodeResolver<TParent>;
    priceRuleUserErrors?: PriceRuleDiscountCodeUpdatePayloadToPriceRuleUserErrorsResolver<TParent>;
    userErrors?: PriceRuleDiscountCodeUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceRuleDiscountCodeUpdatePayloadToPriceRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeUpdatePayloadToPriceRuleDiscountCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeUpdatePayloadToPriceRuleUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleDiscountCodeUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleUpdatePayloadTypeResolver<TParent = any> {
    priceRule?: PriceRuleUpdatePayloadToPriceRuleResolver<TParent>;
    priceRuleDiscountCode?: PriceRuleUpdatePayloadToPriceRuleDiscountCodeResolver<TParent>;
    priceRuleUserErrors?: PriceRuleUpdatePayloadToPriceRuleUserErrorsResolver<TParent>;
    userErrors?: PriceRuleUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PriceRuleUpdatePayloadToPriceRuleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleUpdatePayloadToPriceRuleDiscountCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleUpdatePayloadToPriceRuleUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PriceRuleUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldDeletePayloadTypeResolver<TParent = any> {
    deletedPrivateMetafieldId?: PrivateMetafieldDeletePayloadToDeletedPrivateMetafieldIdResolver<TParent>;
    userErrors?: PrivateMetafieldDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PrivateMetafieldDeletePayloadToDeletedPrivateMetafieldIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldUpsertPayloadTypeResolver<TParent = any> {
    privateMetafield?: PrivateMetafieldUpsertPayloadToPrivateMetafieldResolver<TParent>;
    userErrors?: PrivateMetafieldUpsertPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PrivateMetafieldUpsertPayloadToPrivateMetafieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PrivateMetafieldUpsertPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAppendImagesPayloadTypeResolver<TParent = any> {
    newImages?: ProductAppendImagesPayloadToNewImagesResolver<TParent>;
    product?: ProductAppendImagesPayloadToProductResolver<TParent>;
    userErrors?: ProductAppendImagesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductAppendImagesPayloadToNewImagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAppendImagesPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductAppendImagesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeStatusPayloadTypeResolver<TParent = any> {
    product?: ProductChangeStatusPayloadToProductResolver<TParent>;
    userErrors?: ProductChangeStatusPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductChangeStatusPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeStatusPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeStatusUserErrorTypeResolver<TParent = any> {
    code?: ProductChangeStatusUserErrorToCodeResolver<TParent>;
    field?: ProductChangeStatusUserErrorToFieldResolver<TParent>;
    message?: ProductChangeStatusUserErrorToMessageResolver<TParent>;
  }
  
  export interface ProductChangeStatusUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeStatusUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductChangeStatusUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCreatePayloadTypeResolver<TParent = any> {
    product?: ProductCreatePayloadToProductResolver<TParent>;
    shop?: ProductCreatePayloadToShopResolver<TParent>;
    userErrors?: ProductCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductCreatePayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCreatePayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCreateMediaPayloadTypeResolver<TParent = any> {
    media?: ProductCreateMediaPayloadToMediaResolver<TParent>;
    mediaUserErrors?: ProductCreateMediaPayloadToMediaUserErrorsResolver<TParent>;
    product?: ProductCreateMediaPayloadToProductResolver<TParent>;
    userErrors?: ProductCreateMediaPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductCreateMediaPayloadToMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCreateMediaPayloadToMediaUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCreateMediaPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductCreateMediaPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaUserErrorTypeResolver<TParent = any> {
    code?: MediaUserErrorToCodeResolver<TParent>;
    field?: MediaUserErrorToFieldResolver<TParent>;
    message?: MediaUserErrorToMessageResolver<TParent>;
  }
  
  export interface MediaUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MediaUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeletePayloadTypeResolver<TParent = any> {
    deletedProductId?: ProductDeletePayloadToDeletedProductIdResolver<TParent>;
    shop?: ProductDeletePayloadToShopResolver<TParent>;
    userErrors?: ProductDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductDeletePayloadToDeletedProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeletePayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteAsyncPayloadTypeResolver<TParent = any> {
    deleteProductId?: ProductDeleteAsyncPayloadToDeleteProductIdResolver<TParent>;
    job?: ProductDeleteAsyncPayloadToJobResolver<TParent>;
    userErrors?: ProductDeleteAsyncPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductDeleteAsyncPayloadToDeleteProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteAsyncPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteAsyncPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteUserErrorTypeResolver<TParent = any> {
    code?: ProductDeleteUserErrorToCodeResolver<TParent>;
    field?: ProductDeleteUserErrorToFieldResolver<TParent>;
    message?: ProductDeleteUserErrorToMessageResolver<TParent>;
  }
  
  export interface ProductDeleteUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteImagesPayloadTypeResolver<TParent = any> {
    deletedImageIds?: ProductDeleteImagesPayloadToDeletedImageIdsResolver<TParent>;
    product?: ProductDeleteImagesPayloadToProductResolver<TParent>;
    userErrors?: ProductDeleteImagesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductDeleteImagesPayloadToDeletedImageIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteImagesPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteImagesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteMediaPayloadTypeResolver<TParent = any> {
    deletedMediaIds?: ProductDeleteMediaPayloadToDeletedMediaIdsResolver<TParent>;
    deletedProductImageIds?: ProductDeleteMediaPayloadToDeletedProductImageIdsResolver<TParent>;
    mediaUserErrors?: ProductDeleteMediaPayloadToMediaUserErrorsResolver<TParent>;
    product?: ProductDeleteMediaPayloadToProductResolver<TParent>;
    userErrors?: ProductDeleteMediaPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductDeleteMediaPayloadToDeletedMediaIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteMediaPayloadToDeletedProductImageIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteMediaPayloadToMediaUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteMediaPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDeleteMediaPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicatePayloadTypeResolver<TParent = any> {
    imageJob?: ProductDuplicatePayloadToImageJobResolver<TParent>;
    newProduct?: ProductDuplicatePayloadToNewProductResolver<TParent>;
    shop?: ProductDuplicatePayloadToShopResolver<TParent>;
    userErrors?: ProductDuplicatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductDuplicatePayloadToImageJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicatePayloadToNewProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicatePayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicateAsyncPayloadTypeResolver<TParent = any> {
    duplicatedProductId?: ProductDuplicateAsyncPayloadToDuplicatedProductIdResolver<TParent>;
    job?: ProductDuplicateAsyncPayloadToJobResolver<TParent>;
    userErrors?: ProductDuplicateAsyncPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductDuplicateAsyncPayloadToDuplicatedProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicateAsyncPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicateAsyncPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicateUserErrorTypeResolver<TParent = any> {
    code?: ProductDuplicateUserErrorToCodeResolver<TParent>;
    field?: ProductDuplicateUserErrorToFieldResolver<TParent>;
    message?: ProductDuplicateUserErrorToMessageResolver<TParent>;
  }
  
  export interface ProductDuplicateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicateAsyncV2PayloadTypeResolver<TParent = any> {
    duplicatedProductId?: ProductDuplicateAsyncV2PayloadToDuplicatedProductIdResolver<TParent>;
    productDuplicateJobId?: ProductDuplicateAsyncV2PayloadToProductDuplicateJobIdResolver<TParent>;
    userErrors?: ProductDuplicateAsyncV2PayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductDuplicateAsyncV2PayloadToDuplicatedProductIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicateAsyncV2PayloadToProductDuplicateJobIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductDuplicateAsyncV2PayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedCreatePayloadTypeResolver<TParent = any> {
    productFeed?: ProductFeedCreatePayloadToProductFeedResolver<TParent>;
    userErrors?: ProductFeedCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductFeedCreatePayloadToProductFeedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedCreateUserErrorTypeResolver<TParent = any> {
    code?: ProductFeedCreateUserErrorToCodeResolver<TParent>;
    field?: ProductFeedCreateUserErrorToFieldResolver<TParent>;
    message?: ProductFeedCreateUserErrorToMessageResolver<TParent>;
  }
  
  export interface ProductFeedCreateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedCreateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedCreateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedDeletePayloadTypeResolver<TParent = any> {
    deletedId?: ProductFeedDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: ProductFeedDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductFeedDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedDeleteUserErrorTypeResolver<TParent = any> {
    code?: ProductFeedDeleteUserErrorToCodeResolver<TParent>;
    field?: ProductFeedDeleteUserErrorToFieldResolver<TParent>;
    message?: ProductFeedDeleteUserErrorToMessageResolver<TParent>;
  }
  
  export interface ProductFeedDeleteUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedDeleteUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFeedDeleteUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFullSyncPayloadTypeResolver<TParent = any> {
    userErrors?: ProductFullSyncPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductFullSyncPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFullSyncUserErrorTypeResolver<TParent = any> {
    code?: ProductFullSyncUserErrorToCodeResolver<TParent>;
    field?: ProductFullSyncUserErrorToFieldResolver<TParent>;
    message?: ProductFullSyncUserErrorToMessageResolver<TParent>;
  }
  
  export interface ProductFullSyncUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFullSyncUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductFullSyncUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductImageUpdatePayloadTypeResolver<TParent = any> {
    image?: ProductImageUpdatePayloadToImageResolver<TParent>;
    userErrors?: ProductImageUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductImageUpdatePayloadToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductImageUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductJoinSellingPlanGroupsPayloadTypeResolver<TParent = any> {
    product?: ProductJoinSellingPlanGroupsPayloadToProductResolver<TParent>;
    userErrors?: ProductJoinSellingPlanGroupsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductJoinSellingPlanGroupsPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductJoinSellingPlanGroupsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupUserErrorTypeResolver<TParent = any> {
    code?: SellingPlanGroupUserErrorToCodeResolver<TParent>;
    field?: SellingPlanGroupUserErrorToFieldResolver<TParent>;
    message?: SellingPlanGroupUserErrorToMessageResolver<TParent>;
  }
  
  export interface SellingPlanGroupUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductLeaveSellingPlanGroupsPayloadTypeResolver<TParent = any> {
    product?: ProductLeaveSellingPlanGroupsPayloadToProductResolver<TParent>;
    userErrors?: ProductLeaveSellingPlanGroupsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductLeaveSellingPlanGroupsPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductLeaveSellingPlanGroupsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublishPayloadTypeResolver<TParent = any> {
    product?: ProductPublishPayloadToProductResolver<TParent>;
    productPublications?: ProductPublishPayloadToProductPublicationsResolver<TParent>;
    shop?: ProductPublishPayloadToShopResolver<TParent>;
    userErrors?: ProductPublishPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductPublishPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublishPayloadToProductPublicationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublishPayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductPublishPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductReorderImagesPayloadTypeResolver<TParent = any> {
    job?: ProductReorderImagesPayloadToJobResolver<TParent>;
    userErrors?: ProductReorderImagesPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductReorderImagesPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductReorderImagesPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductReorderMediaPayloadTypeResolver<TParent = any> {
    job?: ProductReorderMediaPayloadToJobResolver<TParent>;
    mediaUserErrors?: ProductReorderMediaPayloadToMediaUserErrorsResolver<TParent>;
    userErrors?: ProductReorderMediaPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductReorderMediaPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductReorderMediaPayloadToMediaUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductReorderMediaPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductUnpublishPayloadTypeResolver<TParent = any> {
    product?: ProductUnpublishPayloadToProductResolver<TParent>;
    shop?: ProductUnpublishPayloadToShopResolver<TParent>;
    userErrors?: ProductUnpublishPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductUnpublishPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductUnpublishPayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductUnpublishPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductUpdatePayloadTypeResolver<TParent = any> {
    product?: ProductUpdatePayloadToProductResolver<TParent>;
    userErrors?: ProductUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductUpdatePayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductUpdateMediaPayloadTypeResolver<TParent = any> {
    media?: ProductUpdateMediaPayloadToMediaResolver<TParent>;
    mediaUserErrors?: ProductUpdateMediaPayloadToMediaUserErrorsResolver<TParent>;
    product?: ProductUpdateMediaPayloadToProductResolver<TParent>;
    userErrors?: ProductUpdateMediaPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductUpdateMediaPayloadToMediaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductUpdateMediaPayloadToMediaUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductUpdateMediaPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductUpdateMediaPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantAppendMediaPayloadTypeResolver<TParent = any> {
    product?: ProductVariantAppendMediaPayloadToProductResolver<TParent>;
    productVariants?: ProductVariantAppendMediaPayloadToProductVariantsResolver<TParent>;
    userErrors?: ProductVariantAppendMediaPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantAppendMediaPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantAppendMediaPayloadToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantAppendMediaPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantCreatePayloadTypeResolver<TParent = any> {
    product?: ProductVariantCreatePayloadToProductResolver<TParent>;
    productVariant?: ProductVariantCreatePayloadToProductVariantResolver<TParent>;
    userErrors?: ProductVariantCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantCreatePayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantCreatePayloadToProductVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantDeletePayloadTypeResolver<TParent = any> {
    deletedProductVariantId?: ProductVariantDeletePayloadToDeletedProductVariantIdResolver<TParent>;
    product?: ProductVariantDeletePayloadToProductResolver<TParent>;
    userErrors?: ProductVariantDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantDeletePayloadToDeletedProductVariantIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantDeletePayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantDetachMediaPayloadTypeResolver<TParent = any> {
    product?: ProductVariantDetachMediaPayloadToProductResolver<TParent>;
    productVariants?: ProductVariantDetachMediaPayloadToProductVariantsResolver<TParent>;
    userErrors?: ProductVariantDetachMediaPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantDetachMediaPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantDetachMediaPayloadToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantDetachMediaPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantJoinSellingPlanGroupsPayloadTypeResolver<TParent = any> {
    productVariant?: ProductVariantJoinSellingPlanGroupsPayloadToProductVariantResolver<TParent>;
    userErrors?: ProductVariantJoinSellingPlanGroupsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantJoinSellingPlanGroupsPayloadToProductVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantJoinSellingPlanGroupsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantLeaveSellingPlanGroupsPayloadTypeResolver<TParent = any> {
    productVariant?: ProductVariantLeaveSellingPlanGroupsPayloadToProductVariantResolver<TParent>;
    userErrors?: ProductVariantLeaveSellingPlanGroupsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantLeaveSellingPlanGroupsPayloadToProductVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantLeaveSellingPlanGroupsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantRelationshipBulkUpdatePayloadTypeResolver<TParent = any> {
    parentProductVariants?: ProductVariantRelationshipBulkUpdatePayloadToParentProductVariantsResolver<TParent>;
    userErrors?: ProductVariantRelationshipBulkUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantRelationshipBulkUpdatePayloadToParentProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantRelationshipBulkUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantRelationshipBulkUpdateUserErrorTypeResolver<TParent = any> {
    code?: ProductVariantRelationshipBulkUpdateUserErrorToCodeResolver<TParent>;
    field?: ProductVariantRelationshipBulkUpdateUserErrorToFieldResolver<TParent>;
    message?: ProductVariantRelationshipBulkUpdateUserErrorToMessageResolver<TParent>;
  }
  
  export interface ProductVariantRelationshipBulkUpdateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantRelationshipBulkUpdateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantRelationshipBulkUpdateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantUpdatePayloadTypeResolver<TParent = any> {
    product?: ProductVariantUpdatePayloadToProductResolver<TParent>;
    productVariant?: ProductVariantUpdatePayloadToProductVariantResolver<TParent>;
    userErrors?: ProductVariantUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantUpdatePayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantUpdatePayloadToProductVariantResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkCreatePayloadTypeResolver<TParent = any> {
    product?: ProductVariantsBulkCreatePayloadToProductResolver<TParent>;
    productVariants?: ProductVariantsBulkCreatePayloadToProductVariantsResolver<TParent>;
    userErrors?: ProductVariantsBulkCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantsBulkCreatePayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkCreatePayloadToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkCreateUserErrorTypeResolver<TParent = any> {
    code?: ProductVariantsBulkCreateUserErrorToCodeResolver<TParent>;
    field?: ProductVariantsBulkCreateUserErrorToFieldResolver<TParent>;
    message?: ProductVariantsBulkCreateUserErrorToMessageResolver<TParent>;
  }
  
  export interface ProductVariantsBulkCreateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkCreateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkCreateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkDeletePayloadTypeResolver<TParent = any> {
    product?: ProductVariantsBulkDeletePayloadToProductResolver<TParent>;
    userErrors?: ProductVariantsBulkDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantsBulkDeletePayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkDeleteUserErrorTypeResolver<TParent = any> {
    code?: ProductVariantsBulkDeleteUserErrorToCodeResolver<TParent>;
    field?: ProductVariantsBulkDeleteUserErrorToFieldResolver<TParent>;
    message?: ProductVariantsBulkDeleteUserErrorToMessageResolver<TParent>;
  }
  
  export interface ProductVariantsBulkDeleteUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkDeleteUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkDeleteUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkReorderPayloadTypeResolver<TParent = any> {
    product?: ProductVariantsBulkReorderPayloadToProductResolver<TParent>;
    userErrors?: ProductVariantsBulkReorderPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantsBulkReorderPayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkReorderPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkReorderUserErrorTypeResolver<TParent = any> {
    code?: ProductVariantsBulkReorderUserErrorToCodeResolver<TParent>;
    field?: ProductVariantsBulkReorderUserErrorToFieldResolver<TParent>;
    message?: ProductVariantsBulkReorderUserErrorToMessageResolver<TParent>;
  }
  
  export interface ProductVariantsBulkReorderUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkReorderUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkReorderUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkUpdatePayloadTypeResolver<TParent = any> {
    product?: ProductVariantsBulkUpdatePayloadToProductResolver<TParent>;
    productVariants?: ProductVariantsBulkUpdatePayloadToProductVariantsResolver<TParent>;
    userErrors?: ProductVariantsBulkUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ProductVariantsBulkUpdatePayloadToProductResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkUpdatePayloadToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkUpdateUserErrorTypeResolver<TParent = any> {
    code?: ProductVariantsBulkUpdateUserErrorToCodeResolver<TParent>;
    field?: ProductVariantsBulkUpdateUserErrorToFieldResolver<TParent>;
    message?: ProductVariantsBulkUpdateUserErrorToMessageResolver<TParent>;
  }
  
  export interface ProductVariantsBulkUpdateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkUpdateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductVariantsBulkUpdateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubServerPixelUpdatePayloadTypeResolver<TParent = any> {
    serverPixel?: PubSubServerPixelUpdatePayloadToServerPixelResolver<TParent>;
    userErrors?: PubSubServerPixelUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PubSubServerPixelUpdatePayloadToServerPixelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubServerPixelUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubWebhookSubscriptionCreatePayloadTypeResolver<TParent = any> {
    userErrors?: PubSubWebhookSubscriptionCreatePayloadToUserErrorsResolver<TParent>;
    webhookSubscription?: PubSubWebhookSubscriptionCreatePayloadToWebhookSubscriptionResolver<TParent>;
  }
  
  export interface PubSubWebhookSubscriptionCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubWebhookSubscriptionCreatePayloadToWebhookSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubWebhookSubscriptionCreateUserErrorTypeResolver<TParent = any> {
    code?: PubSubWebhookSubscriptionCreateUserErrorToCodeResolver<TParent>;
    field?: PubSubWebhookSubscriptionCreateUserErrorToFieldResolver<TParent>;
    message?: PubSubWebhookSubscriptionCreateUserErrorToMessageResolver<TParent>;
  }
  
  export interface PubSubWebhookSubscriptionCreateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubWebhookSubscriptionCreateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubWebhookSubscriptionCreateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubWebhookSubscriptionUpdatePayloadTypeResolver<TParent = any> {
    userErrors?: PubSubWebhookSubscriptionUpdatePayloadToUserErrorsResolver<TParent>;
    webhookSubscription?: PubSubWebhookSubscriptionUpdatePayloadToWebhookSubscriptionResolver<TParent>;
  }
  
  export interface PubSubWebhookSubscriptionUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubWebhookSubscriptionUpdatePayloadToWebhookSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubWebhookSubscriptionUpdateUserErrorTypeResolver<TParent = any> {
    code?: PubSubWebhookSubscriptionUpdateUserErrorToCodeResolver<TParent>;
    field?: PubSubWebhookSubscriptionUpdateUserErrorToFieldResolver<TParent>;
    message?: PubSubWebhookSubscriptionUpdateUserErrorToMessageResolver<TParent>;
  }
  
  export interface PubSubWebhookSubscriptionUpdateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubWebhookSubscriptionUpdateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PubSubWebhookSubscriptionUpdateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationCreatePayloadTypeResolver<TParent = any> {
    publication?: PublicationCreatePayloadToPublicationResolver<TParent>;
    userErrors?: PublicationCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PublicationCreatePayloadToPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationUserErrorTypeResolver<TParent = any> {
    code?: PublicationUserErrorToCodeResolver<TParent>;
    field?: PublicationUserErrorToFieldResolver<TParent>;
    message?: PublicationUserErrorToMessageResolver<TParent>;
  }
  
  export interface PublicationUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationDeletePayloadTypeResolver<TParent = any> {
    deletedId?: PublicationDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: PublicationDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PublicationDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationUpdatePayloadTypeResolver<TParent = any> {
    publication?: PublicationUpdatePayloadToPublicationResolver<TParent>;
    userErrors?: PublicationUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PublicationUpdatePayloadToPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublicationUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishablePublishPayloadTypeResolver<TParent = any> {
    publishable?: PublishablePublishPayloadToPublishableResolver<TParent>;
    shop?: PublishablePublishPayloadToShopResolver<TParent>;
    userErrors?: PublishablePublishPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PublishablePublishPayloadToPublishableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishablePublishPayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishablePublishPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishablePublishToCurrentChannelPayloadTypeResolver<TParent = any> {
    publishable?: PublishablePublishToCurrentChannelPayloadToPublishableResolver<TParent>;
    shop?: PublishablePublishToCurrentChannelPayloadToShopResolver<TParent>;
    userErrors?: PublishablePublishToCurrentChannelPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PublishablePublishToCurrentChannelPayloadToPublishableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishablePublishToCurrentChannelPayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishablePublishToCurrentChannelPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishableUnpublishPayloadTypeResolver<TParent = any> {
    publishable?: PublishableUnpublishPayloadToPublishableResolver<TParent>;
    shop?: PublishableUnpublishPayloadToShopResolver<TParent>;
    userErrors?: PublishableUnpublishPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PublishableUnpublishPayloadToPublishableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishableUnpublishPayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishableUnpublishPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishableUnpublishToCurrentChannelPayloadTypeResolver<TParent = any> {
    publishable?: PublishableUnpublishToCurrentChannelPayloadToPublishableResolver<TParent>;
    shop?: PublishableUnpublishToCurrentChannelPayloadToShopResolver<TParent>;
    userErrors?: PublishableUnpublishToCurrentChannelPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface PublishableUnpublishToCurrentChannelPayloadToPublishableResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishableUnpublishToCurrentChannelPayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PublishableUnpublishToCurrentChannelPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPricingByVariantUpdatePayloadTypeResolver<TParent = any> {
    productVariants?: QuantityPricingByVariantUpdatePayloadToProductVariantsResolver<TParent>;
    userErrors?: QuantityPricingByVariantUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface QuantityPricingByVariantUpdatePayloadToProductVariantsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPricingByVariantUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPricingByVariantUserErrorTypeResolver<TParent = any> {
    code?: QuantityPricingByVariantUserErrorToCodeResolver<TParent>;
    field?: QuantityPricingByVariantUserErrorToFieldResolver<TParent>;
    message?: QuantityPricingByVariantUserErrorToMessageResolver<TParent>;
  }
  
  export interface QuantityPricingByVariantUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPricingByVariantUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityPricingByVariantUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRulesAddPayloadTypeResolver<TParent = any> {
    quantityRules?: QuantityRulesAddPayloadToQuantityRulesResolver<TParent>;
    userErrors?: QuantityRulesAddPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface QuantityRulesAddPayloadToQuantityRulesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRulesAddPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleUserErrorTypeResolver<TParent = any> {
    code?: QuantityRuleUserErrorToCodeResolver<TParent>;
    field?: QuantityRuleUserErrorToFieldResolver<TParent>;
    message?: QuantityRuleUserErrorToMessageResolver<TParent>;
  }
  
  export interface QuantityRuleUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRuleUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRulesDeletePayloadTypeResolver<TParent = any> {
    deletedQuantityRulesVariantIds?: QuantityRulesDeletePayloadToDeletedQuantityRulesVariantIdsResolver<TParent>;
    userErrors?: QuantityRulesDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface QuantityRulesDeletePayloadToDeletedQuantityRulesVariantIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QuantityRulesDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundCreatePayloadTypeResolver<TParent = any> {
    order?: RefundCreatePayloadToOrderResolver<TParent>;
    refund?: RefundCreatePayloadToRefundResolver<TParent>;
    userErrors?: RefundCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface RefundCreatePayloadToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundCreatePayloadToRefundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnApproveRequestPayloadTypeResolver<TParent = any> {
    return?: ReturnApproveRequestPayloadToReturnResolver<TParent>;
    userErrors?: ReturnApproveRequestPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReturnApproveRequestPayloadToReturnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnApproveRequestPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnUserErrorTypeResolver<TParent = any> {
    code?: ReturnUserErrorToCodeResolver<TParent>;
    field?: ReturnUserErrorToFieldResolver<TParent>;
    message?: ReturnUserErrorToMessageResolver<TParent>;
  }
  
  export interface ReturnUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnCancelPayloadTypeResolver<TParent = any> {
    return?: ReturnCancelPayloadToReturnResolver<TParent>;
    userErrors?: ReturnCancelPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReturnCancelPayloadToReturnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnCancelPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnClosePayloadTypeResolver<TParent = any> {
    return?: ReturnClosePayloadToReturnResolver<TParent>;
    userErrors?: ReturnClosePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReturnClosePayloadToReturnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnClosePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnCreatePayloadTypeResolver<TParent = any> {
    return?: ReturnCreatePayloadToReturnResolver<TParent>;
    userErrors?: ReturnCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReturnCreatePayloadToReturnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnDeclineRequestPayloadTypeResolver<TParent = any> {
    return?: ReturnDeclineRequestPayloadToReturnResolver<TParent>;
    userErrors?: ReturnDeclineRequestPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReturnDeclineRequestPayloadToReturnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnDeclineRequestPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnRefundPayloadTypeResolver<TParent = any> {
    refund?: ReturnRefundPayloadToRefundResolver<TParent>;
    userErrors?: ReturnRefundPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReturnRefundPayloadToRefundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnRefundPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnReopenPayloadTypeResolver<TParent = any> {
    return?: ReturnReopenPayloadToReturnResolver<TParent>;
    userErrors?: ReturnReopenPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReturnReopenPayloadToReturnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnReopenPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnRequestPayloadTypeResolver<TParent = any> {
    return?: ReturnRequestPayloadToReturnResolver<TParent>;
    userErrors?: ReturnRequestPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReturnRequestPayloadToReturnResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReturnRequestPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryCreateWithShippingPayloadTypeResolver<TParent = any> {
    reverseDelivery?: ReverseDeliveryCreateWithShippingPayloadToReverseDeliveryResolver<TParent>;
    userErrors?: ReverseDeliveryCreateWithShippingPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReverseDeliveryCreateWithShippingPayloadToReverseDeliveryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryCreateWithShippingPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryDisposePayloadTypeResolver<TParent = any> {
    reverseDeliveryLineItems?: ReverseDeliveryDisposePayloadToReverseDeliveryLineItemsResolver<TParent>;
    userErrors?: ReverseDeliveryDisposePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReverseDeliveryDisposePayloadToReverseDeliveryLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryDisposePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryShippingUpdatePayloadTypeResolver<TParent = any> {
    reverseDelivery?: ReverseDeliveryShippingUpdatePayloadToReverseDeliveryResolver<TParent>;
    userErrors?: ReverseDeliveryShippingUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReverseDeliveryShippingUpdatePayloadToReverseDeliveryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseDeliveryShippingUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderDisposePayloadTypeResolver<TParent = any> {
    reverseFulfillmentOrderLineItems?: ReverseFulfillmentOrderDisposePayloadToReverseFulfillmentOrderLineItemsResolver<TParent>;
    userErrors?: ReverseFulfillmentOrderDisposePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ReverseFulfillmentOrderDisposePayloadToReverseFulfillmentOrderLineItemsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ReverseFulfillmentOrderDisposePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchCreatePayloadTypeResolver<TParent = any> {
    savedSearch?: SavedSearchCreatePayloadToSavedSearchResolver<TParent>;
    userErrors?: SavedSearchCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SavedSearchCreatePayloadToSavedSearchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchDeletePayloadTypeResolver<TParent = any> {
    deletedSavedSearchId?: SavedSearchDeletePayloadToDeletedSavedSearchIdResolver<TParent>;
    shop?: SavedSearchDeletePayloadToShopResolver<TParent>;
    userErrors?: SavedSearchDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SavedSearchDeletePayloadToDeletedSavedSearchIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchDeletePayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchUpdatePayloadTypeResolver<TParent = any> {
    savedSearch?: SavedSearchUpdatePayloadToSavedSearchResolver<TParent>;
    userErrors?: SavedSearchUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SavedSearchUpdatePayloadToSavedSearchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SavedSearchUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagCreatePayloadTypeResolver<TParent = any> {
    scriptTag?: ScriptTagCreatePayloadToScriptTagResolver<TParent>;
    userErrors?: ScriptTagCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ScriptTagCreatePayloadToScriptTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagDeletePayloadTypeResolver<TParent = any> {
    deletedScriptTagId?: ScriptTagDeletePayloadToDeletedScriptTagIdResolver<TParent>;
    userErrors?: ScriptTagDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ScriptTagDeletePayloadToDeletedScriptTagIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagUpdatePayloadTypeResolver<TParent = any> {
    scriptTag?: ScriptTagUpdatePayloadToScriptTagResolver<TParent>;
    userErrors?: ScriptTagUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ScriptTagUpdatePayloadToScriptTagResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptTagUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentCreatePayloadTypeResolver<TParent = any> {
    segment?: SegmentCreatePayloadToSegmentResolver<TParent>;
    userErrors?: SegmentCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SegmentCreatePayloadToSegmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentDeletePayloadTypeResolver<TParent = any> {
    deletedSegmentId?: SegmentDeletePayloadToDeletedSegmentIdResolver<TParent>;
    userErrors?: SegmentDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SegmentDeletePayloadToDeletedSegmentIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentUpdatePayloadTypeResolver<TParent = any> {
    segment?: SegmentUpdatePayloadToSegmentResolver<TParent>;
    userErrors?: SegmentUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SegmentUpdatePayloadToSegmentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupAddProductVariantsPayloadTypeResolver<TParent = any> {
    sellingPlanGroup?: SellingPlanGroupAddProductVariantsPayloadToSellingPlanGroupResolver<TParent>;
    userErrors?: SellingPlanGroupAddProductVariantsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SellingPlanGroupAddProductVariantsPayloadToSellingPlanGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupAddProductVariantsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupAddProductsPayloadTypeResolver<TParent = any> {
    sellingPlanGroup?: SellingPlanGroupAddProductsPayloadToSellingPlanGroupResolver<TParent>;
    userErrors?: SellingPlanGroupAddProductsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SellingPlanGroupAddProductsPayloadToSellingPlanGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupAddProductsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupCreatePayloadTypeResolver<TParent = any> {
    sellingPlanGroup?: SellingPlanGroupCreatePayloadToSellingPlanGroupResolver<TParent>;
    userErrors?: SellingPlanGroupCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SellingPlanGroupCreatePayloadToSellingPlanGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupDeletePayloadTypeResolver<TParent = any> {
    deletedSellingPlanGroupId?: SellingPlanGroupDeletePayloadToDeletedSellingPlanGroupIdResolver<TParent>;
    userErrors?: SellingPlanGroupDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SellingPlanGroupDeletePayloadToDeletedSellingPlanGroupIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupRemoveProductVariantsPayloadTypeResolver<TParent = any> {
    removedProductVariantIds?: SellingPlanGroupRemoveProductVariantsPayloadToRemovedProductVariantIdsResolver<TParent>;
    userErrors?: SellingPlanGroupRemoveProductVariantsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SellingPlanGroupRemoveProductVariantsPayloadToRemovedProductVariantIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupRemoveProductVariantsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupRemoveProductsPayloadTypeResolver<TParent = any> {
    removedProductIds?: SellingPlanGroupRemoveProductsPayloadToRemovedProductIdsResolver<TParent>;
    userErrors?: SellingPlanGroupRemoveProductsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SellingPlanGroupRemoveProductsPayloadToRemovedProductIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupRemoveProductsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupUpdatePayloadTypeResolver<TParent = any> {
    deletedSellingPlanIds?: SellingPlanGroupUpdatePayloadToDeletedSellingPlanIdsResolver<TParent>;
    sellingPlanGroup?: SellingPlanGroupUpdatePayloadToSellingPlanGroupResolver<TParent>;
    userErrors?: SellingPlanGroupUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SellingPlanGroupUpdatePayloadToDeletedSellingPlanIdsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupUpdatePayloadToSellingPlanGroupResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SellingPlanGroupUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ServerPixelCreatePayloadTypeResolver<TParent = any> {
    serverPixel?: ServerPixelCreatePayloadToServerPixelResolver<TParent>;
    userErrors?: ServerPixelCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ServerPixelCreatePayloadToServerPixelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ServerPixelCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ServerPixelDeletePayloadTypeResolver<TParent = any> {
    deletedServerPixelId?: ServerPixelDeletePayloadToDeletedServerPixelIdResolver<TParent>;
    userErrors?: ServerPixelDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ServerPixelDeletePayloadToDeletedServerPixelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ServerPixelDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingPackageDeletePayloadTypeResolver<TParent = any> {
    deletedId?: ShippingPackageDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: ShippingPackageDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ShippingPackageDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingPackageDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingPackageMakeDefaultPayloadTypeResolver<TParent = any> {
    userErrors?: ShippingPackageMakeDefaultPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ShippingPackageMakeDefaultPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingPackageUpdatePayloadTypeResolver<TParent = any> {
    userErrors?: ShippingPackageUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ShippingPackageUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopLocaleDisablePayloadTypeResolver<TParent = any> {
    locale?: ShopLocaleDisablePayloadToLocaleResolver<TParent>;
    userErrors?: ShopLocaleDisablePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ShopLocaleDisablePayloadToLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopLocaleDisablePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopLocaleEnablePayloadTypeResolver<TParent = any> {
    shopLocale?: ShopLocaleEnablePayloadToShopLocaleResolver<TParent>;
    userErrors?: ShopLocaleEnablePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ShopLocaleEnablePayloadToShopLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopLocaleEnablePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopLocaleUpdatePayloadTypeResolver<TParent = any> {
    shopLocale?: ShopLocaleUpdatePayloadToShopLocaleResolver<TParent>;
    userErrors?: ShopLocaleUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ShopLocaleUpdatePayloadToShopLocaleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopLocaleUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyUpdatePayloadTypeResolver<TParent = any> {
    shopPolicy?: ShopPolicyUpdatePayloadToShopPolicyResolver<TParent>;
    userErrors?: ShopPolicyUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ShopPolicyUpdatePayloadToShopPolicyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyUserErrorTypeResolver<TParent = any> {
    code?: ShopPolicyUserErrorToCodeResolver<TParent>;
    field?: ShopPolicyUserErrorToFieldResolver<TParent>;
    message?: ShopPolicyUserErrorToMessageResolver<TParent>;
  }
  
  export interface ShopPolicyUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopPolicyUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopResourceFeedbackCreatePayloadTypeResolver<TParent = any> {
    feedback?: ShopResourceFeedbackCreatePayloadToFeedbackResolver<TParent>;
    userErrors?: ShopResourceFeedbackCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ShopResourceFeedbackCreatePayloadToFeedbackResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopResourceFeedbackCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopResourceFeedbackCreateUserErrorTypeResolver<TParent = any> {
    code?: ShopResourceFeedbackCreateUserErrorToCodeResolver<TParent>;
    field?: ShopResourceFeedbackCreateUserErrorToFieldResolver<TParent>;
    message?: ShopResourceFeedbackCreateUserErrorToMessageResolver<TParent>;
  }
  
  export interface ShopResourceFeedbackCreateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopResourceFeedbackCreateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopResourceFeedbackCreateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedUploadTargetGeneratePayloadTypeResolver<TParent = any> {
    parameters?: StagedUploadTargetGeneratePayloadToParametersResolver<TParent>;
    url?: StagedUploadTargetGeneratePayloadToUrlResolver<TParent>;
    userErrors?: StagedUploadTargetGeneratePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface StagedUploadTargetGeneratePayloadToParametersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedUploadTargetGeneratePayloadToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedUploadTargetGeneratePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationsStagedUploadTargetGenerateUploadParameterTypeResolver<TParent = any> {
    name?: MutationsStagedUploadTargetGenerateUploadParameterToNameResolver<TParent>;
    value?: MutationsStagedUploadTargetGenerateUploadParameterToValueResolver<TParent>;
  }
  
  export interface MutationsStagedUploadTargetGenerateUploadParameterToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MutationsStagedUploadTargetGenerateUploadParameterToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedUploadTargetsGeneratePayloadTypeResolver<TParent = any> {
    urls?: StagedUploadTargetsGeneratePayloadToUrlsResolver<TParent>;
    userErrors?: StagedUploadTargetsGeneratePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface StagedUploadTargetsGeneratePayloadToUrlsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedUploadTargetsGeneratePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedUploadTargetTypeResolver<TParent = any> {
    parameters?: StagedUploadTargetToParametersResolver<TParent>;
    url?: StagedUploadTargetToUrlResolver<TParent>;
  }
  
  export interface StagedUploadTargetToParametersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedUploadTargetToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageUploadParameterTypeResolver<TParent = any> {
    name?: ImageUploadParameterToNameResolver<TParent>;
    value?: ImageUploadParameterToValueResolver<TParent>;
  }
  
  export interface ImageUploadParameterToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageUploadParameterToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedUploadsCreatePayloadTypeResolver<TParent = any> {
    stagedTargets?: StagedUploadsCreatePayloadToStagedTargetsResolver<TParent>;
    userErrors?: StagedUploadsCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface StagedUploadsCreatePayloadToStagedTargetsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedUploadsCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedMediaUploadTargetTypeResolver<TParent = any> {
    parameters?: StagedMediaUploadTargetToParametersResolver<TParent>;
    resourceUrl?: StagedMediaUploadTargetToResourceUrlResolver<TParent>;
    url?: StagedMediaUploadTargetToUrlResolver<TParent>;
  }
  
  export interface StagedMediaUploadTargetToParametersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedMediaUploadTargetToResourceUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedMediaUploadTargetToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedUploadParameterTypeResolver<TParent = any> {
    name?: StagedUploadParameterToNameResolver<TParent>;
    value?: StagedUploadParameterToValueResolver<TParent>;
  }
  
  export interface StagedUploadParameterToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StagedUploadParameterToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionEnablePayloadTypeResolver<TParent = any> {
    createdDefinition?: StandardMetafieldDefinitionEnablePayloadToCreatedDefinitionResolver<TParent>;
    userErrors?: StandardMetafieldDefinitionEnablePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface StandardMetafieldDefinitionEnablePayloadToCreatedDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionEnablePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionEnableUserErrorTypeResolver<TParent = any> {
    code?: StandardMetafieldDefinitionEnableUserErrorToCodeResolver<TParent>;
    field?: StandardMetafieldDefinitionEnableUserErrorToFieldResolver<TParent>;
    message?: StandardMetafieldDefinitionEnableUserErrorToMessageResolver<TParent>;
  }
  
  export interface StandardMetafieldDefinitionEnableUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionEnableUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetafieldDefinitionEnableUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetaobjectDefinitionEnablePayloadTypeResolver<TParent = any> {
    metaobjectDefinition?: StandardMetaobjectDefinitionEnablePayloadToMetaobjectDefinitionResolver<TParent>;
    userErrors?: StandardMetaobjectDefinitionEnablePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface StandardMetaobjectDefinitionEnablePayloadToMetaobjectDefinitionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StandardMetaobjectDefinitionEnablePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenCreatePayloadTypeResolver<TParent = any> {
    shop?: StorefrontAccessTokenCreatePayloadToShopResolver<TParent>;
    storefrontAccessToken?: StorefrontAccessTokenCreatePayloadToStorefrontAccessTokenResolver<TParent>;
    userErrors?: StorefrontAccessTokenCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface StorefrontAccessTokenCreatePayloadToShopResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenCreatePayloadToStorefrontAccessTokenResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenDeletePayloadTypeResolver<TParent = any> {
    deletedStorefrontAccessTokenId?: StorefrontAccessTokenDeletePayloadToDeletedStorefrontAccessTokenIdResolver<TParent>;
    userErrors?: StorefrontAccessTokenDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface StorefrontAccessTokenDeletePayloadToDeletedStorefrontAccessTokenIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface StorefrontAccessTokenDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptCreatePayloadTypeResolver<TParent = any> {
    subscriptionBillingAttempt?: SubscriptionBillingAttemptCreatePayloadToSubscriptionBillingAttemptResolver<TParent>;
    userErrors?: SubscriptionBillingAttemptCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionBillingAttemptCreatePayloadToSubscriptionBillingAttemptResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingAttemptCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BillingAttemptUserErrorTypeResolver<TParent = any> {
    code?: BillingAttemptUserErrorToCodeResolver<TParent>;
    field?: BillingAttemptUserErrorToFieldResolver<TParent>;
    message?: BillingAttemptUserErrorToMessageResolver<TParent>;
  }
  
  export interface BillingAttemptUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BillingAttemptUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BillingAttemptUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleContractDraftCommitPayloadTypeResolver<TParent = any> {
    contract?: SubscriptionBillingCycleContractDraftCommitPayloadToContractResolver<TParent>;
    userErrors?: SubscriptionBillingCycleContractDraftCommitPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleContractDraftCommitPayloadToContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleContractDraftCommitPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftUserErrorTypeResolver<TParent = any> {
    code?: SubscriptionDraftUserErrorToCodeResolver<TParent>;
    field?: SubscriptionDraftUserErrorToFieldResolver<TParent>;
    message?: SubscriptionDraftUserErrorToMessageResolver<TParent>;
  }
  
  export interface SubscriptionDraftUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleContractDraftConcatenatePayloadTypeResolver<TParent = any> {
    draft?: SubscriptionBillingCycleContractDraftConcatenatePayloadToDraftResolver<TParent>;
    userErrors?: SubscriptionBillingCycleContractDraftConcatenatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleContractDraftConcatenatePayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleContractDraftConcatenatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleContractEditPayloadTypeResolver<TParent = any> {
    draft?: SubscriptionBillingCycleContractEditPayloadToDraftResolver<TParent>;
    userErrors?: SubscriptionBillingCycleContractEditPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleContractEditPayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleContractEditPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditDeletePayloadTypeResolver<TParent = any> {
    billingCycles?: SubscriptionBillingCycleEditDeletePayloadToBillingCyclesResolver<TParent>;
    userErrors?: SubscriptionBillingCycleEditDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleEditDeletePayloadToBillingCyclesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleUserErrorTypeResolver<TParent = any> {
    code?: SubscriptionBillingCycleUserErrorToCodeResolver<TParent>;
    field?: SubscriptionBillingCycleUserErrorToFieldResolver<TParent>;
    message?: SubscriptionBillingCycleUserErrorToMessageResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditsDeletePayloadTypeResolver<TParent = any> {
    billingCycles?: SubscriptionBillingCycleEditsDeletePayloadToBillingCyclesResolver<TParent>;
    userErrors?: SubscriptionBillingCycleEditsDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleEditsDeletePayloadToBillingCyclesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleEditsDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleScheduleEditPayloadTypeResolver<TParent = any> {
    billingCycle?: SubscriptionBillingCycleScheduleEditPayloadToBillingCycleResolver<TParent>;
    userErrors?: SubscriptionBillingCycleScheduleEditPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleScheduleEditPayloadToBillingCycleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleScheduleEditPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleSkipPayloadTypeResolver<TParent = any> {
    billingCycle?: SubscriptionBillingCycleSkipPayloadToBillingCycleResolver<TParent>;
    userErrors?: SubscriptionBillingCycleSkipPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleSkipPayloadToBillingCycleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleSkipPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleSkipUserErrorTypeResolver<TParent = any> {
    code?: SubscriptionBillingCycleSkipUserErrorToCodeResolver<TParent>;
    field?: SubscriptionBillingCycleSkipUserErrorToFieldResolver<TParent>;
    message?: SubscriptionBillingCycleSkipUserErrorToMessageResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleSkipUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleSkipUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleSkipUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleUnskipPayloadTypeResolver<TParent = any> {
    billingCycle?: SubscriptionBillingCycleUnskipPayloadToBillingCycleResolver<TParent>;
    userErrors?: SubscriptionBillingCycleUnskipPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleUnskipPayloadToBillingCycleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleUnskipPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleUnskipUserErrorTypeResolver<TParent = any> {
    code?: SubscriptionBillingCycleUnskipUserErrorToCodeResolver<TParent>;
    field?: SubscriptionBillingCycleUnskipUserErrorToFieldResolver<TParent>;
    message?: SubscriptionBillingCycleUnskipUserErrorToMessageResolver<TParent>;
  }
  
  export interface SubscriptionBillingCycleUnskipUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleUnskipUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionBillingCycleUnskipUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractActivatePayloadTypeResolver<TParent = any> {
    contract?: SubscriptionContractActivatePayloadToContractResolver<TParent>;
    userErrors?: SubscriptionContractActivatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionContractActivatePayloadToContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractActivatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractStatusUpdateUserErrorTypeResolver<TParent = any> {
    code?: SubscriptionContractStatusUpdateUserErrorToCodeResolver<TParent>;
    field?: SubscriptionContractStatusUpdateUserErrorToFieldResolver<TParent>;
    message?: SubscriptionContractStatusUpdateUserErrorToMessageResolver<TParent>;
  }
  
  export interface SubscriptionContractStatusUpdateUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractStatusUpdateUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractStatusUpdateUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractAtomicCreatePayloadTypeResolver<TParent = any> {
    contract?: SubscriptionContractAtomicCreatePayloadToContractResolver<TParent>;
    userErrors?: SubscriptionContractAtomicCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionContractAtomicCreatePayloadToContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractAtomicCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractCancelPayloadTypeResolver<TParent = any> {
    contract?: SubscriptionContractCancelPayloadToContractResolver<TParent>;
    userErrors?: SubscriptionContractCancelPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionContractCancelPayloadToContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractCancelPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractCreatePayloadTypeResolver<TParent = any> {
    draft?: SubscriptionContractCreatePayloadToDraftResolver<TParent>;
    userErrors?: SubscriptionContractCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionContractCreatePayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractExpirePayloadTypeResolver<TParent = any> {
    contract?: SubscriptionContractExpirePayloadToContractResolver<TParent>;
    userErrors?: SubscriptionContractExpirePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionContractExpirePayloadToContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractExpirePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractFailPayloadTypeResolver<TParent = any> {
    contract?: SubscriptionContractFailPayloadToContractResolver<TParent>;
    userErrors?: SubscriptionContractFailPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionContractFailPayloadToContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractFailPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractPausePayloadTypeResolver<TParent = any> {
    contract?: SubscriptionContractPausePayloadToContractResolver<TParent>;
    userErrors?: SubscriptionContractPausePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionContractPausePayloadToContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractPausePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractProductChangePayloadTypeResolver<TParent = any> {
    contract?: SubscriptionContractProductChangePayloadToContractResolver<TParent>;
    lineUpdated?: SubscriptionContractProductChangePayloadToLineUpdatedResolver<TParent>;
    userErrors?: SubscriptionContractProductChangePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionContractProductChangePayloadToContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractProductChangePayloadToLineUpdatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractProductChangePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractSetNextBillingDatePayloadTypeResolver<TParent = any> {
    contract?: SubscriptionContractSetNextBillingDatePayloadToContractResolver<TParent>;
    userErrors?: SubscriptionContractSetNextBillingDatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionContractSetNextBillingDatePayloadToContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractSetNextBillingDatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractUserErrorTypeResolver<TParent = any> {
    code?: SubscriptionContractUserErrorToCodeResolver<TParent>;
    field?: SubscriptionContractUserErrorToFieldResolver<TParent>;
    message?: SubscriptionContractUserErrorToMessageResolver<TParent>;
  }
  
  export interface SubscriptionContractUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractUpdatePayloadTypeResolver<TParent = any> {
    draft?: SubscriptionContractUpdatePayloadToDraftResolver<TParent>;
    userErrors?: SubscriptionContractUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionContractUpdatePayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionContractUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftCommitPayloadTypeResolver<TParent = any> {
    contract?: SubscriptionDraftCommitPayloadToContractResolver<TParent>;
    userErrors?: SubscriptionDraftCommitPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionDraftCommitPayloadToContractResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftCommitPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountAddPayloadTypeResolver<TParent = any> {
    discountAdded?: SubscriptionDraftDiscountAddPayloadToDiscountAddedResolver<TParent>;
    draft?: SubscriptionDraftDiscountAddPayloadToDraftResolver<TParent>;
    userErrors?: SubscriptionDraftDiscountAddPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionDraftDiscountAddPayloadToDiscountAddedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountAddPayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountAddPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountCodeApplyPayloadTypeResolver<TParent = any> {
    appliedDiscount?: SubscriptionDraftDiscountCodeApplyPayloadToAppliedDiscountResolver<TParent>;
    draft?: SubscriptionDraftDiscountCodeApplyPayloadToDraftResolver<TParent>;
    userErrors?: SubscriptionDraftDiscountCodeApplyPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionDraftDiscountCodeApplyPayloadToAppliedDiscountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountCodeApplyPayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountCodeApplyPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountRemovePayloadTypeResolver<TParent = any> {
    discountRemoved?: SubscriptionDraftDiscountRemovePayloadToDiscountRemovedResolver<TParent>;
    draft?: SubscriptionDraftDiscountRemovePayloadToDraftResolver<TParent>;
    userErrors?: SubscriptionDraftDiscountRemovePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionDraftDiscountRemovePayloadToDiscountRemovedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountRemovePayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountUpdatePayloadTypeResolver<TParent = any> {
    discountUpdated?: SubscriptionDraftDiscountUpdatePayloadToDiscountUpdatedResolver<TParent>;
    draft?: SubscriptionDraftDiscountUpdatePayloadToDraftResolver<TParent>;
    userErrors?: SubscriptionDraftDiscountUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionDraftDiscountUpdatePayloadToDiscountUpdatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountUpdatePayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftDiscountUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftFreeShippingDiscountAddPayloadTypeResolver<TParent = any> {
    discountAdded?: SubscriptionDraftFreeShippingDiscountAddPayloadToDiscountAddedResolver<TParent>;
    draft?: SubscriptionDraftFreeShippingDiscountAddPayloadToDraftResolver<TParent>;
    userErrors?: SubscriptionDraftFreeShippingDiscountAddPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionDraftFreeShippingDiscountAddPayloadToDiscountAddedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftFreeShippingDiscountAddPayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftFreeShippingDiscountAddPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftFreeShippingDiscountUpdatePayloadTypeResolver<TParent = any> {
    discountUpdated?: SubscriptionDraftFreeShippingDiscountUpdatePayloadToDiscountUpdatedResolver<TParent>;
    draft?: SubscriptionDraftFreeShippingDiscountUpdatePayloadToDraftResolver<TParent>;
    userErrors?: SubscriptionDraftFreeShippingDiscountUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionDraftFreeShippingDiscountUpdatePayloadToDiscountUpdatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftFreeShippingDiscountUpdatePayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftFreeShippingDiscountUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftLineAddPayloadTypeResolver<TParent = any> {
    draft?: SubscriptionDraftLineAddPayloadToDraftResolver<TParent>;
    lineAdded?: SubscriptionDraftLineAddPayloadToLineAddedResolver<TParent>;
    userErrors?: SubscriptionDraftLineAddPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionDraftLineAddPayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftLineAddPayloadToLineAddedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftLineAddPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftLineRemovePayloadTypeResolver<TParent = any> {
    discountsUpdated?: SubscriptionDraftLineRemovePayloadToDiscountsUpdatedResolver<TParent>;
    draft?: SubscriptionDraftLineRemovePayloadToDraftResolver<TParent>;
    lineRemoved?: SubscriptionDraftLineRemovePayloadToLineRemovedResolver<TParent>;
    userErrors?: SubscriptionDraftLineRemovePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionDraftLineRemovePayloadToDiscountsUpdatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftLineRemovePayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftLineRemovePayloadToLineRemovedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftLineRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftLineUpdatePayloadTypeResolver<TParent = any> {
    draft?: SubscriptionDraftLineUpdatePayloadToDraftResolver<TParent>;
    lineUpdated?: SubscriptionDraftLineUpdatePayloadToLineUpdatedResolver<TParent>;
    userErrors?: SubscriptionDraftLineUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionDraftLineUpdatePayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftLineUpdatePayloadToLineUpdatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftLineUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftUpdatePayloadTypeResolver<TParent = any> {
    draft?: SubscriptionDraftUpdatePayloadToDraftResolver<TParent>;
    userErrors?: SubscriptionDraftUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface SubscriptionDraftUpdatePayloadToDraftResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubscriptionDraftUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagsAddPayloadTypeResolver<TParent = any> {
    node?: TagsAddPayloadToNodeResolver<TParent>;
    userErrors?: TagsAddPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface TagsAddPayloadToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagsAddPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagsRemovePayloadTypeResolver<TParent = any> {
    node?: TagsRemovePayloadToNodeResolver<TParent>;
    userErrors?: TagsRemovePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface TagsRemovePayloadToNodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TagsRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxAppConfigurePayloadTypeResolver<TParent = any> {
    taxAppConfiguration?: TaxAppConfigurePayloadToTaxAppConfigurationResolver<TParent>;
    userErrors?: TaxAppConfigurePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface TaxAppConfigurePayloadToTaxAppConfigurationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxAppConfigurePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxAppConfigurationTypeResolver<TParent = any> {
    state?: TaxAppConfigurationToStateResolver<TParent>;
  }
  
  export interface TaxAppConfigurationToStateResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxAppConfigureUserErrorTypeResolver<TParent = any> {
    code?: TaxAppConfigureUserErrorToCodeResolver<TParent>;
    field?: TaxAppConfigureUserErrorToFieldResolver<TParent>;
    message?: TaxAppConfigureUserErrorToMessageResolver<TParent>;
  }
  
  export interface TaxAppConfigureUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxAppConfigureUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TaxAppConfigureUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationsRegisterPayloadTypeResolver<TParent = any> {
    translations?: TranslationsRegisterPayloadToTranslationsResolver<TParent>;
    userErrors?: TranslationsRegisterPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface TranslationsRegisterPayloadToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationsRegisterPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationsRemovePayloadTypeResolver<TParent = any> {
    translations?: TranslationsRemovePayloadToTranslationsResolver<TParent>;
    userErrors?: TranslationsRemovePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface TranslationsRemovePayloadToTranslationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TranslationsRemovePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteAllPayloadTypeResolver<TParent = any> {
    job?: UrlRedirectBulkDeleteAllPayloadToJobResolver<TParent>;
    userErrors?: UrlRedirectBulkDeleteAllPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface UrlRedirectBulkDeleteAllPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteAllPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteByIdsPayloadTypeResolver<TParent = any> {
    job?: UrlRedirectBulkDeleteByIdsPayloadToJobResolver<TParent>;
    userErrors?: UrlRedirectBulkDeleteByIdsPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface UrlRedirectBulkDeleteByIdsPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteByIdsPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteByIdsUserErrorTypeResolver<TParent = any> {
    code?: UrlRedirectBulkDeleteByIdsUserErrorToCodeResolver<TParent>;
    field?: UrlRedirectBulkDeleteByIdsUserErrorToFieldResolver<TParent>;
    message?: UrlRedirectBulkDeleteByIdsUserErrorToMessageResolver<TParent>;
  }
  
  export interface UrlRedirectBulkDeleteByIdsUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteByIdsUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteByIdsUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteBySavedSearchPayloadTypeResolver<TParent = any> {
    job?: UrlRedirectBulkDeleteBySavedSearchPayloadToJobResolver<TParent>;
    userErrors?: UrlRedirectBulkDeleteBySavedSearchPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface UrlRedirectBulkDeleteBySavedSearchPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteBySavedSearchPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteBySavedSearchUserErrorTypeResolver<TParent = any> {
    code?: UrlRedirectBulkDeleteBySavedSearchUserErrorToCodeResolver<TParent>;
    field?: UrlRedirectBulkDeleteBySavedSearchUserErrorToFieldResolver<TParent>;
    message?: UrlRedirectBulkDeleteBySavedSearchUserErrorToMessageResolver<TParent>;
  }
  
  export interface UrlRedirectBulkDeleteBySavedSearchUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteBySavedSearchUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteBySavedSearchUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteBySearchPayloadTypeResolver<TParent = any> {
    job?: UrlRedirectBulkDeleteBySearchPayloadToJobResolver<TParent>;
    userErrors?: UrlRedirectBulkDeleteBySearchPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface UrlRedirectBulkDeleteBySearchPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteBySearchPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteBySearchUserErrorTypeResolver<TParent = any> {
    code?: UrlRedirectBulkDeleteBySearchUserErrorToCodeResolver<TParent>;
    field?: UrlRedirectBulkDeleteBySearchUserErrorToFieldResolver<TParent>;
    message?: UrlRedirectBulkDeleteBySearchUserErrorToMessageResolver<TParent>;
  }
  
  export interface UrlRedirectBulkDeleteBySearchUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteBySearchUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectBulkDeleteBySearchUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectCreatePayloadTypeResolver<TParent = any> {
    urlRedirect?: UrlRedirectCreatePayloadToUrlRedirectResolver<TParent>;
    userErrors?: UrlRedirectCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface UrlRedirectCreatePayloadToUrlRedirectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectUserErrorTypeResolver<TParent = any> {
    code?: UrlRedirectUserErrorToCodeResolver<TParent>;
    field?: UrlRedirectUserErrorToFieldResolver<TParent>;
    message?: UrlRedirectUserErrorToMessageResolver<TParent>;
  }
  
  export interface UrlRedirectUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectDeletePayloadTypeResolver<TParent = any> {
    deletedUrlRedirectId?: UrlRedirectDeletePayloadToDeletedUrlRedirectIdResolver<TParent>;
    userErrors?: UrlRedirectDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface UrlRedirectDeletePayloadToDeletedUrlRedirectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportCreatePayloadTypeResolver<TParent = any> {
    urlRedirectImport?: UrlRedirectImportCreatePayloadToUrlRedirectImportResolver<TParent>;
    userErrors?: UrlRedirectImportCreatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface UrlRedirectImportCreatePayloadToUrlRedirectImportResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportUserErrorTypeResolver<TParent = any> {
    code?: UrlRedirectImportUserErrorToCodeResolver<TParent>;
    field?: UrlRedirectImportUserErrorToFieldResolver<TParent>;
    message?: UrlRedirectImportUserErrorToMessageResolver<TParent>;
  }
  
  export interface UrlRedirectImportUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportSubmitPayloadTypeResolver<TParent = any> {
    job?: UrlRedirectImportSubmitPayloadToJobResolver<TParent>;
    userErrors?: UrlRedirectImportSubmitPayloadToUserErrorsResolver<TParent>;
  }
  
  export interface UrlRedirectImportSubmitPayloadToJobResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectImportSubmitPayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectUpdatePayloadTypeResolver<TParent = any> {
    urlRedirect?: UrlRedirectUpdatePayloadToUrlRedirectResolver<TParent>;
    userErrors?: UrlRedirectUpdatePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface UrlRedirectUpdatePayloadToUrlRedirectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UrlRedirectUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationCreatePayloadTypeResolver<TParent = any> {
    userErrors?: ValidationCreatePayloadToUserErrorsResolver<TParent>;
    validation?: ValidationCreatePayloadToValidationResolver<TParent>;
  }
  
  export interface ValidationCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationCreatePayloadToValidationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationUserErrorTypeResolver<TParent = any> {
    code?: ValidationUserErrorToCodeResolver<TParent>;
    field?: ValidationUserErrorToFieldResolver<TParent>;
    message?: ValidationUserErrorToMessageResolver<TParent>;
  }
  
  export interface ValidationUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationDeletePayloadTypeResolver<TParent = any> {
    deletedId?: ValidationDeletePayloadToDeletedIdResolver<TParent>;
    userErrors?: ValidationDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface ValidationDeletePayloadToDeletedIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationUpdatePayloadTypeResolver<TParent = any> {
    userErrors?: ValidationUpdatePayloadToUserErrorsResolver<TParent>;
    validation?: ValidationUpdatePayloadToValidationResolver<TParent>;
  }
  
  export interface ValidationUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ValidationUpdatePayloadToValidationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebPixelCreatePayloadTypeResolver<TParent = any> {
    userErrors?: WebPixelCreatePayloadToUserErrorsResolver<TParent>;
    webPixel?: WebPixelCreatePayloadToWebPixelResolver<TParent>;
  }
  
  export interface WebPixelCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebPixelCreatePayloadToWebPixelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ErrorsWebPixelUserErrorTypeResolver<TParent = any> {
    code?: ErrorsWebPixelUserErrorToCodeResolver<TParent>;
    field?: ErrorsWebPixelUserErrorToFieldResolver<TParent>;
    message?: ErrorsWebPixelUserErrorToMessageResolver<TParent>;
  }
  
  export interface ErrorsWebPixelUserErrorToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ErrorsWebPixelUserErrorToFieldResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ErrorsWebPixelUserErrorToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebPixelDeletePayloadTypeResolver<TParent = any> {
    deletedWebPixelId?: WebPixelDeletePayloadToDeletedWebPixelIdResolver<TParent>;
    userErrors?: WebPixelDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface WebPixelDeletePayloadToDeletedWebPixelIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebPixelDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebPixelUpdatePayloadTypeResolver<TParent = any> {
    userErrors?: WebPixelUpdatePayloadToUserErrorsResolver<TParent>;
    webPixel?: WebPixelUpdatePayloadToWebPixelResolver<TParent>;
  }
  
  export interface WebPixelUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebPixelUpdatePayloadToWebPixelResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionCreatePayloadTypeResolver<TParent = any> {
    userErrors?: WebhookSubscriptionCreatePayloadToUserErrorsResolver<TParent>;
    webhookSubscription?: WebhookSubscriptionCreatePayloadToWebhookSubscriptionResolver<TParent>;
  }
  
  export interface WebhookSubscriptionCreatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionCreatePayloadToWebhookSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionDeletePayloadTypeResolver<TParent = any> {
    deletedWebhookSubscriptionId?: WebhookSubscriptionDeletePayloadToDeletedWebhookSubscriptionIdResolver<TParent>;
    userErrors?: WebhookSubscriptionDeletePayloadToUserErrorsResolver<TParent>;
  }
  
  export interface WebhookSubscriptionDeletePayloadToDeletedWebhookSubscriptionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionDeletePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionUpdatePayloadTypeResolver<TParent = any> {
    userErrors?: WebhookSubscriptionUpdatePayloadToUserErrorsResolver<TParent>;
    webhookSubscription?: WebhookSubscriptionUpdatePayloadToWebhookSubscriptionResolver<TParent>;
  }
  
  export interface WebhookSubscriptionUpdatePayloadToUserErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface WebhookSubscriptionUpdatePayloadToWebhookSubscriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeSaleTypeResolver<TParent = any> {
    actionType?: AdditionalFeeSaleToActionTypeResolver<TParent>;
    additionalFee?: AdditionalFeeSaleToAdditionalFeeResolver<TParent>;
    id?: AdditionalFeeSaleToIdResolver<TParent>;
    lineType?: AdditionalFeeSaleToLineTypeResolver<TParent>;
    quantity?: AdditionalFeeSaleToQuantityResolver<TParent>;
    taxes?: AdditionalFeeSaleToTaxesResolver<TParent>;
    totalAmount?: AdditionalFeeSaleToTotalAmountResolver<TParent>;
    totalDiscountAmountAfterTaxes?: AdditionalFeeSaleToTotalDiscountAmountAfterTaxesResolver<TParent>;
    totalDiscountAmountBeforeTaxes?: AdditionalFeeSaleToTotalDiscountAmountBeforeTaxesResolver<TParent>;
    totalTaxAmount?: AdditionalFeeSaleToTotalTaxAmountResolver<TParent>;
  }
  
  export interface AdditionalFeeSaleToActionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeSaleToAdditionalFeeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeSaleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeSaleToLineTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeSaleToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeSaleToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeSaleToTotalAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeSaleToTotalDiscountAmountAfterTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeSaleToTotalDiscountAmountBeforeTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdditionalFeeSaleToTotalTaxAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SaleAdditionalFeeTypeResolver<TParent = any> {
    id?: SaleAdditionalFeeToIdResolver<TParent>;
    name?: SaleAdditionalFeeToNameResolver<TParent>;
    price?: SaleAdditionalFeeToPriceResolver<TParent>;
    taxLines?: SaleAdditionalFeeToTaxLinesResolver<TParent>;
  }
  
  export interface SaleAdditionalFeeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SaleAdditionalFeeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SaleAdditionalFeeToPriceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SaleAdditionalFeeToTaxLinesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdjustmentSaleTypeResolver<TParent = any> {
    actionType?: AdjustmentSaleToActionTypeResolver<TParent>;
    id?: AdjustmentSaleToIdResolver<TParent>;
    lineType?: AdjustmentSaleToLineTypeResolver<TParent>;
    quantity?: AdjustmentSaleToQuantityResolver<TParent>;
    taxes?: AdjustmentSaleToTaxesResolver<TParent>;
    totalAmount?: AdjustmentSaleToTotalAmountResolver<TParent>;
    totalDiscountAmountAfterTaxes?: AdjustmentSaleToTotalDiscountAmountAfterTaxesResolver<TParent>;
    totalDiscountAmountBeforeTaxes?: AdjustmentSaleToTotalDiscountAmountBeforeTaxesResolver<TParent>;
    totalTaxAmount?: AdjustmentSaleToTotalTaxAmountResolver<TParent>;
  }
  
  export interface AdjustmentSaleToActionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdjustmentSaleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdjustmentSaleToLineTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdjustmentSaleToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdjustmentSaleToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdjustmentSaleToTotalAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdjustmentSaleToTotalDiscountAmountAfterTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdjustmentSaleToTotalDiscountAmountBeforeTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AdjustmentSaleToTotalTaxAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCatalogTypeResolver<TParent = any> {
    apps?: AppCatalogToAppsResolver<TParent>;
    id?: AppCatalogToIdResolver<TParent>;
    operations?: AppCatalogToOperationsResolver<TParent>;
    priceList?: AppCatalogToPriceListResolver<TParent>;
    publication?: AppCatalogToPublicationResolver<TParent>;
    status?: AppCatalogToStatusResolver<TParent>;
    title?: AppCatalogToTitleResolver<TParent>;
  }
  
  export interface AppCatalogToAppsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface AppCatalogToAppsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: AppCatalogToAppsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCatalogToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCatalogToOperationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCatalogToPriceListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCatalogToPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCatalogToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AppCatalogToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AutomaticDiscountApplicationTypeResolver<TParent = any> {
    allocationMethod?: AutomaticDiscountApplicationToAllocationMethodResolver<TParent>;
    index?: AutomaticDiscountApplicationToIndexResolver<TParent>;
    targetSelection?: AutomaticDiscountApplicationToTargetSelectionResolver<TParent>;
    targetType?: AutomaticDiscountApplicationToTargetTypeResolver<TParent>;
    title?: AutomaticDiscountApplicationToTitleResolver<TParent>;
    value?: AutomaticDiscountApplicationToValueResolver<TParent>;
  }
  
  export interface AutomaticDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AutomaticDiscountApplicationToIndexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AutomaticDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AutomaticDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AutomaticDiscountApplicationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AutomaticDiscountApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BasicEventTypeResolver<TParent = any> {
    appTitle?: BasicEventToAppTitleResolver<TParent>;
    attributeToApp?: BasicEventToAttributeToAppResolver<TParent>;
    attributeToUser?: BasicEventToAttributeToUserResolver<TParent>;
    createdAt?: BasicEventToCreatedAtResolver<TParent>;
    criticalAlert?: BasicEventToCriticalAlertResolver<TParent>;
    id?: BasicEventToIdResolver<TParent>;
    message?: BasicEventToMessageResolver<TParent>;
  }
  
  export interface BasicEventToAppTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BasicEventToAttributeToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BasicEventToAttributeToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BasicEventToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BasicEventToCriticalAlertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BasicEventToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BasicEventToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedAutomaticDiscountApplicationTypeResolver<TParent = any> {
    allocationMethod?: CalculatedAutomaticDiscountApplicationToAllocationMethodResolver<TParent>;
    appliedTo?: CalculatedAutomaticDiscountApplicationToAppliedToResolver<TParent>;
    description?: CalculatedAutomaticDiscountApplicationToDescriptionResolver<TParent>;
    id?: CalculatedAutomaticDiscountApplicationToIdResolver<TParent>;
    targetSelection?: CalculatedAutomaticDiscountApplicationToTargetSelectionResolver<TParent>;
    targetType?: CalculatedAutomaticDiscountApplicationToTargetTypeResolver<TParent>;
    value?: CalculatedAutomaticDiscountApplicationToValueResolver<TParent>;
  }
  
  export interface CalculatedAutomaticDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedAutomaticDiscountApplicationToAppliedToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedAutomaticDiscountApplicationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedAutomaticDiscountApplicationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedAutomaticDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedAutomaticDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedAutomaticDiscountApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountCodeApplicationTypeResolver<TParent = any> {
    allocationMethod?: CalculatedDiscountCodeApplicationToAllocationMethodResolver<TParent>;
    appliedTo?: CalculatedDiscountCodeApplicationToAppliedToResolver<TParent>;
    code?: CalculatedDiscountCodeApplicationToCodeResolver<TParent>;
    description?: CalculatedDiscountCodeApplicationToDescriptionResolver<TParent>;
    id?: CalculatedDiscountCodeApplicationToIdResolver<TParent>;
    targetSelection?: CalculatedDiscountCodeApplicationToTargetSelectionResolver<TParent>;
    targetType?: CalculatedDiscountCodeApplicationToTargetTypeResolver<TParent>;
    value?: CalculatedDiscountCodeApplicationToValueResolver<TParent>;
  }
  
  export interface CalculatedDiscountCodeApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountCodeApplicationToAppliedToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountCodeApplicationToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountCodeApplicationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountCodeApplicationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountCodeApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountCodeApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedDiscountCodeApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedManualDiscountApplicationTypeResolver<TParent = any> {
    allocationMethod?: CalculatedManualDiscountApplicationToAllocationMethodResolver<TParent>;
    appliedTo?: CalculatedManualDiscountApplicationToAppliedToResolver<TParent>;
    description?: CalculatedManualDiscountApplicationToDescriptionResolver<TParent>;
    id?: CalculatedManualDiscountApplicationToIdResolver<TParent>;
    targetSelection?: CalculatedManualDiscountApplicationToTargetSelectionResolver<TParent>;
    targetType?: CalculatedManualDiscountApplicationToTargetTypeResolver<TParent>;
    value?: CalculatedManualDiscountApplicationToValueResolver<TParent>;
  }
  
  export interface CalculatedManualDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedManualDiscountApplicationToAppliedToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedManualDiscountApplicationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedManualDiscountApplicationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedManualDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedManualDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedManualDiscountApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedScriptDiscountApplicationTypeResolver<TParent = any> {
    allocationMethod?: CalculatedScriptDiscountApplicationToAllocationMethodResolver<TParent>;
    appliedTo?: CalculatedScriptDiscountApplicationToAppliedToResolver<TParent>;
    description?: CalculatedScriptDiscountApplicationToDescriptionResolver<TParent>;
    id?: CalculatedScriptDiscountApplicationToIdResolver<TParent>;
    targetSelection?: CalculatedScriptDiscountApplicationToTargetSelectionResolver<TParent>;
    targetType?: CalculatedScriptDiscountApplicationToTargetTypeResolver<TParent>;
    value?: CalculatedScriptDiscountApplicationToValueResolver<TParent>;
  }
  
  export interface CalculatedScriptDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedScriptDiscountApplicationToAppliedToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedScriptDiscountApplicationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedScriptDiscountApplicationToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedScriptDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedScriptDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CalculatedScriptDiscountApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomFontTypeResolver<TParent = any> {
    genericFileId?: CheckoutBrandingCustomFontToGenericFileIdResolver<TParent>;
    sources?: CheckoutBrandingCustomFontToSourcesResolver<TParent>;
    weight?: CheckoutBrandingCustomFontToWeightResolver<TParent>;
  }
  
  export interface CheckoutBrandingCustomFontToGenericFileIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomFontToSourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingCustomFontToWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingShopifyFontTypeResolver<TParent = any> {
    sources?: CheckoutBrandingShopifyFontToSourcesResolver<TParent>;
    weight?: CheckoutBrandingShopifyFontToWeightResolver<TParent>;
  }
  
  export interface CheckoutBrandingShopifyFontToSourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CheckoutBrandingShopifyFontToWeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventTypeResolver<TParent = any> {
    appTitle?: CommentEventToAppTitleResolver<TParent>;
    attachments?: CommentEventToAttachmentsResolver<TParent>;
    attributeToApp?: CommentEventToAttributeToAppResolver<TParent>;
    attributeToUser?: CommentEventToAttributeToUserResolver<TParent>;
    author?: CommentEventToAuthorResolver<TParent>;
    canDelete?: CommentEventToCanDeleteResolver<TParent>;
    canEdit?: CommentEventToCanEditResolver<TParent>;
    createdAt?: CommentEventToCreatedAtResolver<TParent>;
    criticalAlert?: CommentEventToCriticalAlertResolver<TParent>;
    edited?: CommentEventToEditedResolver<TParent>;
    embed?: CommentEventToEmbedResolver<TParent>;
    id?: CommentEventToIdResolver<TParent>;
    message?: CommentEventToMessageResolver<TParent>;
    rawMessage?: CommentEventToRawMessageResolver<TParent>;
    subject?: CommentEventToSubjectResolver<TParent>;
  }
  
  export interface CommentEventToAppTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToAttachmentsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToAttributeToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToAttributeToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToAuthorResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToCanDeleteResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToCanEditResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToCreatedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToCriticalAlertResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToEditedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToEmbedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToRawMessageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventToSubjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventAttachmentTypeResolver<TParent = any> {
    fileExtension?: CommentEventAttachmentToFileExtensionResolver<TParent>;
    id?: CommentEventAttachmentToIdResolver<TParent>;
    image?: CommentEventAttachmentToImageResolver<TParent>;
    name?: CommentEventAttachmentToNameResolver<TParent>;
    size?: CommentEventAttachmentToSizeResolver<TParent>;
    url?: CommentEventAttachmentToUrlResolver<TParent>;
  }
  
  export interface CommentEventAttachmentToFileExtensionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventAttachmentToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventAttachmentToImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventAttachmentToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventAttachmentToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventAttachmentToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CommentEventEmbedTypeResolver<TParent = any> {
    (parent: TParent, context: any, info: GraphQLResolveInfo): 'Customer' | 'DraftOrder' | 'Order' | 'Product' | 'ProductVariant';
  }
  export interface CompanyLocationCatalogTypeResolver<TParent = any> {
    companyLocations?: CompanyLocationCatalogToCompanyLocationsResolver<TParent>;
    companyLocationsCount?: CompanyLocationCatalogToCompanyLocationsCountResolver<TParent>;
    id?: CompanyLocationCatalogToIdResolver<TParent>;
    operations?: CompanyLocationCatalogToOperationsResolver<TParent>;
    priceList?: CompanyLocationCatalogToPriceListResolver<TParent>;
    publication?: CompanyLocationCatalogToPublicationResolver<TParent>;
    status?: CompanyLocationCatalogToStatusResolver<TParent>;
    title?: CompanyLocationCatalogToTitleResolver<TParent>;
  }
  
  export interface CompanyLocationCatalogToCompanyLocationsArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
    sortKey?: CompanyLocationSortKeys;
    query?: string;
  }
  export interface CompanyLocationCatalogToCompanyLocationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: CompanyLocationCatalogToCompanyLocationsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationCatalogToCompanyLocationsCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationCatalogToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationCatalogToOperationsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationCatalogToPriceListResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationCatalogToPublicationResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationCatalogToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CompanyLocationCatalogToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationTypeResolver<TParent = any> {
    allocationMethod?: DiscountCodeApplicationToAllocationMethodResolver<TParent>;
    code?: DiscountCodeApplicationToCodeResolver<TParent>;
    index?: DiscountCodeApplicationToIndexResolver<TParent>;
    targetSelection?: DiscountCodeApplicationToTargetSelectionResolver<TParent>;
    targetType?: DiscountCodeApplicationToTargetTypeResolver<TParent>;
    value?: DiscountCodeApplicationToValueResolver<TParent>;
  }
  
  export interface DiscountCodeApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationToIndexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DiscountCodeApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutySaleTypeResolver<TParent = any> {
    actionType?: DutySaleToActionTypeResolver<TParent>;
    duty?: DutySaleToDutyResolver<TParent>;
    id?: DutySaleToIdResolver<TParent>;
    lineType?: DutySaleToLineTypeResolver<TParent>;
    quantity?: DutySaleToQuantityResolver<TParent>;
    taxes?: DutySaleToTaxesResolver<TParent>;
    totalAmount?: DutySaleToTotalAmountResolver<TParent>;
    totalDiscountAmountAfterTaxes?: DutySaleToTotalDiscountAmountAfterTaxesResolver<TParent>;
    totalDiscountAmountBeforeTaxes?: DutySaleToTotalDiscountAmountBeforeTaxesResolver<TParent>;
    totalTaxAmount?: DutySaleToTotalTaxAmountResolver<TParent>;
  }
  
  export interface DutySaleToActionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutySaleToDutyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutySaleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutySaleToLineTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutySaleToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutySaleToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutySaleToTotalAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutySaleToTotalDiscountAmountAfterTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutySaleToTotalDiscountAmountBeforeTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface DutySaleToTotalTaxAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoTypeResolver<TParent = any> {
    alt?: ExternalVideoToAltResolver<TParent>;
    embedUrl?: ExternalVideoToEmbedUrlResolver<TParent>;
    embeddedUrl?: ExternalVideoToEmbeddedUrlResolver<TParent>;
    host?: ExternalVideoToHostResolver<TParent>;
    id?: ExternalVideoToIdResolver<TParent>;
    mediaContentType?: ExternalVideoToMediaContentTypeResolver<TParent>;
    mediaErrors?: ExternalVideoToMediaErrorsResolver<TParent>;
    mediaWarnings?: ExternalVideoToMediaWarningsResolver<TParent>;
    originUrl?: ExternalVideoToOriginUrlResolver<TParent>;
    preview?: ExternalVideoToPreviewResolver<TParent>;
    status?: ExternalVideoToStatusResolver<TParent>;
  }
  
  export interface ExternalVideoToAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToEmbedUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToEmbeddedUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToHostResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToMediaContentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToMediaErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToMediaWarningsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToOriginUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToPreviewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ExternalVideoToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardSaleTypeResolver<TParent = any> {
    actionType?: GiftCardSaleToActionTypeResolver<TParent>;
    id?: GiftCardSaleToIdResolver<TParent>;
    lineItem?: GiftCardSaleToLineItemResolver<TParent>;
    lineType?: GiftCardSaleToLineTypeResolver<TParent>;
    quantity?: GiftCardSaleToQuantityResolver<TParent>;
    taxes?: GiftCardSaleToTaxesResolver<TParent>;
    totalAmount?: GiftCardSaleToTotalAmountResolver<TParent>;
    totalDiscountAmountAfterTaxes?: GiftCardSaleToTotalDiscountAmountAfterTaxesResolver<TParent>;
    totalDiscountAmountBeforeTaxes?: GiftCardSaleToTotalDiscountAmountBeforeTaxesResolver<TParent>;
    totalTaxAmount?: GiftCardSaleToTotalTaxAmountResolver<TParent>;
  }
  
  export interface GiftCardSaleToActionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardSaleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardSaleToLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardSaleToLineTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardSaleToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardSaleToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardSaleToTotalAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardSaleToTotalDiscountAmountAfterTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardSaleToTotalDiscountAmountBeforeTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GiftCardSaleToTotalTaxAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationTypeResolver<TParent = any> {
    allocationMethod?: ManualDiscountApplicationToAllocationMethodResolver<TParent>;
    description?: ManualDiscountApplicationToDescriptionResolver<TParent>;
    index?: ManualDiscountApplicationToIndexResolver<TParent>;
    targetSelection?: ManualDiscountApplicationToTargetSelectionResolver<TParent>;
    targetType?: ManualDiscountApplicationToTargetTypeResolver<TParent>;
    title?: ManualDiscountApplicationToTitleResolver<TParent>;
    value?: ManualDiscountApplicationToValueResolver<TParent>;
  }
  
  export interface ManualDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationToIndexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ManualDiscountApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionCountryTypeResolver<TParent = any> {
    code?: MarketRegionCountryToCodeResolver<TParent>;
    currency?: MarketRegionCountryToCurrencyResolver<TParent>;
    id?: MarketRegionCountryToIdResolver<TParent>;
    name?: MarketRegionCountryToNameResolver<TParent>;
  }
  
  export interface MarketRegionCountryToCodeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionCountryToCurrencyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionCountryToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MarketRegionCountryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dTypeResolver<TParent = any> {
    alt?: Model3dToAltResolver<TParent>;
    boundingBox?: Model3dToBoundingBoxResolver<TParent>;
    filename?: Model3dToFilenameResolver<TParent>;
    id?: Model3dToIdResolver<TParent>;
    mediaContentType?: Model3dToMediaContentTypeResolver<TParent>;
    mediaErrors?: Model3dToMediaErrorsResolver<TParent>;
    mediaWarnings?: Model3dToMediaWarningsResolver<TParent>;
    originalSource?: Model3dToOriginalSourceResolver<TParent>;
    preview?: Model3dToPreviewResolver<TParent>;
    sources?: Model3dToSourcesResolver<TParent>;
    status?: Model3dToStatusResolver<TParent>;
  }
  
  export interface Model3dToAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToBoundingBoxResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToFilenameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToMediaContentTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToMediaErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToMediaWarningsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToOriginalSourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToPreviewResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToSourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dToStatusResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dBoundingBoxTypeResolver<TParent = any> {
    size?: Model3dBoundingBoxToSizeResolver<TParent>;
  }
  
  export interface Model3dBoundingBoxToSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Vector3TypeResolver<TParent = any> {
    x?: Vector3ToXResolver<TParent>;
    y?: Vector3ToYResolver<TParent>;
    z?: Vector3ToZResolver<TParent>;
  }
  
  export interface Vector3ToXResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Vector3ToYResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Vector3ToZResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dSourceTypeResolver<TParent = any> {
    filesize?: Model3dSourceToFilesizeResolver<TParent>;
    format?: Model3dSourceToFormatResolver<TParent>;
    mimeType?: Model3dSourceToMimeTypeResolver<TParent>;
    url?: Model3dSourceToUrlResolver<TParent>;
  }
  
  export interface Model3dSourceToFilesizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dSourceToFormatResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dSourceToMimeTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface Model3dSourceToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderAgreementTypeResolver<TParent = any> {
    app?: OrderAgreementToAppResolver<TParent>;
    happenedAt?: OrderAgreementToHappenedAtResolver<TParent>;
    id?: OrderAgreementToIdResolver<TParent>;
    order?: OrderAgreementToOrderResolver<TParent>;
    reason?: OrderAgreementToReasonResolver<TParent>;
    sales?: OrderAgreementToSalesResolver<TParent>;
    user?: OrderAgreementToUserResolver<TParent>;
  }
  
  export interface OrderAgreementToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderAgreementToHappenedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderAgreementToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderAgreementToOrderResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderAgreementToReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderAgreementToSalesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderAgreementToSalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderAgreementToSalesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderAgreementToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAgreementTypeResolver<TParent = any> {
    app?: OrderEditAgreementToAppResolver<TParent>;
    happenedAt?: OrderEditAgreementToHappenedAtResolver<TParent>;
    id?: OrderEditAgreementToIdResolver<TParent>;
    reason?: OrderEditAgreementToReasonResolver<TParent>;
    sales?: OrderEditAgreementToSalesResolver<TParent>;
    user?: OrderEditAgreementToUserResolver<TParent>;
  }
  
  export interface OrderEditAgreementToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAgreementToHappenedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAgreementToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAgreementToReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAgreementToSalesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface OrderEditAgreementToSalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: OrderEditAgreementToSalesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface OrderEditAgreementToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PolarisVizDataPointTypeResolver<TParent = any> {
    key?: PolarisVizDataPointToKeyResolver<TParent>;
    value?: PolarisVizDataPointToValueResolver<TParent>;
  }
  
  export interface PolarisVizDataPointToKeyResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PolarisVizDataPointToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PolarisVizDataSeriesTypeResolver<TParent = any> {
    data?: PolarisVizDataSeriesToDataResolver<TParent>;
    isComparison?: PolarisVizDataSeriesToIsComparisonResolver<TParent>;
    name?: PolarisVizDataSeriesToNameResolver<TParent>;
  }
  
  export interface PolarisVizDataSeriesToDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PolarisVizDataSeriesToIsComparisonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PolarisVizDataSeriesToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PolarisVizResponseTypeResolver<TParent = any> {
    data?: PolarisVizResponseToDataResolver<TParent>;
    parseErrors?: PolarisVizResponseToParseErrorsResolver<TParent>;
    tableData?: PolarisVizResponseToTableDataResolver<TParent>;
    vizType?: PolarisVizResponseToVizTypeResolver<TParent>;
  }
  
  export interface PolarisVizResponseToDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PolarisVizResponseToParseErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PolarisVizResponseToTableDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface PolarisVizResponseToVizTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductSaleTypeResolver<TParent = any> {
    actionType?: ProductSaleToActionTypeResolver<TParent>;
    id?: ProductSaleToIdResolver<TParent>;
    lineItem?: ProductSaleToLineItemResolver<TParent>;
    lineType?: ProductSaleToLineTypeResolver<TParent>;
    quantity?: ProductSaleToQuantityResolver<TParent>;
    taxes?: ProductSaleToTaxesResolver<TParent>;
    totalAmount?: ProductSaleToTotalAmountResolver<TParent>;
    totalDiscountAmountAfterTaxes?: ProductSaleToTotalDiscountAmountAfterTaxesResolver<TParent>;
    totalDiscountAmountBeforeTaxes?: ProductSaleToTotalDiscountAmountBeforeTaxesResolver<TParent>;
    totalTaxAmount?: ProductSaleToTotalTaxAmountResolver<TParent>;
  }
  
  export interface ProductSaleToActionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductSaleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductSaleToLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductSaleToLineTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductSaleToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductSaleToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductSaleToTotalAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductSaleToTotalDiscountAmountAfterTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductSaleToTotalDiscountAmountBeforeTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ProductSaleToTotalTaxAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundAgreementTypeResolver<TParent = any> {
    app?: RefundAgreementToAppResolver<TParent>;
    happenedAt?: RefundAgreementToHappenedAtResolver<TParent>;
    id?: RefundAgreementToIdResolver<TParent>;
    reason?: RefundAgreementToReasonResolver<TParent>;
    refund?: RefundAgreementToRefundResolver<TParent>;
    sales?: RefundAgreementToSalesResolver<TParent>;
    user?: RefundAgreementToUserResolver<TParent>;
  }
  
  export interface RefundAgreementToAppResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundAgreementToHappenedAtResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundAgreementToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundAgreementToReasonResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundAgreementToRefundResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundAgreementToSalesArgs {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
    reverse?: boolean;
  }
  export interface RefundAgreementToSalesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: RefundAgreementToSalesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface RefundAgreementToUserResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationTypeResolver<TParent = any> {
    allocationMethod?: ScriptDiscountApplicationToAllocationMethodResolver<TParent>;
    description?: ScriptDiscountApplicationToDescriptionResolver<TParent>;
    index?: ScriptDiscountApplicationToIndexResolver<TParent>;
    targetSelection?: ScriptDiscountApplicationToTargetSelectionResolver<TParent>;
    targetType?: ScriptDiscountApplicationToTargetTypeResolver<TParent>;
    title?: ScriptDiscountApplicationToTitleResolver<TParent>;
    value?: ScriptDiscountApplicationToValueResolver<TParent>;
  }
  
  export interface ScriptDiscountApplicationToAllocationMethodResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationToIndexResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationToTargetSelectionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationToTargetTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ScriptDiscountApplicationToValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentAssociationFilterTypeResolver<TParent = any> {
    localizedName?: SegmentAssociationFilterToLocalizedNameResolver<TParent>;
    multiValue?: SegmentAssociationFilterToMultiValueResolver<TParent>;
    queryName?: SegmentAssociationFilterToQueryNameResolver<TParent>;
  }
  
  export interface SegmentAssociationFilterToLocalizedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentAssociationFilterToMultiValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentAssociationFilterToQueryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentBooleanFilterTypeResolver<TParent = any> {
    localizedName?: SegmentBooleanFilterToLocalizedNameResolver<TParent>;
    multiValue?: SegmentBooleanFilterToMultiValueResolver<TParent>;
    queryName?: SegmentBooleanFilterToQueryNameResolver<TParent>;
  }
  
  export interface SegmentBooleanFilterToLocalizedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentBooleanFilterToMultiValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentBooleanFilterToQueryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentDateFilterTypeResolver<TParent = any> {
    localizedName?: SegmentDateFilterToLocalizedNameResolver<TParent>;
    multiValue?: SegmentDateFilterToMultiValueResolver<TParent>;
    queryName?: SegmentDateFilterToQueryNameResolver<TParent>;
  }
  
  export interface SegmentDateFilterToLocalizedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentDateFilterToMultiValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentDateFilterToQueryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEnumFilterTypeResolver<TParent = any> {
    localizedName?: SegmentEnumFilterToLocalizedNameResolver<TParent>;
    multiValue?: SegmentEnumFilterToMultiValueResolver<TParent>;
    queryName?: SegmentEnumFilterToQueryNameResolver<TParent>;
  }
  
  export interface SegmentEnumFilterToLocalizedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEnumFilterToMultiValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEnumFilterToQueryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEventFilterTypeResolver<TParent = any> {
    localizedName?: SegmentEventFilterToLocalizedNameResolver<TParent>;
    multiValue?: SegmentEventFilterToMultiValueResolver<TParent>;
    parameters?: SegmentEventFilterToParametersResolver<TParent>;
    queryName?: SegmentEventFilterToQueryNameResolver<TParent>;
    returnValueType?: SegmentEventFilterToReturnValueTypeResolver<TParent>;
  }
  
  export interface SegmentEventFilterToLocalizedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEventFilterToMultiValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEventFilterToParametersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEventFilterToQueryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEventFilterToReturnValueTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEventFilterParameterTypeResolver<TParent = any> {
    acceptsMultipleValues?: SegmentEventFilterParameterToAcceptsMultipleValuesResolver<TParent>;
    localizedDescription?: SegmentEventFilterParameterToLocalizedDescriptionResolver<TParent>;
    localizedName?: SegmentEventFilterParameterToLocalizedNameResolver<TParent>;
    optional?: SegmentEventFilterParameterToOptionalResolver<TParent>;
    parameterType?: SegmentEventFilterParameterToParameterTypeResolver<TParent>;
    queryName?: SegmentEventFilterParameterToQueryNameResolver<TParent>;
  }
  
  export interface SegmentEventFilterParameterToAcceptsMultipleValuesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEventFilterParameterToLocalizedDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEventFilterParameterToLocalizedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEventFilterParameterToOptionalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEventFilterParameterToParameterTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentEventFilterParameterToQueryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentFloatFilterTypeResolver<TParent = any> {
    localizedName?: SegmentFloatFilterToLocalizedNameResolver<TParent>;
    multiValue?: SegmentFloatFilterToMultiValueResolver<TParent>;
    queryName?: SegmentFloatFilterToQueryNameResolver<TParent>;
  }
  
  export interface SegmentFloatFilterToLocalizedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentFloatFilterToMultiValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentFloatFilterToQueryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentIntegerFilterTypeResolver<TParent = any> {
    localizedName?: SegmentIntegerFilterToLocalizedNameResolver<TParent>;
    multiValue?: SegmentIntegerFilterToMultiValueResolver<TParent>;
    queryName?: SegmentIntegerFilterToQueryNameResolver<TParent>;
  }
  
  export interface SegmentIntegerFilterToLocalizedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentIntegerFilterToMultiValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentIntegerFilterToQueryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentStringFilterTypeResolver<TParent = any> {
    localizedName?: SegmentStringFilterToLocalizedNameResolver<TParent>;
    multiValue?: SegmentStringFilterToMultiValueResolver<TParent>;
    queryName?: SegmentStringFilterToQueryNameResolver<TParent>;
  }
  
  export interface SegmentStringFilterToLocalizedNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentStringFilterToMultiValueResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SegmentStringFilterToQueryNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineSaleTypeResolver<TParent = any> {
    actionType?: ShippingLineSaleToActionTypeResolver<TParent>;
    id?: ShippingLineSaleToIdResolver<TParent>;
    lineType?: ShippingLineSaleToLineTypeResolver<TParent>;
    quantity?: ShippingLineSaleToQuantityResolver<TParent>;
    shippingLine?: ShippingLineSaleToShippingLineResolver<TParent>;
    taxes?: ShippingLineSaleToTaxesResolver<TParent>;
    totalAmount?: ShippingLineSaleToTotalAmountResolver<TParent>;
    totalDiscountAmountAfterTaxes?: ShippingLineSaleToTotalDiscountAmountAfterTaxesResolver<TParent>;
    totalDiscountAmountBeforeTaxes?: ShippingLineSaleToTotalDiscountAmountBeforeTaxesResolver<TParent>;
    totalTaxAmount?: ShippingLineSaleToTotalTaxAmountResolver<TParent>;
  }
  
  export interface ShippingLineSaleToActionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineSaleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineSaleToLineTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineSaleToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineSaleToShippingLineResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineSaleToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineSaleToTotalAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineSaleToTotalDiscountAmountAfterTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineSaleToTotalDiscountAmountBeforeTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShippingLineSaleToTotalTaxAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDefaultChargeStatementDescriptorTypeResolver<TParent = any> {
    default?: ShopifyPaymentsDefaultChargeStatementDescriptorToDefaultResolver<TParent>;
    prefix?: ShopifyPaymentsDefaultChargeStatementDescriptorToPrefixResolver<TParent>;
  }
  
  export interface ShopifyPaymentsDefaultChargeStatementDescriptorToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsDefaultChargeStatementDescriptorToPrefixResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsJpChargeStatementDescriptorTypeResolver<TParent = any> {
    default?: ShopifyPaymentsJpChargeStatementDescriptorToDefaultResolver<TParent>;
    kana?: ShopifyPaymentsJpChargeStatementDescriptorToKanaResolver<TParent>;
    kanji?: ShopifyPaymentsJpChargeStatementDescriptorToKanjiResolver<TParent>;
    prefix?: ShopifyPaymentsJpChargeStatementDescriptorToPrefixResolver<TParent>;
  }
  
  export interface ShopifyPaymentsJpChargeStatementDescriptorToDefaultResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsJpChargeStatementDescriptorToKanaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsJpChargeStatementDescriptorToKanjiResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ShopifyPaymentsJpChargeStatementDescriptorToPrefixResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TableResponseTypeResolver<TParent = any> {
    parseErrors?: TableResponseToParseErrorsResolver<TParent>;
    tableData?: TableResponseToTableDataResolver<TParent>;
  }
  
  export interface TableResponseToParseErrorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TableResponseToTableDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TipSaleTypeResolver<TParent = any> {
    actionType?: TipSaleToActionTypeResolver<TParent>;
    id?: TipSaleToIdResolver<TParent>;
    lineItem?: TipSaleToLineItemResolver<TParent>;
    lineType?: TipSaleToLineTypeResolver<TParent>;
    quantity?: TipSaleToQuantityResolver<TParent>;
    taxes?: TipSaleToTaxesResolver<TParent>;
    totalAmount?: TipSaleToTotalAmountResolver<TParent>;
    totalDiscountAmountAfterTaxes?: TipSaleToTotalDiscountAmountAfterTaxesResolver<TParent>;
    totalDiscountAmountBeforeTaxes?: TipSaleToTotalDiscountAmountBeforeTaxesResolver<TParent>;
    totalTaxAmount?: TipSaleToTotalTaxAmountResolver<TParent>;
  }
  
  export interface TipSaleToActionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TipSaleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TipSaleToLineItemResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TipSaleToLineTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TipSaleToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TipSaleToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TipSaleToTotalAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TipSaleToTotalDiscountAmountAfterTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TipSaleToTotalDiscountAmountBeforeTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TipSaleToTotalTaxAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnknownSaleTypeResolver<TParent = any> {
    actionType?: UnknownSaleToActionTypeResolver<TParent>;
    id?: UnknownSaleToIdResolver<TParent>;
    lineType?: UnknownSaleToLineTypeResolver<TParent>;
    quantity?: UnknownSaleToQuantityResolver<TParent>;
    taxes?: UnknownSaleToTaxesResolver<TParent>;
    totalAmount?: UnknownSaleToTotalAmountResolver<TParent>;
    totalDiscountAmountAfterTaxes?: UnknownSaleToTotalDiscountAmountAfterTaxesResolver<TParent>;
    totalDiscountAmountBeforeTaxes?: UnknownSaleToTotalDiscountAmountBeforeTaxesResolver<TParent>;
    totalTaxAmount?: UnknownSaleToTotalTaxAmountResolver<TParent>;
  }
  
  export interface UnknownSaleToActionTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnknownSaleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnknownSaleToLineTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnknownSaleToQuantityResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnknownSaleToTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnknownSaleToTotalAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnknownSaleToTotalDiscountAmountAfterTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnknownSaleToTotalDiscountAmountBeforeTaxesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface UnknownSaleToTotalTaxAmountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  